   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "menu.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm _msCounter,4,4
  20              	 .comm tft_tick,1,1
  21              	 .comm MeasurementCounter,4,4
  22              	 .comm InputBuffer1_idx,2,2
  23              	 .comm InputType,1,1
  24              	 .comm frameover,1,1
  25              	 .comm ReadData,1,1
  26              	 .comm swipeDistance_X,4,4
  27              	 .comm swipeDistance_Y,4,4
  28              	 .comm keypadActive,1,1
  29              	 .global G_x
  30              	 .section .data.G_x,"aw",%progbits
  31              	 .align 1
  34              	G_x:
  35 0000 0A00     	 .short 10
  36              	 .global G_y
  37              	 .section .data.G_y,"aw",%progbits
  38              	 .align 1
  41              	G_y:
  42 0000 5100     	 .short 81
  43              	 .global G_width
  44              	 .section .data.G_width,"aw",%progbits
  45              	 .align 1
  48              	G_width:
  49 0000 B801     	 .short 440
  50              	 .global G_height
  51              	 .section .data.G_height,"aw",%progbits
  52              	 .align 1
  55              	G_height:
  56 0000 A100     	 .short 161
  57              	 .global unit_Sensor
  58              	 .section .rodata.unit_Sensor,"a",%progbits
  59              	 .align 2
  62              	unit_Sensor:
  63 0000 205600   	 .ascii " V\000"
  64              	 .global G_amp_max
  65 0003 00       	 .section .data.G_amp_max,"aw",%progbits
  66              	 .align 3
  69              	G_amp_max:
  70 0000 00000000 	 .word 0
  71 0004 00002440 	 .word 1076101120
  72              	 .global G_t_max
  73              	 .section .data.G_t_max,"aw",%progbits
  74              	 .align 3
  77              	G_t_max:
  78 0000 9A999999 	 .word -1717986918
  79 0004 99990140 	 .word 1073846681
  80              	 .global G_y_max
  81              	 .section .data.G_y_max,"aw",%progbits
  82              	 .align 3
  85              	G_y_max:
  86 0000 00000000 	 .word 0
  87 0004 00FEAF40 	 .word 1085275648
  88              	 .global G_h_grid_lines
  89              	 .section .data.G_h_grid_lines,"aw",%progbits
  90              	 .align 3
  93              	G_h_grid_lines:
  94 0000 00000000 	 .word 0
  95 0004 00001040 	 .word 1074790400
  96              	 .global G_v_grid_lines
  97              	 .section .data.G_v_grid_lines,"aw",%progbits
  98              	 .align 3
 101              	G_v_grid_lines:
 102 0000 9A999999 	 .word -1717986918
 103 0004 99990140 	 .word 1073846681
 104              	 .global toggle_lock
 105              	 .section .bss.toggle_lock,"aw",%nobits
 108              	toggle_lock:
 109 0000 00       	 .space 1
 110              	 .global toggle_state_graphmode
 111              	 .section .bss.toggle_state_graphmode,"aw",%nobits
 112              	 .align 1
 115              	toggle_state_graphmode:
 116 0000 0000     	 .space 2
 117              	 .global toggle_state_dimmer
 118              	 .section .bss.toggle_state_dimmer,"aw",%nobits
 119              	 .align 1
 122              	toggle_state_dimmer:
 123 0000 0000     	 .space 2
 124              	 .global display_list_size
 125              	 .section .bss.display_list_size,"aw",%nobits
 126              	 .align 1
 129              	display_list_size:
 130 0000 0000     	 .space 2
 131              	 .global tracker
 132              	 .section .bss.tracker,"aw",%nobits
 133              	 .align 2
 136              	tracker:
 137 0000 00000000 	 .space 4
 138              	 .section .rodata
 139              	 .align 2
 140              	.LC0:
 141 0000 444C2D73 	 .ascii "DL-size:\000"
 141      697A653A 
 141      00
 142 0009 000000   	 .align 2
 143              	.LC1:
 144 000c 53656E73 	 .ascii "Sensor:\000"
 144      6F723A00 
 145              	 .section .text.TFT_display_static_menu0,"ax",%progbits
 146              	 .align 2
 147              	 .global TFT_display_static_menu0
 148              	 .thumb
 149              	 .thumb_func
 151              	TFT_display_static_menu0:
 152              	.LFB494:
 153              	 .file 1 "../menu.c"
   1:../menu.c     **** /*
   2:../menu.c     ****  * menu.c
   3:../menu.c     ****  *
   4:../menu.c     ****  *  Created on: 25 Feb 2021
   5:../menu.c     ****  *      Author: Admin
   6:../menu.c     ****  */
   7:../menu.c     **** 
   8:../menu.c     **** #include <stdint.h>
   9:../menu.c     **** #include <stdio.h>
  10:../menu.c     **** #include <string.h>
  11:../menu.c     **** #include <stdlib.h>
  12:../menu.c     **** #include <math.h>
  13:../menu.c     **** #include <globals.h>
  14:../menu.c     **** #include "FT800-FT813-5.x/EVE.h"
  15:../menu.c     **** #include "FT800-FT813-5.x/tft.h"
  16:../menu.c     **** #include "record.h"
  17:../menu.c     **** #include "menu.h"
  18:../menu.c     **** 
  19:../menu.c     **** /////////// Banner line strip edge positions (from left to right: Y1 is held horizontal till X1, in
  20:../menu.c     **** #define LAYOUT_Y1 66
  21:../menu.c     **** #define LAYOUT_Y2 50
  22:../menu.c     **** #define LAYOUT_X1 280
  23:../menu.c     **** #define LAYOUT_X2 320
  24:../menu.c     **** 
  25:../menu.c     **** 
  26:../menu.c     **** 
  27:../menu.c     **** 
  28:../menu.c     **** 
  29:../menu.c     **** /////////// Graph Definitions
  30:../menu.c     **** // Graph position and size. Here -> quick an dirty estimation where x, y, width and height must be 
  31:../menu.c     **** #define G_PADDING 10 									// Only needed because we want to calc how much width and height can 
  32:../menu.c     **** uint16_t G_x        = 10;													 // 10 px from left to leave some room
  33:../menu.c     **** uint16_t G_y      	= (LAYOUT_Y1 + 15);										 // end of banner plus 10 to leave some room  (for 
  34:../menu.c     **** uint16_t G_width 	= (0 + EVE_HSIZE - 10 - (2*G_PADDING) - 10);			   // actual width of the data are
  35:../menu.c     **** uint16_t G_height	= (0 + EVE_VSIZE - (LAYOUT_Y1 + 15) - (2*G_PADDING) - 10); // actual height of th
  36:../menu.c     **** // axes
  37:../menu.c     **** const char unit_Sensor[] = " V"; // unit string used at print of current sensor value
  38:../menu.c     **** double G_amp_max = 10.0; // volts - used at print of vertical grid value labels
  39:../menu.c     **** double G_t_max = 2.2;    // seconds - used at print of horizontal grid value labels
  40:../menu.c     **** // data properties
  41:../menu.c     **** double G_y_max = 4095.0; // maximum allowed amplitude y (here for 12bit sensor value)
  42:../menu.c     **** // grid
  43:../menu.c     **** double G_h_grid_lines = 4.0; // number of grey horizontal grid lines
  44:../menu.c     **** double G_v_grid_lines = 2.2; // number of grey vertical grid lines
  45:../menu.c     **** /////////// Graph Definitions END
  46:../menu.c     **** 
  47:../menu.c     **** /////////// Button states
  48:../menu.c     **** uint8_t toggle_lock = 0; // "Debouncing of touches" -> If something is touched, this is set to prev
  49:../menu.c     **** 
  50:../menu.c     **** uint16_t toggle_state_graphmode = 0;
  51:../menu.c     **** uint16_t toggle_state_dimmer = 0;
  52:../menu.c     **** 
  53:../menu.c     **** /////////// Debug
  54:../menu.c     **** uint16_t display_list_size = 0; // Currently size of the display-list from register. Used by the TF
  55:../menu.c     **** uint32_t tracker = 0; // Value of tracker register (1.byte=tag, 2.byte=value). Used by the TFT_disp
  56:../menu.c     **** 
  57:../menu.c     **** 
  58:../menu.c     **** 
  59:../menu.c     **** void TFT_display_static_menu0(void){
 154              	 .loc 1 59 0
 155              	 .cfi_startproc
 156              	 
 157              	 
 158 0000 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
 159              	.LCFI0:
 160              	 .cfi_def_cfa_offset 32
 161              	 .cfi_offset 4,-32
 162              	 .cfi_offset 5,-28
 163              	 .cfi_offset 6,-24
 164              	 .cfi_offset 7,-20
 165              	 .cfi_offset 8,-16
 166              	 .cfi_offset 9,-12
 167              	 .cfi_offset 10,-8
 168              	 .cfi_offset 14,-4
 169 0004 8AB0     	 sub sp,sp,#40
 170              	.LCFI1:
 171              	 .cfi_def_cfa_offset 72
 172 0006 0AAF     	 add r7,sp,#40
 173              	.LCFI2:
 174              	 .cfi_def_cfa 7,32
  60:../menu.c     **** 	/// Draw Banner and divider line on top
  61:../menu.c     **** 	// Banner
  62:../menu.c     **** 	EVE_cmd_dl(TAG(1)); /* give everything considered background area tag 1 -> used for wipe feature*/
 175              	 .loc 1 62 0
 176 0008 3A48     	 ldr r0,.L2
 177 000a FFF7FEFF 	 bl EVE_cmd_dl
  63:../menu.c     **** 	EVE_cmd_dl(LINE_WIDTH(1*16)); /* size is in 1/16 pixel */
 178              	 .loc 1 63 0
 179 000e 3A48     	 ldr r0,.L2+4
 180 0010 FFF7FEFF 	 bl EVE_cmd_dl
  64:../menu.c     **** 	EVE_cmd_dl(DL_COLOR_RGB | MAIN_BANNERCOLOR);
 181              	 .loc 1 64 0
 182 0014 3948     	 ldr r0,.L2+8
 183 0016 FFF7FEFF 	 bl EVE_cmd_dl
  65:../menu.c     **** 	EVE_cmd_dl(DL_BEGIN | EVE_EDGE_STRIP_A);
 184              	 .loc 1 65 0
 185 001a 3948     	 ldr r0,.L2+12
 186 001c FFF7FEFF 	 bl EVE_cmd_dl
  66:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(0, LAYOUT_Y1));
 187              	 .loc 1 66 0
 188 0020 3848     	 ldr r0,.L2+16
 189 0022 FFF7FEFF 	 bl EVE_cmd_dl
  67:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X1, LAYOUT_Y1));
 190              	 .loc 1 67 0
 191 0026 3848     	 ldr r0,.L2+20
 192 0028 FFF7FEFF 	 bl EVE_cmd_dl
  68:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X2, LAYOUT_Y2));
 193              	 .loc 1 68 0
 194 002c 3748     	 ldr r0,.L2+24
 195 002e FFF7FEFF 	 bl EVE_cmd_dl
  69:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(EVE_HSIZE, LAYOUT_Y2));
 196              	 .loc 1 69 0
 197 0032 3748     	 ldr r0,.L2+28
 198 0034 FFF7FEFF 	 bl EVE_cmd_dl
  70:../menu.c     **** 	EVE_cmd_dl(DL_END);
 199              	 .loc 1 70 0
 200 0038 4FF00450 	 mov r0,#553648128
 201 003c FFF7FEFF 	 bl EVE_cmd_dl
  71:../menu.c     **** 	// Divider
  72:../menu.c     **** 	EVE_cmd_dl(DL_COLOR_RGB | MAIN_DIVIDERCOLOR);
 202              	 .loc 1 72 0
 203 0040 3448     	 ldr r0,.L2+32
 204 0042 FFF7FEFF 	 bl EVE_cmd_dl
  73:../menu.c     **** 	EVE_cmd_dl(DL_BEGIN | EVE_LINE_STRIP);
 205              	 .loc 1 73 0
 206 0046 3448     	 ldr r0,.L2+36
 207 0048 FFF7FEFF 	 bl EVE_cmd_dl
  74:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(0, LAYOUT_Y1));
 208              	 .loc 1 74 0
 209 004c 2D48     	 ldr r0,.L2+16
 210 004e FFF7FEFF 	 bl EVE_cmd_dl
  75:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X1, LAYOUT_Y1));
 211              	 .loc 1 75 0
 212 0052 2D48     	 ldr r0,.L2+20
 213 0054 FFF7FEFF 	 bl EVE_cmd_dl
  76:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X2, LAYOUT_Y2));
 214              	 .loc 1 76 0
 215 0058 2C48     	 ldr r0,.L2+24
 216 005a FFF7FEFF 	 bl EVE_cmd_dl
  77:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(EVE_HSIZE, LAYOUT_Y2));
 217              	 .loc 1 77 0
 218 005e 2C48     	 ldr r0,.L2+28
 219 0060 FFF7FEFF 	 bl EVE_cmd_dl
  78:../menu.c     **** 	EVE_cmd_dl(DL_END);
 220              	 .loc 1 78 0
 221 0064 4FF00450 	 mov r0,#553648128
 222 0068 FFF7FEFF 	 bl EVE_cmd_dl
  79:../menu.c     **** 
  80:../menu.c     **** 	// Add the static text
  81:../menu.c     **** 	EVE_cmd_dl(TAG(0)); /* do not use the following objects for touch-detection */
 223              	 .loc 1 81 0
 224 006c 4FF04070 	 mov r0,#50331648
 225 0070 FFF7FEFF 	 bl EVE_cmd_dl
  82:../menu.c     **** 	EVE_cmd_dl(DL_COLOR_RGB | MAIN_TEXTCOLOR);
 226              	 .loc 1 82 0
 227 0074 2748     	 ldr r0,.L2+32
 228 0076 FFF7FEFF 	 bl EVE_cmd_dl
  83:../menu.c     **** 	#if defined (EVE_DMA)
  84:../menu.c     **** 		EVE_cmd_text(10, EVE_VSIZE - 65, 26, 0, "Bytes: ");
  85:../menu.c     **** 	#endif
  86:../menu.c     **** 	EVE_cmd_text(360, 10, 26, 0, "DL-size:");
 229              	 .loc 1 86 0
 230 007a 284B     	 ldr r3,.L2+40
 231 007c 0093     	 str r3,[sp]
 232 007e 4FF4B470 	 mov r0,#360
 233 0082 0A21     	 movs r1,#10
 234 0084 1A22     	 movs r2,#26
 235 0086 0023     	 movs r3,#0
 236 0088 FFF7FEFF 	 bl EVE_cmd_text
  87:../menu.c     **** 	EVE_cmd_text(360, 25, 26, 0, "Sensor:");
 237              	 .loc 1 87 0
 238 008c 244B     	 ldr r3,.L2+44
 239 008e 0093     	 str r3,[sp]
 240 0090 4FF4B470 	 mov r0,#360
 241 0094 1921     	 movs r1,#25
 242 0096 1A22     	 movs r2,#26
 243 0098 0023     	 movs r3,#0
 244 009a FFF7FEFF 	 bl EVE_cmd_text
  88:../menu.c     **** 
  89:../menu.c     **** 	/// Write the static part of the Graph to the display list
  90:../menu.c     **** 	TFT_GraphStatic(0, G_x, G_y, G_width, G_height, G_PADDING, G_amp_max, G_t_max, G_h_grid_lines, G_v
 245              	 .loc 1 90 0
 246 009e 214B     	 ldr r3,.L2+48
 247 00a0 B3F800A0 	 ldrh r10,[r3]
 248 00a4 204B     	 ldr r3,.L2+52
 249 00a6 B3F800C0 	 ldrh ip,[r3]
 250 00aa 204B     	 ldr r3,.L2+56
 251 00ac B3F800E0 	 ldrh lr,[r3]
 252 00b0 1F4B     	 ldr r3,.L2+60
 253 00b2 1E88     	 ldrh r6,[r3]
 254 00b4 1F4B     	 ldr r3,.L2+64
 255 00b6 D3E90089 	 ldrd r8,[r3]
 256 00ba 1F4B     	 ldr r3,.L2+68
 257 00bc D3E90045 	 ldrd r4,[r3]
 258 00c0 1E4B     	 ldr r3,.L2+72
 259 00c2 D3E90001 	 ldrd r0,[r3]
 260 00c6 1E4B     	 ldr r3,.L2+76
 261 00c8 D3E90023 	 ldrd r2,[r3]
 262 00cc 0096     	 str r6,[sp]
 263 00ce 0A26     	 movs r6,#10
 264 00d0 0196     	 str r6,[sp,#4]
 265 00d2 CDE90289 	 strd r8,[sp,#8]
 266 00d6 CDE90445 	 strd r4,[sp,#16]
 267 00da CDE90601 	 strd r0,[sp,#24]
 268 00de CDE90823 	 strd r2,[sp,#32]
 269 00e2 0020     	 movs r0,#0
 270 00e4 5146     	 mov r1,r10
 271 00e6 6246     	 mov r2,ip
 272 00e8 7346     	 mov r3,lr
 273 00ea FFF7FEFF 	 bl TFT_GraphStatic
  91:../menu.c     **** 
  92:../menu.c     **** 
  93:../menu.c     **** }
 274              	 .loc 1 93 0
 275 00ee BD46     	 mov sp,r7
 276              	.LCFI3:
 277              	 .cfi_def_cfa_register 13
 278              	 
 279 00f0 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 280              	.L3:
 281              	 .align 2
 282              	.L2:
 283 00f4 01000003 	 .word 50331649
 284 00f8 1000000E 	 .word 234881040
 285 00fc 4B586404 	 .word 73685067
 286 0100 0700001F 	 .word 520093703
 287 0104 42000040 	 .word 1073741890
 288 0108 42008C40 	 .word 1082916930
 289 010c 3200A040 	 .word 1084227634
 290 0110 3200F040 	 .word 1089470514
 291 0114 29CDF304 	 .word 83086633
 292 0118 0400001F 	 .word 520093700
 293 011c 00000000 	 .word .LC0
 294 0120 0C000000 	 .word .LC1
 295 0124 00000000 	 .word G_x
 296 0128 00000000 	 .word G_y
 297 012c 00000000 	 .word G_width
 298 0130 00000000 	 .word G_height
 299 0134 00000000 	 .word G_amp_max
 300 0138 00000000 	 .word G_t_max
 301 013c 00000000 	 .word G_h_grid_lines
 302 0140 00000000 	 .word G_v_grid_lines
 303              	 .cfi_endproc
 304              	.LFE494:
 306              	 .section .rodata
 307              	 .align 2
 308              	.LC2:
 309 0014 583A00   	 .ascii "X:\000"
 310 0017 00       	 .align 2
 311              	.LC3:
 312 0018 593A00   	 .ascii "Y:\000"
 313              	 .section .text.TFT_display_static_menu1,"ax",%progbits
 314              	 .align 2
 315              	 .global TFT_display_static_menu1
 316              	 .thumb
 317              	 .thumb_func
 319              	TFT_display_static_menu1:
 320              	.LFB495:
  94:../menu.c     **** void TFT_display_static_menu1(void){
 321              	 .loc 1 94 0
 322              	 .cfi_startproc
 323              	 
 324              	 
 325 0000 80B5     	 push {r7,lr}
 326              	.LCFI4:
 327              	 .cfi_def_cfa_offset 8
 328              	 .cfi_offset 7,-8
 329              	 .cfi_offset 14,-4
 330 0002 82B0     	 sub sp,sp,#8
 331              	.LCFI5:
 332              	 .cfi_def_cfa_offset 16
 333 0004 02AF     	 add r7,sp,#8
 334              	.LCFI6:
 335              	 .cfi_def_cfa 7,8
  95:../menu.c     **** 	/// Draw Banner and divider line on top
  96:../menu.c     **** 	// Banner
  97:../menu.c     **** 	EVE_cmd_dl(TAG(1)); /* give everything considered background area tag 1 -> used for wipe feature*/
 336              	 .loc 1 97 0
 337 0006 2648     	 ldr r0,.L5
 338 0008 FFF7FEFF 	 bl EVE_cmd_dl
  98:../menu.c     **** 	EVE_cmd_dl(LINE_WIDTH(1*16)); /* size is in 1/16 pixel */
 339              	 .loc 1 98 0
 340 000c 2548     	 ldr r0,.L5+4
 341 000e FFF7FEFF 	 bl EVE_cmd_dl
  99:../menu.c     **** 	EVE_cmd_dl(DL_COLOR_RGB | MAIN_BANNERCOLOR);
 342              	 .loc 1 99 0
 343 0012 2548     	 ldr r0,.L5+8
 344 0014 FFF7FEFF 	 bl EVE_cmd_dl
 100:../menu.c     **** 	EVE_cmd_dl(DL_BEGIN | EVE_EDGE_STRIP_A);
 345              	 .loc 1 100 0
 346 0018 2448     	 ldr r0,.L5+12
 347 001a FFF7FEFF 	 bl EVE_cmd_dl
 101:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(0, LAYOUT_Y1));
 348              	 .loc 1 101 0
 349 001e 2448     	 ldr r0,.L5+16
 350 0020 FFF7FEFF 	 bl EVE_cmd_dl
 102:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X1, LAYOUT_Y1));
 351              	 .loc 1 102 0
 352 0024 2348     	 ldr r0,.L5+20
 353 0026 FFF7FEFF 	 bl EVE_cmd_dl
 103:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X2, LAYOUT_Y2));
 354              	 .loc 1 103 0
 355 002a 2348     	 ldr r0,.L5+24
 356 002c FFF7FEFF 	 bl EVE_cmd_dl
 104:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(EVE_HSIZE, LAYOUT_Y2));
 357              	 .loc 1 104 0
 358 0030 2248     	 ldr r0,.L5+28
 359 0032 FFF7FEFF 	 bl EVE_cmd_dl
 105:../menu.c     **** 	EVE_cmd_dl(DL_END);
 360              	 .loc 1 105 0
 361 0036 4FF00450 	 mov r0,#553648128
 362 003a FFF7FEFF 	 bl EVE_cmd_dl
 106:../menu.c     **** 	// Divider
 107:../menu.c     **** 	EVE_cmd_dl(DL_COLOR_RGB | MAIN_DIVIDERCOLOR);
 363              	 .loc 1 107 0
 364 003e 2048     	 ldr r0,.L5+32
 365 0040 FFF7FEFF 	 bl EVE_cmd_dl
 108:../menu.c     **** 	EVE_cmd_dl(DL_BEGIN | EVE_LINE_STRIP);
 366              	 .loc 1 108 0
 367 0044 1F48     	 ldr r0,.L5+36
 368 0046 FFF7FEFF 	 bl EVE_cmd_dl
 109:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(0, LAYOUT_Y1));
 369              	 .loc 1 109 0
 370 004a 1948     	 ldr r0,.L5+16
 371 004c FFF7FEFF 	 bl EVE_cmd_dl
 110:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X1, LAYOUT_Y1));
 372              	 .loc 1 110 0
 373 0050 1848     	 ldr r0,.L5+20
 374 0052 FFF7FEFF 	 bl EVE_cmd_dl
 111:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(LAYOUT_X2, LAYOUT_Y2));
 375              	 .loc 1 111 0
 376 0056 1848     	 ldr r0,.L5+24
 377 0058 FFF7FEFF 	 bl EVE_cmd_dl
 112:../menu.c     **** 	EVE_cmd_dl(VERTEX2F(EVE_HSIZE, LAYOUT_Y2));
 378              	 .loc 1 112 0
 379 005c 1748     	 ldr r0,.L5+28
 380 005e FFF7FEFF 	 bl EVE_cmd_dl
 113:../menu.c     **** 	EVE_cmd_dl(DL_END);
 381              	 .loc 1 113 0
 382 0062 4FF00450 	 mov r0,#553648128
 383 0066 FFF7FEFF 	 bl EVE_cmd_dl
 114:../menu.c     **** 
 115:../menu.c     **** 	// Add the static text
 116:../menu.c     **** 	EVE_cmd_dl(TAG(0)); /* do not use the following objects for touch-detection */
 384              	 .loc 1 116 0
 385 006a 4FF04070 	 mov r0,#50331648
 386 006e FFF7FEFF 	 bl EVE_cmd_dl
 117:../menu.c     **** 	EVE_cmd_dl(DL_COLOR_RGB | MAIN_TEXTCOLOR);
 387              	 .loc 1 117 0
 388 0072 1348     	 ldr r0,.L5+32
 389 0074 FFF7FEFF 	 bl EVE_cmd_dl
 118:../menu.c     **** 	EVE_cmd_text(360, 10, 26, 0, "X:");
 390              	 .loc 1 118 0
 391 0078 134B     	 ldr r3,.L5+40
 392 007a 0093     	 str r3,[sp]
 393 007c 4FF4B470 	 mov r0,#360
 394 0080 0A21     	 movs r1,#10
 395 0082 1A22     	 movs r2,#26
 396 0084 0023     	 movs r3,#0
 397 0086 FFF7FEFF 	 bl EVE_cmd_text
 119:../menu.c     **** 	EVE_cmd_text(360, 25, 26, 0, "Y:");
 398              	 .loc 1 119 0
 399 008a 104B     	 ldr r3,.L5+44
 400 008c 0093     	 str r3,[sp]
 401 008e 4FF4B470 	 mov r0,#360
 402 0092 1921     	 movs r1,#25
 403 0094 1A22     	 movs r2,#26
 404 0096 0023     	 movs r3,#0
 405 0098 FFF7FEFF 	 bl EVE_cmd_text
 120:../menu.c     **** 
 121:../menu.c     **** }
 406              	 .loc 1 121 0
 407 009c BD46     	 mov sp,r7
 408              	.LCFI7:
 409              	 .cfi_def_cfa_register 13
 410              	 
 411 009e 80BD     	 pop {r7,pc}
 412              	.L6:
 413              	 .align 2
 414              	.L5:
 415 00a0 01000003 	 .word 50331649
 416 00a4 1000000E 	 .word 234881040
 417 00a8 4B586404 	 .word 73685067
 418 00ac 0700001F 	 .word 520093703
 419 00b0 42000040 	 .word 1073741890
 420 00b4 42008C40 	 .word 1082916930
 421 00b8 3200A040 	 .word 1084227634
 422 00bc 3200F040 	 .word 1089470514
 423 00c0 29CDF304 	 .word 83086633
 424 00c4 0400001F 	 .word 520093700
 425 00c8 14000000 	 .word .LC2
 426 00cc 18000000 	 .word .LC3
 427              	 .cfi_endproc
 428              	.LFE495:
 430              	 .section .rodata
 431 001b 00       	 .align 2
 432              	.LC4:
 433 001c 53656E73 	 .ascii "Sensor\000"
 433      6F7200
 434 0023 00       	 .align 2
 435              	.LC5:
 436 0024 496D7000 	 .ascii "Imp\000"
 437              	 .align 2
 438              	.LC6:
 439 0028 53617700 	 .ascii "Saw\000"
 440              	 .align 2
 441              	.LC7:
 442 002c 53696E65 	 .ascii "Sine\000"
 442      00
 443 0031 000000   	 .align 2
 444              	.LC8:
 445 0034 526F6C6C 	 .ascii "Roll\000"
 445      00
 446 0039 000000   	 .align 2
 447              	.LC9:
 448 003c 4672616D 	 .ascii "Frame\000"
 448      6500
 449 0042 0000     	 .align 2
 450              	.LC10:
 451 0044 44696D6D 	 .ascii "Dimmer\000"
 451      657200
 452              	 .global __aeabi_ddiv
 453              	 .global __aeabi_i2d
 454              	 .global __aeabi_dmul
 455 004b 00       	 .align 2
 456              	.LC11:
 457 004c 252E326C 	 .ascii "%.2lf\000"
 457      6600
 458 0052 0000     	 .align 2
 459              	.LC12:
 460 0054 205600   	 .ascii " V\000"
 461              	 .section .text.TFT_display_menu0,"ax",%progbits
 462              	 .align 2
 463              	 .global TFT_display_menu0
 464              	 .thumb
 465              	 .thumb_func
 467              	TFT_display_menu0:
 468              	.LFB496:
 122:../menu.c     **** 
 123:../menu.c     **** void TFT_display_menu0(void)
 124:../menu.c     **** {
 469              	 .loc 1 124 0
 470              	 .cfi_startproc
 471              	 
 472              	 
 473 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 474              	.LCFI8:
 475              	 .cfi_def_cfa_offset 20
 476              	 .cfi_offset 4,-20
 477              	 .cfi_offset 5,-16
 478              	 .cfi_offset 6,-12
 479              	 .cfi_offset 7,-8
 480              	 .cfi_offset 14,-4
 481 0002 93B0     	 sub sp,sp,#76
 482              	.LCFI9:
 483              	 .cfi_def_cfa_offset 96
 484 0004 0AAF     	 add r7,sp,#40
 485              	.LCFI10:
 486              	 .cfi_def_cfa 7,56
 125:../menu.c     **** 	/// The inputs are used to draw the Graph data. Note that also some predefined graph settings are 
 126:../menu.c     **** 
 127:../menu.c     **** 	/////////////// Display BUTTONS and Toggles
 128:../menu.c     **** 	EVE_cmd_gradcolor_burst(MAIN_BTNGRDCOLOR);
 487              	 .loc 1 128 0
 488 0006 7C48     	 ldr r0,.L14
 489 0008 FFF7FEFF 	 bl EVE_cmd_gradcolor_burst
 129:../menu.c     **** 	EVE_cmd_dl_burst(DL_COLOR_RGB | MAIN_BTNTXTCOLOR);
 490              	 .loc 1 129 0
 491 000c 7B48     	 ldr r0,.L14+4
 492 000e FFF7FEFF 	 bl EVE_cmd_dl_burst
 130:../menu.c     **** 	EVE_cmd_fgcolor_burst(MAIN_BTNCOLOR);
 493              	 .loc 1 130 0
 494 0012 7B48     	 ldr r0,.L14+8
 495 0014 FFF7FEFF 	 bl EVE_cmd_fgcolor_burst
 131:../menu.c     **** 	EVE_cmd_bgcolor_burst(MAIN_BTNCTSCOLOR);
 496              	 .loc 1 131 0
 497 0018 7A48     	 ldr r0,.L14+12
 498 001a FFF7FEFF 	 bl EVE_cmd_bgcolor_burst
 132:../menu.c     **** 
 133:../menu.c     **** 	EVE_cmd_dl_burst(TAG(13)); /* assign tag-value '13' to the button that follows */
 499              	 .loc 1 133 0
 500 001e 7A48     	 ldr r0,.L14+16
 501 0020 FFF7FEFF 	 bl EVE_cmd_dl_burst
 134:../menu.c     **** 	if(InputType == 0){ 		EVE_cmd_button_burst(20,15,80,30, 27, 0,"Sensor");	}
 502              	 .loc 1 134 0
 503 0024 794B     	 ldr r3,.L14+20
 504 0026 1B78     	 ldrb r3,[r3]
 505 0028 DBB2     	 uxtb r3,r3
 506 002a 002B     	 cmp r3,#0
 507 002c 0CD1     	 bne .L8
 508              	 .loc 1 134 0 is_stmt 0 discriminator 1
 509 002e 1B23     	 movs r3,#27
 510 0030 0093     	 str r3,[sp]
 511 0032 0023     	 movs r3,#0
 512 0034 0193     	 str r3,[sp,#4]
 513 0036 764B     	 ldr r3,.L14+24
 514 0038 0293     	 str r3,[sp,#8]
 515 003a 1420     	 movs r0,#20
 516 003c 0F21     	 movs r1,#15
 517 003e 5022     	 movs r2,#80
 518 0040 1E23     	 movs r3,#30
 519 0042 FFF7FEFF 	 bl EVE_cmd_button_burst
 520 0046 2FE0     	 b .L9
 521              	.L8:
 135:../menu.c     **** 	else if(InputType == 1){	EVE_cmd_button_burst(20,15,80,30, 27, 0,"Imp");	}
 522              	 .loc 1 135 0 is_stmt 1
 523 0048 704B     	 ldr r3,.L14+20
 524 004a 1B78     	 ldrb r3,[r3]
 525 004c DBB2     	 uxtb r3,r3
 526 004e 012B     	 cmp r3,#1
 527 0050 0CD1     	 bne .L10
 528              	 .loc 1 135 0 is_stmt 0 discriminator 1
 529 0052 1B23     	 movs r3,#27
 530 0054 0093     	 str r3,[sp]
 531 0056 0023     	 movs r3,#0
 532 0058 0193     	 str r3,[sp,#4]
 533 005a 6E4B     	 ldr r3,.L14+28
 534 005c 0293     	 str r3,[sp,#8]
 535 005e 1420     	 movs r0,#20
 536 0060 0F21     	 movs r1,#15
 537 0062 5022     	 movs r2,#80
 538 0064 1E23     	 movs r3,#30
 539 0066 FFF7FEFF 	 bl EVE_cmd_button_burst
 540 006a 1DE0     	 b .L9
 541              	.L10:
 136:../menu.c     **** 	else if(InputType == 2){	EVE_cmd_button_burst(20,15,80,30, 27, 0,"Saw");	}
 542              	 .loc 1 136 0 is_stmt 1
 543 006c 674B     	 ldr r3,.L14+20
 544 006e 1B78     	 ldrb r3,[r3]
 545 0070 DBB2     	 uxtb r3,r3
 546 0072 022B     	 cmp r3,#2
 547 0074 0CD1     	 bne .L11
 548              	 .loc 1 136 0 is_stmt 0 discriminator 1
 549 0076 1B23     	 movs r3,#27
 550 0078 0093     	 str r3,[sp]
 551 007a 0023     	 movs r3,#0
 552 007c 0193     	 str r3,[sp,#4]
 553 007e 664B     	 ldr r3,.L14+32
 554 0080 0293     	 str r3,[sp,#8]
 555 0082 1420     	 movs r0,#20
 556 0084 0F21     	 movs r1,#15
 557 0086 5022     	 movs r2,#80
 558 0088 1E23     	 movs r3,#30
 559 008a FFF7FEFF 	 bl EVE_cmd_button_burst
 560 008e 0BE0     	 b .L9
 561              	.L11:
 137:../menu.c     **** 	else{						EVE_cmd_button_burst(20,15,80,30, 27, 0,"Sine");	}
 562              	 .loc 1 137 0 is_stmt 1
 563 0090 1B23     	 movs r3,#27
 564 0092 0093     	 str r3,[sp]
 565 0094 0023     	 movs r3,#0
 566 0096 0193     	 str r3,[sp,#4]
 567 0098 604B     	 ldr r3,.L14+36
 568 009a 0293     	 str r3,[sp,#8]
 569 009c 1420     	 movs r0,#20
 570 009e 0F21     	 movs r1,#15
 571 00a0 5022     	 movs r2,#80
 572 00a2 1E23     	 movs r3,#30
 573 00a4 FFF7FEFF 	 bl EVE_cmd_button_burst
 574              	.L9:
 138:../menu.c     **** 
 139:../menu.c     **** 	EVE_cmd_dl_burst(TAG(12)); /* assign tag-value '12' to the toggle that follows */
 575              	 .loc 1 139 0
 576 00a8 5D48     	 ldr r0,.L14+40
 577 00aa FFF7FEFF 	 bl EVE_cmd_dl_burst
 140:../menu.c     **** 	if(toggle_state_graphmode){
 578              	 .loc 1 140 0
 579 00ae 5D4B     	 ldr r3,.L14+44
 580 00b0 1B88     	 ldrh r3,[r3]
 581 00b2 002B     	 cmp r3,#0
 582 00b4 0DD0     	 beq .L12
 141:../menu.c     **** 		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0xFFFF, "Roll");
 583              	 .loc 1 141 0
 584 00b6 0023     	 movs r3,#0
 585 00b8 0093     	 str r3,[sp]
 586 00ba 4FF6FF73 	 movw r3,#65535
 587 00be 0193     	 str r3,[sp,#4]
 588 00c0 594B     	 ldr r3,.L14+48
 589 00c2 0293     	 str r3,[sp,#8]
 590 00c4 7820     	 movs r0,#120
 591 00c6 1821     	 movs r1,#24
 592 00c8 3E22     	 movs r2,#62
 593 00ca 1B23     	 movs r3,#27
 594 00cc FFF7FEFF 	 bl EVE_cmd_toggle_burst
 595 00d0 0BE0     	 b .L13
 596              	.L12:
 142:../menu.c     **** 	}
 143:../menu.c     **** 	else{
 144:../menu.c     **** 		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0x0000, "Frame");
 597              	 .loc 1 144 0
 598 00d2 0023     	 movs r3,#0
 599 00d4 0093     	 str r3,[sp]
 600 00d6 0023     	 movs r3,#0
 601 00d8 0193     	 str r3,[sp,#4]
 602 00da 544B     	 ldr r3,.L14+52
 603 00dc 0293     	 str r3,[sp,#8]
 604 00de 7820     	 movs r0,#120
 605 00e0 1821     	 movs r1,#24
 606 00e2 3E22     	 movs r2,#62
 607 00e4 1B23     	 movs r3,#27
 608 00e6 FFF7FEFF 	 bl EVE_cmd_toggle_burst
 609              	.L13:
 145:../menu.c     **** 	}
 146:../menu.c     **** 
 147:../menu.c     **** 	EVE_cmd_dl_burst(TAG(10)); /* assign tag-value '10' to the button that follows */
 610              	 .loc 1 147 0
 611 00ea 5148     	 ldr r0,.L14+56
 612 00ec FFF7FEFF 	 bl EVE_cmd_dl_burst
 148:../menu.c     **** 	EVE_cmd_button_burst(205,15,80,30, 27, toggle_state_dimmer,"Dimmer");
 613              	 .loc 1 148 0
 614 00f0 504B     	 ldr r3,.L14+60
 615 00f2 1B88     	 ldrh r3,[r3]
 616 00f4 1B22     	 movs r2,#27
 617 00f6 0092     	 str r2,[sp]
 618 00f8 0193     	 str r3,[sp,#4]
 619 00fa 4F4B     	 ldr r3,.L14+64
 620 00fc 0293     	 str r3,[sp,#8]
 621 00fe CD20     	 movs r0,#205
 622 0100 0F21     	 movs r1,#15
 623 0102 5022     	 movs r2,#80
 624 0104 1E23     	 movs r3,#30
 625 0106 FFF7FEFF 	 bl EVE_cmd_button_burst
 149:../menu.c     **** 
 150:../menu.c     **** 	EVE_cmd_dl_burst(TAG(0)); /* no touch from here on */
 626              	 .loc 1 150 0
 627 010a 4FF04070 	 mov r0,#50331648
 628 010e FFF7FEFF 	 bl EVE_cmd_dl_burst
 151:../menu.c     **** 
 152:../menu.c     **** 
 153:../menu.c     **** 
 154:../menu.c     **** 	/////////////// Debug Values
 155:../menu.c     **** 	#if defined (EVE_DMA)
 156:../menu.c     **** 	EVE_cmd_number_burst(120, EVE_VSIZE - 65, 26, EVE_OPT_RIGHTX, cmd_fifo_size); /* number of bytes w
 157:../menu.c     **** 	#endif
 158:../menu.c     **** 	EVE_cmd_number_burst(470, 10, 26, EVE_OPT_RIGHTX, display_list_size); /* number of bytes written t
 629              	 .loc 1 158 0
 630 0112 4A4B     	 ldr r3,.L14+68
 631 0114 1B88     	 ldrh r3,[r3]
 632 0116 0093     	 str r3,[sp]
 633 0118 4FF4EB70 	 mov r0,#470
 634 011c 0A21     	 movs r1,#10
 635 011e 1A22     	 movs r2,#26
 636 0120 4FF40063 	 mov r3,#2048
 637 0124 FFF7FEFF 	 bl EVE_cmd_number_burst
 159:../menu.c     **** 
 160:../menu.c     **** 	// Write current sensor value with unit
 161:../menu.c     **** 	char buffer[32]; // buffer for double to string conversion
 162:../menu.c     **** 	sprintf(buffer, "%.2lf", (G_amp_max/G_y_max)*InputBuffer1[InputBuffer1_idx]); // double to string 
 638              	 .loc 1 162 0
 639 0128 454B     	 ldr r3,.L14+72
 640 012a D3E90001 	 ldrd r0,[r3]
 641 012e 454B     	 ldr r3,.L14+76
 642 0130 D3E90023 	 ldrd r2,[r3]
 643 0134 FFF7FEFF 	 bl __aeabi_ddiv
 644 0138 0246     	 mov r2,r0
 645 013a 0B46     	 mov r3,r1
 646 013c 1446     	 mov r4,r2
 647 013e 1D46     	 mov r5,r3
 648 0140 414B     	 ldr r3,.L14+80
 649 0142 1B88     	 ldrh r3,[r3]
 650 0144 1A46     	 mov r2,r3
 651 0146 414B     	 ldr r3,.L14+84
 652 0148 33F81230 	 ldrh r3,[r3,r2,lsl#1]
 653 014c 1846     	 mov r0,r3
 654 014e FFF7FEFF 	 bl __aeabi_i2d
 655 0152 0246     	 mov r2,r0
 656 0154 0B46     	 mov r3,r1
 657 0156 2046     	 mov r0,r4
 658 0158 2946     	 mov r1,r5
 659 015a FFF7FEFF 	 bl __aeabi_dmul
 660 015e 0246     	 mov r2,r0
 661 0160 0B46     	 mov r3,r1
 662 0162 1446     	 mov r4,r2
 663 0164 1D46     	 mov r5,r3
 664 0166 3B46     	 mov r3,r7
 665 0168 1846     	 mov r0,r3
 666 016a 3949     	 ldr r1,.L14+88
 667 016c 2246     	 mov r2,r4
 668 016e 2B46     	 mov r3,r5
 669 0170 FFF7FEFF 	 bl sprintf
 163:../menu.c     **** 	strcat(buffer, unit_Sensor);
 670              	 .loc 1 163 0
 671 0174 3B46     	 mov r3,r7
 672 0176 1846     	 mov r0,r3
 673 0178 FFF7FEFF 	 bl strlen
 674 017c 0346     	 mov r3,r0
 675 017e 1A46     	 mov r2,r3
 676 0180 3B46     	 mov r3,r7
 677 0182 1344     	 add r3,r3,r2
 678 0184 334A     	 ldr r2,.L14+92
 679 0186 1188     	 ldrh r1,[r2]
 680 0188 9278     	 ldrb r2,[r2,#2]
 681 018a 1980     	 strh r1,[r3]
 682 018c 9A70     	 strb r2,[r3,#2]
 164:../menu.c     **** 	EVE_cmd_text_burst(470, 25, 26, EVE_OPT_RIGHTX, buffer);
 683              	 .loc 1 164 0
 684 018e 3B46     	 mov r3,r7
 685 0190 0093     	 str r3,[sp]
 686 0192 4FF4EB70 	 mov r0,#470
 687 0196 1921     	 movs r1,#25
 688 0198 1A22     	 movs r2,#26
 689 019a 4FF40063 	 mov r3,#2048
 690 019e FFF7FEFF 	 bl EVE_cmd_text_burst
 165:../menu.c     **** 
 166:../menu.c     **** 
 167:../menu.c     **** 
 168:../menu.c     **** 	/////////////// GRAPH
 169:../menu.c     **** 	///// Print dynamic part of the Graph (data & marker)
 170:../menu.c     **** 	TFT_GraphData(G_x, G_y, G_width, G_height, G_PADDING, G_y_max, &InputBuffer1[0], INPUTBUFFER1_SIZE
 691              	 .loc 1 170 0
 692 01a2 2D4B     	 ldr r3,.L14+96
 693 01a4 B3F800E0 	 ldrh lr,[r3]
 694 01a8 2C4B     	 ldr r3,.L14+100
 695 01aa 1E88     	 ldrh r6,[r3]
 696 01ac 2C4B     	 ldr r3,.L14+104
 697 01ae 1D88     	 ldrh r5,[r3]
 698 01b0 2C4B     	 ldr r3,.L14+108
 699 01b2 1C88     	 ldrh r4,[r3]
 700 01b4 234B     	 ldr r3,.L14+76
 701 01b6 D3E90023 	 ldrd r2,[r3]
 702 01ba 1A49     	 ldr r1,.L14+44
 703 01bc 0988     	 ldrh r1,[r1]
 704 01be C9B2     	 uxtb r1,r1
 705 01c0 0A20     	 movs r0,#10
 706 01c2 0090     	 str r0,[sp]
 707 01c4 CDE90223 	 strd r2,[sp,#8]
 708 01c8 204B     	 ldr r3,.L14+84
 709 01ca 0493     	 str r3,[sp,#16]
 710 01cc 4FF4DC73 	 mov r3,#440
 711 01d0 0593     	 str r3,[sp,#20]
 712 01d2 1D4B     	 ldr r3,.L14+80
 713 01d4 0693     	 str r3,[sp,#24]
 714 01d6 0791     	 str r1,[sp,#28]
 715 01d8 43F69E73 	 movw r3,#16286
 716 01dc 0893     	 str r3,[sp,#32]
 717 01de 4FF47F03 	 mov r3,#16711680
 718 01e2 0993     	 str r3,[sp,#36]
 719 01e4 7046     	 mov r0,lr
 720 01e6 3146     	 mov r1,r6
 721 01e8 2A46     	 mov r2,r5
 722 01ea 2346     	 mov r3,r4
 723 01ec FFF7FEFF 	 bl TFT_GraphData
 171:../menu.c     **** 
 172:../menu.c     **** }
 724              	 .loc 1 172 0
 725 01f0 2437     	 adds r7,r7,#36
 726              	.LCFI11:
 727              	 .cfi_def_cfa_offset 20
 728 01f2 BD46     	 mov sp,r7
 729              	.LCFI12:
 730              	 .cfi_def_cfa_register 13
 731              	 
 732 01f4 F0BD     	 pop {r4,r5,r6,r7,pc}
 733              	.L15:
 734 01f6 00BF     	 .align 2
 735              	.L14:
 736 01f8 124B8C00 	 .word 9194258
 737 01fc EEF8FF04 	 .word 83884270
 738 0200 2BA9EA00 	 .word 15378731
 739 0204 6696AD00 	 .word 11376230
 740 0208 0D000003 	 .word 50331661
 741 020c 00000000 	 .word InputType
 742 0210 1C000000 	 .word .LC4
 743 0214 24000000 	 .word .LC5
 744 0218 28000000 	 .word .LC6
 745 021c 2C000000 	 .word .LC7
 746 0220 0C000003 	 .word 50331660
 747 0224 00000000 	 .word toggle_state_graphmode
 748 0228 34000000 	 .word .LC8
 749 022c 3C000000 	 .word .LC9
 750 0230 0A000003 	 .word 50331658
 751 0234 00000000 	 .word toggle_state_dimmer
 752 0238 44000000 	 .word .LC10
 753 023c 00000000 	 .word display_list_size
 754 0240 00000000 	 .word G_amp_max
 755 0244 00000000 	 .word G_y_max
 756 0248 00000000 	 .word InputBuffer1_idx
 757 024c 00000000 	 .word InputBuffer1
 758 0250 4C000000 	 .word .LC11
 759 0254 54000000 	 .word .LC12
 760 0258 00000000 	 .word G_x
 761 025c 00000000 	 .word G_y
 762 0260 00000000 	 .word G_width
 763 0264 00000000 	 .word G_height
 764              	 .cfi_endproc
 765              	.LFE496:
 767              	 .section .rodata
 768 0057 00       	 .align 2
 769              	.LC13:
 770 0058 6C6900   	 .ascii "li\000"
 771 005b 00       	 .align 2
 772              	.LC14:
 773 005c 726500   	 .ascii "re\000"
 774              	 .section .text.TFT_display_menu1,"ax",%progbits
 775              	 .align 2
 776              	 .global TFT_display_menu1
 777              	 .thumb
 778              	 .thumb_func
 780              	TFT_display_menu1:
 781              	.LFB497:
 173:../menu.c     **** void TFT_display_menu1(void)
 174:../menu.c     **** {
 782              	 .loc 1 174 0
 783              	 .cfi_startproc
 784              	 
 785              	 
 786 0000 80B5     	 push {r7,lr}
 787              	.LCFI13:
 788              	 .cfi_def_cfa_offset 8
 789              	 .cfi_offset 7,-8
 790              	 .cfi_offset 14,-4
 791 0002 84B0     	 sub sp,sp,#16
 792              	.LCFI14:
 793              	 .cfi_def_cfa_offset 24
 794 0004 04AF     	 add r7,sp,#16
 795              	.LCFI15:
 796              	 .cfi_def_cfa 7,8
 175:../menu.c     **** 	/// Test menu
 176:../menu.c     **** 
 177:../menu.c     **** 	// Get size of last display list to be printed on screen (section "Debug Values")
 178:../menu.c     **** 	display_list_size = EVE_memRead16(REG_CMD_DL);
 797              	 .loc 1 178 0
 798 0006 2C48     	 ldr r0,.L19
 799 0008 FFF7FEFF 	 bl EVE_memRead16
 800 000c 0346     	 mov r3,r0
 801 000e 1A46     	 mov r2,r3
 802 0010 2A4B     	 ldr r3,.L19+4
 803 0012 1A80     	 strh r2,[r3]
 179:../menu.c     **** 	tracker = EVE_memRead32(REG_TRACKER);
 804              	 .loc 1 179 0
 805 0014 2A48     	 ldr r0,.L19+8
 806 0016 FFF7FEFF 	 bl EVE_memRead32
 807 001a 0246     	 mov r2,r0
 808 001c 294B     	 ldr r3,.L19+12
 809 001e 1A60     	 str r2,[r3]
 180:../menu.c     **** 
 181:../menu.c     **** 
 182:../menu.c     **** 	/////////////// Display BUTTONS and Toggles
 183:../menu.c     **** 	EVE_cmd_gradcolor_burst(MAIN_BTNGRDCOLOR);
 810              	 .loc 1 183 0
 811 0020 2948     	 ldr r0,.L19+16
 812 0022 FFF7FEFF 	 bl EVE_cmd_gradcolor_burst
 184:../menu.c     **** 	EVE_cmd_dl_burst(DL_COLOR_RGB | MAIN_BTNTXTCOLOR);
 813              	 .loc 1 184 0
 814 0026 2948     	 ldr r0,.L19+20
 815 0028 FFF7FEFF 	 bl EVE_cmd_dl_burst
 185:../menu.c     **** 	EVE_cmd_fgcolor_burst(MAIN_BTNCOLOR);
 816              	 .loc 1 185 0
 817 002c 2848     	 ldr r0,.L19+24
 818 002e FFF7FEFF 	 bl EVE_cmd_fgcolor_burst
 186:../menu.c     **** 	EVE_cmd_bgcolor_burst(MAIN_BTNCTSCOLOR);
 819              	 .loc 1 186 0
 820 0032 2848     	 ldr r0,.L19+28
 821 0034 FFF7FEFF 	 bl EVE_cmd_bgcolor_burst
 187:../menu.c     **** 
 188:../menu.c     **** 	EVE_cmd_dl_burst(TAG(12)); /* assign tag-value '12' to the toggle that follows */
 822              	 .loc 1 188 0
 823 0038 2748     	 ldr r0,.L19+32
 824 003a FFF7FEFF 	 bl EVE_cmd_dl_burst
 189:../menu.c     **** 	if(toggle_state_graphmode){
 825              	 .loc 1 189 0
 826 003e 274B     	 ldr r3,.L19+36
 827 0040 1B88     	 ldrh r3,[r3]
 828 0042 002B     	 cmp r3,#0
 829 0044 0DD0     	 beq .L17
 190:../menu.c     **** 		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0xFFFF, "li");
 830              	 .loc 1 190 0
 831 0046 0023     	 movs r3,#0
 832 0048 0093     	 str r3,[sp]
 833 004a 4FF6FF73 	 movw r3,#65535
 834 004e 0193     	 str r3,[sp,#4]
 835 0050 234B     	 ldr r3,.L19+40
 836 0052 0293     	 str r3,[sp,#8]
 837 0054 7820     	 movs r0,#120
 838 0056 1821     	 movs r1,#24
 839 0058 3E22     	 movs r2,#62
 840 005a 1B23     	 movs r3,#27
 841 005c FFF7FEFF 	 bl EVE_cmd_toggle_burst
 842 0060 0BE0     	 b .L18
 843              	.L17:
 191:../menu.c     **** 	}
 192:../menu.c     **** 	else{
 193:../menu.c     **** 		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0x0000, "re");
 844              	 .loc 1 193 0
 845 0062 0023     	 movs r3,#0
 846 0064 0093     	 str r3,[sp]
 847 0066 0023     	 movs r3,#0
 848 0068 0193     	 str r3,[sp,#4]
 849 006a 1E4B     	 ldr r3,.L19+44
 850 006c 0293     	 str r3,[sp,#8]
 851 006e 7820     	 movs r0,#120
 852 0070 1821     	 movs r1,#24
 853 0072 3E22     	 movs r2,#62
 854 0074 1B23     	 movs r3,#27
 855 0076 FFF7FEFF 	 bl EVE_cmd_toggle_burst
 856              	.L18:
 194:../menu.c     **** 	}
 195:../menu.c     **** 
 196:../menu.c     **** 	//EVE_cmd_dl_burst(TAG(10)); /* assign tag-value '10' to the button that follows */
 197:../menu.c     **** 	//EVE_cmd_button_burst(205,15,80,30, 27, toggle_state_dimmer,"Keypad");
 198:../menu.c     **** 
 199:../menu.c     **** 	EVE_cmd_dl_burst(TAG(0)); /* no touch from here on */
 857              	 .loc 1 199 0
 858 007a 4FF04070 	 mov r0,#50331648
 859 007e FFF7FEFF 	 bl EVE_cmd_dl_burst
 200:../menu.c     **** 
 201:../menu.c     **** 	EVE_cmd_fgcolor_burst(MAIN_TEXTCOLOR);
 860              	 .loc 1 201 0
 861 0082 1948     	 ldr r0,.L19+48
 862 0084 FFF7FEFF 	 bl EVE_cmd_fgcolor_burst
 202:../menu.c     **** 
 203:../menu.c     **** 	EVE_cmd_int_burst(470, 10, 26, EVE_OPT_RIGHTX, swipeDistance_X);
 863              	 .loc 1 203 0
 864 0088 184B     	 ldr r3,.L19+52
 865 008a 1B68     	 ldr r3,[r3]
 866 008c 0093     	 str r3,[sp]
 867 008e 4FF4EB70 	 mov r0,#470
 868 0092 0A21     	 movs r1,#10
 869 0094 1A22     	 movs r2,#26
 870 0096 4FF40063 	 mov r3,#2048
 871 009a FFF7FEFF 	 bl EVE_cmd_int_burst
 204:../menu.c     **** 	EVE_cmd_int_burst(470, 25, 26, EVE_OPT_RIGHTX, swipeDistance_Y);
 872              	 .loc 1 204 0
 873 009e 144B     	 ldr r3,.L19+56
 874 00a0 1B68     	 ldr r3,[r3]
 875 00a2 0093     	 str r3,[sp]
 876 00a4 4FF4EB70 	 mov r0,#470
 877 00a8 1921     	 movs r1,#25
 878 00aa 1A22     	 movs r2,#26
 879 00ac 4FF40063 	 mov r3,#2048
 880 00b0 FFF7FEFF 	 bl EVE_cmd_int_burst
 205:../menu.c     **** 	//EVE_cmd_number_burst(470, 10, 26, EVE_OPT_RIGHTX, swipeDistance_X);
 206:../menu.c     **** 	//EVE_cmd_number_burst(470, 25, 26, EVE_OPT_RIGHTX, swipeDistance_Y);
 207:../menu.c     **** 	//EVE_cmd_text_var_burst(470, 25, 26, EVE_OPT_RIGHTX, "%d", swipeDistance_Y);
 208:../menu.c     **** }
 881              	 .loc 1 208 0
 882 00b4 BD46     	 mov sp,r7
 883              	.LCFI16:
 884              	 .cfi_def_cfa_register 13
 885              	 
 886 00b6 80BD     	 pop {r7,pc}
 887              	.L20:
 888              	 .align 2
 889              	.L19:
 890 00b8 00213000 	 .word 3154176
 891 00bc 00000000 	 .word display_list_size
 892 00c0 00903000 	 .word 3182592
 893 00c4 00000000 	 .word tracker
 894 00c8 124B8C00 	 .word 9194258
 895 00cc EEF8FF04 	 .word 83884270
 896 00d0 2BA9EA00 	 .word 15378731
 897 00d4 6696AD00 	 .word 11376230
 898 00d8 0C000003 	 .word 50331660
 899 00dc 00000000 	 .word toggle_state_graphmode
 900 00e0 58000000 	 .word .LC13
 901 00e4 5C000000 	 .word .LC14
 902 00e8 29CDF300 	 .word 15977769
 903 00ec 00000000 	 .word swipeDistance_X
 904 00f0 00000000 	 .word swipeDistance_Y
 905              	 .cfi_endproc
 906              	.LFE497:
 908              	 .section .rodata
 909 005f 00       	 .align 2
 910              	.LC15:
 911 0060 42757474 	 .ascii "Button Dimmer touched\000"
 911      6F6E2044 
 911      696D6D65 
 911      7220746F 
 911      75636865 
 912 0076 0000     	 .align 2
 913              	.LC16:
 914 0078 546F6767 	 .ascii "Toggle Roll touched\000"
 914      6C652052 
 914      6F6C6C20 
 914      746F7563 
 914      68656400 
 915              	 .align 2
 916              	.LC17:
 917 008c 53776974 	 .ascii "Switch Signal\000"
 917      63682053 
 917      69676E61 
 917      6C00
 918              	 .section .text.TFT_touch_menu0,"ax",%progbits
 919              	 .align 2
 920              	 .global TFT_touch_menu0
 921              	 .thumb
 922              	 .thumb_func
 924              	TFT_touch_menu0:
 925              	.LFB498:
 209:../menu.c     **** 
 210:../menu.c     **** void TFT_touch_menu0(uint8_t tag, uint8_t swipeInProgress, uint8_t *swipeEvokedBy, int32_t *swipeDi
 926              	 .loc 1 210 0
 927              	 .cfi_startproc
 928              	 
 929              	 
 930 0000 80B5     	 push {r7,lr}
 931              	.LCFI17:
 932              	 .cfi_def_cfa_offset 8
 933              	 .cfi_offset 7,-8
 934              	 .cfi_offset 14,-4
 935 0002 84B0     	 sub sp,sp,#16
 936              	.LCFI18:
 937              	 .cfi_def_cfa_offset 24
 938 0004 00AF     	 add r7,sp,#0
 939              	.LCFI19:
 940              	 .cfi_def_cfa_register 7
 941 0006 BA60     	 str r2,[r7,#8]
 942 0008 7B60     	 str r3,[r7,#4]
 943 000a 0346     	 mov r3,r0
 944 000c FB73     	 strb r3,[r7,#15]
 945 000e 0B46     	 mov r3,r1
 946 0010 BB73     	 strb r3,[r7,#14]
 211:../menu.c     **** 	// Determine which tag was touched
 212:../menu.c     **** 	switch(tag)
 947              	 .loc 1 212 0
 948 0012 FB7B     	 ldrb r3,[r7,#15]
 949 0014 0C2B     	 cmp r3,#12
 950 0016 23D0     	 beq .L23
 951 0018 0D2B     	 cmp r3,#13
 952 001a 38D0     	 beq .L24
 953 001c 0A2B     	 cmp r3,#10
 954 001e 50D1     	 bne .L21
 213:../menu.c     **** 	{
 214:../menu.c     **** 		// dimmer button on top as on/off radio-switch
 215:../menu.c     **** 		case 10:
 216:../menu.c     **** 			if(toggle_lock == 0) {
 955              	 .loc 1 216 0
 956 0020 294B     	 ldr r3,.L31
 957 0022 1B78     	 ldrb r3,[r3]
 958 0024 002B     	 cmp r3,#0
 959 0026 1AD1     	 bne .L26
 217:../menu.c     **** 				printf("Button Dimmer touched\n");
 960              	 .loc 1 217 0
 961 0028 2848     	 ldr r0,.L31+4
 962 002a FFF7FEFF 	 bl puts
 218:../menu.c     **** 				toggle_lock = 42;
 963              	 .loc 1 218 0
 964 002e 264B     	 ldr r3,.L31
 965 0030 2A22     	 movs r2,#42
 966 0032 1A70     	 strb r2,[r3]
 219:../menu.c     **** 				if(toggle_state_dimmer == 0){
 967              	 .loc 1 219 0
 968 0034 264B     	 ldr r3,.L31+8
 969 0036 1B88     	 ldrh r3,[r3]
 970 0038 002B     	 cmp r3,#0
 971 003a 08D1     	 bne .L27
 220:../menu.c     **** 					toggle_state_dimmer = EVE_OPT_FLAT;
 972              	 .loc 1 220 0
 973 003c 244B     	 ldr r3,.L31+8
 974 003e 4FF48072 	 mov r2,#256
 975 0042 1A80     	 strh r2,[r3]
 221:../menu.c     **** 					EVE_memWrite8(REG_PWM_DUTY, 0x01);	/* setup backlight, range is from 0 = off to 0x80 = max */
 976              	 .loc 1 221 0
 977 0044 2348     	 ldr r0,.L31+12
 978 0046 0121     	 movs r1,#1
 979 0048 FFF7FEFF 	 bl EVE_memWrite8
 980 004c 07E0     	 b .L26
 981              	.L27:
 222:../menu.c     **** 				}
 223:../menu.c     **** 				else {
 224:../menu.c     **** 					toggle_state_dimmer = 0;
 982              	 .loc 1 224 0
 983 004e 204B     	 ldr r3,.L31+8
 984 0050 0022     	 movs r2,#0
 985 0052 1A80     	 strh r2,[r3]
 225:../menu.c     **** 					EVE_memWrite8(REG_PWM_DUTY, 0x80);	/* setup backlight, range is from 0 = off to 0x80 = max */
 986              	 .loc 1 225 0
 987 0054 1F48     	 ldr r0,.L31+12
 988 0056 8021     	 movs r1,#128
 989 0058 FFF7FEFF 	 bl EVE_memWrite8
 226:../menu.c     **** 				}
 227:../menu.c     **** 			}
 228:../menu.c     **** 			break;
 990              	 .loc 1 228 0
 991 005c 31E0     	 b .L21
 992              	.L26:
 993 005e 30E0     	 b .L21
 994              	.L23:
 229:../menu.c     **** 		// roll/frame mode toggle on top
 230:../menu.c     **** 		case 12:
 231:../menu.c     **** 			if(toggle_lock == 0) {
 995              	 .loc 1 231 0
 996 0060 194B     	 ldr r3,.L31
 997 0062 1B78     	 ldrb r3,[r3]
 998 0064 002B     	 cmp r3,#0
 999 0066 11D1     	 bne .L28
 232:../menu.c     **** 				printf("Toggle Roll touched\n");
 1000              	 .loc 1 232 0
 1001 0068 1B48     	 ldr r0,.L31+16
 1002 006a FFF7FEFF 	 bl puts
 233:../menu.c     **** 				toggle_lock = 42;
 1003              	 .loc 1 233 0
 1004 006e 164B     	 ldr r3,.L31
 1005 0070 2A22     	 movs r2,#42
 1006 0072 1A70     	 strb r2,[r3]
 234:../menu.c     **** 				if(toggle_state_graphmode == 0)	{
 1007              	 .loc 1 234 0
 1008 0074 194B     	 ldr r3,.L31+20
 1009 0076 1B88     	 ldrh r3,[r3]
 1010 0078 002B     	 cmp r3,#0
 1011 007a 03D1     	 bne .L29
 235:../menu.c     **** 					toggle_state_graphmode = 1;
 1012              	 .loc 1 235 0
 1013 007c 174B     	 ldr r3,.L31+20
 1014 007e 0122     	 movs r2,#1
 1015 0080 1A80     	 strh r2,[r3]
 1016 0082 03E0     	 b .L28
 1017              	.L29:
 236:../menu.c     **** 				}
 237:../menu.c     **** 				else {
 238:../menu.c     **** 					toggle_state_graphmode = 0;
 1018              	 .loc 1 238 0
 1019 0084 154B     	 ldr r3,.L31+20
 1020 0086 0022     	 movs r2,#0
 1021 0088 1A80     	 strh r2,[r3]
 239:../menu.c     **** 				}
 240:../menu.c     **** 			}
 241:../menu.c     **** 			break;
 1022              	 .loc 1 241 0
 1023 008a 1AE0     	 b .L21
 1024              	.L28:
 1025 008c 19E0     	 b .L21
 1026              	.L24:
 242:../menu.c     **** 		// signal switcher button
 243:../menu.c     **** 		case 13:
 244:../menu.c     **** 			if(toggle_lock == 0) {
 1027              	 .loc 1 244 0
 1028 008e 0E4B     	 ldr r3,.L31
 1029 0090 1B78     	 ldrb r3,[r3]
 1030 0092 002B     	 cmp r3,#0
 1031 0094 14D1     	 bne .L30
 245:../menu.c     **** 				printf("Switch Signal\n");
 1032              	 .loc 1 245 0
 1033 0096 1248     	 ldr r0,.L31+24
 1034 0098 FFF7FEFF 	 bl puts
 246:../menu.c     **** 				toggle_lock = 42;
 1035              	 .loc 1 246 0
 1036 009c 0A4B     	 ldr r3,.L31
 1037 009e 2A22     	 movs r2,#42
 1038 00a0 1A70     	 strb r2,[r3]
 247:../menu.c     **** 				InputType++;
 1039              	 .loc 1 247 0
 1040 00a2 104B     	 ldr r3,.L31+28
 1041 00a4 1B78     	 ldrb r3,[r3]
 1042 00a6 DBB2     	 uxtb r3,r3
 1043 00a8 0133     	 adds r3,r3,#1
 1044 00aa DAB2     	 uxtb r2,r3
 1045 00ac 0D4B     	 ldr r3,.L31+28
 1046 00ae 1A70     	 strb r2,[r3]
 248:../menu.c     **** 				if(InputType > 3){ InputType = 0; }
 1047              	 .loc 1 248 0
 1048 00b0 0C4B     	 ldr r3,.L31+28
 1049 00b2 1B78     	 ldrb r3,[r3]
 1050 00b4 DBB2     	 uxtb r3,r3
 1051 00b6 032B     	 cmp r3,#3
 1052 00b8 02D9     	 bls .L30
 1053              	 .loc 1 248 0 is_stmt 0 discriminator 1
 1054 00ba 0A4B     	 ldr r3,.L31+28
 1055 00bc 0022     	 movs r2,#0
 1056 00be 1A70     	 strb r2,[r3]
 1057              	.L30:
 249:../menu.c     **** 			}
 250:../menu.c     **** 			break;
 1058              	 .loc 1 250 0 is_stmt 1
 1059 00c0 00BF     	 nop
 1060              	.L21:
 251:../menu.c     **** 	}
 252:../menu.c     **** }
 1061              	 .loc 1 252 0
 1062 00c2 1037     	 adds r7,r7,#16
 1063              	.LCFI20:
 1064              	 .cfi_def_cfa_offset 8
 1065 00c4 BD46     	 mov sp,r7
 1066              	.LCFI21:
 1067              	 .cfi_def_cfa_register 13
 1068              	 
 1069 00c6 80BD     	 pop {r7,pc}
 1070              	.L32:
 1071              	 .align 2
 1072              	.L31:
 1073 00c8 00000000 	 .word toggle_lock
 1074 00cc 60000000 	 .word .LC15
 1075 00d0 00000000 	 .word toggle_state_dimmer
 1076 00d4 D4203000 	 .word 3154132
 1077 00d8 78000000 	 .word .LC16
 1078 00dc 00000000 	 .word toggle_state_graphmode
 1079 00e0 8C000000 	 .word .LC17
 1080 00e4 00000000 	 .word InputType
 1081              	 .cfi_endproc
 1082              	.LFE498:
 1084              	 .section .rodata
 1085 009a 0000     	 .align 2
 1086              	.LC18:
 1087 009c 546F6767 	 .ascii "Toggle li/re touched\000"
 1087      6C65206C 
 1087      692F7265 
 1087      20746F75 
 1087      63686564 
 1088 00b1 000000   	 .section .text.TFT_touch_menu1,"ax",%progbits
 1089              	 .align 2
 1090              	 .global TFT_touch_menu1
 1091              	 .thumb
 1092              	 .thumb_func
 1094              	TFT_touch_menu1:
 1095              	.LFB499:
 253:../menu.c     **** void TFT_touch_menu1(uint8_t tag, uint8_t swipeInProgress, uint8_t *swipeEvokedBy, int32_t *swipeDi
 1096              	 .loc 1 253 0
 1097              	 .cfi_startproc
 1098              	 
 1099              	 
 1100 0000 80B5     	 push {r7,lr}
 1101              	.LCFI22:
 1102              	 .cfi_def_cfa_offset 8
 1103              	 .cfi_offset 7,-8
 1104              	 .cfi_offset 14,-4
 1105 0002 84B0     	 sub sp,sp,#16
 1106              	.LCFI23:
 1107              	 .cfi_def_cfa_offset 24
 1108 0004 00AF     	 add r7,sp,#0
 1109              	.LCFI24:
 1110              	 .cfi_def_cfa_register 7
 1111 0006 BA60     	 str r2,[r7,#8]
 1112 0008 7B60     	 str r3,[r7,#4]
 1113 000a 0346     	 mov r3,r0
 1114 000c FB73     	 strb r3,[r7,#15]
 1115 000e 0B46     	 mov r3,r1
 1116 0010 BB73     	 strb r3,[r7,#14]
 254:../menu.c     **** 	// Determine which tag was touched
 255:../menu.c     **** 	switch(tag)
 1117              	 .loc 1 255 0
 1118 0012 FB7B     	 ldrb r3,[r7,#15]
 1119 0014 002B     	 cmp r3,#0
 1120 0016 02D0     	 beq .L35
 1121 0018 0C2B     	 cmp r3,#12
 1122 001a 04D0     	 beq .L36
 1123 001c 19E0     	 b .L33
 1124              	.L35:
 256:../menu.c     **** 	{
 257:../menu.c     **** 		// nothing touched - reset states and locks
 258:../menu.c     **** 		case 0:
 259:../menu.c     **** 			toggle_lock = 0;
 1125              	 .loc 1 259 0
 1126 001e 0E4B     	 ldr r3,.L39
 1127 0020 0022     	 movs r2,#0
 1128 0022 1A70     	 strb r2,[r3]
 260:../menu.c     **** 			break;
 1129              	 .loc 1 260 0
 1130 0024 15E0     	 b .L33
 1131              	.L36:
 261:../menu.c     **** 
 262:../menu.c     **** 
 263:../menu.c     **** //		// dimmer button on top as on/off radio-switch
 264:../menu.c     **** //		case 10:
 265:../menu.c     **** //			if(toggle_lock == 0) {
 266:../menu.c     **** //				printf("Button Dimmer touched\n");
 267:../menu.c     **** //				toggle_lock = 42;
 268:../menu.c     **** //				if(toggle_state_dimmer == 0){
 269:../menu.c     **** //					toggle_state_dimmer = EVE_OPT_FLAT;
 270:../menu.c     **** //					// Activate Keypad
 271:../menu.c     **** //					keypadActive = 1;
 272:../menu.c     **** //				}
 273:../menu.c     **** //				else {
 274:../menu.c     **** //					toggle_state_dimmer = 0;
 275:../menu.c     **** //					// Deactivate Keypad
 276:../menu.c     **** //					keypadActive = 0;
 277:../menu.c     **** //				}
 278:../menu.c     **** //			}
 279:../menu.c     **** //			break;
 280:../menu.c     **** 
 281:../menu.c     **** 		// li/re mode toggle on top
 282:../menu.c     **** 		case 12:
 283:../menu.c     **** 			if(toggle_lock == 0) {
 1132              	 .loc 1 283 0
 1133 0026 0C4B     	 ldr r3,.L39
 1134 0028 1B78     	 ldrb r3,[r3]
 1135 002a 002B     	 cmp r3,#0
 1136 002c 10D1     	 bne .L37
 284:../menu.c     **** 				printf("Toggle li/re touched\n");
 1137              	 .loc 1 284 0
 1138 002e 0B48     	 ldr r0,.L39+4
 1139 0030 FFF7FEFF 	 bl puts
 285:../menu.c     **** 				toggle_lock = 42;
 1140              	 .loc 1 285 0
 1141 0034 084B     	 ldr r3,.L39
 1142 0036 2A22     	 movs r2,#42
 1143 0038 1A70     	 strb r2,[r3]
 286:../menu.c     **** 				if(toggle_state_graphmode == 0)	{
 1144              	 .loc 1 286 0
 1145 003a 094B     	 ldr r3,.L39+8
 1146 003c 1B88     	 ldrh r3,[r3]
 1147 003e 002B     	 cmp r3,#0
 1148 0040 03D1     	 bne .L38
 287:../menu.c     **** 					toggle_state_graphmode = 1;
 1149              	 .loc 1 287 0
 1150 0042 074B     	 ldr r3,.L39+8
 1151 0044 0122     	 movs r2,#1
 1152 0046 1A80     	 strh r2,[r3]
 1153 0048 02E0     	 b .L37
 1154              	.L38:
 288:../menu.c     **** 				}
 289:../menu.c     **** 				else {
 290:../menu.c     **** 					toggle_state_graphmode = 0;
 1155              	 .loc 1 290 0
 1156 004a 054B     	 ldr r3,.L39+8
 1157 004c 0022     	 movs r2,#0
 1158 004e 1A80     	 strh r2,[r3]
 1159              	.L37:
 291:../menu.c     **** 				}
 292:../menu.c     **** 			}
 293:../menu.c     **** 			break;
 1160              	 .loc 1 293 0
 1161 0050 00BF     	 nop
 1162              	.L33:
 294:../menu.c     **** 	}
 295:../menu.c     **** 
 296:../menu.c     **** 	//// If the user swiped more on x-axis he probably wants to swipe left/right
 297:../menu.c     **** 	//if(abs(swipeDistance_X) > abs(swipeDistance_Y)){
 298:../menu.c     **** 	//	if(swipeDistance_X > 50)      	// swipe to left
 299:../menu.c     **** 	//		swipeDetect = Left;
 300:../menu.c     **** 	//	else if(swipeDistance_X < -50)	// swipe to right
 301:../menu.c     **** 	//		swipeDetect = Right;
 302:../menu.c     **** 	//	else
 303:../menu.c     **** 	//		swipeDetect = None;
 304:../menu.c     **** 	//}
 305:../menu.c     **** 	//// If the user swiped more on y-axis he probably wants to swipe up/down
 306:../menu.c     **** 	//else{
 307:../menu.c     **** 	//	if(swipeDistance_Y > 50)		// swipe down
 308:../menu.c     **** 	//		swipeDetect = Down;
 309:../menu.c     **** 	//	else if(swipeDistance_Y < -50)	// swipe up
 310:../menu.c     **** 	//		swipeDetect = Up;
 311:../menu.c     **** 	//	else
 312:../menu.c     **** 	//		swipeDetect = None;
 313:../menu.c     **** 	//}
 314:../menu.c     **** 
 315:../menu.c     **** 
 316:../menu.c     **** }
 1163              	 .loc 1 316 0
 1164 0052 1037     	 adds r7,r7,#16
 1165              	.LCFI25:
 1166              	 .cfi_def_cfa_offset 8
 1167 0054 BD46     	 mov sp,r7
 1168              	.LCFI26:
 1169              	 .cfi_def_cfa_register 13
 1170              	 
 1171 0056 80BD     	 pop {r7,pc}
 1172              	.L40:
 1173              	 .align 2
 1174              	.L39:
 1175 0058 00000000 	 .word toggle_lock
 1176 005c 9C000000 	 .word .LC18
 1177 0060 00000000 	 .word toggle_state_graphmode
 1178              	 .cfi_endproc
 1179              	.LFE499:
 1181              	 .text
 1182              	.Letext0:
 1183              	 .file 2 "c:\\workspaces\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1184              	 .file 3 "c:\\workspaces\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1185              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/XMCLib/inc/xmc_gpio.h"
 1186              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/XMCLib/inc/xmc4_gpio.h"
 1187              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/XMCLib/inc/xmc_usic.h"
 1188              	 .file 7 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/XMCLib/inc/xmc_spi.h"
 1189              	 .file 8 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Dave/Generated/SPI_MASTER/spi_master.h"
 1190              	 .file 9 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Dave/Generated/DIGITAL_IO/digital_io.h"
 1191              	 .file 10 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/XMCLib/inc/xmc_vadc.h"
 1192              	 .file 11 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/CMSIS/Include/cmsis_gcc.h"
 1193              	 .file 12 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/CMSIS/Include/core_cm4.h"
 1194              	 .file 13 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
 1195              	 .file 14 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 1196              	 .file 15 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 1197              	 .file 16 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/globals.h"
 1198              	 .file 17 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/FT800-FT813-5.x/EVE_target.h"
 1199              	 .file 18 "C:/Workspaces/DAVE-4.4.2-64Bit_WS/DeflectionAnalyzer/Libraries/FT800-FT813-5.x/tft.h"
DEFINED SYMBOLS
                            *ABS*:00000000 menu.c
                            *COM*:00000004 _msCounter
                            *COM*:00000001 tft_tick
                            *COM*:00000004 MeasurementCounter
                            *COM*:00000002 InputBuffer1_idx
                            *COM*:00000001 InputType
                            *COM*:00000001 frameover
                            *COM*:00000001 ReadData
                            *COM*:00000004 swipeDistance_X
                            *COM*:00000004 swipeDistance_Y
                            *COM*:00000001 keypadActive
    {standard input}:34     .data.G_x:00000000 G_x
    {standard input}:31     .data.G_x:00000000 $d
    {standard input}:41     .data.G_y:00000000 G_y
    {standard input}:38     .data.G_y:00000000 $d
    {standard input}:48     .data.G_width:00000000 G_width
    {standard input}:45     .data.G_width:00000000 $d
    {standard input}:55     .data.G_height:00000000 G_height
    {standard input}:52     .data.G_height:00000000 $d
    {standard input}:62     .rodata.unit_Sensor:00000000 unit_Sensor
    {standard input}:59     .rodata.unit_Sensor:00000000 $d
    {standard input}:69     .data.G_amp_max:00000000 G_amp_max
    {standard input}:66     .data.G_amp_max:00000000 $d
    {standard input}:77     .data.G_t_max:00000000 G_t_max
    {standard input}:74     .data.G_t_max:00000000 $d
    {standard input}:85     .data.G_y_max:00000000 G_y_max
    {standard input}:82     .data.G_y_max:00000000 $d
    {standard input}:93     .data.G_h_grid_lines:00000000 G_h_grid_lines
    {standard input}:90     .data.G_h_grid_lines:00000000 $d
    {standard input}:101    .data.G_v_grid_lines:00000000 G_v_grid_lines
    {standard input}:98     .data.G_v_grid_lines:00000000 $d
    {standard input}:108    .bss.toggle_lock:00000000 toggle_lock
    {standard input}:109    .bss.toggle_lock:00000000 $d
    {standard input}:115    .bss.toggle_state_graphmode:00000000 toggle_state_graphmode
    {standard input}:112    .bss.toggle_state_graphmode:00000000 $d
    {standard input}:122    .bss.toggle_state_dimmer:00000000 toggle_state_dimmer
    {standard input}:119    .bss.toggle_state_dimmer:00000000 $d
    {standard input}:129    .bss.display_list_size:00000000 display_list_size
    {standard input}:126    .bss.display_list_size:00000000 $d
    {standard input}:136    .bss.tracker:00000000 tracker
    {standard input}:133    .bss.tracker:00000000 $d
    {standard input}:139    .rodata:00000000 $d
    {standard input}:146    .text.TFT_display_static_menu0:00000000 $t
    {standard input}:151    .text.TFT_display_static_menu0:00000000 TFT_display_static_menu0
    {standard input}:283    .text.TFT_display_static_menu0:000000f4 $d
    {standard input}:314    .text.TFT_display_static_menu1:00000000 $t
    {standard input}:319    .text.TFT_display_static_menu1:00000000 TFT_display_static_menu1
    {standard input}:415    .text.TFT_display_static_menu1:000000a0 $d
    {standard input}:462    .text.TFT_display_menu0:00000000 $t
    {standard input}:467    .text.TFT_display_menu0:00000000 TFT_display_menu0
    {standard input}:736    .text.TFT_display_menu0:000001f8 $d
    {standard input}:775    .text.TFT_display_menu1:00000000 $t
    {standard input}:780    .text.TFT_display_menu1:00000000 TFT_display_menu1
    {standard input}:890    .text.TFT_display_menu1:000000b8 $d
    {standard input}:919    .text.TFT_touch_menu0:00000000 $t
    {standard input}:924    .text.TFT_touch_menu0:00000000 TFT_touch_menu0
    {standard input}:1073   .text.TFT_touch_menu0:000000c8 $d
    {standard input}:1089   .text.TFT_touch_menu1:00000000 $t
    {standard input}:1094   .text.TFT_touch_menu1:00000000 TFT_touch_menu1
    {standard input}:1175   .text.TFT_touch_menu1:00000058 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
EVE_cmd_dl
EVE_cmd_text
TFT_GraphStatic
__aeabi_ddiv
__aeabi_i2d
__aeabi_dmul
EVE_cmd_gradcolor_burst
EVE_cmd_dl_burst
EVE_cmd_fgcolor_burst
EVE_cmd_bgcolor_burst
EVE_cmd_button_burst
EVE_cmd_toggle_burst
EVE_cmd_number_burst
sprintf
strlen
EVE_cmd_text_burst
TFT_GraphData
InputBuffer1
EVE_memRead16
EVE_memRead32
EVE_cmd_int_burst
puts
EVE_memWrite8
