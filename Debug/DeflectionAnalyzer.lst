
DeflectionAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f808  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  0800f808  0c00f808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  3 .data         00000204  1ffe8800  0c00f808  00018800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000474  1ffe8a04  0c00fa0c  00018a04  2**2
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00001470  00000000  00000000  00018a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001f837  00000000  00000000  00019e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000389e  00000000  00000000  000396af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000944a  00000000  00000000  0003cf4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00006a00  00000000  00000000  00046398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000be9f  00000000  00000000  0004cd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b37e  00000000  00000000  00058c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001230  00000000  00000000  00063fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 0000115c  00000000  00000000  000651e5  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	7d 54 00 08 91 02 00 08 91 02 00 08 91 02 00 08     }T..............
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 39 56 00 08 91 02 00 08 91 02 00 08     ....9V..........
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000ac:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000bc:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000cc:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000dc:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000ec:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000fc:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800010c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800011c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800012c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800013c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800014c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800015c:	91 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800017c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800018c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800019c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001ac:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001bc:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001cc:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001dc:	00 00 00 00 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001ec:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d070 	ldr.w	sp, [pc, #112]	; 8000274 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481c      	ldr	r0, [pc, #112]	; (8000278 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1c      	ldr	r4, [pc, #112]	; (800027c <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1d      	ldr	r5, [pc, #116]	; (8000280 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c18      	ldr	r4, [pc, #96]	; (8000288 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
    blx  r0
#endif

    ldr  r0, =main
 800023e:	4813      	ldr	r0, [pc, #76]	; (800028c <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
	...

08000244 <__copy_table_start__>:
 8000244:	0c00f808 	.word	0x0c00f808
 8000248:	1ffe8800 	.word	0x1ffe8800
 800024c:	00000204 	.word	0x00000204
 8000250:	0c00f808 	.word	0x0c00f808
 8000254:	1ffe8800 	.word	0x1ffe8800
 8000258:	00000000 	.word	0x00000000

0800025c <__copy_table_end__>:
 800025c:	1ffe8a04 	.word	0x1ffe8a04
 8000260:	00000474 	.word	0x00000474
 8000264:	20000000 	.word	0x20000000
 8000268:	00000000 	.word	0x00000000
 800026c:	20000000 	.word	0x20000000
 8000270:	00000000 	.word	0x00000000

08000274 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000274:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000278:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 800027c:	08000244 	.word	0x08000244
	ldr	r5, =__copy_table_end__
 8000280:	0800025c 	.word	0x0800025c
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000284:	0800025c 	.word	0x0800025c
	ldr	r4, =__zero_table_end__
 8000288:	08000274 	.word	0x08000274
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
    blx  r0
#endif

    ldr  r0, =main
 800028c:	080055a1 	.word	0x080055a1

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <SystemInit+0x1c>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002a6:	f004 fe79 	bl	8004f9c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002aa:	f004 fee1 	bl	8005070 <SystemCoreClockSetup>
}
 80002ae:	bd98      	pop	{r3, r4, r7, pc}
 80002b0:	2003ffc4 	.word	0x2003ffc4

080002b4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002ba:	4b2f      	ldr	r3, [pc, #188]	; (8000378 <SystemCoreClockUpdate+0xc4>)
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d03e      	beq.n	8000344 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <SystemCoreClockUpdate+0xc8>)
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d002      	beq.n	80002d8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002d2:	4b2b      	ldr	r3, [pc, #172]	; (8000380 <SystemCoreClockUpdate+0xcc>)
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	e002      	b.n	80002de <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002d8:	f004 fec0 	bl	800505c <OSCHP_GetFrequency>
 80002dc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002de:	4b27      	ldr	r3, [pc, #156]	; (800037c <SystemCoreClockUpdate+0xc8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d020      	beq.n	800032c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002ea:	4b24      	ldr	r3, [pc, #144]	; (800037c <SystemCoreClockUpdate+0xc8>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002f2:	0e1b      	lsrs	r3, r3, #24
 80002f4:	3301      	adds	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002f8:	4b20      	ldr	r3, [pc, #128]	; (800037c <SystemCoreClockUpdate+0xc8>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	3301      	adds	r3, #1
 8000304:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000306:	4b1d      	ldr	r3, [pc, #116]	; (800037c <SystemCoreClockUpdate+0xc8>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	3301      	adds	r3, #1
 8000312:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	68fa      	ldr	r2, [r7, #12]
 800031e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	fb02 f303 	mul.w	r3, r2, r3
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	e00d      	b.n	8000348 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <SystemCoreClockUpdate+0xc8>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000334:	3301      	adds	r3, #1
 8000336:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e001      	b.n	8000348 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <SystemCoreClockUpdate+0xcc>)
 8000346:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <SystemCoreClockUpdate+0xc4>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3301      	adds	r3, #1
 8000350:	68fa      	ldr	r2, [r7, #12]
 8000352:	fbb2 f3f3 	udiv	r3, r2, r3
 8000356:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <SystemCoreClockUpdate+0xc4>)
 800035a:	691b      	ldr	r3, [r3, #16]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	3301      	adds	r3, #1
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	fbb2 f3f3 	udiv	r3, r2, r3
 8000368:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <SystemCoreClockUpdate+0xd0>)
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6013      	str	r3, [r2, #0]
}
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	50004600 	.word	0x50004600
 800037c:	50004710 	.word	0x50004710
 8000380:	016e3600 	.word	0x016e3600
 8000384:	2003ffc0 	.word	0x2003ffc0

08000388 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	460b      	mov	r3, r1
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000396:	7afb      	ldrb	r3, [r7, #11]
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	b2db      	uxtb	r3, r3
 800039c:	4618      	mov	r0, r3
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3204      	adds	r2, #4
 80003aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ae:	7afb      	ldrb	r3, [r7, #11]
 80003b0:	f003 0303 	and.w	r3, r3, #3
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	4619      	mov	r1, r3
 80003b8:	23f8      	movs	r3, #248	; 0xf8
 80003ba:	408b      	lsls	r3, r1
 80003bc:	43db      	mvns	r3, r3
 80003be:	ea02 0103 	and.w	r1, r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	1d02      	adds	r2, r0, #4
 80003c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	4619      	mov	r1, r3
 80003d4:	2303      	movs	r3, #3
 80003d6:	408b      	lsls	r3, r1
 80003d8:	43db      	mvns	r3, r3
 80003da:	401a      	ands	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4a3a      	ldr	r2, [pc, #232]	; (80004cc <XMC_GPIO_Init+0x144>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d003      	beq.n	80003f0 <XMC_GPIO_Init+0x68>
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a39      	ldr	r2, [pc, #228]	; (80004d0 <XMC_GPIO_Init+0x148>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d10a      	bne.n	8000406 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003f4:	7afb      	ldrb	r3, [r7, #11]
 80003f6:	2101      	movs	r1, #1
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	43db      	mvns	r3, r3
 80003fe:	401a      	ands	r2, r3
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	661a      	str	r2, [r3, #96]	; 0x60
 8000404:	e042      	b.n	800048c <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	b2db      	uxtb	r3, r3
 800040c:	b25b      	sxtb	r3, r3
 800040e:	2b00      	cmp	r3, #0
 8000410:	da3c      	bge.n	800048c <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	685a      	ldr	r2, [r3, #4]
 8000416:	7afb      	ldrb	r3, [r7, #11]
 8000418:	409a      	lsls	r2, r3
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	08db      	lsrs	r3, r3, #3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	461a      	mov	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	3210      	adds	r2, #16
 8000432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	f003 0307 	and.w	r3, r3, #7
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	4619      	mov	r1, r3
 8000440:	2307      	movs	r3, #7
 8000442:	408b      	lsls	r3, r1
 8000444:	43db      	mvns	r3, r3
 8000446:	ea02 0103 	and.w	r1, r2, r3
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f100 0210 	add.w	r2, r0, #16
 8000450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000454:	7afb      	ldrb	r3, [r7, #11]
 8000456:	08db      	lsrs	r3, r3, #3
 8000458:	b2db      	uxtb	r3, r3
 800045a:	4618      	mov	r0, r3
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3210      	adds	r2, #16
 8000468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	7a1b      	ldrb	r3, [r3, #8]
 8000470:	4619      	mov	r1, r3
 8000472:	7afb      	ldrb	r3, [r7, #11]
 8000474:	f003 0307 	and.w	r3, r3, #7
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	fa01 f303 	lsl.w	r3, r1, r3
 800047e:	ea42 0103 	orr.w	r1, r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f100 0210 	add.w	r2, r0, #16
 8000488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	089b      	lsrs	r3, r3, #2
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3204      	adds	r2, #4
 80004a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	f003 0303 	and.w	r3, r3, #3
 80004b0:	00db      	lsls	r3, r3, #3
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	ea42 0103 	orr.w	r1, r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	1d02      	adds	r2, r0, #4
 80004be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	48028e00 	.word	0x48028e00
 80004d0:	48028f00 	.word	0x48028f00

080004d4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004da:	681b      	ldr	r3, [r3, #0]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	2003ffc0 	.word	0x2003ffc0

080004ec <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <XMC_SCU_GetMirrorStatus+0x14>)
 80004f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	50004000 	.word	0x50004000

08000504 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800050c:	f7ff fed2 	bl	80002b4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <XMC_SCU_lDelay+0x3c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <XMC_SCU_lDelay+0x40>)
 8000516:	fba2 2303 	umull	r2, r3, r2, r3
 800051a:	0c9a      	lsrs	r2, r3, #18
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	fb02 f303 	mul.w	r3, r2, r3
 8000522:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e003      	b.n	8000532 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800052a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	3301      	adds	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	d3f7      	bcc.n	800052a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2003ffc0 	.word	0x2003ffc0
 8000544:	431bde83 	.word	0x431bde83

08000548 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800054e:	685b      	ldr	r3, [r3, #4]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	50004074 	.word	0x50004074

08000560 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	60d3      	str	r3, [r2, #12]
}
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	50004074 	.word	0x50004074

0800057c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000584:	2000      	movs	r0, #0
 8000586:	f000 f8bf 	bl	8000708 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800058a:	f000 fa91 	bl	8000ab0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	79db      	ldrb	r3, [r3, #7]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d00a      	beq.n	80005ac <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000596:	f000 fac9 	bl	8000b2c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800059a:	bf00      	nop
 800059c:	f000 fab4 	bl	8000b08 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1f7      	bne.n	800059c <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7a5b      	ldrb	r3, [r3, #9]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f923 	bl	80007fc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005b6:	bf00      	nop
 80005b8:	f7ff ff98 	bl	80004ec <XMC_SCU_GetMirrorStatus>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1fa      	bne.n	80005b8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7a1b      	ldrb	r3, [r3, #8]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fa4c 	bl	8000a64 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7c1b      	ldrb	r3, [r3, #16]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f931 	bl	8000838 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7c5b      	ldrb	r3, [r3, #17]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f954 	bl	8000888 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7c9b      	ldrb	r3, [r3, #18]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f93b 	bl	8000860 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7cdb      	ldrb	r3, [r3, #19]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f95e 	bl	80008b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	799b      	ldrb	r3, [r3, #6]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00a      	beq.n	8000612 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005fc:	f000 face 	bl	8000b9c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000600:	bf00      	nop
 8000602:	f000 faf3 	bl	8000bec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000606:	4603      	mov	r3, r0
 8000608:	f083 0301 	eor.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f7      	bne.n	8000602 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	78db      	ldrb	r3, [r3, #3]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d102      	bne.n	8000620 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800061a:	f000 fb0b 	bl	8000c34 <XMC_SCU_CLOCK_DisableSystemPll>
 800061e:	e014      	b.n	800064a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000620:	f000 faf8 	bl	8000c14 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	8899      	ldrh	r1, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000630:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000636:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4608      	mov	r0, r1
 8000640:	4611      	mov	r1, r2
 8000642:	462a      	mov	r2, r5
 8000644:	4623      	mov	r3, r4
 8000646:	f000 fb05 	bl	8000c54 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000652:	d103      	bne.n	800065c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000654:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000658:	f000 f856 	bl	8000708 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800065c:	f7ff fe2a 	bl	80002b4 <SystemCoreClockUpdate>
}
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bdb0      	pop	{r4, r5, r7, pc}
 8000666:	bf00      	nop

08000668 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	0f1b      	lsrs	r3, r3, #28
 8000674:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800067c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	461a      	mov	r2, r3
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800068c:	4413      	add	r3, r2
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	601a      	str	r2, [r3, #0]
}
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	50004414 	.word	0x50004414

080006a0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	0f1b      	lsrs	r3, r3, #28
 80006ac:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006b4:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006c4:	4413      	add	r3, r2
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4013      	ands	r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	5000440c 	.word	0x5000440c

080006e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006ec:	f7ff fef2 	bl	80004d4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006f0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006f4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	50004600 	.word	0x50004600

08000708 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000710:	4906      	ldr	r1, [pc, #24]	; (800072c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	50004600 	.word	0x50004600

08000730 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	50004600 	.word	0x50004600

08000758 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4313      	orrs	r3, r2
 800076e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	50004600 	.word	0x50004600

08000780 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d108      	bne.n	80007a2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	60d3      	str	r3, [r2, #12]
 80007a0:	e007      	b.n	80007b2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a2:	4a06      	ldr	r2, [pc, #24]	; (80007bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	60d3      	str	r3, [r2, #12]
  }
}
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	50004710 	.word	0x50004710

080007c0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007ca:	bf00      	nop
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f8      	bne.n	80007cc <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007da:	4907      	ldr	r1, [pc, #28]	; (80007f8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	50004000 	.word	0x50004000
 80007f8:	50004300 	.word	0x50004300

080007fc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000806:	bf00      	nop
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800080a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f8      	bne.n	8000808 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000816:	4907      	ldr	r1, [pc, #28]	; (8000834 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000820:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000822:	4313      	orrs	r3, r2
 8000824:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	50004000 	.word	0x50004000
 8000834:	50004300 	.word	0x50004300

08000838 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000840:	4906      	ldr	r1, [pc, #24]	; (800085c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800084e:	4313      	orrs	r3, r2
 8000850:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	50004600 	.word	0x50004600

08000860 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000876:	4313      	orrs	r3, r2
 8000878:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	50004600 	.word	0x50004600

08000888 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000890:	4906      	ldr	r1, [pc, #24]	; (80008ac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800089e:	4313      	orrs	r3, r2
 80008a0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	50004600 	.word	0x50004600

080008b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008b8:	4906      	ldr	r1, [pc, #24]	; (80008d4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008c6:	4313      	orrs	r3, r2
 80008c8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	50004600 	.word	0x50004600

080008d8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008e0:	4906      	ldr	r1, [pc, #24]	; (80008fc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ee:	4313      	orrs	r3, r2
 80008f0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	50004600 	.word	0x50004600

08000900 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000908:	4906      	ldr	r1, [pc, #24]	; (8000924 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000916:	4313      	orrs	r3, r2
 8000918:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	50004600 	.word	0x50004600

08000928 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000930:	4906      	ldr	r1, [pc, #24]	; (800094c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800093e:	4313      	orrs	r3, r2
 8000940:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	50004600 	.word	0x50004600

08000950 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	6053      	str	r3, [r2, #4]
}
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	50004600 	.word	0x50004600

08000970 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	0f1b      	lsrs	r3, r3, #28
 800097c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000984:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	4613      	mov	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4413      	add	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	461a      	mov	r2, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000994:	4413      	add	r3, r2
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	50004648 	.word	0x50004648

080009a8 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	0f1b      	lsrs	r3, r3, #28
 80009b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009bc:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009cc:	4413      	add	r3, r2
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4013      	ands	r3, r2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	50004640 	.word	0x50004640

080009f0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009fa:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a12:	4913      	ldr	r1, [pc, #76]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a20:	4313      	orrs	r3, r2
 8000a22:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f023 0310 	bic.w	r3, r3, #16
 8000a3a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a3c:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a46:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a48:	bf00      	nop
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f9      	beq.n	8000a4a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	50004710 	.word	0x50004710

08000a64 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a78:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10e      	bne.n	8000a9e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a8a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f7ff fd39 	bl	8000504 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a9c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a9e:	2064      	movs	r0, #100	; 0x64
 8000aa0:	f7ff fd30 	bl	8000504 <XMC_SCU_lDelay>
}
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	50004710 	.word	0x50004710

08000ab0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d109      	bne.n	8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000ac6:	bf00      	nop
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0f9      	beq.n	8000ac8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00a      	beq.n	8000af6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae6:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000ae8:	bf00      	nop
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f9      	bne.n	8000aea <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	50004200 	.word	0x50004200
 8000b04:	50004400 	.word	0x50004400

08000b08 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf0c      	ite	eq
 8000b18:	2301      	moveq	r3, #1
 8000b1a:	2300      	movne	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	50004300 	.word	0x50004300

08000b2c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b30:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b34:	f7ff fd14 	bl	8000560 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b42:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b44:	bf00      	nop
 8000b46:	f7ff fcff 	bl	8000548 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f8      	beq.n	8000b46 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b54:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b58:	f7ff fd02 	bl	8000560 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b5e:	2208      	movs	r2, #8
 8000b60:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b62:	bf00      	nop
 8000b64:	f7ff fcf0 	bl	8000548 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0f8      	beq.n	8000b64 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b76:	f7ff fcf3 	bl	8000560 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b86:	bf00      	nop
 8000b88:	f7ff fcde 	bl	8000548 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f8      	beq.n	8000b88 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	50004300 	.word	0x50004300

08000b9c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000baa:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bac:	4d0d      	ldr	r5, [pc, #52]	; (8000be4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000bb6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000bba:	f004 fa4f 	bl	800505c <OSCHP_GetFrequency>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8000bc6:	0d1b      	lsrs	r3, r3, #20
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bcc:	4323      	orrs	r3, r4
 8000bce:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bda:	6053      	str	r3, [r2, #4]
}
 8000bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	50004710 	.word	0x50004710
 8000be4:	50004700 	.word	0x50004700
 8000be8:	6b5fca6b 	.word	0x6b5fca6b

08000bec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000bf8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bfc:	bf0c      	ite	eq
 8000bfe:	2301      	moveq	r3, #1
 8000c00:	2300      	movne	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	50004710 	.word	0x50004710

08000c14 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c18:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c22:	f023 0302 	bic.w	r3, r3, #2
 8000c26:	6053      	str	r3, [r2, #4]
}
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	50004710 	.word	0x50004710

08000c34 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6053      	str	r3, [r2, #4]
}
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	50004710 	.word	0x50004710

08000c54 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60ba      	str	r2, [r7, #8]
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	81fb      	strh	r3, [r7, #14]
 8000c62:	460b      	mov	r3, r1
 8000c64:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd89 	bl	8000780 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c6e:	7b7b      	ldrb	r3, [r7, #13]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	f040 8084 	bne.w	8000d7e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d109      	bne.n	8000c90 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c7c:	f004 f9ee 	bl	800505c <OSCHP_GetFrequency>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4b4b      	ldr	r3, [pc, #300]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000c84:	fba3 2302 	umull	r2, r3, r3, r2
 8000c88:	0c9b      	lsrs	r3, r3, #18
 8000c8a:	059b      	lsls	r3, r3, #22
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e002      	b.n	8000c96 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c90:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c94:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	fb02 f203 	mul.w	r2, r2, r3
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	4a42      	ldr	r2, [pc, #264]	; (8000db4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	091b      	lsrs	r3, r3, #4
 8000cb0:	0d9b      	lsrs	r3, r3, #22
 8000cb2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cb4:	4a40      	ldr	r2, [pc, #256]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb6:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cc0:	4a3d      	ldr	r2, [pc, #244]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000ccc:	493a      	ldr	r1, [pc, #232]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000cd4:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	0212      	lsls	r2, r2, #8
 8000cdc:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ce4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cec:	4313      	orrs	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cf0:	4a31      	ldr	r2, [pc, #196]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfa:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cfc:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f023 0310 	bic.w	r3, r3, #16
 8000d06:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d08:	4a2b      	ldr	r2, [pc, #172]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d12:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d14:	bf00      	nop
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d22:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d2e:	bf00      	nop
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f9      	bne.n	8000d30 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	0d9b      	lsrs	r3, r3, #22
 8000d48:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d4a:	6a3a      	ldr	r2, [r7, #32]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d202      	bcs.n	8000d58 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d52:	6938      	ldr	r0, [r7, #16]
 8000d54:	f000 f838 	bl	8000dc8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	085b      	lsrs	r3, r3, #1
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	0d9b      	lsrs	r3, r3, #22
 8000d66:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d68:	6a3a      	ldr	r2, [r7, #32]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d202      	bcs.n	8000d76 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d70:	6938      	ldr	r0, [r7, #16]
 8000d72:	f000 f829 	bl	8000dc8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d76:	6a38      	ldr	r0, [r7, #32]
 8000d78:	f000 f826 	bl	8000dc8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d7c:	e015      	b.n	8000daa <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d90:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d9c:	bf00      	nop
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	aaaaaaab 	.word	0xaaaaaaab
 8000db8:	50004710 	.word	0x50004710
 8000dbc:	f08080ff 	.word	0xf08080ff
 8000dc0:	88888889 	.word	0x88888889
 8000dc4:	b60b60b7 	.word	0xb60b60b7

08000dc8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000de0:	4313      	orrs	r3, r2
 8000de2:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000de4:	2032      	movs	r0, #50	; 0x32
 8000de6:	f7ff fb8d 	bl	8000504 <XMC_SCU_lDelay>
}
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	50004710 	.word	0x50004710

08000df4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	60da      	str	r2, [r3, #12]
}
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <XMC_CCU4_lDeassertReset+0x4c>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d103      	bne.n	8000e28 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000e20:	2004      	movs	r0, #4
 8000e22:	f7ff fc21 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e26:	e016      	b.n	8000e56 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <XMC_CCU4_lDeassertReset+0x50>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d103      	bne.n	8000e38 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000e30:	2008      	movs	r0, #8
 8000e32:	f7ff fc19 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e36:	e00e      	b.n	8000e56 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <XMC_CCU4_lDeassertReset+0x54>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d103      	bne.n	8000e48 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000e40:	2010      	movs	r0, #16
 8000e42:	f7ff fc11 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e46:	e006      	b.n	8000e56 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <XMC_CCU4_lDeassertReset+0x58>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d102      	bne.n	8000e56 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <XMC_CCU4_lDeassertReset+0x5c>)
 8000e52:	f7ff fc09 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	4000c000 	.word	0x4000c000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40014000 	.word	0x40014000
 8000e68:	48004000 	.word	0x48004000
 8000e6c:	10000001 	.word	0x10000001

08000e70 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <XMC_CCU4_lUngateClock+0x4c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d103      	bne.n	8000e88 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f7ff fd75 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000e86:	e016      	b.n	8000eb6 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <XMC_CCU4_lUngateClock+0x50>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d103      	bne.n	8000e98 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000e90:	2008      	movs	r0, #8
 8000e92:	f7ff fd6d 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000e96:	e00e      	b.n	8000eb6 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <XMC_CCU4_lUngateClock+0x54>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d103      	bne.n	8000ea8 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000ea0:	2010      	movs	r0, #16
 8000ea2:	f7ff fd65 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000ea6:	e006      	b.n	8000eb6 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <XMC_CCU4_lUngateClock+0x58>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d102      	bne.n	8000eb6 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <XMC_CCU4_lUngateClock+0x5c>)
 8000eb2:	f7ff fd5d 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	4000c000 	.word	0x4000c000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40014000 	.word	0x40014000
 8000ec8:	48004000 	.word	0x48004000
 8000ecc:	10000001 	.word	0x10000001

08000ed0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff fd39 	bl	8000950 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ffc6 	bl	8000e70 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff93 	bl	8000e10 <XMC_CCU4_lDeassertReset>
#endif
}
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffe7 	bl	8000ed0 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff76 	bl	8000df4 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f14:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	039b      	lsls	r3, r3, #14
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	795b      	ldrb	r3, [r3, #5]
 8000f42:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	051a      	lsls	r2, r3, #20
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	795b      	ldrb	r3, [r3, #5]
 8000f72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fae:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	d82c      	bhi.n	8001010 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000fb6:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08000fe5 	.word	0x08000fe5
 8000fc0:	08000fe5 	.word	0x08000fe5
 8000fc4:	08000fef 	.word	0x08000fef
 8000fc8:	08000fef 	.word	0x08000fef
 8000fcc:	08001011 	.word	0x08001011
 8000fd0:	08001011 	.word	0x08001011
 8000fd4:	08001011 	.word	0x08001011
 8000fd8:	08001011 	.word	0x08001011
 8000fdc:	08000ff9 	.word	0x08000ff9
 8000fe0:	08001005 	.word	0x08001005
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
      break;
 8000fec:	e016      	b.n	800101c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000fee:	230c      	movs	r3, #12
 8000ff0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	617b      	str	r3, [r7, #20]
      break;
 8000ff6:	e011      	b.n	800101c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000ff8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000ffe:	2308      	movs	r3, #8
 8001000:	617b      	str	r3, [r7, #20]
      break;
 8001002:	e00b      	b.n	800101c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001004:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001008:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800100a:	230a      	movs	r3, #10
 800100c:	617b      	str	r3, [r7, #20]
      break;
 800100e:	e005      	b.n	800101c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001010:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001014:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8001016:	230c      	movs	r3, #12
 8001018:	617b      	str	r3, [r7, #20]
      break;
 800101a:	bf00      	nop
  }
  
  srs &= ~mask; 
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4013      	ands	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001026:	78ba      	ldrb	r2, [r7, #2]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
 8001054:	4613      	mov	r3, r2
 8001056:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4619      	mov	r1, r3
 8001062:	2303      	movs	r3, #3
 8001064:	408b      	lsls	r3, r1
 8001066:	43db      	mvns	r3, r3
 8001068:	401a      	ands	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001072:	78bb      	ldrb	r3, [r7, #2]
 8001074:	78f9      	ldrb	r1, [r7, #3]
 8001076:	0049      	lsls	r1, r1, #1
 8001078:	408b      	lsls	r3, r1
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f852 	bl	8001140 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	795b      	ldrb	r3, [r3, #5]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d112      	bne.n	80010ca <XMC_SPI_CH_Init+0x3e>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d007      	beq.n	80010bc <XMC_SPI_CH_Init+0x30>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	4619      	mov	r1, r3
 80010b4:	2202      	movs	r2, #2
 80010b6:	f000 f8ff 	bl	80012b8 <XMC_USIC_CH_SetBaudrateEx>
 80010ba:	e006      	b.n	80010ca <XMC_SPI_CH_Init+0x3e>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	4619      	mov	r1, r3
 80010c4:	2202      	movs	r2, #2
 80010c6:	f000 f887 	bl	80011d8 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <XMC_SPI_CH_Init+0x7c>)
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	795b      	ldrb	r3, [r3, #5]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <XMC_SPI_CH_Init+0x64>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	799b      	ldrb	r3, [r3, #6]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80010e4:	f043 030b 	orr.w	r3, r3, #11
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295
 80010f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	891b      	ldrh	r3, [r3, #8]
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	073f0102 	.word	0x073f0102

0800110c <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800111a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001126:	81fb      	strh	r3, [r7, #14]
 8001128:	e003      	b.n	8001132 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001130:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001132:	89fb      	ldrh	r3, [r7, #14]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <XMC_USIC_CH_Enable+0x74>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d003      	beq.n	8001158 <XMC_USIC_CH_Enable+0x18>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <XMC_USIC_CH_Enable+0x78>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d103      	bne.n	8001160 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001158:	4818      	ldr	r0, [pc, #96]	; (80011bc <XMC_USIC_CH_Enable+0x7c>)
 800115a:	f000 f949 	bl	80013f0 <XMC_USIC_Enable>
 800115e:	e016      	b.n	800118e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <XMC_USIC_CH_Enable+0x80>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d003      	beq.n	8001170 <XMC_USIC_CH_Enable+0x30>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <XMC_USIC_CH_Enable+0x84>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d103      	bne.n	8001178 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001170:	4815      	ldr	r0, [pc, #84]	; (80011c8 <XMC_USIC_CH_Enable+0x88>)
 8001172:	f000 f93d 	bl	80013f0 <XMC_USIC_Enable>
 8001176:	e00a      	b.n	800118e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <XMC_USIC_CH_Enable+0x8c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d003      	beq.n	8001188 <XMC_USIC_CH_Enable+0x48>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <XMC_USIC_CH_Enable+0x90>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d102      	bne.n	800118e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <XMC_USIC_CH_Enable+0x94>)
 800118a:	f000 f931 	bl	80013f0 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001194:	bf00      	nop
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f9      	beq.n	8001196 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f023 020f 	bic.w	r2, r3, #15
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40030000 	.word	0x40030000
 80011b8:	40030200 	.word	0x40030200
 80011bc:	40030008 	.word	0x40030008
 80011c0:	48020000 	.word	0x48020000
 80011c4:	48020200 	.word	0x48020200
 80011c8:	48020008 	.word	0x48020008
 80011cc:	48024000 	.word	0x48024000
 80011d0:	48024200 	.word	0x48024200
 80011d4:	48024008 	.word	0x48024008

080011d8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b63      	cmp	r3, #99	; 0x63
 80011e8:	d958      	bls.n	800129c <XMC_USIC_CH_SetBaudrate+0xc4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d055      	beq.n	800129c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80011f0:	f7ff fa7a 	bl	80006e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80011f8:	fba3 2302 	umull	r2, r3, r3, r2
 80011fc:	095b      	lsrs	r3, r3, #5
 80011fe:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4a2b      	ldr	r2, [pc, #172]	; (80012b0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	095b      	lsrs	r3, r3, #5
 800120a:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001214:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001218:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800121a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
 8001220:	e022      	b.n	8001268 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001226:	fb02 f203 	mul.w	r2, r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	0a9b      	lsrs	r3, r3, #10
 800123c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001244:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124c:	d209      	bcs.n	8001262 <XMC_USIC_CH_SetBaudrate+0x8a>
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	429a      	cmp	r2, r3
 8001254:	d205      	bcs.n	8001262 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001264:	3b01      	subs	r3, #1
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
 8001268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1d9      	bne.n	8001222 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001270:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 800127e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	3a01      	subs	r2, #1
 8001284:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001286:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	3b01      	subs	r3, #1
 800128c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800128e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800129a:	e002      	b.n	80012a2 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80012a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3738      	adds	r7, #56	; 0x38
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	51eb851f 	.word	0x51eb851f
 80012b4:	fc0080ef 	.word	0xfc0080ef

080012b8 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80012c4:	f7ff fa10 	bl	80006e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80012c8:	4603      	mov	r3, r0
 80012ca:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 80012da:	6a3a      	ldr	r2, [r7, #32]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dd5f      	ble.n	80013a2 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80012e2:	6a3a      	ldr	r2, [r7, #32]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80012ec:	e010      	b.n	8001310 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	3301      	adds	r3, #1
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	fb02 f303 	mul.w	r3, r2, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	fb03 f302 	mul.w	r3, r3, r2
 8001304:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001306:	6a3a      	ldr	r2, [r7, #32]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	fb92 f3f3 	sdiv	r3, r2, r3
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001316:	4293      	cmp	r3, r2
 8001318:	d8e9      	bhi.n	80012ee <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 800131a:	6a3a      	ldr	r2, [r7, #32]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001330:	6a3a      	ldr	r2, [r7, #32]
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	3301      	adds	r3, #1
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001352:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1acb      	subs	r3, r1, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	bfb8      	it	lt
 8001360:	425b      	neglt	r3, r3
 8001362:	429a      	cmp	r2, r3
 8001364:	da02      	bge.n	800136c <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001368:	3301      	adds	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 800136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001376:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001384:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	3a01      	subs	r2, #1
 800138a:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800138c:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	3b01      	subs	r3, #1
 8001392:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001394:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013a0:	e002      	b.n	80013a8 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 80013a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3730      	adds	r7, #48	; 0x30
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	fc0080ef 	.word	0xfc0080ef

080013b8 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	460b      	mov	r3, r1
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	699a      	ldr	r2, [r3, #24]
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	2107      	movs	r1, #7
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80013de:	431a      	orrs	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a28      	ldr	r2, [pc, #160]	; (800149c <XMC_USIC_Enable+0xac>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d118      	bne.n	8001432 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001400:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001404:	f7ff fab4 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001408:	bf00      	nop
 800140a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800140e:	f7ff facb 	bl	80009a8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f8      	bne.n	800140a <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001418:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800141c:	f7ff f924 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001420:	bf00      	nop
 8001422:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001426:	f7ff f93b 	bl	80006a0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f8      	bne.n	8001422 <XMC_USIC_Enable+0x32>
 8001430:	e030      	b.n	8001494 <XMC_USIC_Enable+0xa4>
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <XMC_USIC_Enable+0xb0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d114      	bne.n	8001464 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800143a:	481a      	ldr	r0, [pc, #104]	; (80014a4 <XMC_USIC_Enable+0xb4>)
 800143c:	f7ff fa98 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001440:	bf00      	nop
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <XMC_USIC_Enable+0xb4>)
 8001444:	f7ff fab0 	bl	80009a8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <XMC_USIC_Enable+0x52>
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <XMC_USIC_Enable+0xb4>)
 8001450:	f7ff f90a 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001454:	bf00      	nop
 8001456:	4813      	ldr	r0, [pc, #76]	; (80014a4 <XMC_USIC_Enable+0xb4>)
 8001458:	f7ff f922 	bl	80006a0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f9      	bne.n	8001456 <XMC_USIC_Enable+0x66>
 8001462:	e017      	b.n	8001494 <XMC_USIC_Enable+0xa4>
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <XMC_USIC_Enable+0xb8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d113      	bne.n	8001494 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <XMC_USIC_Enable+0xbc>)
 800146e:	f7ff fa7f 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8001472:	bf00      	nop
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <XMC_USIC_Enable+0xbc>)
 8001476:	f7ff fa97 	bl	80009a8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f9      	bne.n	8001474 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <XMC_USIC_Enable+0xbc>)
 8001482:	f7ff f8f1 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8001486:	bf00      	nop
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <XMC_USIC_Enable+0xbc>)
 800148a:	f7ff f909 	bl	80006a0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f9      	bne.n	8001488 <XMC_USIC_Enable+0x98>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40030008 	.word	0x40030008
 80014a0:	48020008 	.word	0x48020008
 80014a4:	10000080 	.word	0x10000080
 80014a8:	48024008 	.word	0x48024008
 80014ac:	10000100 	.word	0x10000100

080014b0 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014ee:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	079b      	lsls	r3, r3, #30
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800153a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800155e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff f9f9 	bl	8000970 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff f872 	bl	8000668 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop

08001588 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001592:	f7ff ffef 	bl	8001574 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f240 731f 	movw	r3, #1823	; 0x71f
 80015f8:	4013      	ands	r3, r2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	3128      	adds	r1, #40	; 0x28
 8001600:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001604:	e007      	b.n	8001616 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 800160a:	4013      	ands	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	3128      	adds	r1, #40	; 0x28
 8001612:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	071f0000 	.word	0x071f0000

08001624 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001632:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e017      	b.n	8001672 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001652:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <XMC_VADC_GLOBAL_StartupCalibration+0x48>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800165a:	e000      	b.n	800165e <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 800165c:	bf00      	nop
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f7      	bne.n	800165c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	3301      	adds	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d9e4      	bls.n	8001642 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	0800a210 	.word	0x0800a210

08001688 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d903      	bls.n	80016a2 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	3b04      	subs	r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e001      	b.n	80016a6 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ac:	f023 020f 	bic.w	r2, r3, #15
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	2300      	movs	r3, #0
 80016e4:	f000 f828 	bl	8001738 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	2300      	movs	r3, #0
 80016f2:	f000 f821 	bl	8001738 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	2200      	movs	r2, #0
 80016fe:	2301      	movs	r3, #1
 8001700:	f000 f81a 	bl	8001738 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	2201      	movs	r2, #1
 800170c:	2301      	movs	r3, #1
 800170e:	f000 f813 	bl	8001738 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	f7ff fec0 	bl	80014b0 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop

08001738 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001738:	b480      	push	{r7}
 800173a:	b08d      	sub	sp, #52	; 0x34
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d113      	bne.n	8001776 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 800174e:	2308      	movs	r3, #8
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001752:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 800175c:	231f      	movs	r3, #31
 800175e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001760:	7a3b      	ldrb	r3, [r7, #8]
 8001762:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001766:	b2db      	uxtb	r3, r3
 8001768:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800176a:	7a7b      	ldrb	r3, [r7, #9]
 800176c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	76fb      	strb	r3, [r7, #27]
 8001774:	e013      	b.n	800179e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001776:	2318      	movs	r3, #24
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800177a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001780:	2310      	movs	r3, #16
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001784:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001788:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800178a:	7abb      	ldrb	r3, [r7, #10]
 800178c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001790:	b2db      	uxtb	r3, r3
 8001792:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	3228      	adds	r2, #40	; 0x28
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	43db      	mvns	r3, r3
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 80017b4:	7efa      	ldrb	r2, [r7, #27]
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	4313      	orrs	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4013      	ands	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	3228      	adds	r2, #40	; 0x28
 80017e0:	6979      	ldr	r1, [r7, #20]
 80017e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80017e6:	3734      	adds	r7, #52	; 0x34
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001802:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f023 0303 	bic.w	r3, r3, #3
 800180a:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
 8001836:	e009      	b.n	800184c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	4a39      	ldr	r2, [pc, #228]	; (8001920 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe85 	bl	8001550 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	3301      	adds	r3, #1
 800184a:	75fb      	strb	r3, [r7, #23]
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9f2      	bls.n	8001838 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001868:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800186a:	2300      	movs	r3, #0
 800186c:	75fb      	strb	r3, [r7, #23]
 800186e:	e021      	b.n	80018b4 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800187c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001884:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	3301      	adds	r3, #1
 80018b2:	75fb      	strb	r3, [r7, #23]
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d9da      	bls.n	8001870 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d107      	bne.n	80018f8 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80018ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	75fb      	strb	r3, [r7, #23]
 80018fc:	e009      	b.n	8001912 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fe10 	bl	800152c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	3301      	adds	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d9f2      	bls.n	80018fe <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	0800a210 	.word	0x0800a210

08001924 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7b1b      	ldrb	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2201      	movs	r2, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4013      	ands	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7b5b      	ldrb	r3, [r3, #13]
 8001968:	b25b      	sxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	db29      	blt.n	80019c2 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d10a      	bne.n	800198e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001978:	2308      	movs	r3, #8
 800197a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001982:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800198c:	e00c      	b.n	80019a8 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800199e:	f023 021f 	bic.w	r2, r3, #31
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	7b52      	ldrb	r2, [r2, #13]
 80019b2:	b251      	sxtb	r1, r2
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	431a      	orrs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	3280      	adds	r2, #128	; 0x80
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <_sbrk+0x5c>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <_sbrk+0x60>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x5c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3303      	adds	r3, #3
 8001a20:	f023 0303 	bic.w	r3, r3, #3
 8001a24:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <_sbrk+0x5c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <_sbrk+0x64>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <_sbrk+0x5c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <_sbrk+0x5c>)
 8001a3e:	6013      	str	r3, [r2, #0]
    return (base);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	e006      	b.n	8001a52 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001a44:	f005 fd4e 	bl	80074e4 <__errno>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	1ffe8a04 	.word	0x1ffe8a04
 8001a60:	20000000 	.word	0x20000000
 8001a64:	2003ffc0 	.word	0x2003ffc0

08001a68 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2201      	movs	r2, #1
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	605a      	str	r2, [r3, #4]
}
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	605a      	str	r2, [r3, #4]
}
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7c1b      	ldrb	r3, [r3, #16]
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff ffc6 	bl	8001a68 <XMC_GPIO_SetOutputHigh>
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7c1b      	ldrb	r3, [r3, #16]
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff ffc6 	bl	8001a88 <XMC_GPIO_SetOutputLow>
}
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop

08001b04 <EVE_pdn_set>:
			extern void delay_ms(uint32_t ms);
			#define DELAY_MS(ms) delay_ms(ms) // redefinition needed to allow for mutliple targets



			static inline void EVE_pdn_set(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
				DIGITAL_IO_SetOutputLow(&IO_DIO_DIGOUT_PD_TFT); /* Power-Down low */
 8001b08:	4801      	ldr	r0, [pc, #4]	; (8001b10 <EVE_pdn_set+0xc>)
 8001b0a:	f7ff ffeb 	bl	8001ae4 <DIGITAL_IO_SetOutputLow>
			}
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	0800f410 	.word	0x0800f410

08001b14 <EVE_pdn_clear>:

			static inline void EVE_pdn_clear(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
				DIGITAL_IO_SetOutputHigh(&IO_DIO_DIGOUT_PD_TFT); /* Power-Down high */
 8001b18:	4801      	ldr	r0, [pc, #4]	; (8001b20 <EVE_pdn_clear+0xc>)
 8001b1a:	f7ff ffd3 	bl	8001ac4 <DIGITAL_IO_SetOutputHigh>
			}
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	0800f410 	.word	0x0800f410

08001b24 <EVE_cs_set>:

			static inline void EVE_cs_set(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
				DIGITAL_IO_SetOutputLow(&IO_DIO_DIGOUT_CS_TFT); /* manually set chip-select to low */
 8001b28:	4801      	ldr	r0, [pc, #4]	; (8001b30 <EVE_cs_set+0xc>)
 8001b2a:	f7ff ffdb 	bl	8001ae4 <DIGITAL_IO_SetOutputLow>
			}
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	0800f424 	.word	0x0800f424

08001b34 <EVE_cs_clear>:

			static inline void EVE_cs_clear(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
				DIGITAL_IO_SetOutputHigh(&IO_DIO_DIGOUT_CS_TFT); /* manually set chip-select to high */
 8001b38:	4801      	ldr	r0, [pc, #4]	; (8001b40 <EVE_cs_clear+0xc>)
 8001b3a:	f7ff ffc3 	bl	8001ac4 <DIGITAL_IO_SetOutputHigh>
			}
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	0800f424 	.word	0x0800f424

08001b44 <spi_transmit>:

			static inline void spi_transmit(uint8_t data) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
				// Transmit a byte and wait till its finished
				SPI_MASTER_Transmit(&SPI_MASTER_0, &data, sizeof(data));
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <spi_transmit+0x34>)
 8001b52:	4619      	mov	r1, r3
 8001b54:	2201      	movs	r2, #1
 8001b56:	f002 fc55 	bl	8004404 <SPI_MASTER_Transmit>
				while (XMC_SPI_CH_GetStatusFlag(SPI_MASTER_0.channel) & XMC_SPI_CH_STATUS_FLAG_MSLS) __NOP();
 8001b5a:	e000      	b.n	8001b5e <spi_transmit+0x1a>
 8001b5c:	bf00      	nop
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <spi_transmit+0x34>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ffa2 	bl	8001aac <XMC_SPI_CH_GetStatusFlag>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f4      	bne.n	8001b5c <spi_transmit+0x18>
			}
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	1ffe88bc 	.word	0x1ffe88bc

08001b7c <spi_transmit_32>:

			static inline void spi_transmit_32(uint32_t data) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
				// Transmit 4 byte
				spi_transmit((uint8_t)(data));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffdb 	bl	8001b44 <spi_transmit>
				spi_transmit((uint8_t)(data >> 8));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ffd5 	bl	8001b44 <spi_transmit>
				spi_transmit((uint8_t)(data >> 16));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ffcf 	bl	8001b44 <spi_transmit>
				spi_transmit((uint8_t)(data >> 24));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0e1b      	lsrs	r3, r3, #24
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ffc9 	bl	8001b44 <spi_transmit>
			}
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <spi_transmit_burst>:

			/* spi_transmit_burst() is only used for cmd-FIFO commands so it *always* has to transfer 4 bytes */
			static inline void spi_transmit_burst(uint32_t data) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
				spi_transmit_32(data);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ffdb 	bl	8001b7c <spi_transmit_32>
			}
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <spi_receive>:

			static inline uint8_t spi_receive(uint8_t data) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
				//SPI_MASTER_Transmit(&SPI_MASTER_0, &data, sizeof(data));
				//while (XMC_SPI_CH_GetStatusFlag(SPI_MASTER_0.channel) & XMC_SPI_CH_STATUS_FLAG_MSLS) __NOP();

				// Receive a byte and wait till its finished
				ReadData = 42;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <spi_receive+0x34>)
 8001bd8:	222a      	movs	r2, #42	; 0x2a
 8001bda:	701a      	strb	r2, [r3, #0]
				SPI_MASTER_Receive(&SPI_MASTER_0, &ReadData, sizeof(ReadData)); //SPI_ReceiveByte(data);
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <spi_receive+0x38>)
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <spi_receive+0x34>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	f002 fc29 	bl	8004438 <SPI_MASTER_Receive>
				while(SPI_MASTER_0.runtime->rx_busy){}
 8001be6:	bf00      	nop
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <spi_receive+0x38>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	7fdb      	ldrb	r3, [r3, #31]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f9      	bne.n	8001be8 <spi_receive+0x1c>

				// Return byte
				return (uint8_t) ReadData;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <spi_receive+0x34>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
			}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	1ffe8e6c 	.word	0x1ffe8e6c
 8001c04:	1ffe88bc 	.word	0x1ffe88bc

08001c08 <fetch_flash_byte>:

			static inline uint8_t fetch_flash_byte(const uint8_t *data) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
				return *data;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	781b      	ldrb	r3, [r3, #0]
			}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <EVE_cmdWrite>:
/*----------------------------------------------------------------------------------------------------------------------------*/
/*---- helper functions ------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------------*/

void EVE_cmdWrite(uint8_t command, uint8_t parameter)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
	EVE_cs_set();
 8001c30:	f7ff ff78 	bl	8001b24 <EVE_cs_set>
	spi_transmit(command);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff84 	bl	8001b44 <spi_transmit>
	spi_transmit(parameter);
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff80 	bl	8001b44 <spi_transmit>
	spi_transmit(0x00);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff ff7d 	bl	8001b44 <spi_transmit>
	EVE_cs_clear();
 8001c4a:	f7ff ff73 	bl	8001b34 <EVE_cs_clear>
}
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <EVE_memRead8>:


uint8_t EVE_memRead8(uint32_t ftAddress)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	uint8_t ftData8;
	EVE_cs_set();
 8001c5c:	f7ff ff62 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_READ); /* send Memory Write plus high address byte */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff6c 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff66 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress));	/* send low address byte */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff61 	bl	8001b44 <spi_transmit>
	spi_transmit(0x00);	/* send dummy byte */
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff ff5e 	bl	8001b44 <spi_transmit>
	ftData8 = spi_receive(0x00); /* read data byte by sending another dummy byte */
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff ff9f 	bl	8001bcc <spi_receive>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]
	EVE_cs_clear();
 8001c92:	f7ff ff4f 	bl	8001b34 <EVE_cs_clear>
	return ftData8;	/* return byte read */
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <EVE_memRead16>:


uint16_t EVE_memRead16(uint32_t ftAddress)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	uint16_t ftData16 = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	81fb      	strh	r3, [r7, #14]
	EVE_cs_set();
 8001cac:	f7ff ff3a 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_READ); /* send Memory Write plus high address byte */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0c1b      	lsrs	r3, r3, #16
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff44 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff3e 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress)); /* send low address byte */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff39 	bl	8001b44 <spi_transmit>
	spi_transmit(0x00);	/* send dummy byte */
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff ff36 	bl	8001b44 <spi_transmit>
	ftData16 = (spi_receive(0x00));	/* read low byte */
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff ff77 	bl	8001bcc <spi_receive>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	81fb      	strh	r3, [r7, #14]
	ftData16 = (spi_receive(0x00) << 8) | ftData16;	/* read high byte */
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff ff72 	bl	8001bcc <spi_receive>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	81fb      	strh	r3, [r7, #14]
	EVE_cs_clear();
 8001cf6:	f7ff ff1d 	bl	8001b34 <EVE_cs_clear>
	return ftData16; /* return integer read */
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <EVE_memRead32>:


uint32_t EVE_memRead32(uint32_t ftAddress)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	uint32_t ftData32= 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
	EVE_cs_set();
 8001d10:	f7ff ff08 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_READ); /* send Memory Write plus high address byte */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff12 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff0c 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress));	/* send low address byte */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff07 	bl	8001b44 <spi_transmit>
	spi_transmit(0x00);	/* send dummy byte */
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff ff04 	bl	8001b44 <spi_transmit>
	ftData32 = ((uint32_t)spi_receive(0x00)); /* read low byte */
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff ff45 	bl	8001bcc <spi_receive>
 8001d42:	4603      	mov	r3, r0
 8001d44:	60fb      	str	r3, [r7, #12]
	ftData32 = ((uint32_t)spi_receive(0x00) << 8) | ftData32;
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff ff40 	bl	8001bcc <spi_receive>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
	ftData32 = ((uint32_t)spi_receive(0x00) << 16) | ftData32;
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff ff38 	bl	8001bcc <spi_receive>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
	ftData32 = ((uint32_t)spi_receive(0x00) << 24) | ftData32; /* read high byte */
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff ff30 	bl	8001bcc <spi_receive>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	061b      	lsls	r3, r3, #24
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
	EVE_cs_clear();
 8001d76:	f7ff fedd 	bl	8001b34 <EVE_cs_clear>
	return ftData32; /* return long read */
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <EVE_memWrite8>:


void EVE_memWrite8(uint32_t ftAddress, uint8_t ftData8)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
	EVE_cs_set();
 8001d90:	f7ff fec8 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fecf 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fec9 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fec4 	bl	8001b44 <spi_transmit>
	spi_transmit(ftData8);
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fec0 	bl	8001b44 <spi_transmit>
	EVE_cs_clear();
 8001dc4:	f7ff feb6 	bl	8001b34 <EVE_cs_clear>
}
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop

08001dd0 <EVE_memWrite16>:


void EVE_memWrite16(uint32_t ftAddress, uint16_t ftData16)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
	EVE_cs_set();
 8001ddc:	f7ff fea2 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fea9 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fea3 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress)); /* send low address byte */
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe9e 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftData16)); /* send data low byte */
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe99 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftData16 >> 8));  /* send data high byte */
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe92 	bl	8001b44 <spi_transmit>
	EVE_cs_clear();
 8001e20:	f7ff fe88 	bl	8001b34 <EVE_cs_clear>
}
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop

08001e2c <EVE_memWrite32>:


void EVE_memWrite32(uint32_t ftAddress, uint32_t ftData32)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	EVE_cs_set();
 8001e36:	f7ff fe75 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fe7c 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fe76 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress)); /* send low address byte */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe71 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftData32)); /* send data low byte */
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe6c 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftData32 >> 8));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fe66 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftData32 >> 16));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe60 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftData32 >> 24)); /* send data high byte */
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	0e1b      	lsrs	r3, r3, #24
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fe5a 	bl	8001b44 <spi_transmit>
	EVE_cs_clear();
 8001e90:	f7ff fe50 	bl	8001b34 <EVE_cs_clear>
}
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop

08001e9c <EVE_busy>:

/* Check if the graphics processor completed executing the current command list. */
/* REG_CMDB_SPACE == 0xffc -> command fifo is empty */
/* (REG_CMDB_SPACE & 0x03) != 0 -> we have a co-processor fault */
uint8_t EVE_busy(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	{
		return 1;
	}
	#endif

	space = EVE_memRead16(REG_CMDB_SPACE);
 8001ea2:	4831      	ldr	r0, [pc, #196]	; (8001f68 <EVE_busy+0xcc>)
 8001ea4:	f7ff fefc 	bl	8001ca0 <EVE_memRead16>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	80fb      	strh	r3, [r7, #6]

	if((space & 0x3) != 0) /* we have a co-processor fault, make EVE play with us again */
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d04c      	beq.n	8001f50 <EVE_busy+0xb4>
	{
		printf("EVE_busy - co-processor fault, try to resolve\n");
 8001eb6:	482d      	ldr	r0, [pc, #180]	; (8001f6c <EVE_busy+0xd0>)
 8001eb8:	f006 f808 	bl	8007ecc <puts>
		#if EVE_GEN > 2
		uint16_t copro_patch_pointer;
		uint32_t ftAddress;

		copro_patch_pointer = EVE_memRead16(REG_COPRO_PATCH_DTR);
 8001ebc:	482c      	ldr	r0, [pc, #176]	; (8001f70 <EVE_busy+0xd4>)
 8001ebe:	f7ff feef 	bl	8001ca0 <EVE_memRead16>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80bb      	strh	r3, [r7, #4]
		#endif

		EVE_memWrite8(REG_CPURESET, 1);   /* hold co-processor engine in the reset condition */
 8001ec6:	482b      	ldr	r0, [pc, #172]	; (8001f74 <EVE_busy+0xd8>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	f7ff ff5b 	bl	8001d84 <EVE_memWrite8>
		EVE_memWrite16(REG_CMD_READ, 0);  /* set REG_CMD_READ to 0 */
 8001ece:	482a      	ldr	r0, [pc, #168]	; (8001f78 <EVE_busy+0xdc>)
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	f7ff ff7d 	bl	8001dd0 <EVE_memWrite16>
		EVE_memWrite16(REG_CMD_WRITE, 0); /* set REG_CMD_WRITE to 0 */
 8001ed6:	4829      	ldr	r0, [pc, #164]	; (8001f7c <EVE_busy+0xe0>)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	f7ff ff79 	bl	8001dd0 <EVE_memWrite16>
		EVE_memWrite32(REG_CMD_DL, 0);    /* reset REG_CMD_DL to 0 as required by the BT81x programming guide, should not hurt FT8xx */
 8001ede:	4828      	ldr	r0, [pc, #160]	; (8001f80 <EVE_busy+0xe4>)
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f7ff ffa3 	bl	8001e2c <EVE_memWrite32>
		EVE_memWrite8(REG_CPURESET, 0);  /* set REG_CMD_WRITE to 0 to restart the co-processor engine*/
 8001ee6:	4823      	ldr	r0, [pc, #140]	; (8001f74 <EVE_busy+0xd8>)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f7ff ff4b 	bl	8001d84 <EVE_memWrite8>

		#if EVE_GEN > 2

		EVE_memWrite16(REG_COPRO_PATCH_DTR, copro_patch_pointer);
 8001eee:	88bb      	ldrh	r3, [r7, #4]
 8001ef0:	481f      	ldr	r0, [pc, #124]	; (8001f70 <EVE_busy+0xd4>)
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7ff ff6c 	bl	8001dd0 <EVE_memWrite16>
		DELAY_MS(5); /* just to be safe */
 8001ef8:	2005      	movs	r0, #5
 8001efa:	f003 facd 	bl	8005498 <delay_ms>
		ftAddress = REG_CMDB_WRITE;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <EVE_busy+0xe8>)
 8001f00:	603b      	str	r3, [r7, #0]

		EVE_cs_set();
 8001f02:	f7ff fe0f 	bl	8001b24 <EVE_cs_set>
		spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fe16 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe10 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(ftAddress)); /* send low address byte */
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe0b 	bl	8001b44 <spi_transmit>

		spi_transmit_32(CMD_FLASHATTACH);
 8001f2e:	f06f 00b6 	mvn.w	r0, #182	; 0xb6
 8001f32:	f7ff fe23 	bl	8001b7c <spi_transmit_32>
		spi_transmit_32(CMD_FLASHFAST);
 8001f36:	f06f 00b5 	mvn.w	r0, #181	; 0xb5
 8001f3a:	f7ff fe1f 	bl	8001b7c <spi_transmit_32>
		EVE_cs_clear();
 8001f3e:	f7ff fdf9 	bl	8001b34 <EVE_cs_clear>

		EVE_memWrite8(REG_PCLK, EVE_PCLK); /* restore REG_PCLK in case it was set to zero by an error */
 8001f42:	4811      	ldr	r0, [pc, #68]	; (8001f88 <EVE_busy+0xec>)
 8001f44:	2107      	movs	r1, #7
 8001f46:	f7ff ff1d 	bl	8001d84 <EVE_memWrite8>
		DELAY_MS(5); /* just to be safe */
 8001f4a:	2005      	movs	r0, #5
 8001f4c:	f003 faa4 	bl	8005498 <delay_ms>

		#endif
	}

	if(space != 0xffc) // Note RS 15.15.2020: Somehow space is always wrong...
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d001      	beq.n	8001f5e <EVE_busy+0xc2>
	{
		//printf("EVE_busy - space != 0xffc was '%X'\n", space);
		return 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <EVE_busy+0xc4>
	}
	else
	{
		return 0;
 8001f5e:	2300      	movs	r3, #0
	}
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	00302574 	.word	0x00302574
 8001f6c:	0800a220 	.word	0x0800a220
 8001f70:	00309162 	.word	0x00309162
 8001f74:	00302020 	.word	0x00302020
 8001f78:	003020f8 	.word	0x003020f8
 8001f7c:	003020fc 	.word	0x003020fc
 8001f80:	00302100 	.word	0x00302100
 8001f84:	00302578 	.word	0x00302578
 8001f88:	00302070 	.word	0x00302070

08001f8c <EVE_begin_cmd>:
/*----------------------------------------------------------------------------------------------------------------------------*/


/* begin a co-processor command, this is used for non-display-list commands */
void EVE_begin_cmd(uint32_t command)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	uint32_t ftAddress;

	ftAddress = REG_CMDB_WRITE;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <EVE_begin_cmd+0x44>)
 8001f96:	60fb      	str	r3, [r7, #12]
	EVE_cs_set();
 8001f98:	f7ff fdc4 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	0c1b      	lsrs	r3, r3, #16
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fdcb 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fdc5 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress));      /* send low address byte */
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fdc0 	bl	8001b44 <spi_transmit>
	spi_transmit_32(command);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fdd9 	bl	8001b7c <spi_transmit_32>
}
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	00302578 	.word	0x00302578

08001fd4 <spi_flash_write>:


void spi_flash_write(const uint8_t *data, uint16_t len)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
	uint16_t count;
	uint8_t padding;

	padding = len & 0x03; /* 0, 1, 2 or 3 */
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	737b      	strb	r3, [r7, #13]
	padding = 4-padding; /* 4, 3, 2 or 1 */
 8001fea:	7b7b      	ldrb	r3, [r7, #13]
 8001fec:	f1c3 0304 	rsb	r3, r3, #4
 8001ff0:	737b      	strb	r3, [r7, #13]
	padding &= 3; /* 3, 2 or 1 */
 8001ff2:	7b7b      	ldrb	r3, [r7, #13]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	737b      	strb	r3, [r7, #13]

	for(count=0;count<len;count++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	81fb      	strh	r3, [r7, #14]
 8001ffe:	e00c      	b.n	800201a <spi_flash_write+0x46>
	{
		spi_transmit(fetch_flash_byte(data+count));
 8002000:	89fb      	ldrh	r3, [r7, #14]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fdfe 	bl	8001c08 <fetch_flash_byte>
 800200c:	4603      	mov	r3, r0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd98 	bl	8001b44 <spi_transmit>

	padding = len & 0x03; /* 0, 1, 2 or 3 */
	padding = 4-padding; /* 4, 3, 2 or 1 */
	padding &= 3; /* 3, 2 or 1 */

	for(count=0;count<len;count++)
 8002014:	89fb      	ldrh	r3, [r7, #14]
 8002016:	3301      	adds	r3, #1
 8002018:	81fb      	strh	r3, [r7, #14]
 800201a:	89fa      	ldrh	r2, [r7, #14]
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	429a      	cmp	r2, r3
 8002020:	d3ee      	bcc.n	8002000 <spi_flash_write+0x2c>
	{
		spi_transmit(fetch_flash_byte(data+count));
	}

	len += padding;
 8002022:	7b7b      	ldrb	r3, [r7, #13]
 8002024:	b29a      	uxth	r2, r3
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	4413      	add	r3, r2
 800202a:	807b      	strh	r3, [r7, #2]

	while(padding > 0)
 800202c:	e005      	b.n	800203a <spi_flash_write+0x66>
	{
		spi_transmit(0);
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff fd88 	bl	8001b44 <spi_transmit>
		padding--;
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	3b01      	subs	r3, #1
 8002038:	737b      	strb	r3, [r7, #13]
		spi_transmit(fetch_flash_byte(data+count));
	}

	len += padding;

	while(padding > 0)
 800203a:	7b7b      	ldrb	r3, [r7, #13]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f6      	bne.n	800202e <spi_flash_write+0x5a>
	{
		spi_transmit(0);
		padding--;
	}
}
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop

08002048 <block_transfer>:


void block_transfer(const uint8_t *data, uint32_t len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	uint32_t bytes_left;

	bytes_left = len;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	617b      	str	r3, [r7, #20]
	while(bytes_left > 0)
 8002056:	e034      	b.n	80020c2 <block_transfer+0x7a>
	{
		uint32_t block_len;
		uint32_t ftAddress;

		block_len = bytes_left>3840 ? 3840:bytes_left;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800205e:	bf28      	it	cs
 8002060:	f44f 6370 	movcs.w	r3, #3840	; 0xf00
 8002064:	613b      	str	r3, [r7, #16]

		ftAddress = REG_CMDB_WRITE;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <block_transfer+0x88>)
 8002068:	60fb      	str	r3, [r7, #12]
		EVE_cs_set();
 800206a:	f7ff fd5b 	bl	8001b24 <EVE_cs_set>
		spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fd62 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fd5c 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(ftAddress)); /* send low address byte */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fd57 	bl	8001b44 <spi_transmit>
		spi_flash_write(data,block_len);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	b29b      	uxth	r3, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4619      	mov	r1, r3
 800209e:	f7ff ff99 	bl	8001fd4 <spi_flash_write>
		EVE_cs_clear();
 80020a2:	f7ff fd47 	bl	8001b34 <EVE_cs_clear>
		data += block_len;
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	607b      	str	r3, [r7, #4]
		bytes_left -= block_len;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
		while (EVE_busy());
 80020b6:	bf00      	nop
 80020b8:	f7ff fef0 	bl	8001e9c <EVE_busy>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1fa      	bne.n	80020b8 <block_transfer+0x70>
void block_transfer(const uint8_t *data, uint32_t len)
{
	uint32_t bytes_left;

	bytes_left = len;
	while(bytes_left > 0)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1c7      	bne.n	8002058 <block_transfer+0x10>
		EVE_cs_clear();
		data += block_len;
		bytes_left -= block_len;
		while (EVE_busy());
	}
}
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00302578 	.word	0x00302578

080020d4 <EVE_cmd_inflate>:
}


/* this is meant to be called outside display-list building, it includes executing the command and waiting for completion, does not support cmd-burst */
void EVE_cmd_inflate(uint32_t ptr, const uint8_t *data, uint32_t len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
	EVE_begin_cmd(CMD_INFLATE);
 80020e0:	f06f 00dd 	mvn.w	r0, #221	; 0xdd
 80020e4:	f7ff ff52 	bl	8001f8c <EVE_begin_cmd>
	spi_transmit_32(ptr);
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff fd47 	bl	8001b7c <spi_transmit_32>
	EVE_cs_clear();
 80020ee:	f7ff fd21 	bl	8001b34 <EVE_cs_clear>
	if(data)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <EVE_cmd_inflate+0x2c>
	{
		block_transfer(data, len);
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f7ff ffa4 	bl	8002048 <block_transfer>
	}
}
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop

08002108 <EVE_cmd_memcpy>:
}


/* this is meant to be called outside display-list building, it includes executing the command and waiting for completion, does not support cmd-burst */
void EVE_cmd_memcpy(uint32_t dest, uint32_t src, uint32_t num)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	EVE_begin_cmd(CMD_MEMCPY);
 8002114:	f06f 00e2 	mvn.w	r0, #226	; 0xe2
 8002118:	f7ff ff38 	bl	8001f8c <EVE_begin_cmd>
	spi_transmit_32(dest);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fd2d 	bl	8001b7c <spi_transmit_32>
	spi_transmit_32(src);
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f7ff fd2a 	bl	8001b7c <spi_transmit_32>
	spi_transmit_32(num);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fd27 	bl	8001b7c <spi_transmit_32>
	EVE_cs_clear();
 800212e:	f7ff fd01 	bl	8001b34 <EVE_cs_clear>
	while (EVE_busy());
 8002132:	bf00      	nop
 8002134:	f7ff feb2 	bl	8001e9c <EVE_busy>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1fa      	bne.n	8002134 <EVE_cmd_memcpy+0x2c>
}
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <EVE_cmd_track>:
}


/* this is meant to be called outside display-list building, it includes executing the command and waiting for completion, does not support cmd-burst */
void EVE_cmd_track(int16_t x0, int16_t y0, int16_t w0, int16_t h0, int16_t tag)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4604      	mov	r4, r0
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4623      	mov	r3, r4
 8002154:	80fb      	strh	r3, [r7, #6]
 8002156:	4603      	mov	r3, r0
 8002158:	80bb      	strh	r3, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	807b      	strh	r3, [r7, #2]
 800215e:	4613      	mov	r3, r2
 8002160:	803b      	strh	r3, [r7, #0]
	EVE_begin_cmd(CMD_TRACK);
 8002162:	f06f 00d3 	mvn.w	r0, #211	; 0xd3
 8002166:	f7ff ff11 	bl	8001f8c <EVE_begin_cmd>

	spi_transmit((uint8_t)(x0));
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fce8 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(x0 >> 8));
 8002174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002178:	121b      	asrs	r3, r3, #8
 800217a:	b29b      	uxth	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fce0 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(y0));
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fcdb 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(y0 >> 8));
 800218e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002192:	121b      	asrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fcd3 	bl	8001b44 <spi_transmit>

	spi_transmit((uint8_t)(w0));
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fcce 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(w0 >> 8));
 80021a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021ac:	121b      	asrs	r3, r3, #8
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fcc6 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(h0));
 80021b8:	883b      	ldrh	r3, [r7, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fcc1 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(h0 >> 8));
 80021c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021c6:	121b      	asrs	r3, r3, #8
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fcb9 	bl	8001b44 <spi_transmit>

	spi_transmit((uint8_t)(tag));
 80021d2:	8b3b      	ldrh	r3, [r7, #24]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fcb4 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(tag >> 8));
 80021dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80021e0:	121b      	asrs	r3, r3, #8
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fcac 	bl	8001b44 <spi_transmit>
	spi_transmit(0);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff fca9 	bl	8001b44 <spi_transmit>
	spi_transmit(0);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff fca6 	bl	8001b44 <spi_transmit>

	EVE_cs_clear();
 80021f8:	f7ff fc9c 	bl	8001b34 <EVE_cs_clear>
	while (EVE_busy());
 80021fc:	bf00      	nop
 80021fe:	f7ff fe4d 	bl	8001e9c <EVE_busy>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1fa      	bne.n	80021fe <EVE_cmd_track+0xba>
}
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop

08002210 <EVE_init>:
#endif


/* init, has to be executed with the SPI setup to 11 MHz or less as required by FT8xx / BT8xx */
uint8_t EVE_init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	uint8_t chipid = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	71fb      	strb	r3, [r7, #7]
	uint16_t timeout = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	80bb      	strh	r3, [r7, #4]

	EVE_pdn_set();
 800221e:	f7ff fc71 	bl	8001b04 <EVE_pdn_set>
	DELAY_MS(6); /* minimum time for power-down is 5ms */
 8002222:	2006      	movs	r0, #6
 8002224:	f003 f938 	bl	8005498 <delay_ms>
	EVE_pdn_clear();
 8002228:	f7ff fc74 	bl	8001b14 <EVE_pdn_clear>
	DELAY_MS(21); /* minimum time to allow from rising PD_N to first access is 20ms */
 800222c:	2015      	movs	r0, #21
 800222e:	f003 f933 	bl	8005498 <delay_ms>

	//EVE_cmdWrite(EVE_CORERST,0);  /* reset, only required for warm-start if PowerDown line is not used */ // RS:05.12

	#if defined (EVE_HAS_CRYSTAL)
	EVE_cmdWrite(EVE_CLKEXT,0);	/* setup EVE for external clock -   EVE_CLKEXT = 0x44  */
 8002232:	2044      	movs	r0, #68	; 0x44
 8002234:	2100      	movs	r1, #0
 8002236:	f7ff fcf3 	bl	8001c20 <EVE_cmdWrite>
	#else
	EVE_cmdWrite(EVE_CLKINT,0);	/* setup EVE for internal clock */
	#endif

	#if EVE_GEN > 2
	EVE_cmdWrite(EVE_CLKSEL,0x46); /* set clock to 72 MHz */
 800223a:	2061      	movs	r0, #97	; 0x61
 800223c:	2146      	movs	r1, #70	; 0x46
 800223e:	f7ff fcef 	bl	8001c20 <EVE_cmdWrite>
	#endif

	EVE_cmdWrite(EVE_ACTIVE,0);	/* start EVE */
 8002242:	2000      	movs	r0, #0
 8002244:	2100      	movs	r1, #0
 8002246:	f7ff fceb 	bl	8001c20 <EVE_cmdWrite>
	/* I asked Bridgetek for clarification why this has been made stricter. */
	/* From observation with quite a few of different displays I do not agree that either the 300ms are necessary or that */
	/* *reading* the SPI while EVE inits itself is causing any issues. */
	/* But since BT815 at 72MHz need 42ms anyways before they start to answer, here is my compromise, a fixed 40ms delay */
	/* to provide at least a short moment of silence for EVE */
	DELAY_MS(40);
 800224a:	2028      	movs	r0, #40	; 0x28
 800224c:	f003 f924 	bl	8005498 <delay_ms>

	while(chipid != 0x7C) /* if chipid is not 0x7c, continue to read it until it is, EVE needs a moment for it's power on self-test and configuration */
 8002250:	e015      	b.n	800227e <EVE_init+0x6e>
	{
		DELAY_MS(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f003 f920 	bl	8005498 <delay_ms>
		chipid = EVE_memRead8(REG_ID);
 8002258:	4865      	ldr	r0, [pc, #404]	; (80023f0 <EVE_init+0x1e0>)
 800225a:	f7ff fcfb 	bl	8001c54 <EVE_memRead8>
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
		timeout++;
 8002262:	88bb      	ldrh	r3, [r7, #4]
 8002264:	3301      	adds	r3, #1
 8002266:	80bb      	strh	r3, [r7, #4]
		if(timeout > 400)
 8002268:	88bb      	ldrh	r3, [r7, #4]
 800226a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800226e:	d906      	bls.n	800227e <EVE_init+0x6e>
		{
			printf("EVE_init Failed - chipid != 0x7C was '%04X'\n", chipid);
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	4860      	ldr	r0, [pc, #384]	; (80023f4 <EVE_init+0x1e4>)
 8002274:	4619      	mov	r1, r3
 8002276:	f005 fdb3 	bl	8007de0 <iprintf>
			return 0;
 800227a:	2300      	movs	r3, #0
 800227c:	e0b4      	b.n	80023e8 <EVE_init+0x1d8>
	/* *reading* the SPI while EVE inits itself is causing any issues. */
	/* But since BT815 at 72MHz need 42ms anyways before they start to answer, here is my compromise, a fixed 40ms delay */
	/* to provide at least a short moment of silence for EVE */
	DELAY_MS(40);

	while(chipid != 0x7C) /* if chipid is not 0x7c, continue to read it until it is, EVE needs a moment for it's power on self-test and configuration */
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b7c      	cmp	r3, #124	; 0x7c
 8002282:	d1e6      	bne.n	8002252 <EVE_init+0x42>
		{
			printf("EVE_init Failed - chipid != 0x7C was '%04X'\n", chipid);
			return 0;
		}
	}
	printf("EVE_init - chipid 0x7C OK was '%04X'\n", chipid);
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	485c      	ldr	r0, [pc, #368]	; (80023f8 <EVE_init+0x1e8>)
 8002288:	4619      	mov	r1, r3
 800228a:	f005 fda9 	bl	8007de0 <iprintf>

	timeout = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	80bb      	strh	r3, [r7, #4]
	while (0x00 != (EVE_memRead8(REG_CPURESET) & 0x03)) /* check if EVE is in working status */
 8002292:	e00e      	b.n	80022b2 <EVE_init+0xa2>
	{
		DELAY_MS(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f003 f8ff 	bl	8005498 <delay_ms>
		timeout++;
 800229a:	88bb      	ldrh	r3, [r7, #4]
 800229c:	3301      	adds	r3, #1
 800229e:	80bb      	strh	r3, [r7, #4]
		if(timeout > 500) /* experimental, 10 was the lowest value to get the BT815 started with, the touch-controller was the last to get out of reset */
 80022a0:	88bb      	ldrh	r3, [r7, #4]
 80022a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022a6:	d904      	bls.n	80022b2 <EVE_init+0xa2>
		{
			printf("EVE_init Failed - EVE working status no ok\n");
 80022a8:	4854      	ldr	r0, [pc, #336]	; (80023fc <EVE_init+0x1ec>)
 80022aa:	f005 fe0f 	bl	8007ecc <puts>
			return 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e09a      	b.n	80023e8 <EVE_init+0x1d8>
		}
	}
	printf("EVE_init - chipid 0x7C OK was '%04X'\n", chipid);

	timeout = 0;
	while (0x00 != (EVE_memRead8(REG_CPURESET) & 0x03)) /* check if EVE is in working status */
 80022b2:	4853      	ldr	r0, [pc, #332]	; (8002400 <EVE_init+0x1f0>)
 80022b4:	f7ff fcce 	bl	8001c54 <EVE_memRead8>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e8      	bne.n	8002294 <EVE_init+0x84>
		{
			printf("EVE_init Failed - EVE working status no ok\n");
			return 0;
		}
	}
	printf("EVE_init - EVE working status OK!\n");
 80022c2:	4850      	ldr	r0, [pc, #320]	; (8002404 <EVE_init+0x1f4>)
 80022c4:	f005 fe02 	bl	8007ecc <puts>

	/* tell EVE that we changed the frequency from default to 72MHz for BT8xx */
	#if EVE_GEN > 2
	EVE_memWrite32(REG_FREQUENCY, 72000000);
 80022c8:	484f      	ldr	r0, [pc, #316]	; (8002408 <EVE_init+0x1f8>)
 80022ca:	4950      	ldr	r1, [pc, #320]	; (800240c <EVE_init+0x1fc>)
 80022cc:	f7ff fdae 	bl	8001e2c <EVE_memWrite32>
	/*	EVE_memWrite8(REG_PCLK, 0x00);	*/	/* set PCLK to zero - don't clock the LCD until later, line disabled because zero is reset-default and we just did a reset */

	#if defined (EVE_ADAM101)
	EVE_memWrite8(REG_PWM_DUTY, 0x80); /* turn off backlight for Glyn ADAM101 module, it uses inverted values */
	#else
	EVE_memWrite8(REG_PWM_DUTY, 0); /* turn off backlight for any other module */
 80022d0:	484f      	ldr	r0, [pc, #316]	; (8002410 <EVE_init+0x200>)
 80022d2:	2100      	movs	r1, #0
 80022d4:	f7ff fd56 	bl	8001d84 <EVE_memWrite8>
	#endif

	/* Initialize Display */
	EVE_memWrite16(REG_HSIZE,   EVE_HSIZE);   /* active display width */
 80022d8:	484e      	ldr	r0, [pc, #312]	; (8002414 <EVE_init+0x204>)
 80022da:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80022de:	f7ff fd77 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_HCYCLE,  EVE_HCYCLE);  /* total number of clocks per line, incl front/back porch */
 80022e2:	484d      	ldr	r0, [pc, #308]	; (8002418 <EVE_init+0x208>)
 80022e4:	f44f 7109 	mov.w	r1, #548	; 0x224
 80022e8:	f7ff fd72 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_HOFFSET, EVE_HOFFSET); /* start of active line */
 80022ec:	484b      	ldr	r0, [pc, #300]	; (800241c <EVE_init+0x20c>)
 80022ee:	212b      	movs	r1, #43	; 0x2b
 80022f0:	f7ff fd6e 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_HSYNC0,  EVE_HSYNC0);  /* start of horizontal sync pulse */
 80022f4:	484a      	ldr	r0, [pc, #296]	; (8002420 <EVE_init+0x210>)
 80022f6:	2100      	movs	r1, #0
 80022f8:	f7ff fd6a 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_HSYNC1,  EVE_HSYNC1);  /* end of horizontal sync pulse */
 80022fc:	4849      	ldr	r0, [pc, #292]	; (8002424 <EVE_init+0x214>)
 80022fe:	2129      	movs	r1, #41	; 0x29
 8002300:	f7ff fd66 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_VSIZE,   EVE_VSIZE);   /* active display height */
 8002304:	4848      	ldr	r0, [pc, #288]	; (8002428 <EVE_init+0x218>)
 8002306:	f44f 7188 	mov.w	r1, #272	; 0x110
 800230a:	f7ff fd61 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_VCYCLE,  EVE_VCYCLE);  /* total number of lines per screen, including pre/post */
 800230e:	4847      	ldr	r0, [pc, #284]	; (800242c <EVE_init+0x21c>)
 8002310:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002314:	f7ff fd5c 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_VOFFSET, EVE_VOFFSET); /* start of active screen */
 8002318:	4845      	ldr	r0, [pc, #276]	; (8002430 <EVE_init+0x220>)
 800231a:	210c      	movs	r1, #12
 800231c:	f7ff fd58 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_VSYNC0,  EVE_VSYNC0);  /* start of vertical sync pulse */
 8002320:	4844      	ldr	r0, [pc, #272]	; (8002434 <EVE_init+0x224>)
 8002322:	2100      	movs	r1, #0
 8002324:	f7ff fd54 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite16(REG_VSYNC1,  EVE_VSYNC1);  /* end of vertical sync pulse */
 8002328:	4843      	ldr	r0, [pc, #268]	; (8002438 <EVE_init+0x228>)
 800232a:	210a      	movs	r1, #10
 800232c:	f7ff fd50 	bl	8001dd0 <EVE_memWrite16>
	EVE_memWrite8(REG_SWIZZLE,  EVE_SWIZZLE); /* FT8xx output to LCD - pin order */
 8002330:	4842      	ldr	r0, [pc, #264]	; (800243c <EVE_init+0x22c>)
 8002332:	2100      	movs	r1, #0
 8002334:	f7ff fd26 	bl	8001d84 <EVE_memWrite8>
	EVE_memWrite8(REG_PCLK_POL, EVE_PCLKPOL); /* LCD data is clocked in on this PCLK edge */
 8002338:	4841      	ldr	r0, [pc, #260]	; (8002440 <EVE_init+0x230>)
 800233a:	2101      	movs	r1, #1
 800233c:	f7ff fd22 	bl	8001d84 <EVE_memWrite8>
	EVE_memWrite8(REG_CSPREAD,	EVE_CSPREAD); /* helps with noise, when set to 1 fewer signals are changed simultaneously, reset-default: 1 */
 8002340:	4840      	ldr	r0, [pc, #256]	; (8002444 <EVE_init+0x234>)
 8002342:	2101      	movs	r1, #1
 8002344:	f7ff fd1e 	bl	8001d84 <EVE_memWrite8>
	printf("EVE_init - Display initialized!\n");
 8002348:	483f      	ldr	r0, [pc, #252]	; (8002448 <EVE_init+0x238>)
 800234a:	f005 fdbf 	bl	8007ecc <puts>

	/* do not set PCLK yet - wait for just after the first display list */

	/* configure Touch */
	EVE_memWrite8(REG_TOUCH_MODE, EVE_TMODE_CONTINUOUS); /* enable touch */
 800234e:	483f      	ldr	r0, [pc, #252]	; (800244c <EVE_init+0x23c>)
 8002350:	2103      	movs	r1, #3
 8002352:	f7ff fd17 	bl	8001d84 <EVE_memWrite8>
	EVE_memWrite16(REG_TOUCH_RZTHRESH, EVE_TOUCH_RZTHRESH);	/* eliminate any false touches */
 8002356:	483e      	ldr	r0, [pc, #248]	; (8002450 <EVE_init+0x240>)
 8002358:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800235c:	f7ff fd38 	bl	8001dd0 <EVE_memWrite16>

	/* disable Audio for now */
	EVE_memWrite8(REG_VOL_PB, 0x00); /* turn recorded audio volume down */
 8002360:	483c      	ldr	r0, [pc, #240]	; (8002454 <EVE_init+0x244>)
 8002362:	2100      	movs	r1, #0
 8002364:	f7ff fd0e 	bl	8001d84 <EVE_memWrite8>
	EVE_memWrite8(REG_VOL_SOUND, 0x00); /* turn synthesizer volume off */
 8002368:	483b      	ldr	r0, [pc, #236]	; (8002458 <EVE_init+0x248>)
 800236a:	2100      	movs	r1, #0
 800236c:	f7ff fd0a 	bl	8001d84 <EVE_memWrite8>
	EVE_memWrite16(REG_SOUND, 0x6000); /* set synthesizer to mute */
 8002370:	483a      	ldr	r0, [pc, #232]	; (800245c <EVE_init+0x24c>)
 8002372:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002376:	f7ff fd2b 	bl	8001dd0 <EVE_memWrite16>

	/* write a basic display-list to get things started */
	EVE_memWrite32(EVE_RAM_DL, DL_CLEAR_RGB);
 800237a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800237e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002382:	f7ff fd53 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(EVE_RAM_DL + 4, (DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG));
 8002386:	4836      	ldr	r0, [pc, #216]	; (8002460 <EVE_init+0x250>)
 8002388:	4936      	ldr	r1, [pc, #216]	; (8002464 <EVE_init+0x254>)
 800238a:	f7ff fd4f 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(EVE_RAM_DL + 8, DL_DISPLAY);	/* end of display list */
 800238e:	4836      	ldr	r0, [pc, #216]	; (8002468 <EVE_init+0x258>)
 8002390:	2100      	movs	r1, #0
 8002392:	f7ff fd4b 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(REG_DLSWAP, EVE_DLSWAP_FRAME);
 8002396:	4835      	ldr	r0, [pc, #212]	; (800246c <EVE_init+0x25c>)
 8002398:	2102      	movs	r1, #2
 800239a:	f7ff fd47 	bl	8001e2c <EVE_memWrite32>
	printf("EVE_init - Basic display list written!\n");
 800239e:	4834      	ldr	r0, [pc, #208]	; (8002470 <EVE_init+0x260>)
 80023a0:	f005 fd94 	bl	8007ecc <puts>
	}
	#endif

	#endif

	EVE_memWrite8(REG_GPIO, 0x80); /* enable the DISP signal to the LCD panel, it is set to output in REG_GPIO_DIR by default */
 80023a4:	4833      	ldr	r0, [pc, #204]	; (8002474 <EVE_init+0x264>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	f7ff fcec 	bl	8001d84 <EVE_memWrite8>
	EVE_memWrite8(REG_PCLK, EVE_PCLK); /* now start clocking data to the LCD panel */
 80023ac:	4832      	ldr	r0, [pc, #200]	; (8002478 <EVE_init+0x268>)
 80023ae:	2107      	movs	r1, #7
 80023b0:	f7ff fce8 	bl	8001d84 <EVE_memWrite8>

	#if defined (EVE_ADAM101)
	EVE_memWrite8(REG_PWM_DUTY, 0x60); /* turn on backlight to 25% for Glyn ADAM101 module, it uses inverted values */
	#else
	EVE_memWrite8(REG_PWM_DUTY, 0x20); /* turn on backlight to 25% for any other module */
 80023b4:	4816      	ldr	r0, [pc, #88]	; (8002410 <EVE_init+0x200>)
 80023b6:	2120      	movs	r1, #32
 80023b8:	f7ff fce4 	bl	8001d84 <EVE_memWrite8>
	#endif

	timeout = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	80bb      	strh	r3, [r7, #4]
	while(EVE_busy() == 1) /* just to be safe, should not even enter the loop */
 80023c0:	e009      	b.n	80023d6 <EVE_init+0x1c6>
	{
		DELAY_MS(1);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f003 f868 	bl	8005498 <delay_ms>
		timeout++;
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	3301      	adds	r3, #1
 80023cc:	80bb      	strh	r3, [r7, #4]
		if(timeout > 4)
 80023ce:	88bb      	ldrh	r3, [r7, #4]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d900      	bls.n	80023d6 <EVE_init+0x1c6>
		{
			break; /* something is wrong here, but since we made it this far through the init, just leave the loop */
 80023d4:	e004      	b.n	80023e0 <EVE_init+0x1d0>
	#else
	EVE_memWrite8(REG_PWM_DUTY, 0x20); /* turn on backlight to 25% for any other module */
	#endif

	timeout = 0;
	while(EVE_busy() == 1) /* just to be safe, should not even enter the loop */
 80023d6:	f7ff fd61 	bl	8001e9c <EVE_busy>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d0f0      	beq.n	80023c2 <EVE_init+0x1b2>

	#if defined (EVE_DMA)
	EVE_init_dma(); /* prepare DMA */
	#endif

	printf("EVE_init - Finish\n");
 80023e0:	4826      	ldr	r0, [pc, #152]	; (800247c <EVE_init+0x26c>)
 80023e2:	f005 fd73 	bl	8007ecc <puts>
	return 1;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	00302000 	.word	0x00302000
 80023f4:	0800a250 	.word	0x0800a250
 80023f8:	0800a280 	.word	0x0800a280
 80023fc:	0800a2a8 	.word	0x0800a2a8
 8002400:	00302020 	.word	0x00302020
 8002404:	0800a2d4 	.word	0x0800a2d4
 8002408:	0030200c 	.word	0x0030200c
 800240c:	044aa200 	.word	0x044aa200
 8002410:	003020d4 	.word	0x003020d4
 8002414:	00302034 	.word	0x00302034
 8002418:	0030202c 	.word	0x0030202c
 800241c:	00302030 	.word	0x00302030
 8002420:	00302038 	.word	0x00302038
 8002424:	0030203c 	.word	0x0030203c
 8002428:	00302048 	.word	0x00302048
 800242c:	00302040 	.word	0x00302040
 8002430:	00302044 	.word	0x00302044
 8002434:	0030204c 	.word	0x0030204c
 8002438:	00302050 	.word	0x00302050
 800243c:	00302064 	.word	0x00302064
 8002440:	0030206c 	.word	0x0030206c
 8002444:	00302068 	.word	0x00302068
 8002448:	0800a2f8 	.word	0x0800a2f8
 800244c:	00302104 	.word	0x00302104
 8002450:	00302118 	.word	0x00302118
 8002454:	00302080 	.word	0x00302080
 8002458:	00302084 	.word	0x00302084
 800245c:	00302088 	.word	0x00302088
 8002460:	00300004 	.word	0x00300004
 8002464:	26000007 	.word	0x26000007
 8002468:	00300008 	.word	0x00300008
 800246c:	00302054 	.word	0x00302054
 8002470:	0800a318 	.word	0x0800a318
 8002474:	00302094 	.word	0x00302094
 8002478:	00302070 	.word	0x00302070
 800247c:	0800a340 	.word	0x0800a340

08002480 <EVE_start_cmd_burst>:
These eliminate the overhead of transmitting the command-fifo address with every single command, just wrap a sequence of commands
with these and the address is only transmitted once at the start of the block.
Be careful to not use any functions in the sequence that do not address the command-fifo as for example any EVE_mem...() function.
*/
void EVE_start_cmd_burst(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
	{
		while (EVE_busy()); /* this is a safe-guard to protect segmented display-list building with DMA from overlapping */
	}
#endif

	cmd_burst = 42;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <EVE_start_cmd_burst+0x44>)
 8002488:	222a      	movs	r2, #42	; 0x2a
 800248a:	701a      	strb	r2, [r3, #0]
	ftAddress = REG_CMDB_WRITE;
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <EVE_start_cmd_burst+0x48>)
 800248e:	607b      	str	r3, [r7, #4]
		/* 0x low mid hi 00 */
		EVE_dma_buffer[0] = ((uint8_t)(ftAddress >> 16) | MEM_WRITE) | (ftAddress & 0x0000ff00) |  ((uint8_t)(ftAddress) << 16);
		EVE_dma_buffer[0] = EVE_dma_buffer[0] << 8;
		EVE_dma_buffer_index = 1;
	#else
		EVE_cs_set();
 8002490:	f7ff fb48 	bl	8001b24 <EVE_cs_set>
		spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fb4f 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fb49 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(ftAddress)); /* send low address byte */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fb44 	bl	8001b44 <spi_transmit>
	#endif
}
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	1ffe8a08 	.word	0x1ffe8a08
 80024c8:	00302578 	.word	0x00302578

080024cc <EVE_end_cmd_burst>:


void EVE_end_cmd_burst(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	cmd_burst = 0;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <EVE_end_cmd_burst+0x10>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]

	#if defined (EVE_DMA)
		EVE_start_dma_transfer(); /* begin DMA transfer */
	#else
		EVE_cs_clear();
 80024d6:	f7ff fb2d 	bl	8001b34 <EVE_cs_clear>
	#endif
}
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	1ffe8a08 	.word	0x1ffe8a08

080024e0 <EVE_start_command>:


/* private function, begin a co-processor command, only used for non-burst commands */
void EVE_start_command(uint32_t command)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	uint32_t ftAddress;

	ftAddress = REG_CMDB_WRITE;
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <EVE_start_command+0x44>)
 80024ea:	60fb      	str	r3, [r7, #12]
	EVE_cs_set();
 80024ec:	f7ff fb1a 	bl	8001b24 <EVE_cs_set>
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fb21 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress >> 8)); /* send middle address byte */
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb1b 	bl	8001b44 <spi_transmit>
	spi_transmit((uint8_t)(ftAddress)); /* send low address byte */
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fb16 	bl	8001b44 <spi_transmit>

	spi_transmit_32(command);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fb2f 	bl	8001b7c <spi_transmit_32>
}
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00302578 	.word	0x00302578

08002528 <EVE_write_string>:


/* write a string to co-processor memory in context of a command: no chip-select, just plain SPI-transfers */
void EVE_write_string(const char *text)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	uint8_t textindex = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	75fb      	strb	r3, [r7, #23]
	uint8_t padding = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	75bb      	strb	r3, [r7, #22]
	uint8_t *bytes = (uint8_t *) text; /* treat the array as bunch of bytes */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	60bb      	str	r3, [r7, #8]

	if(cmd_burst)
 800253c:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <EVE_write_string+0x110>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d049      	beq.n	80025da <EVE_write_string+0xb2>
	{
		uint32_t *longs = (uint32_t *) text; /* treat the array as bunch of longs */
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	613b      	str	r3, [r7, #16]
		uint32_t calc;

		while(bytes[textindex] != 0)
 800254a:	e015      	b.n	8002578 <EVE_write_string+0x50>
		{
			padding++;
 800254c:	7dbb      	ldrb	r3, [r7, #22]
 800254e:	3301      	adds	r3, #1
 8002550:	75bb      	strb	r3, [r7, #22]
			if(padding > 3)
 8002552:	7dbb      	ldrb	r3, [r7, #22]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d908      	bls.n	800256a <EVE_write_string+0x42>
			{
				padding = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	75bb      	strb	r3, [r7, #22]
				spi_transmit_burst(*longs++);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1d1a      	adds	r2, r3, #4
 8002560:	613a      	str	r2, [r7, #16]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb27 	bl	8001bb8 <spi_transmit_burst>
			}
			textindex++;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	3301      	adds	r3, #1
 800256e:	75fb      	strb	r3, [r7, #23]
			if(textindex > 249) /* there appears to be no end for the "string", so leave */
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2bf9      	cmp	r3, #249	; 0xf9
 8002574:	d900      	bls.n	8002578 <EVE_write_string+0x50>
			{
				break;
 8002576:	e005      	b.n	8002584 <EVE_write_string+0x5c>
	if(cmd_burst)
	{
		uint32_t *longs = (uint32_t *) text; /* treat the array as bunch of longs */
		uint32_t calc;

		while(bytes[textindex] != 0)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e3      	bne.n	800254c <EVE_write_string+0x24>
			{
				break;
			}
		}

		calc = *longs;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]

		switch(padding)
 800258a:	7dbb      	ldrb	r3, [r7, #22]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d00c      	beq.n	80025aa <EVE_write_string+0x82>
 8002590:	2b03      	cmp	r3, #3
 8002592:	d002      	beq.n	800259a <EVE_write_string+0x72>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d00f      	beq.n	80025b8 <EVE_write_string+0x90>
 8002598:	e015      	b.n	80025c6 <EVE_write_string+0x9e>
		{
			case 3:
			calc &= 0x00ffffff;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025a0:	60fb      	str	r3, [r7, #12]
			textindex += 1;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	3301      	adds	r3, #1
 80025a6:	75fb      	strb	r3, [r7, #23]
			break;
 80025a8:	e013      	b.n	80025d2 <EVE_write_string+0xaa>
			case 2:
			calc &= 0x0000ffff;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	60fb      	str	r3, [r7, #12]
			textindex += 2;
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	3302      	adds	r3, #2
 80025b4:	75fb      	strb	r3, [r7, #23]
			break;
 80025b6:	e00c      	b.n	80025d2 <EVE_write_string+0xaa>
			case 1:
			calc &= 0x000000ff;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	60fb      	str	r3, [r7, #12]
			textindex += 3;
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	3303      	adds	r3, #3
 80025c2:	75fb      	strb	r3, [r7, #23]
			break;
 80025c4:	e005      	b.n	80025d2 <EVE_write_string+0xaa>
			default:
			calc = 0x00000000;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
			textindex += 4;
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	3304      	adds	r3, #4
 80025ce:	75fb      	strb	r3, [r7, #23]
			break;
 80025d0:	bf00      	nop
		}

		spi_transmit_burst(calc);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff faf0 	bl	8001bb8 <spi_transmit_burst>
 80025d8:	e02a      	b.n	8002630 <EVE_write_string+0x108>
	}
	else
	{
		while(bytes[textindex] != 0)
 80025da:	e00d      	b.n	80025f8 <EVE_write_string+0xd0>
		{
			spi_transmit(bytes[textindex]);
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff faad 	bl	8001b44 <spi_transmit>
			textindex++;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	3301      	adds	r3, #1
 80025ee:	75fb      	strb	r3, [r7, #23]
			if(textindex > 249) /* there appears to be no end for the "string", so leave */
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2bf9      	cmp	r3, #249	; 0xf9
 80025f4:	d900      	bls.n	80025f8 <EVE_write_string+0xd0>
			{
				break;
 80025f6:	e005      	b.n	8002604 <EVE_write_string+0xdc>

		spi_transmit_burst(calc);
	}
	else
	{
		while(bytes[textindex] != 0)
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4413      	add	r3, r2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1eb      	bne.n	80025dc <EVE_write_string+0xb4>
				break;
			}
		}

		/* we need to transmit at least one 0x00 byte and up to four if the string happens to be 4-byte aligned already */
		padding = textindex & 3;  /* 0, 1, 2 or 3 */
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	75bb      	strb	r3, [r7, #22]
		padding = 4-padding; /* 4, 3, 2 or 1 */
 800260c:	7dbb      	ldrb	r3, [r7, #22]
 800260e:	f1c3 0304 	rsb	r3, r3, #4
 8002612:	75bb      	strb	r3, [r7, #22]
		textindex += padding;
 8002614:	7dfa      	ldrb	r2, [r7, #23]
 8002616:	7dbb      	ldrb	r3, [r7, #22]
 8002618:	4413      	add	r3, r2
 800261a:	75fb      	strb	r3, [r7, #23]

		while(padding > 0)
 800261c:	e005      	b.n	800262a <EVE_write_string+0x102>
		{
			spi_transmit(0);
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff fa90 	bl	8001b44 <spi_transmit>
			padding--;
 8002624:	7dbb      	ldrb	r3, [r7, #22]
 8002626:	3b01      	subs	r3, #1
 8002628:	75bb      	strb	r3, [r7, #22]
		/* we need to transmit at least one 0x00 byte and up to four if the string happens to be 4-byte aligned already */
		padding = textindex & 3;  /* 0, 1, 2 or 3 */
		padding = 4-padding; /* 4, 3, 2 or 1 */
		textindex += padding;

		while(padding > 0)
 800262a:	7dbb      	ldrb	r3, [r7, #22]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f6      	bne.n	800261e <EVE_write_string+0xf6>
		{
			spi_transmit(0);
			padding--;
		}
	}
}
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	1ffe8a08 	.word	0x1ffe8a08

0800263c <EVE_cmd_dl>:
 EVE_cmd_dl(LINE_WIDTH(1*16));
 EVE_cmd_dl(VERTEX2F(0,0));
 EVE_cmd_dl(DL_BEGIN | EVE_RECTS);
*/
void EVE_cmd_dl(uint32_t command)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	if(!cmd_burst)
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <EVE_cmd_dl+0x24>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <EVE_cmd_dl+0x1c>
	{
		EVE_start_command(command);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ff46 	bl	80024e0 <EVE_start_command>
		EVE_cs_clear();
 8002654:	f7ff fa6e 	bl	8001b34 <EVE_cs_clear>
	}
}
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	1ffe8a08 	.word	0x1ffe8a08

08002664 <EVE_cmd_dl_burst>:


void EVE_cmd_dl_burst(uint32_t command)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	spi_transmit_burst(command);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff faa3 	bl	8001bb8 <spi_transmit_burst>
}
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <EVE_cmd_append_burst>:
	}
}


void EVE_cmd_append_burst(uint32_t ptr, uint32_t num)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	spi_transmit_burst(CMD_APPEND);
 8002682:	f06f 00e1 	mvn.w	r0, #225	; 0xe1
 8002686:	f7ff fa97 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(ptr);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fa94 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(num);
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	f7ff fa91 	bl	8001bb8 <spi_transmit_burst>
}
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <EVE_cmd_bgcolor>:


void EVE_cmd_bgcolor(uint32_t color)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	if(!cmd_burst)
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <EVE_cmd_bgcolor+0x4c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d119      	bne.n	80026e2 <EVE_cmd_bgcolor+0x46>
	{
		EVE_start_command(CMD_BGCOLOR);
 80026ae:	f06f 00f6 	mvn.w	r0, #246	; 0xf6
 80026b2:	f7ff ff15 	bl	80024e0 <EVE_start_command>
		spi_transmit((uint8_t)(color));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fa42 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(color >> 8));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fa3c 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(color >> 16));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fa36 	bl	8001b44 <spi_transmit>
		spi_transmit(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff fa33 	bl	8001b44 <spi_transmit>
		EVE_cs_clear();
 80026de:	f7ff fa29 	bl	8001b34 <EVE_cs_clear>
	}
}
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	1ffe8a08 	.word	0x1ffe8a08

080026ec <EVE_cmd_bgcolor_burst>:


void EVE_cmd_bgcolor_burst(uint32_t color)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	spi_transmit_burst(CMD_BGCOLOR);
 80026f4:	f06f 00f6 	mvn.w	r0, #246	; 0xf6
 80026f8:	f7ff fa5e 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(color);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fa5b 	bl	8001bb8 <spi_transmit_burst>
}
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <EVE_cmd_button_burst>:
	}
}


void EVE_cmd_button_burst(int16_t x0, int16_t y0, int16_t w0, int16_t h0, int16_t font, uint16_t options, const char* text)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4604      	mov	r4, r0
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	80fb      	strh	r3, [r7, #6]
 800271a:	4603      	mov	r3, r0
 800271c:	80bb      	strh	r3, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	807b      	strh	r3, [r7, #2]
 8002722:	4613      	mov	r3, r2
 8002724:	803b      	strh	r3, [r7, #0]
	spi_transmit_burst(CMD_BUTTON);
 8002726:	f06f 00f2 	mvn.w	r0, #242	; 0xf2
 800272a:	f7ff fa45 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) x0 + ((uint32_t) y0 << 16));
 800272e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002732:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	4413      	add	r3, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fa3c 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) w0 + ((uint32_t) h0 << 16));
 8002740:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002744:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002748:	041b      	lsls	r3, r3, #16
 800274a:	4413      	add	r3, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fa33 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) font + ((uint32_t) options << 16));
 8002752:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002756:	8bbb      	ldrh	r3, [r7, #28]
 8002758:	041b      	lsls	r3, r3, #16
 800275a:	4413      	add	r3, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fa2b 	bl	8001bb8 <spi_transmit_burst>
	EVE_write_string(text);
 8002762:	6a38      	ldr	r0, [r7, #32]
 8002764:	f7ff fee0 	bl	8002528 <EVE_write_string>
}
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop

08002770 <EVE_cmd_fgcolor_burst>:
	}
}


void EVE_cmd_fgcolor_burst(uint32_t color)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	spi_transmit_burst(CMD_FGCOLOR);
 8002778:	f06f 00f5 	mvn.w	r0, #245	; 0xf5
 800277c:	f7ff fa1c 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(color);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fa19 	bl	8001bb8 <spi_transmit_burst>
}
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <EVE_cmd_gradcolor_burst>:
	}
}


void EVE_cmd_gradcolor_burst(uint32_t color)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	spi_transmit_burst(CMD_GRADCOLOR);
 8002794:	f06f 00cb 	mvn.w	r0, #203	; 0xcb
 8002798:	f7ff fa0e 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(color);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fa0b 	bl	8001bb8 <spi_transmit_burst>
}
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <EVE_cmd_number>:
	EVE_write_string(text);
}


void EVE_cmd_number(int16_t x0, int16_t y0, int16_t font, uint16_t options, int32_t number)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4604      	mov	r4, r0
 80027b0:	4608      	mov	r0, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	80fb      	strh	r3, [r7, #6]
 80027ba:	4603      	mov	r3, r0
 80027bc:	80bb      	strh	r3, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
 80027c2:	4613      	mov	r3, r2
 80027c4:	803b      	strh	r3, [r7, #0]
	if(!cmd_burst)
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <EVE_cmd_number+0xa8>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d13c      	bne.n	800284a <EVE_cmd_number+0xa2>
	{
		EVE_start_command(CMD_NUMBER);
 80027d0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 80027d4:	f7ff fe84 	bl	80024e0 <EVE_start_command>

		spi_transmit((uint8_t)(x0));
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f9b1 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(x0 >> 8));
 80027e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e6:	121b      	asrs	r3, r3, #8
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f9a9 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(y0));
 80027f2:	88bb      	ldrh	r3, [r7, #4]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f9a4 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(y0 >> 8));
 80027fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002800:	121b      	asrs	r3, r3, #8
 8002802:	b29b      	uxth	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f99c 	bl	8001b44 <spi_transmit>

		spi_transmit((uint8_t)(font));
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff f997 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(font >> 8));
 8002816:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800281a:	121b      	asrs	r3, r3, #8
 800281c:	b29b      	uxth	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f98f 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(options));
 8002826:	883b      	ldrh	r3, [r7, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f98a 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(options >> 8));
 8002830:	883b      	ldrh	r3, [r7, #0]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b29b      	uxth	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f983 	bl	8001b44 <spi_transmit>

		spi_transmit_32(number);
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff f99b 	bl	8001b7c <spi_transmit_32>
		EVE_cs_clear();
 8002846:	f7ff f975 	bl	8001b34 <EVE_cs_clear>
	}
}
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	1ffe8a08 	.word	0x1ffe8a08

08002854 <EVE_cmd_number_burst>:


void EVE_cmd_number_burst(int16_t x0, int16_t y0, int16_t font, uint16_t options, int32_t number)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4604      	mov	r4, r0
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4623      	mov	r3, r4
 8002864:	80fb      	strh	r3, [r7, #6]
 8002866:	4603      	mov	r3, r0
 8002868:	80bb      	strh	r3, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
 800286e:	4613      	mov	r3, r2
 8002870:	803b      	strh	r3, [r7, #0]
	spi_transmit_burst(CMD_NUMBER);
 8002872:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 8002876:	f7ff f99f 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) x0 + ((uint32_t) y0 << 16));
 800287a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800287e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	4413      	add	r3, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f996 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) font + ((uint32_t) options << 16));
 800288c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002890:	883b      	ldrh	r3, [r7, #0]
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	4413      	add	r3, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f98e 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(number);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f98a 	bl	8001bb8 <spi_transmit_burst>
}
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd90      	pop	{r4, r7, pc}
 80028aa:	bf00      	nop

080028ac <EVE_cmd_setbitmap_burst>:
	}
}


void EVE_cmd_setbitmap_burst(uint32_t addr, uint16_t fmt, uint16_t width, uint16_t height)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	4608      	mov	r0, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	817b      	strh	r3, [r7, #10]
 80028be:	460b      	mov	r3, r1
 80028c0:	813b      	strh	r3, [r7, #8]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
	spi_transmit_burst(CMD_SETBITMAP);
 80028c6:	f06f 00bc 	mvn.w	r0, #188	; 0xbc
 80028ca:	f7ff f975 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(addr);
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff f972 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) fmt + ((uint32_t) width << 16));
 80028d4:	897a      	ldrh	r2, [r7, #10]
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	4413      	add	r3, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f96b 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(height);
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f967 	bl	8001bb8 <spi_transmit_burst>
}
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <EVE_cmd_slider_burst>:
	}
}


void EVE_cmd_slider_burst(int16_t x0, int16_t y0, int16_t w0, int16_t h0, uint16_t options, uint16_t val, uint16_t range)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4604      	mov	r4, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4623      	mov	r3, r4
 8002900:	80fb      	strh	r3, [r7, #6]
 8002902:	4603      	mov	r3, r0
 8002904:	80bb      	strh	r3, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	807b      	strh	r3, [r7, #2]
 800290a:	4613      	mov	r3, r2
 800290c:	803b      	strh	r3, [r7, #0]
	spi_transmit_burst(CMD_SLIDER);
 800290e:	f06f 00ef 	mvn.w	r0, #239	; 0xef
 8002912:	f7ff f951 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) x0 + ((uint32_t) y0 << 16));
 8002916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800291a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	4413      	add	r3, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f948 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) w0 + ((uint32_t) h0 << 16));
 8002928:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800292c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	4413      	add	r3, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f93f 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) options + ((uint32_t) val << 16));
 800293a:	8b3a      	ldrh	r2, [r7, #24]
 800293c:	8bbb      	ldrh	r3, [r7, #28]
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	4413      	add	r3, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f938 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst(range);
 8002948:	8c3b      	ldrh	r3, [r7, #32]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f934 	bl	8001bb8 <spi_transmit_burst>
}
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	bf00      	nop

08002958 <EVE_cmd_text>:
	spi_transmit_burst((uint32_t) style + ((uint32_t) scale << 16));
}


void EVE_cmd_text(int16_t x0, int16_t y0, int16_t font, uint16_t options, const char* text)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4604      	mov	r4, r0
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4623      	mov	r3, r4
 8002968:	80fb      	strh	r3, [r7, #6]
 800296a:	4603      	mov	r3, r0
 800296c:	80bb      	strh	r3, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	807b      	strh	r3, [r7, #2]
 8002972:	4613      	mov	r3, r2
 8002974:	803b      	strh	r3, [r7, #0]
	if(!cmd_burst)
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <EVE_cmd_text+0xa8>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d13b      	bne.n	80029f8 <EVE_cmd_text+0xa0>
	{
		EVE_start_command(CMD_TEXT);
 8002980:	f06f 00f3 	mvn.w	r0, #243	; 0xf3
 8002984:	f7ff fdac 	bl	80024e0 <EVE_start_command>

		spi_transmit((uint8_t)(x0));
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f8d9 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(x0 >> 8));
 8002992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002996:	121b      	asrs	r3, r3, #8
 8002998:	b29b      	uxth	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff f8d1 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(y0));
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f8cc 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(y0 >> 8));
 80029ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029b0:	121b      	asrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f8c4 	bl	8001b44 <spi_transmit>

		spi_transmit((uint8_t)(font));
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f8bf 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(font >> 8));
 80029c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029ca:	121b      	asrs	r3, r3, #8
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f8b7 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(options));
 80029d6:	883b      	ldrh	r3, [r7, #0]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f8b2 	bl	8001b44 <spi_transmit>
		spi_transmit((uint8_t)(options >> 8));
 80029e0:	883b      	ldrh	r3, [r7, #0]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f8ab 	bl	8001b44 <spi_transmit>

		EVE_write_string(text);
 80029ee:	69b8      	ldr	r0, [r7, #24]
 80029f0:	f7ff fd9a 	bl	8002528 <EVE_write_string>
		EVE_cs_clear();
 80029f4:	f7ff f89e 	bl	8001b34 <EVE_cs_clear>
	}
}
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	1ffe8a08 	.word	0x1ffe8a08

08002a04 <EVE_cmd_text_burst>:


void EVE_cmd_text_burst(int16_t x0, int16_t y0, int16_t font, uint16_t options, const char* text)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	80fb      	strh	r3, [r7, #6]
 8002a16:	4603      	mov	r3, r0
 8002a18:	80bb      	strh	r3, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	803b      	strh	r3, [r7, #0]
	spi_transmit_burst(CMD_TEXT);
 8002a22:	f06f 00f3 	mvn.w	r0, #243	; 0xf3
 8002a26:	f7ff f8c7 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) x0 + ((uint32_t) y0 << 16));
 8002a2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	4413      	add	r3, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff f8be 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) font + ((uint32_t) options << 16));
 8002a3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002a40:	883b      	ldrh	r3, [r7, #0]
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	4413      	add	r3, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f8b6 	bl	8001bb8 <spi_transmit_burst>
	EVE_write_string(text);
 8002a4c:	69b8      	ldr	r0, [r7, #24]
 8002a4e:	f7ff fd6b 	bl	8002528 <EVE_write_string>
}
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd90      	pop	{r4, r7, pc}

08002a58 <EVE_cmd_toggle_burst>:
	}
}


void EVE_cmd_toggle_burst(int16_t x0, int16_t y0, int16_t w0, int16_t font, uint16_t options, uint16_t state, const char* text)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4604      	mov	r4, r0
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4623      	mov	r3, r4
 8002a68:	80fb      	strh	r3, [r7, #6]
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80bb      	strh	r3, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	807b      	strh	r3, [r7, #2]
 8002a72:	4613      	mov	r3, r2
 8002a74:	803b      	strh	r3, [r7, #0]
	spi_transmit_burst(CMD_TOGGLE);
 8002a76:	f06f 00ed 	mvn.w	r0, #237	; 0xed
 8002a7a:	f7ff f89d 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) x0 + ((uint32_t) y0 << 16));
 8002a7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	4413      	add	r3, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff f894 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) w0 + ((uint32_t) font << 16));
 8002a90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002a94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f88b 	bl	8001bb8 <spi_transmit_burst>
	spi_transmit_burst((uint32_t) options + ((uint32_t) state << 16));
 8002aa2:	8b3a      	ldrh	r2, [r7, #24]
 8002aa4:	8bbb      	ldrh	r3, [r7, #28]
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f884 	bl	8001bb8 <spi_transmit_burst>
	EVE_write_string(text);
 8002ab0:	6a38      	ldr	r0, [r7, #32]
 8002ab2:	f7ff fd39 	bl	8002528 <EVE_write_string>
}
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}

08002abc <TFT_GraphStatic>:





void TFT_GraphStatic(uint8_t burst, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t padding, double amp_max, double t_max, double h_grid_lines, double v_grid_lines){
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	b0a3      	sub	sp, #140	; 0x8c
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4623      	mov	r3, r4
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80bb      	strh	r3, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	807b      	strh	r3, [r7, #2]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	803b      	strh	r3, [r7, #0]
	///  h_grid_lines ... number of horizontal grid lines
	///  v_grid_lines ... number of vertical grid lines
	///  Note: The predefined GRAPH_AXISCOLOR and GRAPH_GRIDCOLOR are used directly!

	// Define a array of function pointers for every used "EVE_cmd_dl..." function. First one is normal, second one is to be used with burst mode
	void (*EVE_cmd_dl__fptr_arr[])(uint32_t) = {EVE_cmd_dl, EVE_cmd_dl_burst};
 8002ada:	4aa0      	ldr	r2, [pc, #640]	; (8002d5c <TFT_GraphStatic+0x2a0>)
 8002adc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae4:	e883 0003 	stmia.w	r3, {r0, r1}
	void (*EVE_cmd_text__fptr_arr[])(int16_t, int16_t, int16_t, uint16_t, const char*) = {EVE_cmd_text, EVE_cmd_text_burst};
 8002ae8:	4a9d      	ldr	r2, [pc, #628]	; (8002d60 <TFT_GraphStatic+0x2a4>)
 8002aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002af2:	e883 0003 	stmia.w	r3, {r0, r1}
	void (*EVE_cmd_number__fptr_arr[])(int16_t, int16_t, int16_t, uint16_t, int32_t) = {EVE_cmd_number, EVE_cmd_number_burst};
 8002af6:	4a9b      	ldr	r2, [pc, #620]	; (8002d64 <TFT_GraphStatic+0x2a8>)
 8002af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b00:	e883 0003 	stmia.w	r3, {r0, r1}


	// Internal offsets and sizes
	const uint8_t arrow_offset = 5;   // Offset of the ARROW HEAD corners
 8002b04:	2305      	movs	r3, #5
 8002b06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	const uint8_t grid_linewidth = 9; // linewidth of the grid in 1/16 pixel (16=1px)
 8002b0a:	2309      	movs	r3, #9
 8002b0c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	#define axis_lbl_txt_size 26 	  // Font for axis labels
	#define grid_lbl_txt_size 20 	  // Font for grid labels

	const uint8_t h_ax_lbl_comp_x = 6;  // Offset used to print the horizontal axis label at the right position (text width compensation)
 8002b10:	2306      	movs	r3, #6
 8002b12:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	const uint8_t h_ax_lbl_comp_y = 20; // Offset used to print the horizontal axis label at the right position (text height compensation)
 8002b16:	2314      	movs	r3, #20
 8002b18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	const uint8_t v_ax_lbl_comp_x = 2;  // Offset used to print the vertical axis label at the right position (text width compensation)
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	const uint8_t v_ax_lbl_comp_y = 22; // Offset used to print the vertical axis label at the right position (text height compensation)
 8002b22:	2316      	movs	r3, #22
 8002b24:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

	const uint8_t h_grid_lbl_comp_x = 3;  // Offset used to print the horizontal grid labels (numbers) at the right position (text width compensation)
 8002b28:	2303      	movs	r3, #3
 8002b2a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	const uint8_t h_grid_lbl_comp_y = 10; // Offset used to print the horizontal grid labels (numbers) at the right position (text height compensation)
 8002b2e:	230a      	movs	r3, #10
 8002b30:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	const uint8_t v_grid_lbl_comp_x = 7;  // Offset used to print the vertical grid labels (numbers) at the right position (text width compensation)
 8002b34:	2307      	movs	r3, #7
 8002b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	const uint8_t v_grid_lbl_comp_y = 0;  // Offset used to print the vertical grid labels (numbers) at the right position (text height compensation)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	/// Calculate pixels between lines and labels of the grid
	// Used by grid lines and labels (space between them)
	double widthPerSection = (double)(width)/v_grid_lines;
 8002b40:	883b      	ldrh	r3, [r7, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 f976 	bl	8006e34 <__aeabi_ui2d>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002b54:	f004 fb0e 	bl	8007174 <__aeabi_ddiv>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double heightPerSection = (double)(height)/h_grid_lines;
 8002b60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 f965 	bl	8006e34 <__aeabi_ui2d>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002b76:	f004 fafd 	bl	8007174 <__aeabi_ddiv>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	/// Axes LABELS
	(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_AXISCOLOR);
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002b90:	4875      	ldr	r0, [pc, #468]	; (8002d68 <TFT_GraphStatic+0x2ac>)
 8002b92:	4798      	blx	r3
	(*EVE_cmd_text__fptr_arr[burst])(x + padding         + h_ax_lbl_comp_x, y + padding          - h_ax_lbl_comp_y, axis_lbl_txt_size, 0, "V");
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8002ba2:	88ba      	ldrh	r2, [r7, #4]
 8002ba4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ba8:	4413      	add	r3, r2
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b299      	uxth	r1, r3
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	b209      	sxth	r1, r1
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <TFT_GraphStatic+0x2b0>)
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4608      	mov	r0, r1
 8002bd8:	4611      	mov	r1, r2
 8002bda:	221a      	movs	r2, #26
 8002bdc:	2300      	movs	r3, #0
 8002bde:	47a0      	blx	r4
	(*EVE_cmd_text__fptr_arr[burst])(x + padding + width + v_ax_lbl_comp_x, y + padding + height - v_ax_lbl_comp_y, axis_lbl_txt_size, 0, "t");
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002be8:	4413      	add	r3, r2
 8002bea:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8002bee:	88ba      	ldrh	r2, [r7, #4]
 8002bf0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	883b      	ldrh	r3, [r7, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	b299      	uxth	r1, r3
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c10:	4413      	add	r3, r2
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c18:	4413      	add	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b209      	sxth	r1, r1
 8002c2a:	b21a      	sxth	r2, r3
 8002c2c:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <TFT_GraphStatic+0x2b4>)
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	221a      	movs	r2, #26
 8002c36:	2300      	movs	r3, #0
 8002c38:	47a0      	blx	r4

	/// AXES lines
	//(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_AXISCOLOR);
	(*EVE_cmd_dl__fptr_arr[burst])(DL_BEGIN | EVE_LINES);
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c42:	4413      	add	r3, r2
 8002c44:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002c48:	484a      	ldr	r0, [pc, #296]	; (8002d74 <TFT_GraphStatic+0x2b8>)
 8002c4a:	4798      	blx	r3
	// left vertical line (Amplitude)
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding, y));
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c54:	4413      	add	r3, r2
 8002c56:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002c5a:	88b9      	ldrh	r1, [r7, #4]
 8002c5c:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002c60:	440a      	add	r2, r1
 8002c62:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002c66:	03d1      	lsls	r1, r2, #15
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c74:	4610      	mov	r0, r2
 8002c76:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding, y + padding + height + padding));
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c80:	4413      	add	r3, r2
 8002c82:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002c86:	88b9      	ldrh	r1, [r7, #4]
 8002c88:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002c8c:	440a      	add	r2, r1
 8002c8e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002c92:	03d1      	lsls	r1, r2, #15
 8002c94:	8878      	ldrh	r0, [r7, #2]
 8002c96:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002c9a:	4410      	add	r0, r2
 8002c9c:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002ca0:	4410      	add	r0, r2
 8002ca2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002ca6:	4402      	add	r2, r0
 8002ca8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002cac:	430a      	orrs	r2, r1
 8002cae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4798      	blx	r3
	// bottom horizontal line (Time)
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x                            , y + padding + height ));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002cc4:	88ba      	ldrh	r2, [r7, #4]
 8002cc6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002cca:	03d1      	lsls	r1, r2, #15
 8002ccc:	8878      	ldrh	r0, [r7, #2]
 8002cce:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002cd2:	4410      	add	r0, r2
 8002cd4:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002cd8:	4402      	add	r2, r0
 8002cda:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + width + padding, y + padding + height ));
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002cf6:	88b9      	ldrh	r1, [r7, #4]
 8002cf8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002cfc:	4411      	add	r1, r2
 8002cfe:	883a      	ldrh	r2, [r7, #0]
 8002d00:	4411      	add	r1, r2
 8002d02:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002d06:	440a      	add	r2, r1
 8002d08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002d0c:	03d1      	lsls	r1, r2, #15
 8002d0e:	8878      	ldrh	r0, [r7, #2]
 8002d10:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002d14:	4410      	add	r0, r2
 8002d16:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002d1a:	4402      	add	r2, r0
 8002d1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002d20:	430a      	orrs	r2, r1
 8002d22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d26:	4610      	mov	r0, r2
 8002d28:	4798      	blx	r3

	/// GRID lines
	(*EVE_cmd_dl__fptr_arr[burst])(LINE_WIDTH(grid_linewidth)); /* size is in 1/16 pixel */
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d32:	4413      	add	r3, r2
 8002d34:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002d38:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002d3c:	f042 6260 	orr.w	r2, r2, #234881024	; 0xe000000
 8002d40:	4610      	mov	r0, r2
 8002d42:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_GRIDCOLOR);
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002d52:	4809      	ldr	r0, [pc, #36]	; (8002d78 <TFT_GraphStatic+0x2bc>)
 8002d54:	4798      	blx	r3
	// vertical grid
	for(int i=1; i<=(int)floor(v_grid_lines); i++){
 8002d56:	2301      	movs	r3, #1
 8002d58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d5a:	e06f      	b.n	8002e3c <TFT_GraphStatic+0x380>
 8002d5c:	0800a37c 	.word	0x0800a37c
 8002d60:	0800a384 	.word	0x0800a384
 8002d64:	0800a38c 	.word	0x0800a38c
 8002d68:	043b1e0b 	.word	0x043b1e0b
 8002d6c:	0800a36c 	.word	0x0800a36c
 8002d70:	0800a370 	.word	0x0800a370
 8002d74:	1f000003 	.word	0x1f000003
 8002d78:	04c5dae2 	.word	0x04c5dae2
		// y-position at upper and lower corner; x-position from left with padding and width of graph divided by number of gridlines - times current line
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + (uint16_t)(widthPerSection*(double)i), y + padding ));
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d84:	4413      	add	r3, r2
 8002d86:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8002d8a:	88ba      	ldrh	r2, [r7, #4]
 8002d8c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002d90:	18d5      	adds	r5, r2, r3
 8002d92:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002d94:	f004 f85e 	bl	8006e54 <__aeabi_i2d>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002da4:	f004 f8bc 	bl	8006f20 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	f004 fb78 	bl	80074a4 <__aeabi_d2uiz>
 8002db4:	4603      	mov	r3, r0
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	442b      	add	r3, r5
 8002dba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002dbe:	03da      	lsls	r2, r3, #15
 8002dc0:	8879      	ldrh	r1, [r7, #2]
 8002dc2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	47a0      	blx	r4
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + (uint16_t)(widthPerSection*(double)i), y + padding + height ));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002dde:	4413      	add	r3, r2
 8002de0:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8002de4:	88ba      	ldrh	r2, [r7, #4]
 8002de6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002dea:	18d5      	adds	r5, r2, r3
 8002dec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002dee:	f004 f831 	bl	8006e54 <__aeabi_i2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dfe:	f004 f88f 	bl	8006f20 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f004 fb4b 	bl	80074a4 <__aeabi_d2uiz>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	442b      	add	r3, r5
 8002e14:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e18:	03da      	lsls	r2, r3, #15
 8002e1a:	8879      	ldrh	r1, [r7, #2]
 8002e1c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e20:	4419      	add	r1, r3
 8002e22:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002e26:	440b      	add	r3, r1
 8002e28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e32:	4618      	mov	r0, r3
 8002e34:	47a0      	blx	r4

	/// GRID lines
	(*EVE_cmd_dl__fptr_arr[burst])(LINE_WIDTH(grid_linewidth)); /* size is in 1/16 pixel */
	(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_GRIDCOLOR);
	// vertical grid
	for(int i=1; i<=(int)floor(v_grid_lines); i++){
 8002e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e38:	3301      	adds	r3, #1
 8002e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e3c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002e40:	f002 fd66 	bl	8005910 <floor>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f004 fb02 	bl	8007454 <__aeabi_d2iz>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	da91      	bge.n	8002d7c <TFT_GraphStatic+0x2c0>
		// y-position at upper and lower corner; x-position from left with padding and width of graph divided by number of gridlines - times current line
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + (uint16_t)(widthPerSection*(double)i), y + padding ));
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + (uint16_t)(widthPerSection*(double)i), y + padding + height ));
	}
	// horizontal grid
	for(int i=1; i<=(int)floor(h_grid_lines); i++){
 8002e58:	2301      	movs	r3, #1
 8002e5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e5c:	e064      	b.n	8002f28 <TFT_GraphStatic+0x46c>
		// x-position at left and right corner; y-position from top y, padding and height divided by number of gridlines - times current line
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding        , y + padding + height - (uint16_t)(heightPerSection*(double)i) ));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002e66:	4413      	add	r3, r2
 8002e68:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8002e6c:	88ba      	ldrh	r2, [r7, #4]
 8002e6e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e72:	4413      	add	r3, r2
 8002e74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e78:	03dd      	lsls	r5, r3, #15
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e80:	441a      	add	r2, r3
 8002e82:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002e86:	18d6      	adds	r6, r2, r3
 8002e88:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e8a:	f003 ffe3 	bl	8006e54 <__aeabi_i2d>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e9a:	f004 f841 	bl	8006f20 <__aeabi_dmul>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f004 fafd 	bl	80074a4 <__aeabi_d2uiz>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	1af3      	subs	r3, r6, r3
 8002eb0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002eb4:	432b      	orrs	r3, r5
 8002eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eba:	4618      	mov	r0, r3
 8002ebc:	47a0      	blx	r4
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + width, y + padding + height - (uint16_t)(heightPerSection*(double)i) ));
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8002ecc:	88ba      	ldrh	r2, [r7, #4]
 8002ece:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ed2:	441a      	add	r2, r3
 8002ed4:	883b      	ldrh	r3, [r7, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002edc:	03dd      	lsls	r5, r3, #15
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ee4:	441a      	add	r2, r3
 8002ee6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002eea:	18d6      	adds	r6, r2, r3
 8002eec:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002eee:	f003 ffb1 	bl	8006e54 <__aeabi_i2d>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002efe:	f004 f80f 	bl	8006f20 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f004 facb 	bl	80074a4 <__aeabi_d2uiz>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	1af3      	subs	r3, r6, r3
 8002f14:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f18:	432b      	orrs	r3, r5
 8002f1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f1e:	4618      	mov	r0, r3
 8002f20:	47a0      	blx	r4
		// y-position at upper and lower corner; x-position from left with padding and width of graph divided by number of gridlines - times current line
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + (uint16_t)(widthPerSection*(double)i), y + padding ));
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + (uint16_t)(widthPerSection*(double)i), y + padding + height ));
	}
	// horizontal grid
	for(int i=1; i<=(int)floor(h_grid_lines); i++){
 8002f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f24:	3301      	adds	r3, #1
 8002f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f28:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f2c:	f002 fcf0 	bl	8005910 <floor>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f004 fa8c 	bl	8007454 <__aeabi_d2iz>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f40:	429a      	cmp	r2, r3
 8002f42:	da8c      	bge.n	8002e5e <TFT_GraphStatic+0x3a2>
		// x-position at left and right corner; y-position from top y, padding and height divided by number of gridlines - times current line
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding        , y + padding + height - (uint16_t)(heightPerSection*(double)i) ));
		(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + width, y + padding + height - (uint16_t)(heightPerSection*(double)i) ));
	}
	(*EVE_cmd_dl__fptr_arr[burst])(DL_END);
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002f52:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 8002f56:	4798      	blx	r3

	/// Grid VALUES
	(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_AXISCOLOR);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002f60:	4413      	add	r3, r2
 8002f62:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002f66:	48a4      	ldr	r0, [pc, #656]	; (80031f8 <TFT_GraphStatic+0x73c>)
 8002f68:	4798      	blx	r3
	// vertical grid (time)
	for(int i=1; i<=(int)ceil(v_grid_lines); i++){ // "ceil" and "i-1" at val -> print also the 0 value
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f6e:	e0be      	b.n	80030ee <TFT_GraphStatic+0x632>
		// Calc time at current vertical line
		double val = (t_max/v_grid_lines*(double)(i-1));
 8002f70:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002f74:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002f78:	f004 f8fc 	bl	8007174 <__aeabi_ddiv>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	461d      	mov	r5, r3
 8002f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f86:	3b01      	subs	r3, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 ff63 	bl	8006e54 <__aeabi_i2d>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f003 ffc3 	bl	8006f20 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		// If its a pure integer write it as number, else convert and write it to string
		if((val - (double)((uint32_t)val)) == 0){ //val % 1.0 == 0
 8002fa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002fa6:	f004 fa7d 	bl	80074a4 <__aeabi_d2uiz>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 ff41 	bl	8006e34 <__aeabi_ui2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002fba:	f003 fdfd 	bl	8006bb8 <__aeabi_dsub>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f004 fa0f 	bl	80073f0 <__aeabi_dcmpeq>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d041      	beq.n	800305c <TFT_GraphStatic+0x5a0>
			(*EVE_cmd_number__fptr_arr[burst])(x + padding + (uint16_t)(widthPerSection*(double)(i-1)) + h_grid_lbl_comp_x, y + height + h_grid_lbl_comp_y, grid_lbl_txt_size, 0, (int32_t)val); //EVE_OPT_RIGHTX| + 18
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f853 4c58 	ldr.w	r4, [r3, #-88]
 8002fe6:	88ba      	ldrh	r2, [r7, #4]
 8002fe8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002fec:	4413      	add	r3, r2
 8002fee:	b29d      	uxth	r5, r3
 8002ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 ff2d 	bl	8006e54 <__aeabi_i2d>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003006:	f003 ff8b 	bl	8006f20 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f004 fa47 	bl	80074a4 <__aeabi_d2uiz>
 8003016:	4603      	mov	r3, r0
 8003018:	b29b      	uxth	r3, r3
 800301a:	442b      	add	r3, r5
 800301c:	b29a      	uxth	r2, r3
 800301e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003022:	b29b      	uxth	r3, r3
 8003024:	4413      	add	r3, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	b29e      	uxth	r6, r3
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003030:	4413      	add	r3, r2
 8003032:	b29a      	uxth	r2, r3
 8003034:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003038:	b29b      	uxth	r3, r3
 800303a:	4413      	add	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	b29d      	uxth	r5, r3
 8003040:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003044:	f004 fa06 	bl	8007454 <__aeabi_d2iz>
 8003048:	4601      	mov	r1, r0
 800304a:	b232      	sxth	r2, r6
 800304c:	b22b      	sxth	r3, r5
 800304e:	9100      	str	r1, [sp, #0]
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	2214      	movs	r2, #20
 8003056:	2300      	movs	r3, #0
 8003058:	47a0      	blx	r4
 800305a:	e045      	b.n	80030e8 <TFT_GraphStatic+0x62c>
		}
		else{
			char buffer[32]; // buffer for double to string conversion
			sprintf(buffer, "%.1lf", val); // double to string conversion
 800305c:	f107 0308 	add.w	r3, r7, #8
 8003060:	4618      	mov	r0, r3
 8003062:	4966      	ldr	r1, [pc, #408]	; (80031fc <TFT_GraphStatic+0x740>)
 8003064:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003068:	f004 ff62 	bl	8007f30 <siprintf>
			(*EVE_cmd_text__fptr_arr[burst])(x + padding + (uint16_t)(widthPerSection*(double)(i-1)) + h_grid_lbl_comp_x, y + height + h_grid_lbl_comp_y, grid_lbl_txt_size, 0, buffer);
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003074:	4413      	add	r3, r2
 8003076:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800307a:	88ba      	ldrh	r2, [r7, #4]
 800307c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003080:	4413      	add	r3, r2
 8003082:	b29d      	uxth	r5, r3
 8003084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003086:	3b01      	subs	r3, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fee3 	bl	8006e54 <__aeabi_i2d>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800309a:	f003 ff41 	bl	8006f20 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f004 f9fd 	bl	80074a4 <__aeabi_d2uiz>
 80030aa:	4603      	mov	r3, r0
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	442b      	add	r3, r5
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	b299      	uxth	r1, r3
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80030c4:	4413      	add	r3, r2
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	b209      	sxth	r1, r1
 80030d6:	b21a      	sxth	r2, r3
 80030d8:	f107 0308 	add.w	r3, r7, #8
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4608      	mov	r0, r1
 80030e0:	4611      	mov	r1, r2
 80030e2:	2214      	movs	r2, #20
 80030e4:	2300      	movs	r3, #0
 80030e6:	47a0      	blx	r4
	(*EVE_cmd_dl__fptr_arr[burst])(DL_END);

	/// Grid VALUES
	(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_AXISCOLOR);
	// vertical grid (time)
	for(int i=1; i<=(int)ceil(v_grid_lines); i++){ // "ceil" and "i-1" at val -> print also the 0 value
 80030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ea:	3301      	adds	r3, #1
 80030ec:	677b      	str	r3, [r7, #116]	; 0x74
 80030ee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80030f2:	f002 fb89 	bl	8005808 <ceil>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f004 f9a9 	bl	8007454 <__aeabi_d2iz>
 8003102:	4602      	mov	r2, r0
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	429a      	cmp	r2, r3
 8003108:	f6bf af32 	bge.w	8002f70 <TFT_GraphStatic+0x4b4>
			(*EVE_cmd_text__fptr_arr[burst])(x + padding + (uint16_t)(widthPerSection*(double)(i-1)) + h_grid_lbl_comp_x, y + height + h_grid_lbl_comp_y, grid_lbl_txt_size, 0, buffer);
		}
	}
	// horizontal grid (amplitude)
	//(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_AXISCOLOR);
	for(int i=1; i<=(int)floor(h_grid_lines); i++){  // "floor" and "i" at val -> don't print the 0 value
 800310c:	2301      	movs	r3, #1
 800310e:	673b      	str	r3, [r7, #112]	; 0x70
 8003110:	e0bd      	b.n	800328e <TFT_GraphStatic+0x7d2>
		// Calc amplitude at current horizontal line
		double val = (amp_max/h_grid_lines*(double)i);
 8003112:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003116:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800311a:	f004 f82b 	bl	8007174 <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4614      	mov	r4, r2
 8003124:	461d      	mov	r5, r3
 8003126:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003128:	f003 fe94 	bl	8006e54 <__aeabi_i2d>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	f003 fef4 	bl	8006f20 <__aeabi_dmul>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		// If its a pure integer write it as number, else convert and write it to string
		if((val - (double)((uint32_t)val)) == 0){ //val % 1.0 == 0
 8003140:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003144:	f004 f9ae 	bl	80074a4 <__aeabi_d2uiz>
 8003148:	4603      	mov	r3, r0
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fe72 	bl	8006e34 <__aeabi_ui2d>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003158:	f003 fd2e 	bl	8006bb8 <__aeabi_dsub>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	f004 f940 	bl	80073f0 <__aeabi_dcmpeq>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d044      	beq.n	8003200 <TFT_GraphStatic+0x744>
			(*EVE_cmd_number__fptr_arr[burst])(x - v_grid_lbl_comp_x, y + padding + height - (uint16_t)(heightPerSection*(double)i) + v_grid_lbl_comp_y, grid_lbl_txt_size, 0, (int32_t)val); //EVE_OPT_RIGHTX|
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800317e:	4413      	add	r3, r2
 8003180:	f853 4c58 	ldr.w	r4, [r3, #-88]
 8003184:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003188:	b29b      	uxth	r3, r3
 800318a:	88ba      	ldrh	r2, [r7, #4]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	b29e      	uxth	r6, r3
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003198:	4413      	add	r3, r2
 800319a:	b29a      	uxth	r2, r3
 800319c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80031a0:	4413      	add	r3, r2
 80031a2:	b29d      	uxth	r5, r3
 80031a4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80031a6:	f003 fe55 	bl	8006e54 <__aeabi_i2d>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031b6:	f003 feb3 	bl	8006f20 <__aeabi_dmul>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f004 f96f 	bl	80074a4 <__aeabi_d2uiz>
 80031c6:	4603      	mov	r3, r0
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	1aeb      	subs	r3, r5, r3
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	b29d      	uxth	r5, r3
 80031da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80031de:	f004 f939 	bl	8007454 <__aeabi_d2iz>
 80031e2:	4601      	mov	r1, r0
 80031e4:	b232      	sxth	r2, r6
 80031e6:	b22b      	sxth	r3, r5
 80031e8:	9100      	str	r1, [sp, #0]
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	2214      	movs	r2, #20
 80031f0:	2300      	movs	r3, #0
 80031f2:	47a0      	blx	r4
 80031f4:	e048      	b.n	8003288 <TFT_GraphStatic+0x7cc>
 80031f6:	bf00      	nop
 80031f8:	043b1e0b 	.word	0x043b1e0b
 80031fc:	0800a374 	.word	0x0800a374
		}
		else{
			char buffer[32]; // buffer for double to string conversion
			sprintf(buffer, "%.1lf", val); // double to string conversion
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	4618      	mov	r0, r3
 8003206:	499c      	ldr	r1, [pc, #624]	; (8003478 <TFT_GraphStatic+0x9bc>)
 8003208:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800320c:	f004 fe90 	bl	8007f30 <siprintf>
			(*EVE_cmd_text__fptr_arr[burst])(x - v_grid_lbl_comp_x, y + padding + height - (uint16_t)(heightPerSection*(double)i) + v_grid_lbl_comp_y, grid_lbl_txt_size, 0, buffer);
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003218:	4413      	add	r3, r2
 800321a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800321e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003222:	b29b      	uxth	r3, r3
 8003224:	88ba      	ldrh	r2, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	b29b      	uxth	r3, r3
 800322a:	b29e      	uxth	r6, r3
 800322c:	887a      	ldrh	r2, [r7, #2]
 800322e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003232:	4413      	add	r3, r2
 8003234:	b29a      	uxth	r2, r3
 8003236:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800323a:	4413      	add	r3, r2
 800323c:	b29d      	uxth	r5, r3
 800323e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003240:	f003 fe08 	bl	8006e54 <__aeabi_i2d>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003250:	f003 fe66 	bl	8006f20 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	f004 f922 	bl	80074a4 <__aeabi_d2uiz>
 8003260:	4603      	mov	r3, r0
 8003262:	b29b      	uxth	r3, r3
 8003264:	1aeb      	subs	r3, r5, r3
 8003266:	b29a      	uxth	r2, r3
 8003268:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800326c:	b29b      	uxth	r3, r3
 800326e:	4413      	add	r3, r2
 8003270:	b29b      	uxth	r3, r3
 8003272:	b29b      	uxth	r3, r3
 8003274:	b231      	sxth	r1, r6
 8003276:	b21a      	sxth	r2, r3
 8003278:	f107 0308 	add.w	r3, r7, #8
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4608      	mov	r0, r1
 8003280:	4611      	mov	r1, r2
 8003282:	2214      	movs	r2, #20
 8003284:	2300      	movs	r3, #0
 8003286:	47a0      	blx	r4
			(*EVE_cmd_text__fptr_arr[burst])(x + padding + (uint16_t)(widthPerSection*(double)(i-1)) + h_grid_lbl_comp_x, y + height + h_grid_lbl_comp_y, grid_lbl_txt_size, 0, buffer);
		}
	}
	// horizontal grid (amplitude)
	//(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_AXISCOLOR);
	for(int i=1; i<=(int)floor(h_grid_lines); i++){  // "floor" and "i" at val -> don't print the 0 value
 8003288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328a:	3301      	adds	r3, #1
 800328c:	673b      	str	r3, [r7, #112]	; 0x70
 800328e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003292:	f002 fb3d 	bl	8005910 <floor>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	f004 f8d9 	bl	8007454 <__aeabi_d2iz>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a6:	429a      	cmp	r2, r3
 80032a8:	f6bf af33 	bge.w	8003112 <TFT_GraphStatic+0x656>
	}

	/// ARROWS on axes
	//(*EVE_cmd_dl__fptr_arr[burst])(DL_COLOR_RGB | GRAPH_AXISCOLOR);
	// bottom vertical arrow (Amplitude)
	(*EVE_cmd_dl__fptr_arr[burst])(DL_BEGIN | EVE_LINE_STRIP);
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80032b4:	4413      	add	r3, r2
 80032b6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80032ba:	4870      	ldr	r0, [pc, #448]	; (800347c <TFT_GraphStatic+0x9c0>)
 80032bc:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + arrow_offset, y + arrow_offset ));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80032c6:	4413      	add	r3, r2
 80032c8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80032cc:	88b9      	ldrh	r1, [r7, #4]
 80032ce:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80032d2:	4411      	add	r1, r2
 80032d4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80032d8:	440a      	add	r2, r1
 80032da:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80032de:	03d1      	lsls	r1, r2, #15
 80032e0:	8878      	ldrh	r0, [r7, #2]
 80032e2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80032e6:	4402      	add	r2, r0
 80032e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80032ec:	430a      	orrs	r2, r1
 80032ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032f2:	4610      	mov	r0, r2
 80032f4:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding               , y                ));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80032fe:	4413      	add	r3, r2
 8003300:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003304:	88b9      	ldrh	r1, [r7, #4]
 8003306:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800330a:	440a      	add	r2, r1
 800330c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003310:	03d1      	lsls	r1, r2, #15
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003318:	430a      	orrs	r2, r1
 800331a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800331e:	4610      	mov	r0, r2
 8003320:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding - arrow_offset, y + arrow_offset ));
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800332a:	4413      	add	r3, r2
 800332c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003330:	88b9      	ldrh	r1, [r7, #4]
 8003332:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8003336:	4411      	add	r1, r2
 8003338:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800333c:	1a8a      	subs	r2, r1, r2
 800333e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003342:	03d1      	lsls	r1, r2, #15
 8003344:	8878      	ldrh	r0, [r7, #2]
 8003346:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800334a:	4402      	add	r2, r0
 800334c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003350:	430a      	orrs	r2, r1
 8003352:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003356:	4610      	mov	r0, r2
 8003358:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(DL_END);
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003362:	4413      	add	r3, r2
 8003364:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003368:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 800336c:	4798      	blx	r3
	// bottom horizontal arrow (Time)
	(*EVE_cmd_dl__fptr_arr[burst])(DL_BEGIN | EVE_LINE_STRIP);
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003376:	4413      	add	r3, r2
 8003378:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800337c:	483f      	ldr	r0, [pc, #252]	; (800347c <TFT_GraphStatic+0x9c0>)
 800337e:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + width + padding - arrow_offset, y + padding + height + arrow_offset ));
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003388:	4413      	add	r3, r2
 800338a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800338e:	88b9      	ldrh	r1, [r7, #4]
 8003390:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8003394:	4411      	add	r1, r2
 8003396:	883a      	ldrh	r2, [r7, #0]
 8003398:	4411      	add	r1, r2
 800339a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800339e:	4411      	add	r1, r2
 80033a0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80033a4:	1a8a      	subs	r2, r1, r2
 80033a6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80033aa:	03d1      	lsls	r1, r2, #15
 80033ac:	8878      	ldrh	r0, [r7, #2]
 80033ae:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80033b2:	4410      	add	r0, r2
 80033b4:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80033b8:	4410      	add	r0, r2
 80033ba:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80033be:	4402      	add	r2, r0
 80033c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80033c4:	430a      	orrs	r2, r1
 80033c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ca:	4610      	mov	r0, r2
 80033cc:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + width + padding               , y + padding + height                ));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80033d6:	4413      	add	r3, r2
 80033d8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80033dc:	88b9      	ldrh	r1, [r7, #4]
 80033de:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80033e2:	4411      	add	r1, r2
 80033e4:	883a      	ldrh	r2, [r7, #0]
 80033e6:	4411      	add	r1, r2
 80033e8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80033ec:	440a      	add	r2, r1
 80033ee:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80033f2:	03d1      	lsls	r1, r2, #15
 80033f4:	8878      	ldrh	r0, [r7, #2]
 80033f6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80033fa:	4410      	add	r0, r2
 80033fc:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8003400:	4402      	add	r2, r0
 8003402:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003406:	430a      	orrs	r2, r1
 8003408:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800340c:	4610      	mov	r0, r2
 800340e:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(VERTEX2F(x + padding + width + padding - arrow_offset, y + padding + height - arrow_offset ));
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003418:	4413      	add	r3, r2
 800341a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800341e:	88b9      	ldrh	r1, [r7, #4]
 8003420:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8003424:	4411      	add	r1, r2
 8003426:	883a      	ldrh	r2, [r7, #0]
 8003428:	4411      	add	r1, r2
 800342a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800342e:	4411      	add	r1, r2
 8003430:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003434:	1a8a      	subs	r2, r1, r2
 8003436:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800343a:	03d1      	lsls	r1, r2, #15
 800343c:	8878      	ldrh	r0, [r7, #2]
 800343e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8003442:	4410      	add	r0, r2
 8003444:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8003448:	4410      	add	r0, r2
 800344a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800344e:	1a82      	subs	r2, r0, r2
 8003450:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003454:	430a      	orrs	r2, r1
 8003456:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800345a:	4610      	mov	r0, r2
 800345c:	4798      	blx	r3
	(*EVE_cmd_dl__fptr_arr[burst])(DL_END);
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003466:	4413      	add	r3, r2
 8003468:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800346c:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 8003470:	4798      	blx	r3

}
 8003472:	3784      	adds	r7, #132	; 0x84
 8003474:	46bd      	mov	sp, r7
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003478:	0800a374 	.word	0x0800a374
 800347c:	1f000004 	.word	0x1f000004

08003480 <TFT_GraphData>:

void TFT_GraphData(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t padding, double y_max, XMC_VADC_RESULT_SIZE_t SBuffer[], uint16_t size, uint16_t *SBuffer_curidx, uint8_t graphmode, uint32_t datacolor, uint32_t markercolor){
 8003480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	4604      	mov	r4, r0
 800348a:	4608      	mov	r0, r1
 800348c:	4611      	mov	r1, r2
 800348e:	461a      	mov	r2, r3
 8003490:	4623      	mov	r3, r4
 8003492:	80fb      	strh	r3, [r7, #6]
 8003494:	4603      	mov	r3, r0
 8003496:	80bb      	strh	r3, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
 800349c:	4613      	mov	r3, r2
 800349e:	803b      	strh	r3, [r7, #0]
	///  Note: No predefined graph settings are used direct (#define ...)!



	/// Display current DATA as line strip in frame or roll mode
	EVE_cmd_dl_burst(DL_COLOR_RGB | datacolor);
 80034a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff f8dc 	bl	8002664 <EVE_cmd_dl_burst>
	EVE_cmd_dl_burst(DL_BEGIN | EVE_LINE_STRIP);
 80034ac:	4877      	ldr	r0, [pc, #476]	; (800368c <TFT_GraphData+0x20c>)
 80034ae:	f7ff f8d9 	bl	8002664 <EVE_cmd_dl_burst>
	/// Display graph frame-mode
	if(graphmode == 0){
 80034b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d146      	bne.n	8003548 <TFT_GraphData+0xc8>
		// Print values in the order they are stored
		for (int x_cur = 0; x_cur < size; ++x_cur) {
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e03e      	b.n	800353e <TFT_GraphData+0xbe>
			EVE_cmd_dl_burst(VERTEX2F(x + padding + x_cur, y + padding + height - (uint16_t)(( ((double)SBuffer[x_cur]) / ((double)y_max) )*(double)(height)) )); //if(frameover==1) printf("%lf %lf\n", ((((double)(SBuffer[x_cur]))/((double)y_max))*(double)(height)), (double)SBuffer[x]);
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034c4:	441a      	add	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80034ce:	03dc      	lsls	r4, r3, #15
 80034d0:	88ba      	ldrh	r2, [r7, #4]
 80034d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034d4:	441a      	add	r2, r3
 80034d6:	883b      	ldrh	r3, [r7, #0]
 80034d8:	18d5      	adds	r5, r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034e0:	4413      	add	r3, r2
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fca5 	bl	8006e34 <__aeabi_ui2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034f6:	f003 fe3d 	bl	8007174 <__aeabi_ddiv>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4690      	mov	r8, r2
 8003500:	4699      	mov	r9, r3
 8003502:	883b      	ldrh	r3, [r7, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f003 fc95 	bl	8006e34 <__aeabi_ui2d>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4640      	mov	r0, r8
 8003510:	4649      	mov	r1, r9
 8003512:	f003 fd05 	bl	8006f20 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f003 ffc1 	bl	80074a4 <__aeabi_d2uiz>
 8003522:	4603      	mov	r3, r0
 8003524:	b29b      	uxth	r3, r3
 8003526:	1aeb      	subs	r3, r5, r3
 8003528:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800352c:	4323      	orrs	r3, r4
 800352e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f896 	bl	8002664 <EVE_cmd_dl_burst>
	EVE_cmd_dl_burst(DL_COLOR_RGB | datacolor);
	EVE_cmd_dl_burst(DL_BEGIN | EVE_LINE_STRIP);
	/// Display graph frame-mode
	if(graphmode == 0){
		// Print values in the order they are stored
		for (int x_cur = 0; x_cur < size; ++x_cur) {
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3301      	adds	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	429a      	cmp	r2, r3
 8003544:	dcbc      	bgt.n	80034c0 <TFT_GraphData+0x40>
 8003546:	e05b      	b.n	8003600 <TFT_GraphData+0x180>
		// Print newest value always at the rightmost corner with all older values to the right
		// => Start Display    x position at rightmost corner and decrement till 0 (last run will make it -1 at the end but it isnt used after that)
		// => Start Arrayindex i at current index and decrement every loop. If i goes below 0, reset to max index and decrement further till
		//    value before current is hit.

		int16_t i = *SBuffer_curidx;
 8003548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	817b      	strh	r3, [r7, #10]
		for (int16_t x_cur = size-1; x_cur >= 0; x_cur--) {
 800354e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003550:	3b01      	subs	r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	813b      	strh	r3, [r7, #8]
 8003556:	e04f      	b.n	80035f8 <TFT_GraphData+0x178>
			// if index goes below 0 set to highest buffer index
			if(i < 0){i = size-1;}
 8003558:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800355c:	2b00      	cmp	r3, #0
 800355e:	da03      	bge.n	8003568 <TFT_GraphData+0xe8>
 8003560:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003562:	3b01      	subs	r3, #1
 8003564:	b29b      	uxth	r3, r3
 8003566:	817b      	strh	r3, [r7, #10]

			// Send next point for EVE_LINE_STRIP at current x+padding and normalized buffer value
			EVE_cmd_dl_burst(VERTEX2F(x + padding + x_cur, y + padding + height - (uint16_t)(( ((double)SBuffer[i]) / ((double)y_max) )*(double)(height)) )); 				// EVE_cmd_dl_burst(VERTEX2F(x + padding + x_cur, EVE_VSIZE - ((uint16_t)(SBuffer[i]/y_div) + margin + padding)));
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800356c:	441a      	add	r2, r3
 800356e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003572:	4413      	add	r3, r2
 8003574:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003578:	03dc      	lsls	r4, r3, #15
 800357a:	88ba      	ldrh	r2, [r7, #4]
 800357c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800357e:	441a      	add	r2, r3
 8003580:	883b      	ldrh	r3, [r7, #0]
 8003582:	18d5      	adds	r5, r2, r3
 8003584:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f003 fc4f 	bl	8006e34 <__aeabi_ui2d>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035a2:	f003 fde7 	bl	8007174 <__aeabi_ddiv>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	883b      	ldrh	r3, [r7, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fc3f 	bl	8006e34 <__aeabi_ui2d>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4640      	mov	r0, r8
 80035bc:	4649      	mov	r1, r9
 80035be:	f003 fcaf 	bl	8006f20 <__aeabi_dmul>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	f003 ff6b 	bl	80074a4 <__aeabi_d2uiz>
 80035ce:	4603      	mov	r3, r0
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	1aeb      	subs	r3, r5, r3
 80035d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80035d8:	4323      	orrs	r3, r4
 80035da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff f840 	bl	8002664 <EVE_cmd_dl_burst>

			// decrement index
			i--;
 80035e4:	897b      	ldrh	r3, [r7, #10]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	817b      	strh	r3, [r7, #10]
		// => Start Display    x position at rightmost corner and decrement till 0 (last run will make it -1 at the end but it isnt used after that)
		// => Start Arrayindex i at current index and decrement every loop. If i goes below 0, reset to max index and decrement further till
		//    value before current is hit.

		int16_t i = *SBuffer_curidx;
		for (int16_t x_cur = size-1; x_cur >= 0; x_cur--) {
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	813b      	strh	r3, [r7, #8]
 80035f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	daab      	bge.n	8003558 <TFT_GraphData+0xd8>
			// decrement index
			i--;
		}
	}
	// End EVE_LINE_STRIP and therefore DATA
	EVE_cmd_dl_burst(DL_END);
 8003600:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 8003604:	f7ff f82e 	bl	8002664 <EVE_cmd_dl_burst>


	/// Draw current POSITION MARKER in frame mode
	if(graphmode == 0){
 8003608:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800360c:	2b00      	cmp	r3, #0
 800360e:	d138      	bne.n	8003682 <TFT_GraphData+0x202>
		EVE_cmd_dl_burst(DL_COLOR_RGB | markercolor);
 8003610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f824 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_BEGIN | EVE_LINE_STRIP);
 800361c:	481b      	ldr	r0, [pc, #108]	; (800368c <TFT_GraphData+0x20c>)
 800361e:	f7ff f821 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(VERTEX2F(x + padding + *SBuffer_curidx, y + padding - 5 ));
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003626:	4413      	add	r3, r2
 8003628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	4413      	add	r3, r2
 800362e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003632:	03da      	lsls	r2, r3, #15
 8003634:	88b9      	ldrh	r1, [r7, #4]
 8003636:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003638:	440b      	add	r3, r1
 800363a:	3b05      	subs	r3, #5
 800363c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003640:	4313      	orrs	r3, r2
 8003642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f80c 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(VERTEX2F(x + padding + *SBuffer_curidx, y + padding + height + 5 ));
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003650:	4413      	add	r3, r2
 8003652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003654:	8812      	ldrh	r2, [r2, #0]
 8003656:	4413      	add	r3, r2
 8003658:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800365c:	03da      	lsls	r2, r3, #15
 800365e:	88b9      	ldrh	r1, [r7, #4]
 8003660:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003662:	4419      	add	r1, r3
 8003664:	883b      	ldrh	r3, [r7, #0]
 8003666:	440b      	add	r3, r1
 8003668:	3305      	adds	r3, #5
 800366a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800366e:	4313      	orrs	r3, r2
 8003670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fff5 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_END);
 800367a:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 800367e:	f7fe fff1 	bl	8002664 <EVE_cmd_dl_burst>
	}
	/////////////// GRAPH END

}
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800368a:	bf00      	nop
 800368c:	1f000004 	.word	0x1f000004

08003690 <touch_calibrate>:


void touch_calibrate(void) {
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
	//EVE_memWrite32(REG_TOUCH_TRANSFORM_D, 0x000001a3);
	//EVE_memWrite32(REG_TOUCH_TRANSFORM_E, 0x00005b33);
	//EVE_memWrite32(REG_TOUCH_TRANSFORM_F, 0xFFFbb870);

	// Actual values (measured with routine down below) by Rene S. at 20.12.2020 on Display SM-RVT43ULBNWC01 2031/20/609 00010
	EVE_memWrite32(REG_TOUCH_TRANSFORM_A, 0x000061c4);
 8003694:	480e      	ldr	r0, [pc, #56]	; (80036d0 <touch_calibrate+0x40>)
 8003696:	f246 11c4 	movw	r1, #25028	; 0x61c4
 800369a:	f7fe fbc7 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(REG_TOUCH_TRANSFORM_B, 0x0000025d);
 800369e:	480d      	ldr	r0, [pc, #52]	; (80036d4 <touch_calibrate+0x44>)
 80036a0:	f240 215d 	movw	r1, #605	; 0x25d
 80036a4:	f7fe fbc2 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(REG_TOUCH_TRANSFORM_C, 0xfff14ab1);
 80036a8:	480b      	ldr	r0, [pc, #44]	; (80036d8 <touch_calibrate+0x48>)
 80036aa:	490c      	ldr	r1, [pc, #48]	; (80036dc <touch_calibrate+0x4c>)
 80036ac:	f7fe fbbe 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(REG_TOUCH_TRANSFORM_D, 0xffffff91);
 80036b0:	480b      	ldr	r0, [pc, #44]	; (80036e0 <touch_calibrate+0x50>)
 80036b2:	f06f 016e 	mvn.w	r1, #110	; 0x6e
 80036b6:	f7fe fbb9 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(REG_TOUCH_TRANSFORM_E, 0x00005b6b);
 80036ba:	480a      	ldr	r0, [pc, #40]	; (80036e4 <touch_calibrate+0x54>)
 80036bc:	f645 316b 	movw	r1, #23403	; 0x5b6b
 80036c0:	f7fe fbb4 	bl	8001e2c <EVE_memWrite32>
	EVE_memWrite32(REG_TOUCH_TRANSFORM_F, 0xFFFac7ab);
 80036c4:	4808      	ldr	r0, [pc, #32]	; (80036e8 <touch_calibrate+0x58>)
 80036c6:	4909      	ldr	r1, [pc, #36]	; (80036ec <touch_calibrate+0x5c>)
 80036c8:	f7fe fbb0 	bl	8001e2c <EVE_memWrite32>
	EVE_cmd_dl(CMD_SWAP); /* make this list active */
	EVE_cmd_execute();

	while(1);
#endif
}
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	00302150 	.word	0x00302150
 80036d4:	00302154 	.word	0x00302154
 80036d8:	00302158 	.word	0x00302158
 80036dc:	fff14ab1 	.word	0xfff14ab1
 80036e0:	0030215c 	.word	0x0030215c
 80036e4:	00302160 	.word	0x00302160
 80036e8:	00302164 	.word	0x00302164
 80036ec:	fffac7ab 	.word	0xfffac7ab

080036f0 <TFT_display_init_screen>:

void TFT_display_init_screen(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0

	if(tft_active != 0)
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <TFT_display_init_screen+0x70>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d030      	beq.n	800375e <TFT_display_init_screen+0x6e>
	{
		EVE_cmd_inflate(MEM_LOGO, logo_init, sizeof(logo_init)); /* load logo into gfx-memory and de-compress it */
 80036fc:	2000      	movs	r0, #0
 80036fe:	4919      	ldr	r1, [pc, #100]	; (8003764 <TFT_display_init_screen+0x74>)
 8003700:	f644 7204 	movw	r2, #20228	; 0x4f04
 8003704:	f7fe fce6 	bl	80020d4 <EVE_cmd_inflate>

		EVE_start_cmd_burst(); /* start writing to the cmd-fifo as one stream of bytes, only sending the address once */
 8003708:	f7fe feba 	bl	8002480 <EVE_start_cmd_burst>

		EVE_cmd_dl_burst(CMD_DLSTART); /* start the display list */
 800370c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8003710:	f7fe ffa8 	bl	8002664 <EVE_cmd_dl_burst>
		//EVE_cmd_dl_burst(VERTEX_FORMAT(0)); /* reduce precision for VERTEX2F to 1 pixel instead of 1/16 pixel default */
		EVE_cmd_dl_burst(DL_CLEAR_RGB | WHITE); /* set the default clear color to white */
 8003714:	f06f 407d 	mvn.w	r0, #4244635648	; 0xfd000000
 8003718:	f7fe ffa4 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG); /* clear the screen - this and the previous prevent artifacts between lists, Attributes are the color, stencil and tag buffers */
 800371c:	4812      	ldr	r0, [pc, #72]	; (8003768 <TFT_display_init_screen+0x78>)
 800371e:	f7fe ffa1 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(TAG(0));
 8003722:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8003726:	f7fe ff9d 	bl	8002664 <EVE_cmd_dl_burst>

		EVE_cmd_setbitmap_burst(MEM_LOGO, EVE_ARGB1555, 308, 250);
 800372a:	2000      	movs	r0, #0
 800372c:	2100      	movs	r1, #0
 800372e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003732:	23fa      	movs	r3, #250	; 0xfa
 8003734:	f7ff f8ba 	bl	80028ac <EVE_cmd_setbitmap_burst>
		EVE_cmd_dl_burst(DL_BEGIN | EVE_BITMAPS);
 8003738:	480c      	ldr	r0, [pc, #48]	; (800376c <TFT_display_init_screen+0x7c>)
 800373a:	f7fe ff93 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(VERTEX2F(86*16, 11*16));  //105*16
 800373e:	480c      	ldr	r0, [pc, #48]	; (8003770 <TFT_display_init_screen+0x80>)
 8003740:	f7fe ff90 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_END);
 8003744:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 8003748:	f7fe ff8c 	bl	8002664 <EVE_cmd_dl_burst>


		EVE_cmd_dl_burst(DL_DISPLAY); /* instruct the graphics processor to show the list */
 800374c:	2000      	movs	r0, #0
 800374e:	f7fe ff89 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(CMD_SWAP); /* make this list active */
 8003752:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8003756:	f7fe ff85 	bl	8002664 <EVE_cmd_dl_burst>

		EVE_end_cmd_burst(); /* stop writing to the cmd-fifo, the cmd-FIFO will be executed automatically after this or when DMA is done */
 800375a:	f7fe feb7 	bl	80024cc <EVE_end_cmd_burst>
	}
}
 800375e:	bd80      	pop	{r7, pc}
 8003760:	1ffe8a09 	.word	0x1ffe8a09
 8003764:	0800a3ec 	.word	0x0800a3ec
 8003768:	26000007 	.word	0x26000007
 800376c:	1f000001 	.word	0x1f000001
 8003770:	42b000b0 	.word	0x42b000b0

08003774 <initStaticGraphBackground>:

void initStaticGraphBackground(void)
{
 8003774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	b08a      	sub	sp, #40	; 0x28
 800377a:	af0a      	add	r7, sp, #40	; 0x28
	// Static portion of display-handling, meant to be called once at startup. Created by Rudolph Riedel, adapted by RS @ MCI 2020/21
	EVE_cmd_dl(CMD_DLSTART); // Start a new display list (resets REG_CMD_DL to 0)
 800377c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8003780:	f7fe ff5c 	bl	800263c <EVE_cmd_dl>

	/// Main settings
	EVE_cmd_dl(TAG(1)); /* give everything considered background area tag 1 -> used for wipe feature*/
 8003784:	4859      	ldr	r0, [pc, #356]	; (80038ec <initStaticGraphBackground+0x178>)
 8003786:	f7fe ff59 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_bgcolor(MAIN_BGCOLOR); /* light grey */
 800378a:	4859      	ldr	r0, [pc, #356]	; (80038f0 <initStaticGraphBackground+0x17c>)
 800378c:	f7fe ff86 	bl	800269c <EVE_cmd_bgcolor>
	EVE_cmd_dl(VERTEX_FORMAT(0)); /* reduce precision for VERTEX2F to 1 pixel instead of 1/16 pixel default */
 8003790:	f04f 501c 	mov.w	r0, #654311424	; 0x27000000
 8003794:	f7fe ff52 	bl	800263c <EVE_cmd_dl>
	// Main Rectangle
	EVE_cmd_dl(DL_COLOR_RGB | MAIN_BGCOLOR);
 8003798:	4856      	ldr	r0, [pc, #344]	; (80038f4 <initStaticGraphBackground+0x180>)
 800379a:	f7fe ff4f 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_BEGIN | EVE_RECTS);
 800379e:	4856      	ldr	r0, [pc, #344]	; (80038f8 <initStaticGraphBackground+0x184>)
 80037a0:	f7fe ff4c 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(0, 0));
 80037a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037a8:	f7fe ff48 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(EVE_HSIZE, EVE_VSIZE));
 80037ac:	4853      	ldr	r0, [pc, #332]	; (80038fc <initStaticGraphBackground+0x188>)
 80037ae:	f7fe ff45 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_END);
 80037b2:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 80037b6:	f7fe ff41 	bl	800263c <EVE_cmd_dl>

	/// Draw Banner and divider line on top
	// Banner
	EVE_cmd_dl(LINE_WIDTH(1*16)); /* size is in 1/16 pixel */
 80037ba:	4851      	ldr	r0, [pc, #324]	; (8003900 <initStaticGraphBackground+0x18c>)
 80037bc:	f7fe ff3e 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_COLOR_RGB | MAIN_BANNERCOLOR);
 80037c0:	4850      	ldr	r0, [pc, #320]	; (8003904 <initStaticGraphBackground+0x190>)
 80037c2:	f7fe ff3b 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_BEGIN | EVE_EDGE_STRIP_A);
 80037c6:	4850      	ldr	r0, [pc, #320]	; (8003908 <initStaticGraphBackground+0x194>)
 80037c8:	f7fe ff38 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(0, LAYOUT_Y1));
 80037cc:	484f      	ldr	r0, [pc, #316]	; (800390c <initStaticGraphBackground+0x198>)
 80037ce:	f7fe ff35 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(LAYOUT_X1, LAYOUT_Y1));
 80037d2:	484f      	ldr	r0, [pc, #316]	; (8003910 <initStaticGraphBackground+0x19c>)
 80037d4:	f7fe ff32 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(LAYOUT_X2, LAYOUT_Y2));
 80037d8:	484e      	ldr	r0, [pc, #312]	; (8003914 <initStaticGraphBackground+0x1a0>)
 80037da:	f7fe ff2f 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(EVE_HSIZE, LAYOUT_Y2));
 80037de:	484e      	ldr	r0, [pc, #312]	; (8003918 <initStaticGraphBackground+0x1a4>)
 80037e0:	f7fe ff2c 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_END);
 80037e4:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 80037e8:	f7fe ff28 	bl	800263c <EVE_cmd_dl>
	// Divider
	EVE_cmd_dl(DL_COLOR_RGB | MAIN_DIVIDERCOLOR);
 80037ec:	484b      	ldr	r0, [pc, #300]	; (800391c <initStaticGraphBackground+0x1a8>)
 80037ee:	f7fe ff25 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_BEGIN | EVE_LINE_STRIP);
 80037f2:	484b      	ldr	r0, [pc, #300]	; (8003920 <initStaticGraphBackground+0x1ac>)
 80037f4:	f7fe ff22 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(0, LAYOUT_Y1));
 80037f8:	4844      	ldr	r0, [pc, #272]	; (800390c <initStaticGraphBackground+0x198>)
 80037fa:	f7fe ff1f 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(LAYOUT_X1, LAYOUT_Y1));
 80037fe:	4844      	ldr	r0, [pc, #272]	; (8003910 <initStaticGraphBackground+0x19c>)
 8003800:	f7fe ff1c 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(LAYOUT_X2, LAYOUT_Y2));
 8003804:	4843      	ldr	r0, [pc, #268]	; (8003914 <initStaticGraphBackground+0x1a0>)
 8003806:	f7fe ff19 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(VERTEX2F(EVE_HSIZE, LAYOUT_Y2));
 800380a:	4843      	ldr	r0, [pc, #268]	; (8003918 <initStaticGraphBackground+0x1a4>)
 800380c:	f7fe ff16 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_END);
 8003810:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
 8003814:	f7fe ff12 	bl	800263c <EVE_cmd_dl>

	// Add the static text
	EVE_cmd_dl(TAG(0)); /* do not use the following objects for touch-detection */
 8003818:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 800381c:	f7fe ff0e 	bl	800263c <EVE_cmd_dl>
	EVE_cmd_dl(DL_COLOR_RGB | MAIN_TEXTCOLOR);
 8003820:	483e      	ldr	r0, [pc, #248]	; (800391c <initStaticGraphBackground+0x1a8>)
 8003822:	f7fe ff0b 	bl	800263c <EVE_cmd_dl>
	#if defined (EVE_DMA)
		EVE_cmd_text(10, EVE_VSIZE - 65, 26, 0, "Bytes: ");
	#endif
	EVE_cmd_text(360, 10, 26, 0, "DL-size:");
 8003826:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <initStaticGraphBackground+0x1b0>)
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800382e:	210a      	movs	r1, #10
 8003830:	221a      	movs	r2, #26
 8003832:	2300      	movs	r3, #0
 8003834:	f7ff f890 	bl	8002958 <EVE_cmd_text>
	EVE_cmd_text(360, 25, 26, 0, "Sensor:");
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <initStaticGraphBackground+0x1b4>)
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8003840:	2119      	movs	r1, #25
 8003842:	221a      	movs	r2, #26
 8003844:	2300      	movs	r3, #0
 8003846:	f7ff f887 	bl	8002958 <EVE_cmd_text>

	/// Write the static part of the Graph to the display list
	TFT_GraphStatic(0, G_x, G_y, G_width, G_height, G_PADDING, G_amp_max, G_t_max, G_h_grid_lines, G_v_grid_lines);
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <initStaticGraphBackground+0x1b8>)
 800384c:	f8b3 a000 	ldrh.w	sl, [r3]
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <initStaticGraphBackground+0x1bc>)
 8003852:	f8b3 c000 	ldrh.w	ip, [r3]
 8003856:	4b37      	ldr	r3, [pc, #220]	; (8003934 <initStaticGraphBackground+0x1c0>)
 8003858:	f8b3 e000 	ldrh.w	lr, [r3]
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <initStaticGraphBackground+0x1c4>)
 800385e:	881e      	ldrh	r6, [r3, #0]
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <initStaticGraphBackground+0x1c8>)
 8003862:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <initStaticGraphBackground+0x1cc>)
 8003868:	e9d3 4500 	ldrd	r4, r5, [r3]
 800386c:	4b35      	ldr	r3, [pc, #212]	; (8003944 <initStaticGraphBackground+0x1d0>)
 800386e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003872:	4b35      	ldr	r3, [pc, #212]	; (8003948 <initStaticGraphBackground+0x1d4>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	9600      	str	r6, [sp, #0]
 800387a:	260a      	movs	r6, #10
 800387c:	9601      	str	r6, [sp, #4]
 800387e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003882:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003886:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800388a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800388e:	2000      	movs	r0, #0
 8003890:	4651      	mov	r1, sl
 8003892:	4662      	mov	r2, ip
 8003894:	4673      	mov	r3, lr
 8003896:	f7ff f911 	bl	8002abc <TFT_GraphStatic>

	// Wait for Display to be finished
	while (EVE_busy());
 800389a:	bf00      	nop
 800389c:	f7fe fafe 	bl	8001e9c <EVE_busy>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1fa      	bne.n	800389c <initStaticGraphBackground+0x128>

	// Get size of the current display list
	num_dl_static = EVE_memRead16(REG_CMD_DL); // REG_CMD_DL = Command display list offset
 80038a6:	4829      	ldr	r0, [pc, #164]	; (800394c <initStaticGraphBackground+0x1d8>)
 80038a8:	f7fe f9fa 	bl	8001ca0 <EVE_memRead16>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <initStaticGraphBackground+0x1dc>)
 80038b2:	601a      	str	r2, [r3, #0]

	// Copy "num_dl_static" bytes from pointer "EVE_RAM_DL" to pointer "MEM_DL_STATIC"
	EVE_cmd_memcpy(MEM_DL_STATIC, EVE_RAM_DL, num_dl_static);
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <initStaticGraphBackground+0x1dc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f44f 207f 	mov.w	r0, #1044480	; 0xff000
 80038bc:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 80038c0:	461a      	mov	r2, r3
 80038c2:	f7fe fc21 	bl	8002108 <EVE_cmd_memcpy>
	while (EVE_busy());
 80038c6:	bf00      	nop
 80038c8:	f7fe fae8 	bl	8001e9c <EVE_busy>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1fa      	bne.n	80038c8 <initStaticGraphBackground+0x154>

	EVE_cmd_track(0, 0, EVE_HSIZE, EVE_VSIZE, 1);
 80038d2:	2301      	movs	r3, #1
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2000      	movs	r0, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80038e2:	f7fe fc2f 	bl	8002144 <EVE_cmd_track>
}
 80038e6:	46bd      	mov	sp, r7
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ec:	03000001 	.word	0x03000001
 80038f0:	00f5f1ee 	.word	0x00f5f1ee
 80038f4:	04f5f1ee 	.word	0x04f5f1ee
 80038f8:	1f000009 	.word	0x1f000009
 80038fc:	40f00110 	.word	0x40f00110
 8003900:	0e000010 	.word	0x0e000010
 8003904:	0464584b 	.word	0x0464584b
 8003908:	1f000007 	.word	0x1f000007
 800390c:	40000042 	.word	0x40000042
 8003910:	408c0042 	.word	0x408c0042
 8003914:	40a00032 	.word	0x40a00032
 8003918:	40f00032 	.word	0x40f00032
 800391c:	04f3cd29 	.word	0x04f3cd29
 8003920:	1f000004 	.word	0x1f000004
 8003924:	0800a394 	.word	0x0800a394
 8003928:	0800a3a0 	.word	0x0800a3a0
 800392c:	1ffe8800 	.word	0x1ffe8800
 8003930:	1ffe8802 	.word	0x1ffe8802
 8003934:	1ffe8804 	.word	0x1ffe8804
 8003938:	1ffe8806 	.word	0x1ffe8806
 800393c:	1ffe8808 	.word	0x1ffe8808
 8003940:	1ffe8810 	.word	0x1ffe8810
 8003944:	1ffe8820 	.word	0x1ffe8820
 8003948:	1ffe8828 	.word	0x1ffe8828
 800394c:	00302100 	.word	0x00302100
 8003950:	1ffe8e70 	.word	0x1ffe8e70

08003954 <TFT_init>:

uint8_t TFT_init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	/// Initializes EVE (or checks if its already initialized). Only at first sucessful EVE_init() the tft is set active, backlight is set to medium brightness, the pre-elaborated touch calibration is loaded and the static Background is initiated. Created by Rudolph Riedel, adapted by RS @ MCI 2020/21
	if(EVE_init() != 0)
 8003958:	f7fe fc5a 	bl	8002210 <EVE_init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02b      	beq.n	80039ba <TFT_init+0x66>
	{
		#if defined (DEBUG_ENABLE)
			printf("TFT_init - EVE_init was ok, starting to init TFT!\n");
		#endif
		// Mark Display as active (TFT_display only does anythin after his)
		tft_active = 1;
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <TFT_init+0x6c>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]

		// Initial Backlight strength
		EVE_memWrite8(REG_PWM_DUTY, 0x30);	/* setup backlight, range is from 0 = off to 0x80 = max */
 8003968:	4816      	ldr	r0, [pc, #88]	; (80039c4 <TFT_init+0x70>)
 800396a:	2130      	movs	r1, #48	; 0x30
 800396c:	f7fe fa0a 	bl	8001d84 <EVE_memWrite8>

		// Write prerecorded touchscreen calibration back to display
		touch_calibrate();
 8003970:	f7ff fe8e 	bl	8003690 <touch_calibrate>

		// Clear screen, set precision for VERTEX2F to 1 pixel and show DL for the first time
		EVE_start_cmd_burst(); /* start writing to the cmd-fifo as one stream of bytes, only sending the address once */
 8003974:	f7fe fd84 	bl	8002480 <EVE_start_cmd_burst>
		EVE_cmd_dl_burst(CMD_DLSTART); /* start the display list */
 8003978:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800397c:	f7fe fe72 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(TAG(0)); /* do not use the following objects for touch-detection */
 8003980:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8003984:	f7fe fe6e 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_bgcolor_burst(MAIN_BGCOLOR);
 8003988:	480f      	ldr	r0, [pc, #60]	; (80039c8 <TFT_init+0x74>)
 800398a:	f7fe feaf 	bl	80026ec <EVE_cmd_bgcolor_burst>
		EVE_cmd_dl_burst(VERTEX_FORMAT(0)); /* reduce precision for VERTEX2F to 1 pixel instead of 1/16 pixel default */
 800398e:	f04f 501c 	mov.w	r0, #654311424	; 0x27000000
 8003992:	f7fe fe67 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_CLEAR_RGB | WHITE); /* set the default clear color to white */
 8003996:	f06f 407d 	mvn.w	r0, #4244635648	; 0xfd000000
 800399a:	f7fe fe63 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG); /* clear the screen - this and the previous prevent artifacts between lists, Attributes are the color, stencil and tag buffers */
 800399e:	480b      	ldr	r0, [pc, #44]	; (80039cc <TFT_init+0x78>)
 80039a0:	f7fe fe60 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_DISPLAY); /* instruct the graphics processor to show the list */
 80039a4:	2000      	movs	r0, #0
 80039a6:	f7fe fe5d 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(CMD_SWAP); /* make this list active */
 80039aa:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 80039ae:	f7fe fe59 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_end_cmd_burst(); /* stop writing to the cmd-fifo, the cmd-FIFO will be executed automatically after this or when DMA is done */
 80039b2:	f7fe fd8b 	bl	80024cc <EVE_end_cmd_burst>
		return 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <TFT_init+0x68>
	}
	else{
		return 0;
 80039ba:	2300      	movs	r3, #0
	}
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	1ffe8a09 	.word	0x1ffe8a09
 80039c4:	003020d4 	.word	0x003020d4
 80039c8:	00f5f1ee 	.word	0x00f5f1ee
 80039cc:	26000007 	.word	0x26000007

080039d0 <TFT_touch>:

void TFT_touch(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
	/// Check for touch events and setup vars for TFT_display() (Buttons). Created by Rudolph Riedel, adapted by RS @ MCI 2020/21
	// Init vars
	uint8_t tag; // temporary store of received touched tag
	
	// If Display is still busy, skip this evaluation to prevent hanging, glitches and flickers
	if(EVE_busy()) { return; } /* is EVE still processing the last display list? */
 80039d6:	f7fe fa61 	bl	8001e9c <EVE_busy>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d000      	beq.n	80039e2 <TFT_touch+0x12>
 80039e0:	e06e      	b.n	8003ac0 <TFT_touch+0xf0>

	// Read the value for the first touch point
	tag = EVE_memRead8(REG_TOUCH_TAG);
 80039e2:	4839      	ldr	r0, [pc, #228]	; (8003ac8 <TFT_touch+0xf8>)
 80039e4:	f7fe f936 	bl	8001c54 <EVE_memRead8>
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]

	// Determine which tag was touched
	switch(tag)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <TFT_touch+0x28>
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d00c      	beq.n	8003a10 <TFT_touch+0x40>
 80039f6:	e05b      	b.n	8003ab0 <TFT_touch+0xe0>
	{
		// nothing touched - reset states and locks
		case 0:
			toggle_lock = 0;
 80039f8:	4b34      	ldr	r3, [pc, #208]	; (8003acc <TFT_touch+0xfc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
			BGtouchInitial_X = 32768;
 80039fe:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <TFT_touch+0x100>)
 8003a00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a04:	801a      	strh	r2, [r3, #0]
			BGtouchInitial_Y = 32768;
 8003a06:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <TFT_touch+0x104>)
 8003a08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a0c:	801a      	strh	r2, [r3, #0]
			break;
 8003a0e:	e057      	b.n	8003ac0 <TFT_touch+0xf0>
		case 1:
			TouchXY = EVE_memRead32(REG_TOUCH_SCREEN_XY);
 8003a10:	4831      	ldr	r0, [pc, #196]	; (8003ad8 <TFT_touch+0x108>)
 8003a12:	f7fe f977 	bl	8001d04 <EVE_memRead32>
 8003a16:	4602      	mov	r2, r0
 8003a18:	4b30      	ldr	r3, [pc, #192]	; (8003adc <TFT_touch+0x10c>)
 8003a1a:	601a      	str	r2, [r3, #0]
			uint16_t X = TouchXY;
 8003a1c:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <TFT_touch+0x10c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	81bb      	strh	r3, [r7, #12]
			uint16_t Y = TouchXY >> 16;
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <TFT_touch+0x10c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	817b      	strh	r3, [r7, #10]

			// Detect initial touch on BG - save coordinates to determine where the user swipes
			if(BGtouchInitial_X == 32768 && BGtouchInitial_Y == 32768){
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <TFT_touch+0x100>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a32:	d10b      	bne.n	8003a4c <TFT_touch+0x7c>
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <TFT_touch+0x104>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	d106      	bne.n	8003a4c <TFT_touch+0x7c>
				BGtouchInitial_X = X;
 8003a3e:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <TFT_touch+0x100>)
 8003a40:	89bb      	ldrh	r3, [r7, #12]
 8003a42:	8013      	strh	r3, [r2, #0]
				BGtouchInitial_Y = Y;
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <TFT_touch+0x104>)
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	8013      	strh	r3, [r2, #0]
 8003a4a:	e030      	b.n	8003aae <TFT_touch+0xde>
			}
			else if(BGtouchInitial_X < 32768 && BGtouchInitial_Y < 32768){
 8003a4c:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <TFT_touch+0x100>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db2a      	blt.n	8003aae <TFT_touch+0xde>
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <TFT_touch+0x104>)
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b21b      	sxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db24      	blt.n	8003aae <TFT_touch+0xde>
				int16_t swipe_X = BGtouchInitial_X - X;
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <TFT_touch+0x100>)
 8003a66:	881a      	ldrh	r2, [r3, #0]
 8003a68:	89bb      	ldrh	r3, [r7, #12]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	813b      	strh	r3, [r7, #8]
				int16_t swipe_Y = BGtouchInitial_Y - Y;
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <TFT_touch+0x104>)
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	80fb      	strh	r3, [r7, #6]

				if(abs(swipe_X) > abs(swipe_Y)){
 8003a7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a80:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003a84:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bfb8      	it	lt
 8003a90:	425b      	neglt	r3, r3
 8003a92:	429a      	cmp	r2, r3
 8003a94:	dd0b      	ble.n	8003aae <TFT_touch+0xde>
					if(swipe_X > 100){
 8003a96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	dd03      	ble.n	8003aa6 <TFT_touch+0xd6>
						// swipe to left
						TFT_cur_Menu = 1; //dummy
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <TFT_touch+0x110>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e003      	b.n	8003aae <TFT_touch+0xde>
					}
					else{
						// swipe to right
						TFT_cur_Menu = 0; //dummy
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <TFT_touch+0x110>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
						// swipe up
					}
				}
			}

			break;
 8003aac:	e008      	b.n	8003ac0 <TFT_touch+0xf0>
 8003aae:	e007      	b.n	8003ac0 <TFT_touch+0xf0>
		default:
			// Execute current menu specific code
			(*TFT_touch_cur_Menu__fptr_arr[TFT_cur_Menu])(tag);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <TFT_touch+0x110>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <TFT_touch+0x114>)
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	4610      	mov	r0, r2
 8003abe:	4798      	blx	r3
	}
}
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	0030212c 	.word	0x0030212c
 8003acc:	1ffe8a1c 	.word	0x1ffe8a1c
 8003ad0:	1ffe8840 	.word	0x1ffe8840
 8003ad4:	1ffe8842 	.word	0x1ffe8842
 8003ad8:	00302124 	.word	0x00302124
 8003adc:	1ffe8a18 	.word	0x1ffe8a18
 8003ae0:	1ffe8a0c 	.word	0x1ffe8a0c
 8003ae4:	1ffe8838 	.word	0x1ffe8838

08003ae8 <TFT_display>:

void TFT_display(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	/// Dynamic portion of display-handling, meant to be called every 20ms or more. Created by Rudolph Riedel, extensively adapted by RS @ MCI 2020/21
	///
	/// The inputs are used to draw the Graph data. Note that also some predefined graph settings are used direct (#define G_... )

	if(tft_active != 0)
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <TFT_display+0x78>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d033      	beq.n	8003b5c <TFT_display+0x74>

		//EVE_cmd_track(0, 0, EVE_VSIZE, EVE_HSIZE, 1);


		// Get size of last display list to be printed on screen (section "Debug Values")
		display_list_size = EVE_memRead16(REG_CMD_DL);
 8003af4:	481b      	ldr	r0, [pc, #108]	; (8003b64 <TFT_display+0x7c>)
 8003af6:	f7fe f8d3 	bl	8001ca0 <EVE_memRead16>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <TFT_display+0x80>)
 8003b00:	801a      	strh	r2, [r3, #0]
		tracker = EVE_memRead32(REG_TRACKER);
 8003b02:	481a      	ldr	r0, [pc, #104]	; (8003b6c <TFT_display+0x84>)
 8003b04:	f7fe f8fe 	bl	8001d04 <EVE_memRead32>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <TFT_display+0x88>)
 8003b0c:	601a      	str	r2, [r3, #0]


		// Start Burst (start writing to the cmd-fifo as one stream of bytes, only sending the address once)
		EVE_start_cmd_burst();
 8003b0e:	f7fe fcb7 	bl	8002480 <EVE_start_cmd_burst>



		/////////////// Start the actual display list
		EVE_cmd_dl_burst(CMD_DLSTART);
 8003b12:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8003b16:	f7fe fda5 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_CLEAR_RGB | WHITE); /* set the default clear color to white */
 8003b1a:	f06f 407d 	mvn.w	r0, #4244635648	; 0xfd000000
 8003b1e:	f7fe fda1 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG); /* clear the screen - this and the previous prevent artifacts between lists, Attributes are the color, stencil and tag buffers */
 8003b22:	4814      	ldr	r0, [pc, #80]	; (8003b74 <TFT_display+0x8c>)
 8003b24:	f7fe fd9e 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(TAG(0));
 8003b28:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8003b2c:	f7fe fd9a 	bl	8002664 <EVE_cmd_dl_burst>

		// Insert static part of display-list from copy in gfx-mem
		EVE_cmd_append_burst(MEM_DL_STATIC, num_dl_static);
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <TFT_display+0x90>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f44f 207f 	mov.w	r0, #1044480	; 0xff000
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f7fe fd9d 	bl	8002678 <EVE_cmd_append_burst>


		// Execute current menu specific code
		(*TFT_display_cur_Menu__fptr_arr[TFT_cur_Menu])();
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <TFT_display+0x94>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <TFT_display+0x98>)
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	4798      	blx	r3


		/////////////// Finish Display list and burst
		EVE_cmd_dl_burst(DL_DISPLAY); /* instruct the graphics processor to show the list */
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7fe fd8a 	bl	8002664 <EVE_cmd_dl_burst>
		EVE_cmd_dl_burst(CMD_SWAP); /* make this list active */
 8003b50:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8003b54:	f7fe fd86 	bl	8002664 <EVE_cmd_dl_burst>

		EVE_end_cmd_burst(); /* stop writing to the cmd-fifo, the cmd-FIFO will be executed automatically after this or when DMA is done */
 8003b58:	f7fe fcb8 	bl	80024cc <EVE_end_cmd_burst>
	}
}
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	1ffe8a09 	.word	0x1ffe8a09
 8003b64:	00302100 	.word	0x00302100
 8003b68:	1ffe8a10 	.word	0x1ffe8a10
 8003b6c:	00309000 	.word	0x00309000
 8003b70:	1ffe8a14 	.word	0x1ffe8a14
 8003b74:	26000007 	.word	0x26000007
 8003b78:	1ffe8e70 	.word	0x1ffe8e70
 8003b7c:	1ffe8a0c 	.word	0x1ffe8a0c
 8003b80:	1ffe8830 	.word	0x1ffe8830

08003b84 <TFT_display_menu0>:

void TFT_display_menu0(void)
{
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b093      	sub	sp, #76	; 0x4c
 8003b88:	af0a      	add	r7, sp, #40	; 0x28
	/// The inputs are used to draw the Graph data. Note that also some predefined graph settings are used direct (#define G_... )

	/////////////// Display BUTTONS and Toggles
	EVE_cmd_gradcolor_burst(MAIN_BTNGRDCOLOR);
 8003b8a:	487c      	ldr	r0, [pc, #496]	; (8003d7c <TFT_display_menu0+0x1f8>)
 8003b8c:	f7fe fdfe 	bl	800278c <EVE_cmd_gradcolor_burst>
	EVE_cmd_dl_burst(DL_COLOR_RGB | MAIN_BTNTXTCOLOR);
 8003b90:	487b      	ldr	r0, [pc, #492]	; (8003d80 <TFT_display_menu0+0x1fc>)
 8003b92:	f7fe fd67 	bl	8002664 <EVE_cmd_dl_burst>
	EVE_cmd_fgcolor_burst(MAIN_BTNCOLOR);
 8003b96:	487b      	ldr	r0, [pc, #492]	; (8003d84 <TFT_display_menu0+0x200>)
 8003b98:	f7fe fdea 	bl	8002770 <EVE_cmd_fgcolor_burst>
	EVE_cmd_bgcolor_burst(MAIN_BTNCTSCOLOR);
 8003b9c:	487a      	ldr	r0, [pc, #488]	; (8003d88 <TFT_display_menu0+0x204>)
 8003b9e:	f7fe fda5 	bl	80026ec <EVE_cmd_bgcolor_burst>

	EVE_cmd_dl_burst(TAG(13)); /* assign tag-value '13' to the button that follows */
 8003ba2:	487a      	ldr	r0, [pc, #488]	; (8003d8c <TFT_display_menu0+0x208>)
 8003ba4:	f7fe fd5e 	bl	8002664 <EVE_cmd_dl_burst>
	if(InputType == 0){ 		EVE_cmd_button_burst(20,15,80,30, 27, 0,"Sensor");	}
 8003ba8:	4b79      	ldr	r3, [pc, #484]	; (8003d90 <TFT_display_menu0+0x20c>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10c      	bne.n	8003bcc <TFT_display_menu0+0x48>
 8003bb2:	231b      	movs	r3, #27
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <TFT_display_menu0+0x210>)
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	2014      	movs	r0, #20
 8003bc0:	210f      	movs	r1, #15
 8003bc2:	2250      	movs	r2, #80	; 0x50
 8003bc4:	231e      	movs	r3, #30
 8003bc6:	f7fe fd9f 	bl	8002708 <EVE_cmd_button_burst>
 8003bca:	e02f      	b.n	8003c2c <TFT_display_menu0+0xa8>
	else if(InputType == 1){	EVE_cmd_button_burst(20,15,80,30, 27, 0,"Imp");	}
 8003bcc:	4b70      	ldr	r3, [pc, #448]	; (8003d90 <TFT_display_menu0+0x20c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10c      	bne.n	8003bf0 <TFT_display_menu0+0x6c>
 8003bd6:	231b      	movs	r3, #27
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	4b6e      	ldr	r3, [pc, #440]	; (8003d98 <TFT_display_menu0+0x214>)
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	2014      	movs	r0, #20
 8003be4:	210f      	movs	r1, #15
 8003be6:	2250      	movs	r2, #80	; 0x50
 8003be8:	231e      	movs	r3, #30
 8003bea:	f7fe fd8d 	bl	8002708 <EVE_cmd_button_burst>
 8003bee:	e01d      	b.n	8003c2c <TFT_display_menu0+0xa8>
	else if(InputType == 2){	EVE_cmd_button_burst(20,15,80,30, 27, 0,"Saw");	}
 8003bf0:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <TFT_display_menu0+0x20c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d10c      	bne.n	8003c14 <TFT_display_menu0+0x90>
 8003bfa:	231b      	movs	r3, #27
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	4b66      	ldr	r3, [pc, #408]	; (8003d9c <TFT_display_menu0+0x218>)
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	2014      	movs	r0, #20
 8003c08:	210f      	movs	r1, #15
 8003c0a:	2250      	movs	r2, #80	; 0x50
 8003c0c:	231e      	movs	r3, #30
 8003c0e:	f7fe fd7b 	bl	8002708 <EVE_cmd_button_burst>
 8003c12:	e00b      	b.n	8003c2c <TFT_display_menu0+0xa8>
	else{						EVE_cmd_button_burst(20,15,80,30, 27, 0,"Sine");	}
 8003c14:	231b      	movs	r3, #27
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	4b60      	ldr	r3, [pc, #384]	; (8003da0 <TFT_display_menu0+0x21c>)
 8003c1e:	9302      	str	r3, [sp, #8]
 8003c20:	2014      	movs	r0, #20
 8003c22:	210f      	movs	r1, #15
 8003c24:	2250      	movs	r2, #80	; 0x50
 8003c26:	231e      	movs	r3, #30
 8003c28:	f7fe fd6e 	bl	8002708 <EVE_cmd_button_burst>

	EVE_cmd_dl_burst(TAG(12)); /* assign tag-value '12' to the toggle that follows */
 8003c2c:	485d      	ldr	r0, [pc, #372]	; (8003da4 <TFT_display_menu0+0x220>)
 8003c2e:	f7fe fd19 	bl	8002664 <EVE_cmd_dl_burst>
	if(toggle_state_graphmode){
 8003c32:	4b5d      	ldr	r3, [pc, #372]	; (8003da8 <TFT_display_menu0+0x224>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <TFT_display_menu0+0xd2>
		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0xFFFF, "Roll");
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <TFT_display_menu0+0x228>)
 8003c46:	9302      	str	r3, [sp, #8]
 8003c48:	2078      	movs	r0, #120	; 0x78
 8003c4a:	2118      	movs	r1, #24
 8003c4c:	223e      	movs	r2, #62	; 0x3e
 8003c4e:	231b      	movs	r3, #27
 8003c50:	f7fe ff02 	bl	8002a58 <EVE_cmd_toggle_burst>
 8003c54:	e00b      	b.n	8003c6e <TFT_display_menu0+0xea>
	}
	else{
		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0x0000, "Frame");
 8003c56:	2300      	movs	r3, #0
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <TFT_display_menu0+0x22c>)
 8003c60:	9302      	str	r3, [sp, #8]
 8003c62:	2078      	movs	r0, #120	; 0x78
 8003c64:	2118      	movs	r1, #24
 8003c66:	223e      	movs	r2, #62	; 0x3e
 8003c68:	231b      	movs	r3, #27
 8003c6a:	f7fe fef5 	bl	8002a58 <EVE_cmd_toggle_burst>
	}

	EVE_cmd_dl_burst(TAG(10)); /* assign tag-value '10' to the button that follows */
 8003c6e:	4851      	ldr	r0, [pc, #324]	; (8003db4 <TFT_display_menu0+0x230>)
 8003c70:	f7fe fcf8 	bl	8002664 <EVE_cmd_dl_burst>
	EVE_cmd_button_burst(205,15,80,30, 27, toggle_state_dimmer,"Dimmer");
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <TFT_display_menu0+0x234>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	221b      	movs	r2, #27
 8003c7a:	9200      	str	r2, [sp, #0]
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	4b4f      	ldr	r3, [pc, #316]	; (8003dbc <TFT_display_menu0+0x238>)
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	20cd      	movs	r0, #205	; 0xcd
 8003c84:	210f      	movs	r1, #15
 8003c86:	2250      	movs	r2, #80	; 0x50
 8003c88:	231e      	movs	r3, #30
 8003c8a:	f7fe fd3d 	bl	8002708 <EVE_cmd_button_burst>

	EVE_cmd_dl_burst(TAG(0)); /* no touch from here on */
 8003c8e:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8003c92:	f7fe fce7 	bl	8002664 <EVE_cmd_dl_burst>

	/////////////// Debug Values
	#if defined (EVE_DMA)
	EVE_cmd_number_burst(120, EVE_VSIZE - 65, 26, EVE_OPT_RIGHTX, cmd_fifo_size); /* number of bytes written to the cmd-fifo */
	#endif
	EVE_cmd_number_burst(470, 10, 26, EVE_OPT_RIGHTX, display_list_size); /* number of bytes written to the display-list by the command co-pro */
 8003c96:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <TFT_display_menu0+0x23c>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003ca0:	210a      	movs	r1, #10
 8003ca2:	221a      	movs	r2, #26
 8003ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ca8:	f7fe fdd4 	bl	8002854 <EVE_cmd_number_burst>

	// Write current sensor value with unit
	char buffer[32]; // buffer for double to string conversion
	sprintf(buffer, "%.2lf", (G_amp_max/G_y_max)*InputBuffer1[InputBuffer1_idx]); // double to string conversion
 8003cac:	4b45      	ldr	r3, [pc, #276]	; (8003dc4 <TFT_display_menu0+0x240>)
 8003cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb2:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <TFT_display_menu0+0x244>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f003 fa5c 	bl	8007174 <__aeabi_ddiv>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4614      	mov	r4, r2
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <TFT_display_menu0+0x248>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <TFT_display_menu0+0x24c>)
 8003ccc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 f8bf 	bl	8006e54 <__aeabi_i2d>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f003 f91f 	bl	8006f20 <__aeabi_dmul>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4614      	mov	r4, r2
 8003ce8:	461d      	mov	r5, r3
 8003cea:	463b      	mov	r3, r7
 8003cec:	4618      	mov	r0, r3
 8003cee:	4939      	ldr	r1, [pc, #228]	; (8003dd4 <TFT_display_menu0+0x250>)
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	f004 f91c 	bl	8007f30 <siprintf>
	strcat(buffer, unit_Sensor);
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f004 f93c 	bl	8007f78 <strlen>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	463b      	mov	r3, r7
 8003d06:	4413      	add	r3, r2
 8003d08:	4a33      	ldr	r2, [pc, #204]	; (8003dd8 <TFT_display_menu0+0x254>)
 8003d0a:	8811      	ldrh	r1, [r2, #0]
 8003d0c:	7892      	ldrb	r2, [r2, #2]
 8003d0e:	8019      	strh	r1, [r3, #0]
 8003d10:	709a      	strb	r2, [r3, #2]
	EVE_cmd_text_burst(470, 25, 26, EVE_OPT_RIGHTX, buffer);
 8003d12:	463b      	mov	r3, r7
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003d1a:	2119      	movs	r1, #25
 8003d1c:	221a      	movs	r2, #26
 8003d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d22:	f7fe fe6f 	bl	8002a04 <EVE_cmd_text_burst>



	/////////////// GRAPH
	///// Print dynamic part of the Graph (data & marker)
	TFT_GraphData(G_x, G_y, G_width, G_height, G_PADDING, G_y_max, &InputBuffer1[0], INPUTBUFFER1_SIZE, &InputBuffer1_idx, toggle_state_graphmode, GRAPH_DATA1COLOR, GRAPH_POSMARKCOLOR);
 8003d26:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <TFT_display_menu0+0x258>)
 8003d28:	f8b3 e000 	ldrh.w	lr, [r3]
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <TFT_display_menu0+0x25c>)
 8003d2e:	881e      	ldrh	r6, [r3, #0]
 8003d30:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <TFT_display_menu0+0x260>)
 8003d32:	881d      	ldrh	r5, [r3, #0]
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <TFT_display_menu0+0x264>)
 8003d36:	881c      	ldrh	r4, [r3, #0]
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <TFT_display_menu0+0x244>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	491a      	ldr	r1, [pc, #104]	; (8003da8 <TFT_display_menu0+0x224>)
 8003d40:	8809      	ldrh	r1, [r1, #0]
 8003d42:	b2c9      	uxtb	r1, r1
 8003d44:	200a      	movs	r0, #10
 8003d46:	9000      	str	r0, [sp, #0]
 8003d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <TFT_display_menu0+0x24c>)
 8003d4e:	9304      	str	r3, [sp, #16]
 8003d50:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003d54:	9305      	str	r3, [sp, #20]
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <TFT_display_menu0+0x248>)
 8003d58:	9306      	str	r3, [sp, #24]
 8003d5a:	9107      	str	r1, [sp, #28]
 8003d5c:	f643 739e 	movw	r3, #16286	; 0x3f9e
 8003d60:	9308      	str	r3, [sp, #32]
 8003d62:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003d66:	9309      	str	r3, [sp, #36]	; 0x24
 8003d68:	4670      	mov	r0, lr
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4623      	mov	r3, r4
 8003d70:	f7ff fb86 	bl	8003480 <TFT_GraphData>

}
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	008c4b12 	.word	0x008c4b12
 8003d80:	04fff8ee 	.word	0x04fff8ee
 8003d84:	00eaa92b 	.word	0x00eaa92b
 8003d88:	00ad9666 	.word	0x00ad9666
 8003d8c:	0300000d 	.word	0x0300000d
 8003d90:	1ffe8964 	.word	0x1ffe8964
 8003d94:	0800a3a8 	.word	0x0800a3a8
 8003d98:	0800a3b0 	.word	0x0800a3b0
 8003d9c:	0800a3b4 	.word	0x0800a3b4
 8003da0:	0800a3b8 	.word	0x0800a3b8
 8003da4:	0300000c 	.word	0x0300000c
 8003da8:	1ffe8a1e 	.word	0x1ffe8a1e
 8003dac:	0800a3c0 	.word	0x0800a3c0
 8003db0:	0800a3c8 	.word	0x0800a3c8
 8003db4:	0300000a 	.word	0x0300000a
 8003db8:	1ffe8a20 	.word	0x1ffe8a20
 8003dbc:	0800a3d0 	.word	0x0800a3d0
 8003dc0:	1ffe8a10 	.word	0x1ffe8a10
 8003dc4:	1ffe8808 	.word	0x1ffe8808
 8003dc8:	1ffe8818 	.word	0x1ffe8818
 8003dcc:	1ffe8a4c 	.word	0x1ffe8a4c
 8003dd0:	1ffe8a50 	.word	0x1ffe8a50
 8003dd4:	0800a3d8 	.word	0x0800a3d8
 8003dd8:	0800a3e0 	.word	0x0800a3e0
 8003ddc:	1ffe8800 	.word	0x1ffe8800
 8003de0:	1ffe8802 	.word	0x1ffe8802
 8003de4:	1ffe8804 	.word	0x1ffe8804
 8003de8:	1ffe8806 	.word	0x1ffe8806

08003dec <TFT_display_menu1>:

void TFT_display_menu1(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af04      	add	r7, sp, #16
	/// Test menu

	/////////////// Display BUTTONS and Toggles
	EVE_cmd_gradcolor_burst(MAIN_BTNGRDCOLOR);
 8003df2:	484c      	ldr	r0, [pc, #304]	; (8003f24 <TFT_display_menu1+0x138>)
 8003df4:	f7fe fcca 	bl	800278c <EVE_cmd_gradcolor_burst>
	EVE_cmd_dl_burst(DL_COLOR_RGB | MAIN_BTNTXTCOLOR);
 8003df8:	484b      	ldr	r0, [pc, #300]	; (8003f28 <TFT_display_menu1+0x13c>)
 8003dfa:	f7fe fc33 	bl	8002664 <EVE_cmd_dl_burst>
	EVE_cmd_fgcolor_burst(MAIN_BTNCOLOR);
 8003dfe:	484b      	ldr	r0, [pc, #300]	; (8003f2c <TFT_display_menu1+0x140>)
 8003e00:	f7fe fcb6 	bl	8002770 <EVE_cmd_fgcolor_burst>
	EVE_cmd_bgcolor_burst(MAIN_BTNCTSCOLOR);
 8003e04:	484a      	ldr	r0, [pc, #296]	; (8003f30 <TFT_display_menu1+0x144>)
 8003e06:	f7fe fc71 	bl	80026ec <EVE_cmd_bgcolor_burst>

	EVE_cmd_dl_burst(TAG(12)); /* assign tag-value '12' to the toggle that follows */
 8003e0a:	484a      	ldr	r0, [pc, #296]	; (8003f34 <TFT_display_menu1+0x148>)
 8003e0c:	f7fe fc2a 	bl	8002664 <EVE_cmd_dl_burst>
	if(toggle_state_graphmode){
 8003e10:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <TFT_display_menu1+0x14c>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <TFT_display_menu1+0x48>
		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0xFFFF, "li");
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <TFT_display_menu1+0x150>)
 8003e24:	9302      	str	r3, [sp, #8]
 8003e26:	2078      	movs	r0, #120	; 0x78
 8003e28:	2118      	movs	r1, #24
 8003e2a:	223e      	movs	r2, #62	; 0x3e
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	f7fe fe13 	bl	8002a58 <EVE_cmd_toggle_burst>
 8003e32:	e00b      	b.n	8003e4c <TFT_display_menu1+0x60>
	}
	else{
		EVE_cmd_toggle_burst(120,24,62, 27, 0, 0x0000, "re");
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <TFT_display_menu1+0x154>)
 8003e3e:	9302      	str	r3, [sp, #8]
 8003e40:	2078      	movs	r0, #120	; 0x78
 8003e42:	2118      	movs	r1, #24
 8003e44:	223e      	movs	r2, #62	; 0x3e
 8003e46:	231b      	movs	r3, #27
 8003e48:	f7fe fe06 	bl	8002a58 <EVE_cmd_toggle_burst>
	}

	EVE_cmd_dl_burst(TAG(2));
 8003e4c:	483d      	ldr	r0, [pc, #244]	; (8003f44 <TFT_display_menu1+0x158>)
 8003e4e:	f7fe fc09 	bl	8002664 <EVE_cmd_dl_burst>

	int val = tracker >> 16;
 8003e52:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <TFT_display_menu1+0x15c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	607b      	str	r3, [r7, #4]
	if ((tracker & 0xff) == 2){
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <TFT_display_menu1+0x15c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d10d      	bne.n	8003e80 <TFT_display_menu1+0x94>
		EVE_cmd_slider_burst(20, 100, 100, 20, 0, val, 65535);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2200      	movs	r2, #0
 8003e6a:	9200      	str	r2, [sp, #0]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	2014      	movs	r0, #20
 8003e76:	2164      	movs	r1, #100	; 0x64
 8003e78:	2264      	movs	r2, #100	; 0x64
 8003e7a:	2314      	movs	r3, #20
 8003e7c:	f7fe fd38 	bl	80028f0 <EVE_cmd_slider_burst>
	}
	if ((tracker & 0xff) == 1){
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <TFT_display_menu1+0x15c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10e      	bne.n	8003ea8 <TFT_display_menu1+0xbc>
		EVE_cmd_slider_burst(20, 100, 100, 20, 0, val, 65535);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2200      	movs	r2, #0
 8003e90:	9200      	str	r2, [sp, #0]
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e98:	9302      	str	r3, [sp, #8]
 8003e9a:	2014      	movs	r0, #20
 8003e9c:	2164      	movs	r1, #100	; 0x64
 8003e9e:	2264      	movs	r2, #100	; 0x64
 8003ea0:	2314      	movs	r3, #20
 8003ea2:	f7fe fd25 	bl	80028f0 <EVE_cmd_slider_burst>
 8003ea6:	e00d      	b.n	8003ec4 <TFT_display_menu1+0xd8>
	}
	else{
		EVE_cmd_slider_burst(20, 100, 100, 20, 0, val, 65535);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	9200      	str	r2, [sp, #0]
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	2014      	movs	r0, #20
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	2264      	movs	r2, #100	; 0x64
 8003ebe:	2314      	movs	r3, #20
 8003ec0:	f7fe fd16 	bl	80028f0 <EVE_cmd_slider_burst>
	}
	EVE_cmd_dl_burst(TAG(0)); /* no touch from here on */
 8003ec4:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8003ec8:	f7fe fbcc 	bl	8002664 <EVE_cmd_dl_burst>

	EVE_cmd_number_burst(470, 10, 26, EVE_OPT_RIGHTX, val); /* number of bytes written to the display-list by the command co-pro */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003ed4:	210a      	movs	r1, #10
 8003ed6:	221a      	movs	r2, #26
 8003ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003edc:	f7fe fcba 	bl	8002854 <EVE_cmd_number_burst>

	EVE_cmd_fgcolor_burst(MAIN_TEXTCOLOR);
 8003ee0:	481a      	ldr	r0, [pc, #104]	; (8003f4c <TFT_display_menu1+0x160>)
 8003ee2:	f7fe fc45 	bl	8002770 <EVE_cmd_fgcolor_burst>
	uint16_t X = TouchXY;
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <TFT_display_menu1+0x164>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	807b      	strh	r3, [r7, #2]
	uint16_t Y = TouchXY >> 16;
 8003eec:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <TFT_display_menu1+0x164>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	803b      	strh	r3, [r7, #0]
	EVE_cmd_number_burst(470, EVE_VSIZE-50, 26, EVE_OPT_RIGHTX, X);
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003efc:	21de      	movs	r1, #222	; 0xde
 8003efe:	221a      	movs	r2, #26
 8003f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f04:	f7fe fca6 	bl	8002854 <EVE_cmd_number_burst>
	EVE_cmd_number_burst(470, EVE_VSIZE-25, 26, EVE_OPT_RIGHTX, Y);
 8003f08:	883b      	ldrh	r3, [r7, #0]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003f10:	21f7      	movs	r1, #247	; 0xf7
 8003f12:	221a      	movs	r2, #26
 8003f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f18:	f7fe fc9c 	bl	8002854 <EVE_cmd_number_burst>

}
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	008c4b12 	.word	0x008c4b12
 8003f28:	04fff8ee 	.word	0x04fff8ee
 8003f2c:	00eaa92b 	.word	0x00eaa92b
 8003f30:	00ad9666 	.word	0x00ad9666
 8003f34:	0300000c 	.word	0x0300000c
 8003f38:	1ffe8a1e 	.word	0x1ffe8a1e
 8003f3c:	0800a3e4 	.word	0x0800a3e4
 8003f40:	0800a3e8 	.word	0x0800a3e8
 8003f44:	03000002 	.word	0x03000002
 8003f48:	1ffe8a14 	.word	0x1ffe8a14
 8003f4c:	00f3cd29 	.word	0x00f3cd29
 8003f50:	1ffe8a18 	.word	0x1ffe8a18

08003f54 <TFT_touch_menu0>:


void TFT_touch_menu0(uint8_t tag){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
	// Determine which tag was touched
	switch(tag)
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	d020      	beq.n	8003fa6 <TFT_touch_menu0+0x52>
 8003f64:	2b0d      	cmp	r3, #13
 8003f66:	d032      	beq.n	8003fce <TFT_touch_menu0+0x7a>
 8003f68:	2b0a      	cmp	r3, #10
 8003f6a:	d14a      	bne.n	8004002 <TFT_touch_menu0+0xae>
	{
		// dimmer button on top as on/off radio-switch
		case 10:
			if(toggle_lock == 0) {
 8003f6c:	4b26      	ldr	r3, [pc, #152]	; (8004008 <TFT_touch_menu0+0xb4>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d117      	bne.n	8003fa4 <TFT_touch_menu0+0x50>
				printf("Button Dimmer touched\n");
				toggle_lock = 42;
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <TFT_touch_menu0+0xb4>)
 8003f76:	222a      	movs	r2, #42	; 0x2a
 8003f78:	701a      	strb	r2, [r3, #0]
				if(toggle_state_dimmer == 0){
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <TFT_touch_menu0+0xb8>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d108      	bne.n	8003f94 <TFT_touch_menu0+0x40>
					toggle_state_dimmer = EVE_OPT_FLAT;
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <TFT_touch_menu0+0xb8>)
 8003f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f88:	801a      	strh	r2, [r3, #0]
					EVE_memWrite8(REG_PWM_DUTY, 0x01);	/* setup backlight, range is from 0 = off to 0x80 = max */
 8003f8a:	4821      	ldr	r0, [pc, #132]	; (8004010 <TFT_touch_menu0+0xbc>)
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	f7fd fef9 	bl	8001d84 <EVE_memWrite8>
 8003f92:	e007      	b.n	8003fa4 <TFT_touch_menu0+0x50>
				}
				else {
					toggle_state_dimmer = 0;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <TFT_touch_menu0+0xb8>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	801a      	strh	r2, [r3, #0]
					EVE_memWrite8(REG_PWM_DUTY, 0x80);	/* setup backlight, range is from 0 = off to 0x80 = max */
 8003f9a:	481d      	ldr	r0, [pc, #116]	; (8004010 <TFT_touch_menu0+0xbc>)
 8003f9c:	2180      	movs	r1, #128	; 0x80
 8003f9e:	f7fd fef1 	bl	8001d84 <EVE_memWrite8>
				}
			}
			break;
 8003fa2:	e02e      	b.n	8004002 <TFT_touch_menu0+0xae>
 8003fa4:	e02d      	b.n	8004002 <TFT_touch_menu0+0xae>
		// roll/frame mode toggle on top
		case 12:
			if(toggle_lock == 0) {
 8003fa6:	4b18      	ldr	r3, [pc, #96]	; (8004008 <TFT_touch_menu0+0xb4>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10e      	bne.n	8003fcc <TFT_touch_menu0+0x78>
				printf("Toggle Roll touched\n");
				toggle_lock = 42;
 8003fae:	4b16      	ldr	r3, [pc, #88]	; (8004008 <TFT_touch_menu0+0xb4>)
 8003fb0:	222a      	movs	r2, #42	; 0x2a
 8003fb2:	701a      	strb	r2, [r3, #0]
				if(toggle_state_graphmode == 0)	{
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <TFT_touch_menu0+0xc0>)
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <TFT_touch_menu0+0x70>
					toggle_state_graphmode = 1;
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <TFT_touch_menu0+0xc0>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	e003      	b.n	8003fcc <TFT_touch_menu0+0x78>
				}
				else {
					toggle_state_graphmode = 0;
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <TFT_touch_menu0+0xc0>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
 8003fca:	e01a      	b.n	8004002 <TFT_touch_menu0+0xae>
 8003fcc:	e019      	b.n	8004002 <TFT_touch_menu0+0xae>
		// signal switcher button
		case 13:
			if(toggle_lock == 0) {
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <TFT_touch_menu0+0xb4>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d114      	bne.n	8004000 <TFT_touch_menu0+0xac>
				printf("Switch Signal\n");
				toggle_lock = 42;
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <TFT_touch_menu0+0xb4>)
 8003fd8:	222a      	movs	r2, #42	; 0x2a
 8003fda:	701a      	strb	r2, [r3, #0]
				InputType++;
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <TFT_touch_menu0+0xc4>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <TFT_touch_menu0+0xc4>)
 8003fe8:	701a      	strb	r2, [r3, #0]
				if(InputType > 3){ InputType = 0; }
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <TFT_touch_menu0+0xc4>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d902      	bls.n	8003ffa <TFT_touch_menu0+0xa6>
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <TFT_touch_menu0+0xc4>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
				TFT_cur_Menu = 1;
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <TFT_touch_menu0+0xc8>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
			}
			break;
 8004000:	bf00      	nop
	}
}
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	1ffe8a1c 	.word	0x1ffe8a1c
 800400c:	1ffe8a20 	.word	0x1ffe8a20
 8004010:	003020d4 	.word	0x003020d4
 8004014:	1ffe8a1e 	.word	0x1ffe8a1e
 8004018:	1ffe8964 	.word	0x1ffe8964
 800401c:	1ffe8a0c 	.word	0x1ffe8a0c

08004020 <TFT_touch_menu1>:
void TFT_touch_menu1(uint8_t tag){
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
	// Determine which tag was touched
	switch(tag)
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <TFT_touch_menu1+0x16>
 8004030:	2b0c      	cmp	r3, #12
 8004032:	d004      	beq.n	800403e <TFT_touch_menu1+0x1e>
 8004034:	e016      	b.n	8004064 <TFT_touch_menu1+0x44>
	{
		// nothing touched - reset states and locks
		case 0:
			toggle_lock = 0;
 8004036:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <TFT_touch_menu1+0x50>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
			break;
 800403c:	e012      	b.n	8004064 <TFT_touch_menu1+0x44>
		// li/re mode toggle on top
		case 12:
			if(toggle_lock == 0) {
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <TFT_touch_menu1+0x50>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <TFT_touch_menu1+0x42>
				printf("Toggle li/re touched\n");
				toggle_lock = 42;
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <TFT_touch_menu1+0x50>)
 8004048:	222a      	movs	r2, #42	; 0x2a
 800404a:	701a      	strb	r2, [r3, #0]
				if(toggle_state_graphmode == 0)	{
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <TFT_touch_menu1+0x54>)
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <TFT_touch_menu1+0x3c>
					toggle_state_graphmode = 1;
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <TFT_touch_menu1+0x54>)
 8004056:	2201      	movs	r2, #1
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	e002      	b.n	8004062 <TFT_touch_menu1+0x42>
				}
				else {
					toggle_state_graphmode = 0;
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <TFT_touch_menu1+0x54>)
 800405e:	2200      	movs	r2, #0
 8004060:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
 8004062:	bf00      	nop
	}

}
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	1ffe8a1c 	.word	0x1ffe8a1c
 8004074:	1ffe8a1e 	.word	0x1ffe8a1e

08004078 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2201      	movs	r2, #1
 8004088:	409a      	lsls	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]
}
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	60da      	str	r2, [r3, #12]
}
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	611a      	str	r2, [r3, #16]
}
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80040d4:	887a      	ldrh	r2, [r7, #2]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80040f0:	887a      	ldrh	r2, [r7, #2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	611a      	str	r2, [r3, #16]
}
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop

0800411c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	2101      	movs	r1, #1
 8004132:	fa01 f303 	lsl.w	r3, r1, r3
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800415a:	f083 0301 	eor.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f808 	bl	8004184 <TIMER_CCU4_lInit>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fe31 	bl	8004df8 <GLOBAL_CCU4_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7e1b      	ldrb	r3, [r3, #24]
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7ff ff66 	bl	8004078 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7fc feb8 	bl	8000f2c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f82d 	bl	800421c <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00f      	beq.n	80041ec <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d6:	4610      	mov	r0, r2
 80041d8:	2100      	movs	r1, #0
 80041da:	461a      	mov	r2, r3
 80041dc:	f7fc fedc 	bl	8000f98 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	4618      	mov	r0, r3
 80041e6:	2100      	movs	r1, #0
 80041e8:	f7ff ff98 	bl	800411c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff ff5d 	bl	80040b0 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ff43 	bl	8004098 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	f7ff ff4a 	bl	80040c8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	4618      	mov	r0, r3
 800423a:	2100      	movs	r1, #0
 800423c:	f7ff ff52 	bl	80040e4 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7ff ff57 	bl	8004100 <XMC_CCU4_EnableShadowTransfer>
}
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	460b      	mov	r3, r1
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 8004266:	8979      	ldrh	r1, [r7, #10]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	3220      	adds	r2, #32
 800426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800428e:	b2db      	uxtb	r3, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	460b      	mov	r3, r1
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	3260      	adds	r2, #96	; 0x60
 80042ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80042ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800432e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <XMC_USIC_CH_RXFIFO_ClearEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
                                                   const uint32_t event)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  channel->TRBSCR = event;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	019b      	lsls	r3, r3, #6
 8004398:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop

080043ac <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4798      	blx	r3
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]

  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop

08004404 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800441c:	2b02      	cmp	r3, #2
 800441e:	d106      	bne.n	800442e <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	f000 f821 	bl	800446c <SPI_MASTER_lStartTransmitPolling>
 800442a:	4603      	mov	r3, r0
 800442c:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8004450:	2b02      	cmp	r3, #2
 8004452:	d106      	bne.n	8004462 <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	f000 f915 	bl	8004688 <SPI_MASTER_lStartReceivePolling>
 800445e:	4603      	mov	r3, r0
 8004460:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 8004462:	7dfb      	ldrb	r3, [r7, #23]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <SPI_MASTER_lStartTransmitPolling>:
}
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lStartTransmitPolling(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint16_t data;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 8004478:	2301      	movs	r3, #1
 800447a:	61bb      	str	r3, [r7, #24]
                                                            Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  status = SPI_MASTER_STATUS_BUSY;
 800447c:	2302      	movs	r3, #2
 800447e:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	617b      	str	r3, [r7, #20]
  data = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	83bb      	strh	r3, [r7, #28]

  XMC_ASSERT("SPI_MASTER_lStartTransmitPolling:handle NULL" , (handle != NULL));

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80f0 	beq.w	8004672 <SPI_MASTER_lStartTransmitPolling+0x206>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80ec 	beq.w	8004672 <SPI_MASTER_lStartTransmitPolling+0x206>
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f083 0301 	eor.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80e1 	beq.w	8004670 <SPI_MASTER_lStartTransmitPolling+0x204>
    {
      if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d901      	bls.n	80044bc <SPI_MASTER_lStartTransmitPolling+0x50>
      {
        bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80044b8:	2302      	movs	r3, #2
 80044ba:	61bb      	str	r3, [r7, #24]
      }

      runtime_handle->tx_busy = true;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2020 	strb.w	r2, [r3, #32]
      /* Obtain the address of data, size of data */
      runtime_handle->tx_data = dataptr;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	619a      	str	r2, [r3, #24]
      runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	fa03 f202 	lsl.w	r2, r3, r2
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	605a      	str	r2, [r3, #4]
      /* Initialize to first index and set the busy flag */
      runtime_handle->tx_data_index = 0U;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	7f1b      	ldrb	r3, [r3, #28]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7ff ff47 	bl	8004380 <XMC_SPI_CH_SetTransmitMode>

      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04b      	beq.n	8004596 <SPI_MASTER_lStartTransmitPolling+0x12a>
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff feea 	bl	80042dc <XMC_USIC_CH_TXFIFO_Flush>

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8004508:	e03e      	b.n	8004588 <SPI_MASTER_lStartTransmitPolling+0x11c>
        {
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 800450a:	bf00      	nop
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fef1 	bl	80042f8 <XMC_USIC_CH_TXFIFO_IsFull>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f7      	bne.n	800450c <SPI_MASTER_lStartTransmitPolling+0xa0>
          {
              /* Wait until FIFO is having space for next entry */
          }
          if (runtime_handle->tx_data_dummy == true)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <SPI_MASTER_lStartTransmitPolling+0xd4>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	7f1b      	ldrb	r3, [r3, #28]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004538:	461a      	mov	r2, r3
 800453a:	f7ff febd 	bl	80042b8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 800453e:	e01d      	b.n	800457c <SPI_MASTER_lStartTransmitPolling+0x110>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d107      	bne.n	8004556 <SPI_MASTER_lStartTransmitPolling+0xea>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	83bb      	strh	r3, [r7, #28]
 8004554:	e006      	b.n	8004564 <SPI_MASTER_lStartTransmitPolling+0xf8>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4413      	add	r3, r2
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	7f1b      	ldrb	r3, [r3, #28]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461c      	mov	r4, r3
 8004570:	8bbb      	ldrh	r3, [r7, #28]
 8004572:	4610      	mov	r0, r2
 8004574:	4619      	mov	r1, r3
 8004576:	4622      	mov	r2, r4
 8004578:	f7ff fe9e 	bl	80042b8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	441a      	add	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d3ba      	bcc.n	800450a <SPI_MASTER_lStartTransmitPolling+0x9e>
 8004594:	e056      	b.n	8004644 <SPI_MASTER_lStartTransmitPolling+0x1d8>
      }
      else
      {
        do
        {
          while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004596:	bf00      	nop
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fe6d 	bl	800427c <XMC_USIC_CH_GetTransmitBufferStatus>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d0f7      	beq.n	8004598 <SPI_MASTER_lStartTransmitPolling+0x12c>
          {
          }

          if (runtime_handle->tx_data_dummy == true)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <SPI_MASTER_lStartTransmitPolling+0x160>
          {
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, runtime_handle->spi_master_mode);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	7f1b      	ldrb	r3, [r3, #28]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80045c4:	461a      	mov	r2, r3
 80045c6:	f7ff fe47 	bl	8004258 <XMC_USIC_CH_WriteToTBUFTCI>
 80045ca:	e01d      	b.n	8004608 <SPI_MASTER_lStartTransmitPolling+0x19c>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d107      	bne.n	80045e2 <SPI_MASTER_lStartTransmitPolling+0x176>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	83bb      	strh	r3, [r7, #28]
 80045e0:	e006      	b.n	80045f0 <SPI_MASTER_lStartTransmitPolling+0x184>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	4413      	add	r3, r2
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, runtime_handle->spi_master_mode);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	7f1b      	ldrb	r3, [r3, #28]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461c      	mov	r4, r3
 80045fc:	8bbb      	ldrh	r3, [r7, #28]
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	4622      	mov	r2, r4
 8004604:	f7ff fe28 	bl	8004258 <XMC_USIC_CH_WriteToTBUFTCI>
          }
          (runtime_handle->tx_data_index)+=bytes_per_word;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	441a      	add	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	609a      	str	r2, [r3, #8]

          while ((XMC_SPI_CH_GetStatusFlag(handle->channel) & (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION) == 0U)
 8004614:	bf00      	nop
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fec6 	bl	80043ac <XMC_SPI_CH_GetStatusFlag>
 8004620:	4603      	mov	r3, r0
 8004622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f5      	beq.n	8004616 <SPI_MASTER_lStartTransmitPolling+0x1aa>
          {

          }
          XMC_SPI_CH_ClearStatusFlag(handle->channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004634:	f7ff fec6 	bl	80043c4 <XMC_SPI_CH_ClearStatusFlag>
        } while(runtime_handle->tx_data_index < runtime_handle->tx_data_count);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d3a8      	bcc.n	8004596 <SPI_MASTER_lStartTransmitPolling+0x12a>
      }

      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004644:	bf00      	nop
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fe16 	bl	800427c <XMC_USIC_CH_GetTransmitBufferStatus>
 8004650:	4603      	mov	r3, r0
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d0f7      	beq.n	8004646 <SPI_MASTER_lStartTransmitPolling+0x1da>
      {
      }

      runtime_handle->tx_busy = false;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data_count = 0U;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	605a      	str	r2, [r3, #4]
      runtime_handle->tx_data_index = 0U;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2200      	movs	r2, #0
 8004668:	609a      	str	r2, [r3, #8]
      status = SPI_MASTER_STATUS_SUCCESS;
 800466a:	2300      	movs	r3, #0
 800466c:	77fb      	strb	r3, [r7, #31]

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 800466e:	e002      	b.n	8004676 <SPI_MASTER_lStartTransmitPolling+0x20a>
 8004670:	e001      	b.n	8004676 <SPI_MASTER_lStartTransmitPolling+0x20a>
      status = SPI_MASTER_STATUS_SUCCESS;
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8004672:	2303      	movs	r3, #3
 8004674:	77fb      	strb	r3, [r7, #31]
  }
  runtime_handle->rx_data_dummy = true;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  return status;
 800467e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3724      	adds	r7, #36	; 0x24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd90      	pop	{r4, r7, pc}

08004688 <SPI_MASTER_lStartReceivePolling>:
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lStartReceivePolling(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_lStartReceivePolling:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8004694:	2302      	movs	r3, #2
 8004696:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	613b      	str	r3, [r7, #16]

  if ((dataptr != NULL) && (count > 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d033      	beq.n	800470c <SPI_MASTER_lStartReceivePolling+0x84>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d030      	beq.n	800470c <SPI_MASTER_lStartReceivePolling+0x84>
  {
    /*Check data pointer is valid or not*/
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	7fdb      	ldrb	r3, [r3, #31]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d027      	beq.n	800470a <SPI_MASTER_lStartReceivePolling+0x82>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01e      	beq.n	800470a <SPI_MASTER_lStartReceivePolling+0x82>
    {
      runtime_handle->rx_busy = true;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2201      	movs	r2, #1
 80046d0:	77da      	strb	r2, [r3, #31]
      runtime_handle->rx_data = dataptr;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	615a      	str	r2, [r3, #20]
      runtime_handle->tx_data = &dummy_data[0];
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <SPI_MASTER_lStartReceivePolling+0x94>)
 80046dc:	619a      	str	r2, [r3, #24]
      runtime_handle->tx_data_dummy = true;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = false;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

      status = SPI_MASTER_lReceivePolling(handle, count);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	f000 f815 	bl	8004720 <SPI_MASTER_lReceivePolling>
 80046f6:	4603      	mov	r3, r0
 80046f8:	75fb      	strb	r3, [r7, #23]

      runtime_handle->tx_data_dummy = false;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_busy = false;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2200      	movs	r2, #0
 8004706:	77da      	strb	r2, [r3, #31]
  runtime_handle = handle->runtime;

  if ((dataptr != NULL) && (count > 0U))
  {
    /*Check data pointer is valid or not*/
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8004708:	e002      	b.n	8004710 <SPI_MASTER_lStartReceivePolling+0x88>
 800470a:	e001      	b.n	8004710 <SPI_MASTER_lStartReceivePolling+0x88>
      runtime_handle->rx_busy = false;
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800470c:	2303      	movs	r3, #3
 800470e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	1ffe8874 	.word	0x1ffe8874

08004720 <SPI_MASTER_lReceivePolling>:
}
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t count)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 800472a:	2301      	movs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
                                                           Specify the number of bytes for the configured word length */
  uint16_t data;

  runtime_handle = handle->runtime;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	827b      	strh	r3, [r7, #18]
  runtime_handle->rx_data_index = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b08      	cmp	r3, #8
 800474c:	d901      	bls.n	8004752 <SPI_MASTER_lReceivePolling+0x32>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800474e:	2302      	movs	r3, #2
 8004750:	617b      	str	r3, [r7, #20]
  }

  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3b01      	subs	r3, #1
 8004756:	461a      	mov	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	fa03 f202 	lsl.w	r2, r3, r2
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	60da      	str	r2, [r3, #12]

  XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	7f1b      	ldrb	r3, [r3, #28]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	4610      	mov	r0, r2
 800476e:	4619      	mov	r1, r3
 8004770:	f7ff fe06 	bl	8004380 <XMC_SPI_CH_SetTransmitMode>

    /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80d6 	beq.w	800492e <SPI_MASTER_lReceivePolling+0x20e>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fdca 	bl	8004320 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f9c5 	bl	8004b20 <SPI_MASTER_lStdRBUFFlush>

    if (runtime_handle->tx_data_dummy == true)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <SPI_MASTER_lReceivePolling+0x9a>
    {
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	7f1b      	ldrb	r3, [r3, #28]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7ff fd80 	bl	80042b8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 80047b8:	e01d      	b.n	80047f6 <SPI_MASTER_lReceivePolling+0xd6>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d107      	bne.n	80047d0 <SPI_MASTER_lReceivePolling+0xb0>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	827b      	strh	r3, [r7, #18]
 80047ce:	e006      	b.n	80047de <SPI_MASTER_lReceivePolling+0xbe>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4413      	add	r3, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	7f1b      	ldrb	r3, [r3, #28]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461c      	mov	r4, r3
 80047ea:	8a7b      	ldrh	r3, [r7, #18]
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	4622      	mov	r2, r4
 80047f2:	f7ff fd61 	bl	80042b8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	609a      	str	r2, [r3, #8]


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8004802:	e061      	b.n	80048c8 <SPI_MASTER_lReceivePolling+0x1a8>
    {
      if (runtime_handle->tx_data_dummy == true)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <SPI_MASTER_lReceivePolling+0x108>
      {
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	7f1b      	ldrb	r3, [r3, #28]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004820:	461a      	mov	r2, r3
 8004822:	f7ff fd49 	bl	80042b8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8004826:	e01d      	b.n	8004864 <SPI_MASTER_lReceivePolling+0x144>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d107      	bne.n	800483e <SPI_MASTER_lReceivePolling+0x11e>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	827b      	strh	r3, [r7, #18]
 800483c:	e006      	b.n	800484c <SPI_MASTER_lReceivePolling+0x12c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	7f1b      	ldrb	r3, [r3, #28]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461c      	mov	r4, r3
 8004858:	8a7b      	ldrh	r3, [r7, #18]
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	4622      	mov	r2, r4
 8004860:	f7ff fd2a 	bl	80042b8 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
      }

      while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8004864:	bf00      	nop
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fd66 	bl	800433c <XMC_USIC_CH_RXFIFO_IsEmpty>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f7      	bne.n	8004866 <SPI_MASTER_lReceivePolling+0x146>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fc fc46 	bl	800110c <XMC_SPI_CH_GetReceivedData>
 8004880:	4603      	mov	r3, r0
 8004882:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	4413      	add	r3, r2
 800488e:	8a7a      	ldrh	r2, [r7, #18]
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d10a      	bne.n	80048b0 <SPI_MASTER_lReceivePolling+0x190>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	8a7a      	ldrh	r2, [r7, #18]
 80048a8:	0a12      	lsrs	r2, r2, #8
 80048aa:	b292      	uxth	r2, r2
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	441a      	add	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d397      	bcc.n	8004804 <SPI_MASTER_lReceivePolling+0xe4>

      (runtime_handle->rx_data_index)+= bytes_per_word;
      (runtime_handle->tx_data_index)+= bytes_per_word;
    }

    while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 80048d4:	bf00      	nop
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fd2e 	bl	800433c <XMC_USIC_CH_RXFIFO_IsEmpty>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f7      	bne.n	80048d6 <SPI_MASTER_lReceivePolling+0x1b6>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fc0e 	bl	800110c <XMC_SPI_CH_GetReceivedData>
 80048f0:	4603      	mov	r3, r0
 80048f2:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	4413      	add	r3, r2
 80048fe:	8a7a      	ldrh	r2, [r7, #18]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d10a      	bne.n	8004920 <SPI_MASTER_lReceivePolling+0x200>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	3301      	adds	r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	8a7a      	ldrh	r2, [r7, #18]
 8004918:	0a12      	lsrs	r2, r2, #8
 800491a:	b292      	uxth	r2, r2
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]
    }

    XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	2105      	movs	r1, #5
 8004928:	f7ff fd1c 	bl	8004364 <XMC_USIC_CH_RXFIFO_ClearEvent>
 800492c:	e0e9      	b.n	8004b02 <SPI_MASTER_lReceivePolling+0x3e2>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f8f4 	bl	8004b20 <SPI_MASTER_lStdRBUFFlush>

    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004938:	bf00      	nop
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fc9c 	bl	800427c <XMC_USIC_CH_GetTransmitBufferStatus>
 8004944:	4603      	mov	r3, r0
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d0f7      	beq.n	800493a <SPI_MASTER_lReceivePolling+0x21a>
    {
    }

    if (runtime_handle->tx_data_dummy == true)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <SPI_MASTER_lReceivePolling+0x24e>
    {
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	7f1b      	ldrb	r3, [r3, #28]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004966:	461a      	mov	r2, r3
 8004968:	f7ff fc76 	bl	8004258 <XMC_USIC_CH_WriteToTBUFTCI>
 800496c:	e01d      	b.n	80049aa <SPI_MASTER_lReceivePolling+0x28a>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d107      	bne.n	8004984 <SPI_MASTER_lReceivePolling+0x264>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4413      	add	r3, r2
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	827b      	strh	r3, [r7, #18]
 8004982:	e006      	b.n	8004992 <SPI_MASTER_lReceivePolling+0x272>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4413      	add	r3, r2
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	7f1b      	ldrb	r3, [r3, #28]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461c      	mov	r4, r3
 800499e:	8a7b      	ldrh	r3, [r7, #18]
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	4622      	mov	r2, r4
 80049a6:	f7ff fc57 	bl	8004258 <XMC_USIC_CH_WriteToTBUFTCI>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	609a      	str	r2, [r3, #8]

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 80049b6:	e071      	b.n	8004a9c <SPI_MASTER_lReceivePolling+0x37c>
    {
      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80049b8:	bf00      	nop
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fc5c 	bl	800427c <XMC_USIC_CH_GetTransmitBufferStatus>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d0f7      	beq.n	80049ba <SPI_MASTER_lReceivePolling+0x29a>
      {

      }

      if (runtime_handle->tx_data_dummy == true)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <SPI_MASTER_lReceivePolling+0x2ce>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	7f1b      	ldrb	r3, [r3, #28]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7ff fc36 	bl	8004258 <XMC_USIC_CH_WriteToTBUFTCI>
 80049ec:	e01d      	b.n	8004a2a <SPI_MASTER_lReceivePolling+0x30a>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <SPI_MASTER_lReceivePolling+0x2e4>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	827b      	strh	r3, [r7, #18]
 8004a02:	e006      	b.n	8004a12 <SPI_MASTER_lReceivePolling+0x2f2>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	7f1b      	ldrb	r3, [r3, #28]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461c      	mov	r4, r3
 8004a1e:	8a7b      	ldrh	r3, [r7, #18]
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	4622      	mov	r2, r4
 8004a26:	f7ff fc17 	bl	8004258 <XMC_USIC_CH_WriteToTBUFTCI>
      }

      while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8004a2a:	bf00      	nop
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fc33 	bl	800429c <XMC_USIC_CH_GetReceiveBufferStatus>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f7      	beq.n	8004a2c <SPI_MASTER_lReceivePolling+0x30c>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc fb63 	bl	800110c <XMC_SPI_CH_GetReceivedData>
 8004a46:	4603      	mov	r3, r0
 8004a48:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	8a7a      	ldrh	r2, [r7, #18]
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d10a      	bne.n	8004a76 <SPI_MASTER_lReceivePolling+0x356>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	695a      	ldr	r2, [r3, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	4413      	add	r3, r2
 8004a6c:	8a7a      	ldrh	r2, [r7, #18]
 8004a6e:	0a12      	lsrs	r2, r2, #8
 8004a70:	b292      	uxth	r2, r2
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004a98:	f7ff fc94 	bl	80043c4 <XMC_SPI_CH_ClearStatusFlag>
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d387      	bcc.n	80049b8 <SPI_MASTER_lReceivePolling+0x298>
      (runtime_handle->tx_data_index)+= bytes_per_word;

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
    }

    while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8004aa8:	bf00      	nop
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fbf4 	bl	800429c <XMC_USIC_CH_GetReceiveBufferStatus>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f7      	beq.n	8004aaa <SPI_MASTER_lReceivePolling+0x38a>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc fb24 	bl	800110c <XMC_SPI_CH_GetReceivedData>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	8a7a      	ldrh	r2, [r7, #18]
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d10a      	bne.n	8004af4 <SPI_MASTER_lReceivePolling+0x3d4>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	8a7a      	ldrh	r2, [r7, #18]
 8004aec:	0a12      	lsrs	r2, r2, #8
 8004aee:	b292      	uxth	r2, r2
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
    }

    XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004afe:	f7ff fc61 	bl	80043c4 <XMC_SPI_CH_ClearStatusFlag>
  }
  runtime_handle->rx_data_count = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	60da      	str	r2, [r3, #12]
  runtime_handle->rx_data_index = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]

  return SPI_MASTER_STATUS_SUCCESS;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd90      	pop	{r4, r7, pc}
 8004b1e:	bf00      	nop

08004b20 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fc faef 	bl	800110c <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc faec 	bl	800110c <XMC_SPI_CH_GetReceivedData>
}
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop

08004b3c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8004b4c:	78f8      	ldrb	r0, [r7, #3]
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	3306      	adds	r3, #6
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8004b5e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8004b60:	431a      	orrs	r2, r3
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	1d83      	adds	r3, r0, #6
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop

08004b78 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop

08004bd0 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8004be4:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8004be6:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop

08004bfc <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f023 020f 	bic.w	r2, r3, #15
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop

08004c24 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	2101      	movs	r1, #1
 8004c30:	f7ff ffe4 	bl	8004bfc <XMC_USIC_CH_SetMode>
}
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop

08004c3c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop

08004c5c <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <XMC_SPI_CH_DisableFEM>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	f023 0208 	bic.w	r2, r3, #8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop

08004ca8 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	f7ff ff89 	bl	8004bd0 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f7ff ff4f 	bl	8004b78 <XMC_USIC_CH_SetWordLength>
}
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f7ff ff57 	bl	8004ba4 <XMC_USIC_CH_SetFrameLength>
}
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8004d0c:	78f8      	ldrb	r0, [r7, #3]
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	3306      	adds	r3, #6
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8004d1e:	f043 0210 	orr.w	r2, r3, #16
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	1d83      	adds	r3, r0, #6
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	78bb      	ldrb	r3, [r7, #2]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4611      	mov	r1, r2
 8004d34:	461a      	mov	r2, r3
 8004d36:	f7ff ff01 	bl	8004b3c <XMC_USIC_CH_SetInputSource>
}
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8004d46:	2300      	movs	r3, #0
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI2_CH0, &SPI_MASTER_0_Channel_Config);
 8004d4a:	481e      	ldr	r0, [pc, #120]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d4c:	491e      	ldr	r1, [pc, #120]	; (8004dc8 <SPI_MASTER_0_lInit+0x88>)
 8004d4e:	f7fc f99d 	bl	800108c <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI2_CH0);
 8004d52:	481c      	ldr	r0, [pc, #112]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d54:	f7ff ff98 	bl	8004c88 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI2_CH0);
 8004d58:	481a      	ldr	r0, [pc, #104]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d5a:	f7ff ff6f 	bl	8004c3c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI2_CH0, (uint8_t)8);
 8004d5e:	4819      	ldr	r0, [pc, #100]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d60:	2108      	movs	r1, #8
 8004d62:	f7ff ffaf 	bl	8004cc4 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, (uint8_t)24);
 8004d66:	4817      	ldr	r0, [pc, #92]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d68:	2118      	movs	r1, #24
 8004d6a:	f7ff ffb9 	bl	8004ce0 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI2_CH0,
 8004d6e:	4815      	ldr	r0, [pc, #84]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d70:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004d74:	2200      	movs	r2, #0
 8004d76:	f7ff ff97 	bl	8004ca8 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI2_CH0, 2U);
 8004d7a:	4812      	ldr	r0, [pc, #72]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	f7ff ff6d 	bl	8004c5c <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)1, &SPI_MASTER_0_MISO_Config.port_config);
 8004d82:	4812      	ldr	r0, [pc, #72]	; (8004dcc <SPI_MASTER_0_lInit+0x8c>)
 8004d84:	2101      	movs	r1, #1
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <SPI_MASTER_0_lInit+0x90>)
 8004d88:	f7fb fafe 	bl	8000388 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI2_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_A);
 8004d8c:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2200      	movs	r2, #0
 8004d92:	f7ff ffb3 	bl	8004cfc <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI2_CH0);
 8004d96:	480b      	ldr	r0, [pc, #44]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004d98:	f7ff ff44 	bl	8004c24 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)0, &SPI_MASTER_0_MOSI_Config.port_config);
 8004d9c:	480b      	ldr	r0, [pc, #44]	; (8004dcc <SPI_MASTER_0_lInit+0x8c>)
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <SPI_MASTER_0_lInit+0x94>)
 8004da2:	f7fb faf1 	bl	8000388 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)2, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 8004da6:	4809      	ldr	r0, [pc, #36]	; (8004dcc <SPI_MASTER_0_lInit+0x8c>)
 8004da8:	2102      	movs	r1, #2
 8004daa:	4a0b      	ldr	r2, [pc, #44]	; (8004dd8 <SPI_MASTER_0_lInit+0x98>)
 8004dac:	f7fb faec 	bl	8000388 <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8004db0:	4804      	ldr	r0, [pc, #16]	; (8004dc4 <SPI_MASTER_0_lInit+0x84>)
 8004db2:	2110      	movs	r1, #16
 8004db4:	2200      	movs	r2, #0
 8004db6:	f7fc faff 	bl	80013b8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  return status;
 8004dba:	79fb      	ldrb	r3, [r7, #7]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	48024000 	.word	0x48024000
 8004dc8:	1ffe888c 	.word	0x1ffe888c
 8004dcc:	48028500 	.word	0x48028500
 8004dd0:	1ffe8a24 	.word	0x1ffe8a24
 8004dd4:	1ffe8878 	.word	0x1ffe8878
 8004dd8:	0800f308 	.word	0x0800f308

08004ddc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dea:	60da      	str	r2, [r3, #12]
}
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop

08004df8 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7b5b      	ldrb	r3, [r3, #13]
 8004e04:	f083 0301 	eor.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00f      	beq.n	8004e2e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7b1b      	ldrb	r3, [r3, #12]
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f7fc f869 	bl	8000ef0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff ffda 	bl	8004ddc <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	3310      	adds	r3, #16
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	2301      	movs	r3, #1
 8004e50:	408b      	lsls	r3, r1
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7e1b      	ldrb	r3, [r3, #24]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d149      	bne.n	8004f08 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f7fc fb82 	bl	8001588 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e02f      	b.n	8004eea <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e92:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f7fc fc15 	bl	80016d0 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	2103      	movs	r1, #3
 8004eb4:	f7fc fc9c 	bl	80017f0 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec0:	7a1b      	ldrb	r3, [r3, #8]
 8004ec2:	f083 0301 	eor.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	f7ff ffb0 	bl	8004e38 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d9cc      	bls.n	8004e8a <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7e5b      	ldrb	r3, [r3, #25]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fc fb91 	bl	8001624 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7e1b      	ldrb	r3, [r3, #24]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	7c1a      	ldrb	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4608      	mov	r0, r1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f7fb fa2b 	bl	8000388 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	7c1a      	ldrb	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7c5b      	ldrb	r3, [r3, #17]
 8004f3e:	4608      	mov	r0, r1
 8004f40:	4611      	mov	r1, r2
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fc f880 	bl	8001048 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop

08004f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <__NVIC_SetPriorityGrouping+0x44>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f70:	4013      	ands	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f84:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8004f86:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <__NVIC_SetPriorityGrouping+0x44>)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	60d3      	str	r3, [r2, #12]
}
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f7ff ffd6 	bl	8004f54 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fa8:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8004faa:	4b21      	ldr	r3, [pc, #132]	; (8005030 <SystemCoreSetup+0x94>)
 8004fac:	4a21      	ldr	r2, [pc, #132]	; (8005034 <SystemCoreSetup+0x98>)
 8004fae:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fb0:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004fb4:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <SystemCoreSetup+0x94>)
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <SystemCoreSetup+0x94>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8004fc6:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <SystemCoreSetup+0x9c>)
 8004fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fcc:	3314      	adds	r3, #20
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f023 030f 	bic.w	r3, r3, #15
 8004fd8:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f043 0304 	orr.w	r3, r3, #4
 8004fe0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <SystemCoreSetup+0x9c>)
 8004fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe8:	3314      	adds	r3, #20
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8004fee:	4a10      	ldr	r2, [pc, #64]	; (8005030 <SystemCoreSetup+0x94>)
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <SystemCoreSetup+0x94>)
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8004ffa:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <SystemCoreSetup+0x94>)
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <SystemCoreSetup+0x94>)
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f023 0308 	bic.w	r3, r3, #8
 8005004:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005006:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <SystemCoreSetup+0x94>)
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <SystemCoreSetup+0x94>)
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005010:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8005012:	4a07      	ldr	r2, [pc, #28]	; (8005030 <SystemCoreSetup+0x94>)
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <SystemCoreSetup+0x94>)
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800501c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800501e:	4a04      	ldr	r2, [pc, #16]	; (8005030 <SystemCoreSetup+0x94>)
 8005020:	4b03      	ldr	r3, [pc, #12]	; (8005030 <SystemCoreSetup+0x94>)
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005028:	6253      	str	r3, [r2, #36]	; 0x24
}
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	e000ed00 	.word	0xe000ed00
 8005034:	08000000 	.word	0x08000000
 8005038:	58001000 	.word	0x58001000

0800503c <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]

  return (status);
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8005060:	4b02      	ldr	r3, [pc, #8]	; (800506c <OSCHP_GetFrequency+0x10>)
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	00b71b00 	.word	0x00b71b00

08005070 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <SystemCoreClockSetup+0x50>)
 8005078:	1d3c      	adds	r4, r7, #4
 800507a:	461d      	mov	r5, r3
 800507c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800507e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8005084:	1d3b      	adds	r3, r7, #4
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fa78 	bl	800057c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800508c:	2000      	movs	r0, #0
 800508e:	f7fb fb97 	bl	80007c0 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8005092:	2000      	movs	r0, #0
 8005094:	f7fb fb4c 	bl	8000730 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8005098:	2004      	movs	r0, #4
 800509a:	f7fb fc1d 	bl	80008d8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800509e:	2001      	movs	r0, #1
 80050a0:	2120      	movs	r1, #32
 80050a2:	f7fb fca5 	bl	80009f0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80050a6:	2000      	movs	r0, #0
 80050a8:	f7fb fb56 	bl	8000758 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80050ac:	2001      	movs	r0, #1
 80050ae:	f7fb fc3b 	bl	8000928 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80050b2:	2001      	movs	r0, #1
 80050b4:	f7fb fc24 	bl	8000900 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bdb0      	pop	{r4, r5, r7, pc}
 80050be:	bf00      	nop
 80050c0:	0800f438 	.word	0x0800f438

080050c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <__NVIC_GetPriorityGrouping+0x18>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d0:	0a1b      	lsrs	r3, r3, #8
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	db0b      	blt.n	800510a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050f2:	4908      	ldr	r1, [pc, #32]	; (8005114 <__NVIC_EnableIRQ+0x34>)
 80050f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	79fa      	ldrb	r2, [r7, #7]
 80050fc:	f002 021f 	and.w	r2, r2, #31
 8005100:	2001      	movs	r0, #1
 8005102:	fa00 f202 	lsl.w	r2, r0, r2
 8005106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000e100 	.word	0xe000e100

08005118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	6039      	str	r1, [r7, #0]
 8005122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	db0a      	blt.n	8005142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512c:	490d      	ldr	r1, [pc, #52]	; (8005164 <__NVIC_SetPriority+0x4c>)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	0092      	lsls	r2, r2, #2
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	440b      	add	r3, r1
 800513c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005140:	e00a      	b.n	8005158 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005142:	4909      	ldr	r1, [pc, #36]	; (8005168 <__NVIC_SetPriority+0x50>)
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3b04      	subs	r3, #4
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	0092      	lsls	r2, r2, #2
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	440b      	add	r3, r1
 8005156:	761a      	strb	r2, [r3, #24]
  }
}
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	e000e100 	.word	0xe000e100
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800516c:	b480      	push	{r7}
 800516e:	b089      	sub	sp, #36	; 0x24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f1c3 0307 	rsb	r3, r3, #7
 8005186:	2b06      	cmp	r3, #6
 8005188:	bf28      	it	cs
 800518a:	2306      	movcs	r3, #6
 800518c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3306      	adds	r3, #6
 8005192:	2b06      	cmp	r3, #6
 8005194:	d902      	bls.n	800519c <NVIC_EncodePriority+0x30>
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3b01      	subs	r3, #1
 800519a:	e000      	b.n	800519e <NVIC_EncodePriority+0x32>
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2201      	movs	r2, #1
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	401a      	ands	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2101      	movs	r1, #1
 80051b6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ba:	1e59      	subs	r1, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80051c0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3724      	adds	r7, #36	; 0x24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop

080051d0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop

080051f4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	3260      	adds	r2, #96	; 0x60
 8005206:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2101      	movs	r1, #1
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	ea42 0103 	orr.w	r1, r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	3260      	adds	r2, #96	; 0x60
 800521c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop

0800522c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6819      	ldr	r1, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	32a0      	adds	r2, #160	; 0xa0
 8005242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	32c0      	adds	r2, #192	; 0xc0
 8005260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005264:	b29b      	uxth	r3, r3
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop

08005274 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7e1b      	ldrb	r3, [r3, #24]
 8005280:	2b02      	cmp	r3, #2
 8005282:	f040 8099 	bne.w	80053b8 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fdea 	bl	8004e64 <GLOBAL_ADC_Init>
 8005290:	4603      	mov	r3, r0
 8005292:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4610      	mov	r0, r2
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	2300      	movs	r3, #0
 80052a6:	f7fc f999 	bl	80015dc <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	695a      	ldr	r2, [r3, #20]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	f7fc fab6 	bl	8001828 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]
 80052c0:	e02e      	b.n	8005320 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052cc:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	7b5b      	ldrb	r3, [r3, #13]
 80052d6:	4619      	mov	r1, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4610      	mov	r0, r2
 80052de:	461a      	mov	r2, r3
 80052e0:	f7fc fb20 	bl	8001924 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	789b      	ldrb	r3, [r3, #2]
 80052ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4619      	mov	r1, r3
                                indexed->res_handle);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80052fa:	4610      	mov	r0, r2
 80052fc:	461a      	mov	r2, r3
 80052fe:	f7ff ff95 	bl	800522c <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800530c:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8005312:	4610      	mov	r0, r2
 8005314:	461a      	mov	r2, r3
 8005316:	f7ff ff6d 	bl	80051f4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	3301      	adds	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0cd      	beq.n	80052c2 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	7a1b      	ldrb	r3, [r3, #8]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d02c      	beq.n	8005390 <ADC_MEASUREMENT_Init+0x11c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d028      	beq.n	8005390 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	b2dc      	uxtb	r4, r3
 8005346:	f7ff febd 	bl	80050c4 <__NVIC_GetPriorityGrouping>
 800534a:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8005350:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4608      	mov	r0, r1
 800535a:	4611      	mov	r1, r2
 800535c:	461a      	mov	r2, r3
 800535e:	f7ff ff05 	bl	800516c <NVIC_EncodePriority>
 8005362:	4602      	mov	r2, r0
 8005364:	b263      	sxtb	r3, r4
 8005366:	4618      	mov	r0, r3
 8005368:	4611      	mov	r1, r2
 800536a:	f7ff fed5 	bl	8005118 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	7e5b      	ldrb	r3, [r3, #25]
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	f7fc f984 	bl	8001688 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	b25b      	sxtb	r3, r3
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fea8 	bl	80050e0 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <ADC_MEASUREMENT_Init+0x12a>
    {
    	(handle_ptr->mux_config)();
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	7e9b      	ldrb	r3, [r3, #26]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff ff0f 	bl	80051d0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7bba      	ldrb	r2, [r7, #14]
 80053b6:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7e1b      	ldrb	r3, [r3, #24]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}

080053c4 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	789b      	ldrb	r3, [r3, #2]
 80053d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	f7ff ff36 	bl	8005250 <XMC_VADC_GROUP_GetResult>
 80053e4:	4603      	mov	r3, r0
 80053e6:	81fb      	strh	r3, [r7, #14]

  return (result);
 80053e8:	89fb      	ldrh	r3, [r7, #14]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop

080053f4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80053fa:	2300      	movs	r3, #0
 80053fc:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80053fe:	4819      	ldr	r0, [pc, #100]	; (8005464 <DAVE_Init+0x70>)
 8005400:	f7ff fe1c 	bl	800503c <CLOCK_XMC4_Init>
 8005404:	4603      	mov	r3, r0
 8005406:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <DAVE_Init+0x24>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 800540e:	4816      	ldr	r0, [pc, #88]	; (8005468 <DAVE_Init+0x74>)
 8005410:	f7fe ffe8 	bl	80043e4 <SPI_MASTER_Init>
 8005414:	4603      	mov	r3, r0
 8005416:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_DIO_DIGOUT_PD_TFT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_DIO_DIGOUT_PD_TFT); 
 800541e:	4813      	ldr	r0, [pc, #76]	; (800546c <DAVE_Init+0x78>)
 8005420:	f7ff fd78 	bl	8004f14 <DIGITAL_IO_Init>
 8005424:	4603      	mov	r3, r0
 8005426:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_DIO_DIGOUT_CS_TFT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_DIO_DIGOUT_CS_TFT); 
 800542e:	4810      	ldr	r0, [pc, #64]	; (8005470 <DAVE_Init+0x7c>)
 8005430:	f7ff fd70 	bl	8004f14 <DIGITAL_IO_Init>
 8005434:	4603      	mov	r3, r0
 8005436:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <DAVE_Init+0x54>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 800543e:	480d      	ldr	r0, [pc, #52]	; (8005474 <DAVE_Init+0x80>)
 8005440:	f7ff ff18 	bl	8005274 <ADC_MEASUREMENT_Init>
 8005444:	4603      	mov	r3, r0
 8005446:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d104      	bne.n	8005458 <DAVE_Init+0x64>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 800544e:	480a      	ldr	r0, [pc, #40]	; (8005478 <DAVE_Init+0x84>)
 8005450:	f7fe fe7a 	bl	8004148 <TIMER_Init>
 8005454:	4603      	mov	r3, r0
 8005456:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8005458:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	1ffe8a38 	.word	0x1ffe8a38
 8005468:	1ffe88bc 	.word	0x1ffe88bc
 800546c:	0800f410 	.word	0x0800f410
 8005470:	0800f424 	.word	0x0800f424
 8005474:	1ffe8948 	.word	0x1ffe8948
 8005478:	1ffe884c 	.word	0x1ffe884c

0800547c <SysTick_Handler>:
volatile uint8_t frameover = 0; 		// Used by: measure.c, tft.c



///*  FUNCTIONS ---------------------------------------------------------------------------------------------------------------------------- */
void SysTick_Handler(){ // Interrupt Routine - used for delay_ms
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
	_msCounter++;
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <SysTick_Handler+0x18>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	4a03      	ldr	r2, [pc, #12]	; (8005494 <SysTick_Handler+0x18>)
 8005488:	6013      	str	r3, [r2, #0]
}
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	1ffe8a40 	.word	0x1ffe8a40

08005498 <delay_ms>:
void delay_ms(uint32_t ms){
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	// Delay execution by given milliseconds - used in tft.h->EVE.h->EVE_target.h
	uint32_t now = _msCounter;
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <delay_ms+0x2c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
	while(now+ms > _msCounter)
 80054a6:	e000      	b.n	80054aa <delay_ms+0x12>
		__NOP(); // do nothing
 80054a8:	bf00      	nop
	_msCounter++;
}
void delay_ms(uint32_t ms){
	// Delay execution by given milliseconds - used in tft.h->EVE.h->EVE_target.h
	uint32_t now = _msCounter;
	while(now+ms > _msCounter)
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	441a      	add	r2, r3
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <delay_ms+0x2c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d8f7      	bhi.n	80054a8 <delay_ms+0x10>
		__NOP(); // do nothing
}
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	1ffe8a40 	.word	0x1ffe8a40

080054c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	6039      	str	r1, [r7, #0]
 80054d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	db0a      	blt.n	80054f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054dc:	490d      	ldr	r1, [pc, #52]	; (8005514 <__NVIC_SetPriority+0x4c>)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	0092      	lsls	r2, r2, #2
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	440b      	add	r3, r1
 80054ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80054f0:	e00a      	b.n	8005508 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f2:	4909      	ldr	r1, [pc, #36]	; (8005518 <__NVIC_SetPriority+0x50>)
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	3b04      	subs	r3, #4
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	0092      	lsls	r2, r2, #2
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	440b      	add	r3, r1
 8005506:	761a      	strb	r2, [r3, #24]
  }
}
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	e000e100 	.word	0xe000e100
 8005518:	e000ed00 	.word	0xe000ed00

0800551c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800552c:	d301      	bcc.n	8005532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800552e:	2301      	movs	r3, #1
 8005530:	e00f      	b.n	8005552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005532:	4a0a      	ldr	r2, [pc, #40]	; (800555c <SysTick_Config+0x40>)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800553a:	f04f 30ff 	mov.w	r0, #4294967295
 800553e:	213f      	movs	r1, #63	; 0x3f
 8005540:	f7ff ffc2 	bl	80054c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <SysTick_Config+0x40>)
 8005546:	2200      	movs	r2, #0
 8005548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <SysTick_Config+0x40>)
 800554c:	2207      	movs	r2, #7
 800554e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	e000e010 	.word	0xe000e010

08005560 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	2201      	movs	r2, #1
 8005570:	409a      	lsls	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]
}
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7c1b      	ldrb	r3, [r3, #16]
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	f7ff ffe4 	bl	8005560 <XMC_GPIO_SetOutputHigh>
}
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop

080055a0 <main>:
// SysTick_Handler in "globals"
// Adc_Measurement_Handler in "measure"


int main(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
	#endif

	// Initialize environment
	DAVE_STATUS_t status;
	status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80055a6:	f7ff ff25 	bl	80053f4 <DAVE_Init>
 80055aa:	4603      	mov	r3, r0
 80055ac:	71bb      	strb	r3, [r7, #6]
	if(status != DAVE_STATUS_SUCCESS) {
 80055ae:	79bb      	ldrb	r3, [r7, #6]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d000      	beq.n	80055b6 <main+0x16>
		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		printf("DAVE APPs initialization failed\n");
		while(1U){ }
 80055b4:	e7fe      	b.n	80055b4 <main+0x14>
	}
	else{ printf("DAVE APPs initialization successful\n"); }

	// Arm-M internal interrupt init
	SysTick_Config(SystemCoreClock / 144);
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <main+0x80>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1a      	ldr	r2, [pc, #104]	; (8005624 <main+0x84>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ffaa 	bl	800551c <SysTick_Config>

	// Counter for TFT_display init
	uint8_t display_delay = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	71fb      	strb	r3, [r7, #7]

	// Initial disable of CS pin
	DIGITAL_IO_SetOutputHigh(&IO_DIO_DIGOUT_CS_TFT);
 80055cc:	4816      	ldr	r0, [pc, #88]	; (8005628 <main+0x88>)
 80055ce:	f7ff ffd7 	bl	8005580 <DIGITAL_IO_SetOutputHigh>

	// Initialize Display
	if( TFT_init() ){ printf("TFT init done 1\n"); }
 80055d2:	f7fe f9bf 	bl	8003954 <TFT_init>
	else{ printf("TFT init failed 0\n"); }

	// Show initial logo
	TFT_display_init_screen();
 80055d6:	f7fe f88b 	bl	80036f0 <TFT_display_init_screen>
	_msCounter = 0;
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <main+0x8c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
	while (_msCounter < 100) __NOP();
 80055e0:	e000      	b.n	80055e4 <main+0x44>
 80055e2:	bf00      	nop
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <main+0x8c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b63      	cmp	r3, #99	; 0x63
 80055ea:	d9fa      	bls.n	80055e2 <main+0x42>

	// Init static Background (menu + basic graph)
	initStaticGraphBackground();
 80055ec:	f7fe f8c2 	bl	8003774 <initStaticGraphBackground>


	// Main loop
	printf("Start Main Loop -------------------------------------\n");
	while(1U) {
		if(tft_tick) { // Is set by Adc_Measurement_Handler at every interrupt of it
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <main+0x90>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d011      	beq.n	800561e <main+0x7e>
			// reset tick
			tft_tick = 0;
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <main+0x90>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]

			// Evaluate touches
			TFT_touch();
 8005600:	f7fe f9e6 	bl	80039d0 <TFT_touch>

			// Evaluate and rewrite display list
			display_delay++;
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	3301      	adds	r3, #1
 8005608:	71fb      	strb	r3, [r7, #7]
			if(MeasurementCounter % 4 == 0) { // 4*5ms=20ms,  1/20ms=50Hz refresh rate
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <main+0x94>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <main+0x7e>
				display_delay = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	71fb      	strb	r3, [r7, #7]
				TFT_display();
 800561a:	f7fe fa65 	bl	8003ae8 <TFT_display>
			}

		}
	}
 800561e:	e7e7      	b.n	80055f0 <main+0x50>
 8005620:	2003ffc0 	.word	0x2003ffc0
 8005624:	38e38e39 	.word	0x38e38e39
 8005628:	0800f424 	.word	0x0800f424
 800562c:	1ffe8a40 	.word	0x1ffe8a40
 8005630:	1ffe8a44 	.word	0x1ffe8a44
 8005634:	1ffe8a48 	.word	0x1ffe8a48

08005638 <VADC0_C0_2_IRQHandler>:
#include <math.h>
#include <globals.h>

uint32_t lastval = 0; // just for TestTriangle signal

void Adc_Measurement_Handler(void){
 8005638:	b598      	push	{r3, r4, r7, lr}
 800563a:	af00      	add	r7, sp, #0
	/// Do measurements and store result in buffer. Allows to 'measure' self produced test signal based on value in global variable InputType
	/// uses global/extern variables: InputType, InputBuffer1_idx, InputBuffer1_size, InputBuffer1, tft_tick

	// Increment current Buffer index and set back to 0 if greater than size of array
	InputBuffer1_idx++;
 800563c:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	4b64      	ldr	r3, [pc, #400]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 8005646:	801a      	strh	r2, [r3, #0]
	if(InputBuffer1_idx >= INPUTBUFFER1_SIZE){
 8005648:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8005650:	d305      	bcc.n	800565e <VADC0_C0_2_IRQHandler+0x26>
		//printf("fo\n");
		frameover = 1;
 8005652:	4b62      	ldr	r3, [pc, #392]	; (80057dc <VADC0_C0_2_IRQHandler+0x1a4>)
 8005654:	2201      	movs	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]
		InputBuffer1_idx = 0;
 8005658:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 800565a:	2200      	movs	r2, #0
 800565c:	801a      	strh	r2, [r3, #0]
	}

	/// Read next value from sensor
	 switch (InputType){
 800565e:	4b60      	ldr	r3, [pc, #384]	; (80057e0 <VADC0_C0_2_IRQHandler+0x1a8>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b03      	cmp	r3, #3
 8005666:	f200 809f 	bhi.w	80057a8 <VADC0_C0_2_IRQHandler+0x170>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <VADC0_C0_2_IRQHandler+0x38>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005681 	.word	0x08005681
 8005674:	08005699 	.word	0x08005699
 8005678:	080056d5 	.word	0x080056d5
 800567c:	0800571b 	.word	0x0800571b
		// 0 ADC Sensor 5
		case 0:
			InputBuffer1[InputBuffer1_idx] = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A); //result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 8005680:	4b55      	ldr	r3, [pc, #340]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	461c      	mov	r4, r3
 8005686:	4857      	ldr	r0, [pc, #348]	; (80057e4 <VADC0_C0_2_IRQHandler+0x1ac>)
 8005688:	f7ff fe9c 	bl	80053c4 <ADC_MEASUREMENT_GetResult>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	4b55      	ldr	r3, [pc, #340]	; (80057e8 <VADC0_C0_2_IRQHandler+0x1b0>)
 8005692:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			break;
 8005696:	e087      	b.n	80057a8 <VADC0_C0_2_IRQHandler+0x170>
		// 1 TestImpulse
		case 1:
			if(InputBuffer1_idx % (INPUTBUFFER1_SIZE/5)) InputBuffer1[InputBuffer1_idx] = 0;
 8005698:	4b4f      	ldr	r3, [pc, #316]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	4a53      	ldr	r2, [pc, #332]	; (80057ec <VADC0_C0_2_IRQHandler+0x1b4>)
 800569e:	fba2 1203 	umull	r1, r2, r2, r3
 80056a2:	0992      	lsrs	r2, r2, #6
 80056a4:	2158      	movs	r1, #88	; 0x58
 80056a6:	fb01 f202 	mul.w	r2, r1, r2
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <VADC0_C0_2_IRQHandler+0x8a>
 80056b2:	4b49      	ldr	r3, [pc, #292]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b4b      	ldr	r3, [pc, #300]	; (80057e8 <VADC0_C0_2_IRQHandler+0x1b0>)
 80056ba:	2100      	movs	r1, #0
 80056bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			else InputBuffer1[InputBuffer1_idx] = 4095;
			break;
 80056c0:	e072      	b.n	80057a8 <VADC0_C0_2_IRQHandler+0x170>
			InputBuffer1[InputBuffer1_idx] = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A); //result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
			break;
		// 1 TestImpulse
		case 1:
			if(InputBuffer1_idx % (INPUTBUFFER1_SIZE/5)) InputBuffer1[InputBuffer1_idx] = 0;
			else InputBuffer1[InputBuffer1_idx] = 4095;
 80056c2:	4b45      	ldr	r3, [pc, #276]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b47      	ldr	r3, [pc, #284]	; (80057e8 <VADC0_C0_2_IRQHandler+0x1b0>)
 80056ca:	f640 71ff 	movw	r1, #4095	; 0xfff
 80056ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			break;
 80056d2:	e069      	b.n	80057a8 <VADC0_C0_2_IRQHandler+0x170>
		// 2 TestSawtooth
		case 2:
			if(lastval < 4095) InputBuffer1[InputBuffer1_idx] = lastval+14;
 80056d4:	4b46      	ldr	r3, [pc, #280]	; (80057f0 <VADC0_C0_2_IRQHandler+0x1b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80056dc:	4293      	cmp	r3, r2
 80056de:	d80b      	bhi.n	80056f8 <VADC0_C0_2_IRQHandler+0xc0>
 80056e0:	4b3d      	ldr	r3, [pc, #244]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <VADC0_C0_2_IRQHandler+0x1b8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	330e      	adds	r3, #14
 80056ee:	b299      	uxth	r1, r3
 80056f0:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <VADC0_C0_2_IRQHandler+0x1b0>)
 80056f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80056f6:	e006      	b.n	8005706 <VADC0_C0_2_IRQHandler+0xce>
			else InputBuffer1[InputBuffer1_idx] = 0;
 80056f8:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <VADC0_C0_2_IRQHandler+0x1b0>)
 8005700:	2100      	movs	r1, #0
 8005702:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			lastval = InputBuffer1[InputBuffer1_idx];
 8005706:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <VADC0_C0_2_IRQHandler+0x1b0>)
 800570e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005712:	461a      	mov	r2, r3
 8005714:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <VADC0_C0_2_IRQHandler+0x1b8>)
 8005716:	601a      	str	r2, [r3, #0]
			break;
 8005718:	e046      	b.n	80057a8 <VADC0_C0_2_IRQHandler+0x170>
		// 3 TestSine (Note: The used time variable is not perfect for this purpose)
		case 3:
			InputBuffer1[InputBuffer1_idx] = (uint32_t)((0.5*(1.0+sin(2.0 * M_PI * 11.725 * ((double)MeasurementCounter/3000))))*4095.0);
 800571a:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <VADC0_C0_2_IRQHandler+0x1a0>)
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461c      	mov	r4, r3
 8005720:	4b34      	ldr	r3, [pc, #208]	; (80057f4 <VADC0_C0_2_IRQHandler+0x1bc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f001 fb85 	bl	8006e34 <__aeabi_ui2d>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	a323      	add	r3, pc, #140	; (adr r3, 80057c0 <VADC0_C0_2_IRQHandler+0x188>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f001 fd1c 	bl	8007174 <__aeabi_ddiv>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	a320      	add	r3, pc, #128	; (adr r3, 80057c8 <VADC0_C0_2_IRQHandler+0x190>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f001 fbe9 	bl	8006f20 <__aeabi_dmul>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f000 f963 	bl	8005a20 <sin>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <VADC0_C0_2_IRQHandler+0x1c0>)
 8005768:	f001 fa28 	bl	8006bbc <__adddf3>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	4b20      	ldr	r3, [pc, #128]	; (80057fc <VADC0_C0_2_IRQHandler+0x1c4>)
 800577a:	f001 fbd1 	bl	8006f20 <__aeabi_dmul>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4610      	mov	r0, r2
 8005784:	4619      	mov	r1, r3
 8005786:	a312      	add	r3, pc, #72	; (adr r3, 80057d0 <VADC0_C0_2_IRQHandler+0x198>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f001 fbc8 	bl	8006f20 <__aeabi_dmul>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	f001 fe84 	bl	80074a4 <__aeabi_d2uiz>
 800579c:	4603      	mov	r3, r0
 800579e:	b29a      	uxth	r2, r3
 80057a0:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <VADC0_C0_2_IRQHandler+0x1b0>)
 80057a2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			break;
 80057a6:	bf00      	nop
	 }

	// Trigger next main loop (with his it is running in synch with the measurement -> change if needed!)
	tft_tick = 42;
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <VADC0_C0_2_IRQHandler+0x1c8>)
 80057aa:	222a      	movs	r2, #42	; 0x2a
 80057ac:	701a      	strb	r2, [r3, #0]

	// Increase count of executed measurements
	MeasurementCounter++;
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <VADC0_C0_2_IRQHandler+0x1bc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	4a0f      	ldr	r2, [pc, #60]	; (80057f4 <VADC0_C0_2_IRQHandler+0x1bc>)
 80057b6:	6013      	str	r3, [r2, #0]
}
 80057b8:	bd98      	pop	{r3, r4, r7, pc}
 80057ba:	bf00      	nop
 80057bc:	f3af 8000 	nop.w
 80057c0:	00000000 	.word	0x00000000
 80057c4:	40a77000 	.word	0x40a77000
 80057c8:	fa26c2a5 	.word	0xfa26c2a5
 80057cc:	40526ae6 	.word	0x40526ae6
 80057d0:	00000000 	.word	0x00000000
 80057d4:	40affe00 	.word	0x40affe00
 80057d8:	1ffe8a4c 	.word	0x1ffe8a4c
 80057dc:	1ffe8a4e 	.word	0x1ffe8a4e
 80057e0:	1ffe8964 	.word	0x1ffe8964
 80057e4:	1ffe8934 	.word	0x1ffe8934
 80057e8:	1ffe8a50 	.word	0x1ffe8a50
 80057ec:	ba2e8ba3 	.word	0xba2e8ba3
 80057f0:	1ffe8dc0 	.word	0x1ffe8dc0
 80057f4:	1ffe8a48 	.word	0x1ffe8a48
 80057f8:	3ff00000 	.word	0x3ff00000
 80057fc:	3fe00000 	.word	0x3fe00000
 8005800:	1ffe8a44 	.word	0x1ffe8a44
 8005804:	f3af 8000 	nop.w

08005808 <ceil>:
 8005808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800580c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005810:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
 8005814:	2d13      	cmp	r5, #19
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	460c      	mov	r4, r1
 800581c:	4686      	mov	lr, r0
 800581e:	4688      	mov	r8, r1
 8005820:	4606      	mov	r6, r0
 8005822:	dc1f      	bgt.n	8005864 <ceil+0x5c>
 8005824:	2d00      	cmp	r5, #0
 8005826:	db4e      	blt.n	80058c6 <ceil+0xbe>
 8005828:	4f37      	ldr	r7, [pc, #220]	; (8005908 <ceil+0x100>)
 800582a:	412f      	asrs	r7, r5
 800582c:	ea07 0c01 	and.w	ip, r7, r1
 8005830:	ea5c 0e0e 	orrs.w	lr, ip, lr
 8005834:	d01b      	beq.n	800586e <ceil+0x66>
 8005836:	a332      	add	r3, pc, #200	; (adr r3, 8005900 <ceil+0xf8>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f001 f9be 	bl	8006bbc <__adddf3>
 8005840:	2200      	movs	r2, #0
 8005842:	2300      	movs	r3, #0
 8005844:	f001 fdfc 	bl	8007440 <__aeabi_dcmpgt>
 8005848:	b140      	cbz	r0, 800585c <ceil+0x54>
 800584a:	2c00      	cmp	r4, #0
 800584c:	dd03      	ble.n	8005856 <ceil+0x4e>
 800584e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005852:	412b      	asrs	r3, r5
 8005854:	4498      	add	r8, r3
 8005856:	ea28 0407 	bic.w	r4, r8, r7
 800585a:	2600      	movs	r6, #0
 800585c:	4621      	mov	r1, r4
 800585e:	4630      	mov	r0, r6
 8005860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005864:	2d33      	cmp	r5, #51	; 0x33
 8005866:	dd06      	ble.n	8005876 <ceil+0x6e>
 8005868:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800586c:	d03d      	beq.n	80058ea <ceil+0xe2>
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005876:	f2a7 4e13 	subw	lr, r7, #1043	; 0x413
 800587a:	f04f 39ff 	mov.w	r9, #4294967295
 800587e:	fa29 f90e 	lsr.w	r9, r9, lr
 8005882:	ea19 0f00 	tst.w	r9, r0
 8005886:	d0f2      	beq.n	800586e <ceil+0x66>
 8005888:	a31d      	add	r3, pc, #116	; (adr r3, 8005900 <ceil+0xf8>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f001 f995 	bl	8006bbc <__adddf3>
 8005892:	2200      	movs	r2, #0
 8005894:	2300      	movs	r3, #0
 8005896:	f001 fdd3 	bl	8007440 <__aeabi_dcmpgt>
 800589a:	2800      	cmp	r0, #0
 800589c:	d0de      	beq.n	800585c <ceil+0x54>
 800589e:	2c00      	cmp	r4, #0
 80058a0:	dd0a      	ble.n	80058b8 <ceil+0xb0>
 80058a2:	2d14      	cmp	r5, #20
 80058a4:	d006      	beq.n	80058b4 <ceil+0xac>
 80058a6:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
 80058aa:	3703      	adds	r7, #3
 80058ac:	2401      	movs	r4, #1
 80058ae:	40bc      	lsls	r4, r7
 80058b0:	19a6      	adds	r6, r4, r6
 80058b2:	d301      	bcc.n	80058b8 <ceil+0xb0>
 80058b4:	f108 0801 	add.w	r8, r8, #1
 80058b8:	4644      	mov	r4, r8
 80058ba:	ea26 0609 	bic.w	r6, r6, r9
 80058be:	4621      	mov	r1, r4
 80058c0:	4630      	mov	r0, r6
 80058c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c6:	a30e      	add	r3, pc, #56	; (adr r3, 8005900 <ceil+0xf8>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f001 f976 	bl	8006bbc <__adddf3>
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	f001 fdb4 	bl	8007440 <__aeabi_dcmpgt>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d0bf      	beq.n	800585c <ceil+0x54>
 80058dc:	2c00      	cmp	r4, #0
 80058de:	db0a      	blt.n	80058f6 <ceil+0xee>
 80058e0:	4326      	orrs	r6, r4
 80058e2:	d006      	beq.n	80058f2 <ceil+0xea>
 80058e4:	4c09      	ldr	r4, [pc, #36]	; (800590c <ceil+0x104>)
 80058e6:	2600      	movs	r6, #0
 80058e8:	e7b8      	b.n	800585c <ceil+0x54>
 80058ea:	f001 f967 	bl	8006bbc <__adddf3>
 80058ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f2:	4634      	mov	r4, r6
 80058f4:	e7b2      	b.n	800585c <ceil+0x54>
 80058f6:	2600      	movs	r6, #0
 80058f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80058fc:	e7ae      	b.n	800585c <ceil+0x54>
 80058fe:	bf00      	nop
 8005900:	8800759c 	.word	0x8800759c
 8005904:	7e37e43c 	.word	0x7e37e43c
 8005908:	000fffff 	.word	0x000fffff
 800590c:	3ff00000 	.word	0x3ff00000

08005910 <floor>:
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005914:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005918:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 800591c:	2d13      	cmp	r5, #19
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	460c      	mov	r4, r1
 8005924:	4607      	mov	r7, r0
 8005926:	4689      	mov	r9, r1
 8005928:	4606      	mov	r6, r0
 800592a:	dc1d      	bgt.n	8005968 <floor+0x58>
 800592c:	2d00      	cmp	r5, #0
 800592e:	db40      	blt.n	80059b2 <floor+0xa2>
 8005930:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8005a1c <floor+0x10c>
 8005934:	fa48 f805 	asr.w	r8, r8, r5
 8005938:	ea08 0e01 	and.w	lr, r8, r1
 800593c:	ea5e 0707 	orrs.w	r7, lr, r7
 8005940:	d017      	beq.n	8005972 <floor+0x62>
 8005942:	a334      	add	r3, pc, #208	; (adr r3, 8005a14 <floor+0x104>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f001 f938 	bl	8006bbc <__adddf3>
 800594c:	2200      	movs	r2, #0
 800594e:	2300      	movs	r3, #0
 8005950:	f001 fd76 	bl	8007440 <__aeabi_dcmpgt>
 8005954:	b120      	cbz	r0, 8005960 <floor+0x50>
 8005956:	2c00      	cmp	r4, #0
 8005958:	db3f      	blt.n	80059da <floor+0xca>
 800595a:	ea29 0408 	bic.w	r4, r9, r8
 800595e:	2600      	movs	r6, #0
 8005960:	4621      	mov	r1, r4
 8005962:	4630      	mov	r0, r6
 8005964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005968:	2d33      	cmp	r5, #51	; 0x33
 800596a:	dd06      	ble.n	800597a <floor+0x6a>
 800596c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005970:	d02f      	beq.n	80059d2 <floor+0xc2>
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 800597e:	f04f 37ff 	mov.w	r7, #4294967295
 8005982:	fa27 f70e 	lsr.w	r7, r7, lr
 8005986:	4207      	tst	r7, r0
 8005988:	d0f3      	beq.n	8005972 <floor+0x62>
 800598a:	a322      	add	r3, pc, #136	; (adr r3, 8005a14 <floor+0x104>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f001 f914 	bl	8006bbc <__adddf3>
 8005994:	2200      	movs	r2, #0
 8005996:	2300      	movs	r3, #0
 8005998:	f001 fd52 	bl	8007440 <__aeabi_dcmpgt>
 800599c:	2800      	cmp	r0, #0
 800599e:	d0df      	beq.n	8005960 <floor+0x50>
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	db1f      	blt.n	80059e4 <floor+0xd4>
 80059a4:	464c      	mov	r4, r9
 80059a6:	ea26 0607 	bic.w	r6, r6, r7
 80059aa:	4621      	mov	r1, r4
 80059ac:	4630      	mov	r0, r6
 80059ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b2:	a318      	add	r3, pc, #96	; (adr r3, 8005a14 <floor+0x104>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f001 f900 	bl	8006bbc <__adddf3>
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	f001 fd3e 	bl	8007440 <__aeabi_dcmpgt>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d0cb      	beq.n	8005960 <floor+0x50>
 80059c8:	2c00      	cmp	r4, #0
 80059ca:	db19      	blt.n	8005a00 <floor+0xf0>
 80059cc:	2600      	movs	r6, #0
 80059ce:	4634      	mov	r4, r6
 80059d0:	e7c6      	b.n	8005960 <floor+0x50>
 80059d2:	f001 f8f3 	bl	8006bbc <__adddf3>
 80059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059de:	412b      	asrs	r3, r5
 80059e0:	4499      	add	r9, r3
 80059e2:	e7ba      	b.n	800595a <floor+0x4a>
 80059e4:	2d14      	cmp	r5, #20
 80059e6:	d008      	beq.n	80059fa <floor+0xea>
 80059e8:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 80059ec:	f108 0803 	add.w	r8, r8, #3
 80059f0:	2301      	movs	r3, #1
 80059f2:	fa03 f308 	lsl.w	r3, r3, r8
 80059f6:	199e      	adds	r6, r3, r6
 80059f8:	d3d4      	bcc.n	80059a4 <floor+0x94>
 80059fa:	f109 0901 	add.w	r9, r9, #1
 80059fe:	e7d1      	b.n	80059a4 <floor+0x94>
 8005a00:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <floor+0x100>)
 8005a06:	433a      	orrs	r2, r7
 8005a08:	bf18      	it	ne
 8005a0a:	461c      	movne	r4, r3
 8005a0c:	2600      	movs	r6, #0
 8005a0e:	e7a7      	b.n	8005960 <floor+0x50>
 8005a10:	bff00000 	.word	0xbff00000
 8005a14:	8800759c 	.word	0x8800759c
 8005a18:	7e37e43c 	.word	0x7e37e43c
 8005a1c:	000fffff 	.word	0x000fffff

08005a20 <sin>:
 8005a20:	b530      	push	{r4, r5, lr}
 8005a22:	4a22      	ldr	r2, [pc, #136]	; (8005aac <sin+0x8c>)
 8005a24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	dd1c      	ble.n	8005a68 <sin+0x48>
 8005a2e:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <sin+0x90>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	dd05      	ble.n	8005a40 <sin+0x20>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	f001 f8be 	bl	8006bb8 <__aeabi_dsub>
 8005a3c:	b007      	add	sp, #28
 8005a3e:	bd30      	pop	{r4, r5, pc}
 8005a40:	aa02      	add	r2, sp, #8
 8005a42:	f000 f839 	bl	8005ab8 <__ieee754_rem_pio2>
 8005a46:	f000 0003 	and.w	r0, r0, #3
 8005a4a:	2801      	cmp	r0, #1
 8005a4c:	d01d      	beq.n	8005a8a <sin+0x6a>
 8005a4e:	2802      	cmp	r0, #2
 8005a50:	d012      	beq.n	8005a78 <sin+0x58>
 8005a52:	b308      	cbz	r0, 8005a98 <sin+0x78>
 8005a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5c:	f000 fa4c 	bl	8005ef8 <__kernel_cos>
 8005a60:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005a64:	b007      	add	sp, #28
 8005a66:	bd30      	pop	{r4, r5, pc}
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f000 ff56 	bl	8006920 <__kernel_sin>
 8005a74:	b007      	add	sp, #28
 8005a76:	bd30      	pop	{r4, r5, pc}
 8005a78:	2401      	movs	r4, #1
 8005a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a82:	9400      	str	r4, [sp, #0]
 8005a84:	f000 ff4c 	bl	8006920 <__kernel_sin>
 8005a88:	e7ea      	b.n	8005a60 <sin+0x40>
 8005a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a92:	f000 fa31 	bl	8005ef8 <__kernel_cos>
 8005a96:	e7d1      	b.n	8005a3c <sin+0x1c>
 8005a98:	2401      	movs	r4, #1
 8005a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aa2:	9400      	str	r4, [sp, #0]
 8005aa4:	f000 ff3c 	bl	8006920 <__kernel_sin>
 8005aa8:	e7c8      	b.n	8005a3c <sin+0x1c>
 8005aaa:	bf00      	nop
 8005aac:	3fe921fb 	.word	0x3fe921fb
 8005ab0:	7fefffff 	.word	0x7fefffff
 8005ab4:	00000000 	.word	0x00000000

08005ab8 <__ieee754_rem_pio2>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	4b98      	ldr	r3, [pc, #608]	; (8005d20 <__ieee754_rem_pio2+0x268>)
 8005abe:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005ac2:	429c      	cmp	r4, r3
 8005ac4:	b08f      	sub	sp, #60	; 0x3c
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	460f      	mov	r7, r1
 8005aca:	468a      	mov	sl, r1
 8005acc:	4615      	mov	r5, r2
 8005ace:	f340 8082 	ble.w	8005bd6 <__ieee754_rem_pio2+0x11e>
 8005ad2:	4b94      	ldr	r3, [pc, #592]	; (8005d24 <__ieee754_rem_pio2+0x26c>)
 8005ad4:	429c      	cmp	r4, r3
 8005ad6:	dc27      	bgt.n	8005b28 <__ieee754_rem_pio2+0x70>
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	a387      	add	r3, pc, #540	; (adr r3, 8005cf8 <__ieee754_rem_pio2+0x240>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f340 81a4 	ble.w	8005e2c <__ieee754_rem_pio2+0x374>
 8005ae4:	f001 f868 	bl	8006bb8 <__aeabi_dsub>
 8005ae8:	4b8f      	ldr	r3, [pc, #572]	; (8005d28 <__ieee754_rem_pio2+0x270>)
 8005aea:	429c      	cmp	r4, r3
 8005aec:	4606      	mov	r6, r0
 8005aee:	460f      	mov	r7, r1
 8005af0:	f000 8088 	beq.w	8005c04 <__ieee754_rem_pio2+0x14c>
 8005af4:	a382      	add	r3, pc, #520	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x248>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f001 f85d 	bl	8006bb8 <__aeabi_dsub>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	e9c5 2300 	strd	r2, r3, [r5]
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f001 f855 	bl	8006bb8 <__aeabi_dsub>
 8005b0e:	a37c      	add	r3, pc, #496	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x248>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f001 f850 	bl	8006bb8 <__aeabi_dsub>
 8005b18:	f04f 0b01 	mov.w	fp, #1
 8005b1c:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005b20:	4658      	mov	r0, fp
 8005b22:	b00f      	add	sp, #60	; 0x3c
 8005b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b28:	4b80      	ldr	r3, [pc, #512]	; (8005d2c <__ieee754_rem_pio2+0x274>)
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	f340 8088 	ble.w	8005c40 <__ieee754_rem_pio2+0x188>
 8005b30:	4b7f      	ldr	r3, [pc, #508]	; (8005d30 <__ieee754_rem_pio2+0x278>)
 8005b32:	429c      	cmp	r4, r3
 8005b34:	dc5b      	bgt.n	8005bee <__ieee754_rem_pio2+0x136>
 8005b36:	ea4f 5b24 	mov.w	fp, r4, asr #20
 8005b3a:	f2ab 4b16 	subw	fp, fp, #1046	; 0x416
 8005b3e:	eba4 510b 	sub.w	r1, r4, fp, lsl #20
 8005b42:	4689      	mov	r9, r1
 8005b44:	4680      	mov	r8, r0
 8005b46:	f001 fc85 	bl	8007454 <__aeabi_d2iz>
 8005b4a:	f001 f983 	bl	8006e54 <__aeabi_i2d>
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460f      	mov	r7, r1
 8005b52:	4632      	mov	r2, r6
 8005b54:	463b      	mov	r3, r7
 8005b56:	4640      	mov	r0, r8
 8005b58:	4649      	mov	r1, r9
 8005b5a:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8005b5e:	f001 f82b 	bl	8006bb8 <__aeabi_dsub>
 8005b62:	2200      	movs	r2, #0
 8005b64:	4b73      	ldr	r3, [pc, #460]	; (8005d34 <__ieee754_rem_pio2+0x27c>)
 8005b66:	f001 f9db 	bl	8006f20 <__aeabi_dmul>
 8005b6a:	4689      	mov	r9, r1
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	f001 fc71 	bl	8007454 <__aeabi_d2iz>
 8005b72:	f001 f96f 	bl	8006e54 <__aeabi_i2d>
 8005b76:	4606      	mov	r6, r0
 8005b78:	460f      	mov	r7, r1
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8005b86:	f001 f817 	bl	8006bb8 <__aeabi_dsub>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4b69      	ldr	r3, [pc, #420]	; (8005d34 <__ieee754_rem_pio2+0x27c>)
 8005b8e:	f001 f9c7 	bl	8006f20 <__aeabi_dmul>
 8005b92:	2200      	movs	r2, #0
 8005b94:	2300      	movs	r3, #0
 8005b96:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b9a:	f001 fc29 	bl	80073f0 <__aeabi_dcmpeq>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	f000 816d 	beq.w	8005e7e <__ieee754_rem_pio2+0x3c6>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	4639      	mov	r1, r7
 8005baa:	2200      	movs	r2, #0
 8005bac:	f001 fc20 	bl	80073f0 <__aeabi_dcmpeq>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2302      	moveq	r3, #2
 8005bb8:	2202      	movs	r2, #2
 8005bba:	495f      	ldr	r1, [pc, #380]	; (8005d38 <__ieee754_rem_pio2+0x280>)
 8005bbc:	9200      	str	r2, [sp, #0]
 8005bbe:	9101      	str	r1, [sp, #4]
 8005bc0:	465a      	mov	r2, fp
 8005bc2:	a808      	add	r0, sp, #32
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	f000 fabf 	bl	8006148 <__kernel_rem_pio2>
 8005bca:	f1ba 0f00 	cmp.w	sl, #0
 8005bce:	f2c0 814b 	blt.w	8005e68 <__ieee754_rem_pio2+0x3b0>
 8005bd2:	4683      	mov	fp, r0
 8005bd4:	e007      	b.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e9c5 6700 	strd	r6, r7, [r5]
 8005bde:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8005be2:	f04f 0b00 	mov.w	fp, #0
 8005be6:	4658      	mov	r0, fp
 8005be8:	b00f      	add	sp, #60	; 0x3c
 8005bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	f000 ffe1 	bl	8006bb8 <__aeabi_dsub>
 8005bf6:	f04f 0b00 	mov.w	fp, #0
 8005bfa:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8005c02:	e7f0      	b.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005c04:	a340      	add	r3, pc, #256	; (adr r3, 8005d08 <__ieee754_rem_pio2+0x250>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f000 ffd5 	bl	8006bb8 <__aeabi_dsub>
 8005c0e:	a340      	add	r3, pc, #256	; (adr r3, 8005d10 <__ieee754_rem_pio2+0x258>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	f000 ffce 	bl	8006bb8 <__aeabi_dsub>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	e9c5 2300 	strd	r2, r3, [r5]
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f000 ffc6 	bl	8006bb8 <__aeabi_dsub>
 8005c2c:	a338      	add	r3, pc, #224	; (adr r3, 8005d10 <__ieee754_rem_pio2+0x258>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f000 ffc1 	bl	8006bb8 <__aeabi_dsub>
 8005c36:	f04f 0b01 	mov.w	fp, #1
 8005c3a:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005c3e:	e7d2      	b.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005c40:	f000 ff26 	bl	8006a90 <fabs>
 8005c44:	a334      	add	r3, pc, #208	; (adr r3, 8005d18 <__ieee754_rem_pio2+0x260>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	f001 f967 	bl	8006f20 <__aeabi_dmul>
 8005c52:	2200      	movs	r2, #0
 8005c54:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <__ieee754_rem_pio2+0x284>)
 8005c56:	f000 ffb1 	bl	8006bbc <__adddf3>
 8005c5a:	f001 fbfb 	bl	8007454 <__aeabi_d2iz>
 8005c5e:	4683      	mov	fp, r0
 8005c60:	f001 f8f8 	bl	8006e54 <__aeabi_i2d>
 8005c64:	a324      	add	r3, pc, #144	; (adr r3, 8005cf8 <__ieee754_rem_pio2+0x240>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c6e:	f001 f957 	bl	8006f20 <__aeabi_dmul>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f000 ff9d 	bl	8006bb8 <__aeabi_dsub>
 8005c7e:	a320      	add	r3, pc, #128	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x248>)
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	4606      	mov	r6, r0
 8005c86:	460f      	mov	r7, r1
 8005c88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c8c:	f001 f948 	bl	8006f20 <__aeabi_dmul>
 8005c90:	f1bb 0f1f 	cmp.w	fp, #31
 8005c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	dc52      	bgt.n	8005d44 <__ieee754_rem_pio2+0x28c>
 8005c9e:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <__ieee754_rem_pio2+0x288>)
 8005ca0:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	d04b      	beq.n	8005d44 <__ieee754_rem_pio2+0x28c>
 8005cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cb0:	f000 ff82 	bl	8006bb8 <__aeabi_dsub>
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	e9c5 8900 	strd	r8, r9, [r5]
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f000 ff78 	bl	8006bb8 <__aeabi_dsub>
 8005cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ccc:	f000 ff74 	bl	8006bb8 <__aeabi_dsub>
 8005cd0:	f1ba 0f00 	cmp.w	sl, #0
 8005cd4:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005cd8:	da85      	bge.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005cda:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
 8005cde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ce2:	f1cb 0b00 	rsb	fp, fp, #0
 8005ce6:	f8c5 8000 	str.w	r8, [r5]
 8005cea:	606c      	str	r4, [r5, #4]
 8005cec:	60a8      	str	r0, [r5, #8]
 8005cee:	60eb      	str	r3, [r5, #12]
 8005cf0:	e779      	b.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005cf2:	bf00      	nop
 8005cf4:	f3af 8000 	nop.w
 8005cf8:	54400000 	.word	0x54400000
 8005cfc:	3ff921fb 	.word	0x3ff921fb
 8005d00:	1a626331 	.word	0x1a626331
 8005d04:	3dd0b461 	.word	0x3dd0b461
 8005d08:	1a600000 	.word	0x1a600000
 8005d0c:	3dd0b461 	.word	0x3dd0b461
 8005d10:	2e037073 	.word	0x2e037073
 8005d14:	3ba3198a 	.word	0x3ba3198a
 8005d18:	6dc9c883 	.word	0x6dc9c883
 8005d1c:	3fe45f30 	.word	0x3fe45f30
 8005d20:	3fe921fb 	.word	0x3fe921fb
 8005d24:	4002d97b 	.word	0x4002d97b
 8005d28:	3ff921fb 	.word	0x3ff921fb
 8005d2c:	413921fb 	.word	0x413921fb
 8005d30:	7fefffff 	.word	0x7fefffff
 8005d34:	41700000 	.word	0x41700000
 8005d38:	0800f4e8 	.word	0x0800f4e8
 8005d3c:	3fe00000 	.word	0x3fe00000
 8005d40:	0800f468 	.word	0x0800f468
 8005d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d48:	f000 ff36 	bl	8006bb8 <__aeabi_dsub>
 8005d4c:	1524      	asrs	r4, r4, #20
 8005d4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d52:	1ae3      	subs	r3, r4, r3
 8005d54:	4680      	mov	r8, r0
 8005d56:	4689      	mov	r9, r1
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	e9c5 8900 	strd	r8, r9, [r5]
 8005d5e:	ddad      	ble.n	8005cbc <__ieee754_rem_pio2+0x204>
 8005d60:	a35b      	add	r3, pc, #364	; (adr r3, 8005ed0 <__ieee754_rem_pio2+0x418>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d6a:	f001 f8d9 	bl	8006f20 <__aeabi_dmul>
 8005d6e:	4680      	mov	r8, r0
 8005d70:	4689      	mov	r9, r1
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	4630      	mov	r0, r6
 8005d78:	4639      	mov	r1, r7
 8005d7a:	f000 ff1d 	bl	8006bb8 <__aeabi_dsub>
 8005d7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d86:	4630      	mov	r0, r6
 8005d88:	4639      	mov	r1, r7
 8005d8a:	f000 ff15 	bl	8006bb8 <__aeabi_dsub>
 8005d8e:	4642      	mov	r2, r8
 8005d90:	464b      	mov	r3, r9
 8005d92:	f000 ff11 	bl	8006bb8 <__aeabi_dsub>
 8005d96:	a350      	add	r3, pc, #320	; (adr r3, 8005ed8 <__ieee754_rem_pio2+0x420>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460f      	mov	r7, r1
 8005da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005da4:	f001 f8bc 	bl	8006f20 <__aeabi_dmul>
 8005da8:	4632      	mov	r2, r6
 8005daa:	463b      	mov	r3, r7
 8005dac:	f000 ff04 	bl	8006bb8 <__aeabi_dsub>
 8005db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005db8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dbc:	f000 fefc 	bl	8006bb8 <__aeabi_dsub>
 8005dc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005dc4:	1ae4      	subs	r4, r4, r3
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	4689      	mov	r9, r1
 8005dca:	2c31      	cmp	r4, #49	; 0x31
 8005dcc:	e9c5 8900 	strd	r8, r9, [r5]
 8005dd0:	dd75      	ble.n	8005ebe <__ieee754_rem_pio2+0x406>
 8005dd2:	a344      	add	r3, pc, #272	; (adr r3, 8005ee4 <__ieee754_rem_pio2+0x42c>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ddc:	f001 f8a0 	bl	8006f20 <__aeabi_dmul>
 8005de0:	4680      	mov	r8, r0
 8005de2:	4689      	mov	r9, r1
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dec:	f000 fee4 	bl	8006bb8 <__aeabi_dsub>
 8005df0:	4606      	mov	r6, r0
 8005df2:	460f      	mov	r7, r1
 8005df4:	4632      	mov	r2, r6
 8005df6:	463b      	mov	r3, r7
 8005df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dfc:	f000 fedc 	bl	8006bb8 <__aeabi_dsub>
 8005e00:	4642      	mov	r2, r8
 8005e02:	464b      	mov	r3, r9
 8005e04:	f000 fed8 	bl	8006bb8 <__aeabi_dsub>
 8005e08:	a338      	add	r3, pc, #224	; (adr r3, 8005eec <__ieee754_rem_pio2+0x434>)
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	4680      	mov	r8, r0
 8005e10:	4689      	mov	r9, r1
 8005e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e16:	f001 f883 	bl	8006f20 <__aeabi_dmul>
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	f000 fecb 	bl	8006bb8 <__aeabi_dsub>
 8005e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	e73f      	b.n	8005cac <__ieee754_rem_pio2+0x1f4>
 8005e2c:	f000 fec6 	bl	8006bbc <__adddf3>
 8005e30:	4b2b      	ldr	r3, [pc, #172]	; (8005ee0 <__ieee754_rem_pio2+0x428>)
 8005e32:	429c      	cmp	r4, r3
 8005e34:	4606      	mov	r6, r0
 8005e36:	460f      	mov	r7, r1
 8005e38:	d023      	beq.n	8005e82 <__ieee754_rem_pio2+0x3ca>
 8005e3a:	a323      	add	r3, pc, #140	; (adr r3, 8005ec8 <__ieee754_rem_pio2+0x410>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f000 febc 	bl	8006bbc <__adddf3>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	e9c5 2300 	strd	r2, r3, [r5]
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f000 feb2 	bl	8006bb8 <__aeabi_dsub>
 8005e54:	a31c      	add	r3, pc, #112	; (adr r3, 8005ec8 <__ieee754_rem_pio2+0x410>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f000 feaf 	bl	8006bbc <__adddf3>
 8005e5e:	f04f 3bff 	mov.w	fp, #4294967295
 8005e62:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005e66:	e6be      	b.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005e68:	686a      	ldr	r2, [r5, #4]
 8005e6a:	68eb      	ldr	r3, [r5, #12]
 8005e6c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8005e70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e74:	f1c0 0b00 	rsb	fp, r0, #0
 8005e78:	606a      	str	r2, [r5, #4]
 8005e7a:	60eb      	str	r3, [r5, #12]
 8005e7c:	e6b3      	b.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e69a      	b.n	8005bb8 <__ieee754_rem_pio2+0x100>
 8005e82:	a313      	add	r3, pc, #76	; (adr r3, 8005ed0 <__ieee754_rem_pio2+0x418>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f000 fe98 	bl	8006bbc <__adddf3>
 8005e8c:	a312      	add	r3, pc, #72	; (adr r3, 8005ed8 <__ieee754_rem_pio2+0x420>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	4606      	mov	r6, r0
 8005e94:	460f      	mov	r7, r1
 8005e96:	f000 fe91 	bl	8006bbc <__adddf3>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	e9c5 2300 	strd	r2, r3, [r5]
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	f000 fe87 	bl	8006bb8 <__aeabi_dsub>
 8005eaa:	a30b      	add	r3, pc, #44	; (adr r3, 8005ed8 <__ieee754_rem_pio2+0x420>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f000 fe84 	bl	8006bbc <__adddf3>
 8005eb4:	f04f 3bff 	mov.w	fp, #4294967295
 8005eb8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005ebc:	e693      	b.n	8005be6 <__ieee754_rem_pio2+0x12e>
 8005ebe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8005ec2:	e6fb      	b.n	8005cbc <__ieee754_rem_pio2+0x204>
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	1a626331 	.word	0x1a626331
 8005ecc:	3dd0b461 	.word	0x3dd0b461
 8005ed0:	1a600000 	.word	0x1a600000
 8005ed4:	3dd0b461 	.word	0x3dd0b461
 8005ed8:	2e037073 	.word	0x2e037073
 8005edc:	3ba3198a 	.word	0x3ba3198a
 8005ee0:	3ff921fb 	.word	0x3ff921fb
 8005ee4:	2e000000 	.word	0x2e000000
 8005ee8:	3ba3198a 	.word	0x3ba3198a
 8005eec:	252049c1 	.word	0x252049c1
 8005ef0:	397b839a 	.word	0x397b839a
 8005ef4:	f3af 8000 	nop.w

08005ef8 <__kernel_cos>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8005f00:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8005f04:	b085      	sub	sp, #20
 8005f06:	4606      	mov	r6, r0
 8005f08:	460f      	mov	r7, r1
 8005f0a:	4692      	mov	sl, r2
 8005f0c:	469b      	mov	fp, r3
 8005f0e:	da6b      	bge.n	8005fe8 <__kernel_cos+0xf0>
 8005f10:	f001 faa0 	bl	8007454 <__aeabi_d2iz>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	f000 80ea 	beq.w	80060ee <__kernel_cos+0x1f6>
 8005f1a:	4632      	mov	r2, r6
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f000 fffd 	bl	8006f20 <__aeabi_dmul>
 8005f26:	a374      	add	r3, pc, #464	; (adr r3, 80060f8 <__kernel_cos+0x200>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	460d      	mov	r5, r1
 8005f30:	f000 fff6 	bl	8006f20 <__aeabi_dmul>
 8005f34:	a372      	add	r3, pc, #456	; (adr r3, 8006100 <__kernel_cos+0x208>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f000 fe3f 	bl	8006bbc <__adddf3>
 8005f3e:	4622      	mov	r2, r4
 8005f40:	462b      	mov	r3, r5
 8005f42:	f000 ffed 	bl	8006f20 <__aeabi_dmul>
 8005f46:	a370      	add	r3, pc, #448	; (adr r3, 8006108 <__kernel_cos+0x210>)
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f000 fe34 	bl	8006bb8 <__aeabi_dsub>
 8005f50:	4622      	mov	r2, r4
 8005f52:	462b      	mov	r3, r5
 8005f54:	f000 ffe4 	bl	8006f20 <__aeabi_dmul>
 8005f58:	a36d      	add	r3, pc, #436	; (adr r3, 8006110 <__kernel_cos+0x218>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f000 fe2d 	bl	8006bbc <__adddf3>
 8005f62:	4622      	mov	r2, r4
 8005f64:	462b      	mov	r3, r5
 8005f66:	f000 ffdb 	bl	8006f20 <__aeabi_dmul>
 8005f6a:	a36b      	add	r3, pc, #428	; (adr r3, 8006118 <__kernel_cos+0x220>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f000 fe22 	bl	8006bb8 <__aeabi_dsub>
 8005f74:	4622      	mov	r2, r4
 8005f76:	462b      	mov	r3, r5
 8005f78:	f000 ffd2 	bl	8006f20 <__aeabi_dmul>
 8005f7c:	a368      	add	r3, pc, #416	; (adr r3, 8006120 <__kernel_cos+0x228>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f000 fe1b 	bl	8006bbc <__adddf3>
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	f000 ffc9 	bl	8006f20 <__aeabi_dmul>
 8005f8e:	e9cd 0100 	strd	r0, r1, [sp]
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	2200      	movs	r2, #0
 8005f98:	4b65      	ldr	r3, [pc, #404]	; (8006130 <__kernel_cos+0x238>)
 8005f9a:	f000 ffc1 	bl	8006f20 <__aeabi_dmul>
 8005f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	4689      	mov	r9, r1
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f000 ffb9 	bl	8006f20 <__aeabi_dmul>
 8005fae:	4652      	mov	r2, sl
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	465b      	mov	r3, fp
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f000 ffb1 	bl	8006f20 <__aeabi_dmul>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f000 fdf7 	bl	8006bb8 <__aeabi_dsub>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4640      	mov	r0, r8
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	f000 fdf1 	bl	8006bb8 <__aeabi_dsub>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	2000      	movs	r0, #0
 8005fdc:	4955      	ldr	r1, [pc, #340]	; (8006134 <__kernel_cos+0x23c>)
 8005fde:	f000 fdeb 	bl	8006bb8 <__aeabi_dsub>
 8005fe2:	b005      	add	sp, #20
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	f000 ff98 	bl	8006f20 <__aeabi_dmul>
 8005ff0:	a341      	add	r3, pc, #260	; (adr r3, 80060f8 <__kernel_cos+0x200>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	f000 ff91 	bl	8006f20 <__aeabi_dmul>
 8005ffe:	a340      	add	r3, pc, #256	; (adr r3, 8006100 <__kernel_cos+0x208>)
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	f000 fdda 	bl	8006bbc <__adddf3>
 8006008:	4622      	mov	r2, r4
 800600a:	462b      	mov	r3, r5
 800600c:	f000 ff88 	bl	8006f20 <__aeabi_dmul>
 8006010:	a33d      	add	r3, pc, #244	; (adr r3, 8006108 <__kernel_cos+0x210>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f000 fdcf 	bl	8006bb8 <__aeabi_dsub>
 800601a:	4622      	mov	r2, r4
 800601c:	462b      	mov	r3, r5
 800601e:	f000 ff7f 	bl	8006f20 <__aeabi_dmul>
 8006022:	a33b      	add	r3, pc, #236	; (adr r3, 8006110 <__kernel_cos+0x218>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f000 fdc8 	bl	8006bbc <__adddf3>
 800602c:	4622      	mov	r2, r4
 800602e:	462b      	mov	r3, r5
 8006030:	f000 ff76 	bl	8006f20 <__aeabi_dmul>
 8006034:	a338      	add	r3, pc, #224	; (adr r3, 8006118 <__kernel_cos+0x220>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f000 fdbd 	bl	8006bb8 <__aeabi_dsub>
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	f000 ff6d 	bl	8006f20 <__aeabi_dmul>
 8006046:	a336      	add	r3, pc, #216	; (adr r3, 8006120 <__kernel_cos+0x228>)
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f000 fdb6 	bl	8006bbc <__adddf3>
 8006050:	462b      	mov	r3, r5
 8006052:	4622      	mov	r2, r4
 8006054:	f000 ff64 	bl	8006f20 <__aeabi_dmul>
 8006058:	4b37      	ldr	r3, [pc, #220]	; (8006138 <__kernel_cos+0x240>)
 800605a:	4599      	cmp	r9, r3
 800605c:	e9cd 0100 	strd	r0, r1, [sp]
 8006060:	dd97      	ble.n	8005f92 <__kernel_cos+0x9a>
 8006062:	4b36      	ldr	r3, [pc, #216]	; (800613c <__kernel_cos+0x244>)
 8006064:	4599      	cmp	r9, r3
 8006066:	dc39      	bgt.n	80060dc <__kernel_cos+0x1e4>
 8006068:	2200      	movs	r2, #0
 800606a:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 800606e:	2000      	movs	r0, #0
 8006070:	4930      	ldr	r1, [pc, #192]	; (8006134 <__kernel_cos+0x23c>)
 8006072:	4690      	mov	r8, r2
 8006074:	4699      	mov	r9, r3
 8006076:	f000 fd9f 	bl	8006bb8 <__aeabi_dsub>
 800607a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	2200      	movs	r2, #0
 8006084:	4b2a      	ldr	r3, [pc, #168]	; (8006130 <__kernel_cos+0x238>)
 8006086:	f000 ff4b 	bl	8006f20 <__aeabi_dmul>
 800608a:	4642      	mov	r2, r8
 800608c:	464b      	mov	r3, r9
 800608e:	f000 fd93 	bl	8006bb8 <__aeabi_dsub>
 8006092:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006096:	4680      	mov	r8, r0
 8006098:	4689      	mov	r9, r1
 800609a:	4620      	mov	r0, r4
 800609c:	4629      	mov	r1, r5
 800609e:	f000 ff3f 	bl	8006f20 <__aeabi_dmul>
 80060a2:	4652      	mov	r2, sl
 80060a4:	4604      	mov	r4, r0
 80060a6:	460d      	mov	r5, r1
 80060a8:	465b      	mov	r3, fp
 80060aa:	4630      	mov	r0, r6
 80060ac:	4639      	mov	r1, r7
 80060ae:	f000 ff37 	bl	8006f20 <__aeabi_dmul>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4620      	mov	r0, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	f000 fd7d 	bl	8006bb8 <__aeabi_dsub>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4640      	mov	r0, r8
 80060c4:	4649      	mov	r1, r9
 80060c6:	f000 fd77 	bl	8006bb8 <__aeabi_dsub>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d2:	f000 fd71 	bl	8006bb8 <__aeabi_dsub>
 80060d6:	b005      	add	sp, #20
 80060d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060dc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8006128 <__kernel_cos+0x230>
 80060e0:	f04f 0800 	mov.w	r8, #0
 80060e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060e8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8006140 <__kernel_cos+0x248>
 80060ec:	e7c7      	b.n	800607e <__kernel_cos+0x186>
 80060ee:	4911      	ldr	r1, [pc, #68]	; (8006134 <__kernel_cos+0x23c>)
 80060f0:	2000      	movs	r0, #0
 80060f2:	b005      	add	sp, #20
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	be8838d4 	.word	0xbe8838d4
 80060fc:	bda8fae9 	.word	0xbda8fae9
 8006100:	bdb4b1c4 	.word	0xbdb4b1c4
 8006104:	3e21ee9e 	.word	0x3e21ee9e
 8006108:	809c52ad 	.word	0x809c52ad
 800610c:	3e927e4f 	.word	0x3e927e4f
 8006110:	19cb1590 	.word	0x19cb1590
 8006114:	3efa01a0 	.word	0x3efa01a0
 8006118:	16c15177 	.word	0x16c15177
 800611c:	3f56c16c 	.word	0x3f56c16c
 8006120:	5555554c 	.word	0x5555554c
 8006124:	3fa55555 	.word	0x3fa55555
 8006128:	00000000 	.word	0x00000000
 800612c:	3fe70000 	.word	0x3fe70000
 8006130:	3fe00000 	.word	0x3fe00000
 8006134:	3ff00000 	.word	0x3ff00000
 8006138:	3fd33332 	.word	0x3fd33332
 800613c:	3fe90000 	.word	0x3fe90000
 8006140:	3fd20000 	.word	0x3fd20000
 8006144:	f3af 8000 	nop.w

08006148 <__kernel_rem_pio2>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006150:	4cc6      	ldr	r4, [pc, #792]	; (800646c <__kernel_rem_pio2+0x324>)
 8006152:	9ea4      	ldr	r6, [sp, #656]	; 0x290
 8006154:	4dc6      	ldr	r5, [pc, #792]	; (8006470 <__kernel_rem_pio2+0x328>)
 8006156:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 800615a:	9407      	str	r4, [sp, #28]
 800615c:	4626      	mov	r6, r4
 800615e:	1ed4      	subs	r4, r2, #3
 8006160:	fb85 7504 	smull	r7, r5, r5, r4
 8006164:	17e4      	asrs	r4, r4, #31
 8006166:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 800616a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800616e:	461d      	mov	r5, r3
 8006170:	930a      	str	r3, [sp, #40]	; 0x28
 8006172:	43e3      	mvns	r3, r4
 8006174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006178:	3d01      	subs	r5, #1
 800617a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800617e:	9306      	str	r3, [sp, #24]
 8006180:	462b      	mov	r3, r5
 8006182:	940b      	str	r4, [sp, #44]	; 0x2c
 8006184:	9500      	str	r5, [sp, #0]
 8006186:	1b65      	subs	r5, r4, r5
 8006188:	199c      	adds	r4, r3, r6
 800618a:	9003      	str	r0, [sp, #12]
 800618c:	9108      	str	r1, [sp, #32]
 800618e:	d416      	bmi.n	80061be <__kernel_rem_pio2+0x76>
 8006190:	442c      	add	r4, r5
 8006192:	3401      	adds	r4, #1
 8006194:	ae22      	add	r6, sp, #136	; 0x88
 8006196:	9fa5      	ldr	r7, [sp, #660]	; 0x294
 8006198:	e008      	b.n	80061ac <__kernel_rem_pio2+0x64>
 800619a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800619e:	f000 fe59 	bl	8006e54 <__aeabi_i2d>
 80061a2:	3501      	adds	r5, #1
 80061a4:	42a5      	cmp	r5, r4
 80061a6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80061aa:	d008      	beq.n	80061be <__kernel_rem_pio2+0x76>
 80061ac:	2d00      	cmp	r5, #0
 80061ae:	daf4      	bge.n	800619a <__kernel_rem_pio2+0x52>
 80061b0:	3501      	adds	r5, #1
 80061b2:	2000      	movs	r0, #0
 80061b4:	2100      	movs	r1, #0
 80061b6:	42a5      	cmp	r5, r4
 80061b8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80061bc:	d1f6      	bne.n	80061ac <__kernel_rem_pio2+0x64>
 80061be:	9b07      	ldr	r3, [sp, #28]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db2a      	blt.n	800621a <__kernel_rem_pio2+0xd2>
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	f103 0a01 	add.w	sl, r3, #1
 80061ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061cc:	af22      	add	r7, sp, #136	; 0x88
 80061ce:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
 80061d2:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
 80061d6:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 80061da:	463d      	mov	r5, r7
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f2c0 8180 	blt.w	80064e4 <__kernel_rem_pio2+0x39c>
 80061e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061e8:	eb05 040b 	add.w	r4, r5, fp
 80061ec:	2600      	movs	r6, #0
 80061ee:	2700      	movs	r7, #0
 80061f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80061f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80061f8:	f000 fe92 	bl	8006f20 <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	f000 fcda 	bl	8006bbc <__adddf3>
 8006208:	42a5      	cmp	r5, r4
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	d1ef      	bne.n	80061f0 <__kernel_rem_pio2+0xa8>
 8006210:	3508      	adds	r5, #8
 8006212:	4555      	cmp	r5, sl
 8006214:	e8e8 6702 	strd	r6, r7, [r8], #8
 8006218:	d1e0      	bne.n	80061dc <__kernel_rem_pio2+0x94>
 800621a:	9d07      	ldr	r5, [sp, #28]
 800621c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800621e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8006222:	3b01      	subs	r3, #1
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	a80e      	add	r0, sp, #56	; 0x38
 8006228:	1d19      	adds	r1, r3, #4
 800622a:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800622e:	4403      	add	r3, r0
 8006230:	4401      	add	r1, r0
 8006232:	930c      	str	r3, [sp, #48]	; 0x30
 8006234:	00d3      	lsls	r3, r2, #3
 8006236:	910d      	str	r1, [sp, #52]	; 0x34
 8006238:	9305      	str	r3, [sp, #20]
 800623a:	00ec      	lsls	r4, r5, #3
 800623c:	ab9a      	add	r3, sp, #616	; 0x268
 800623e:	4423      	add	r3, r4
 8006240:	2d00      	cmp	r5, #0
 8006242:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006246:	dd28      	ble.n	800629a <__kernel_rem_pio2+0x152>
 8006248:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800624c:	445c      	add	r4, fp
 800624e:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8006252:	2200      	movs	r2, #0
 8006254:	4b87      	ldr	r3, [pc, #540]	; (8006474 <__kernel_rem_pio2+0x32c>)
 8006256:	4630      	mov	r0, r6
 8006258:	4639      	mov	r1, r7
 800625a:	f000 fe61 	bl	8006f20 <__aeabi_dmul>
 800625e:	f001 f8f9 	bl	8007454 <__aeabi_d2iz>
 8006262:	f000 fdf7 	bl	8006e54 <__aeabi_i2d>
 8006266:	2200      	movs	r2, #0
 8006268:	4b83      	ldr	r3, [pc, #524]	; (8006478 <__kernel_rem_pio2+0x330>)
 800626a:	4680      	mov	r8, r0
 800626c:	4689      	mov	r9, r1
 800626e:	f000 fe57 	bl	8006f20 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4630      	mov	r0, r6
 8006278:	4639      	mov	r1, r7
 800627a:	f000 fc9d 	bl	8006bb8 <__aeabi_dsub>
 800627e:	f001 f8e9 	bl	8007454 <__aeabi_d2iz>
 8006282:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006286:	f84a 0f04 	str.w	r0, [sl, #4]!
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	f000 fc95 	bl	8006bbc <__adddf3>
 8006292:	455c      	cmp	r4, fp
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	d1db      	bne.n	8006252 <__kernel_rem_pio2+0x10a>
 800629a:	9c06      	ldr	r4, [sp, #24]
 800629c:	4630      	mov	r0, r6
 800629e:	4639      	mov	r1, r7
 80062a0:	4622      	mov	r2, r4
 80062a2:	f000 fbf9 	bl	8006a98 <scalbn>
 80062a6:	2200      	movs	r2, #0
 80062a8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	f000 fe36 	bl	8006f20 <__aeabi_dmul>
 80062b4:	f7ff fb2c 	bl	8005910 <floor>
 80062b8:	2200      	movs	r2, #0
 80062ba:	4b70      	ldr	r3, [pc, #448]	; (800647c <__kernel_rem_pio2+0x334>)
 80062bc:	f000 fe30 	bl	8006f20 <__aeabi_dmul>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	f000 fc76 	bl	8006bb8 <__aeabi_dsub>
 80062cc:	460f      	mov	r7, r1
 80062ce:	4606      	mov	r6, r0
 80062d0:	f001 f8c0 	bl	8007454 <__aeabi_d2iz>
 80062d4:	4680      	mov	r8, r0
 80062d6:	f000 fdbd 	bl	8006e54 <__aeabi_i2d>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4630      	mov	r0, r6
 80062e0:	4639      	mov	r1, r7
 80062e2:	f000 fc69 	bl	8006bb8 <__aeabi_dsub>
 80062e6:	2c00      	cmp	r4, #0
 80062e8:	4606      	mov	r6, r0
 80062ea:	460f      	mov	r7, r1
 80062ec:	f340 80e1 	ble.w	80064b2 <__kernel_rem_pio2+0x36a>
 80062f0:	1e69      	subs	r1, r5, #1
 80062f2:	ab0e      	add	r3, sp, #56	; 0x38
 80062f4:	f1c4 0218 	rsb	r2, r4, #24
 80062f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062fc:	fa43 f002 	asr.w	r0, r3, r2
 8006300:	fa00 f902 	lsl.w	r9, r0, r2
 8006304:	f1c4 0217 	rsb	r2, r4, #23
 8006308:	ac0e      	add	r4, sp, #56	; 0x38
 800630a:	ebc9 0303 	rsb	r3, r9, r3
 800630e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8006312:	4480      	add	r8, r0
 8006314:	fa43 f902 	asr.w	r9, r3, r2
 8006318:	f1b9 0f00 	cmp.w	r9, #0
 800631c:	dd32      	ble.n	8006384 <__kernel_rem_pio2+0x23c>
 800631e:	2d00      	cmp	r5, #0
 8006320:	f108 0801 	add.w	r8, r8, #1
 8006324:	f340 8271 	ble.w	800680a <__kernel_rem_pio2+0x6c2>
 8006328:	2200      	movs	r2, #0
 800632a:	4614      	mov	r4, r2
 800632c:	a90d      	add	r1, sp, #52	; 0x34
 800632e:	e007      	b.n	8006340 <__kernel_rem_pio2+0x1f8>
 8006330:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 8006334:	b10b      	cbz	r3, 800633a <__kernel_rem_pio2+0x1f2>
 8006336:	6008      	str	r0, [r1, #0]
 8006338:	2401      	movs	r4, #1
 800633a:	3201      	adds	r2, #1
 800633c:	4295      	cmp	r5, r2
 800633e:	dd0d      	ble.n	800635c <__kernel_rem_pio2+0x214>
 8006340:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8006344:	2c00      	cmp	r4, #0
 8006346:	d0f3      	beq.n	8006330 <__kernel_rem_pio2+0x1e8>
 8006348:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 800634c:	3201      	adds	r2, #1
 800634e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8006352:	4295      	cmp	r5, r2
 8006354:	600b      	str	r3, [r1, #0]
 8006356:	f04f 0401 	mov.w	r4, #1
 800635a:	dcf1      	bgt.n	8006340 <__kernel_rem_pio2+0x1f8>
 800635c:	9b06      	ldr	r3, [sp, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd0d      	ble.n	800637e <__kernel_rem_pio2+0x236>
 8006362:	2b01      	cmp	r3, #1
 8006364:	f000 80ad 	beq.w	80064c2 <__kernel_rem_pio2+0x37a>
 8006368:	2b02      	cmp	r3, #2
 800636a:	d108      	bne.n	800637e <__kernel_rem_pio2+0x236>
 800636c:	1e6a      	subs	r2, r5, #1
 800636e:	ab0e      	add	r3, sp, #56	; 0x38
 8006370:	a90e      	add	r1, sp, #56	; 0x38
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800637a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800637e:	f1b9 0f02 	cmp.w	r9, #2
 8006382:	d07d      	beq.n	8006480 <__kernel_rem_pio2+0x338>
 8006384:	4630      	mov	r0, r6
 8006386:	4639      	mov	r1, r7
 8006388:	2200      	movs	r2, #0
 800638a:	2300      	movs	r3, #0
 800638c:	f001 f830 	bl	80073f0 <__aeabi_dcmpeq>
 8006390:	2800      	cmp	r0, #0
 8006392:	f000 80c3 	beq.w	800651c <__kernel_rem_pio2+0x3d4>
 8006396:	9b07      	ldr	r3, [sp, #28]
 8006398:	f105 3aff 	add.w	sl, r5, #4294967295
 800639c:	4553      	cmp	r3, sl
 800639e:	dc0d      	bgt.n	80063bc <__kernel_rem_pio2+0x274>
 80063a0:	ab0e      	add	r3, sp, #56	; 0x38
 80063a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063a4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80063a8:	2200      	movs	r2, #0
 80063aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063ae:	4283      	cmp	r3, r0
 80063b0:	ea42 0201 	orr.w	r2, r2, r1
 80063b4:	d1f9      	bne.n	80063aa <__kernel_rem_pio2+0x262>
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	f040 820c 	bne.w	80067d4 <__kernel_rem_pio2+0x68c>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	aa0e      	add	r2, sp, #56	; 0x38
 80063c0:	3b01      	subs	r3, #1
 80063c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f040 821d 	bne.w	8006806 <__kernel_rem_pio2+0x6be>
 80063cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ce:	2301      	movs	r3, #1
 80063d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80063d4:	3301      	adds	r3, #1
 80063d6:	2900      	cmp	r1, #0
 80063d8:	d0fa      	beq.n	80063d0 <__kernel_rem_pio2+0x288>
 80063da:	18eb      	adds	r3, r5, r3
 80063dc:	f105 0a01 	add.w	sl, r5, #1
 80063e0:	459a      	cmp	sl, r3
 80063e2:	9309      	str	r3, [sp, #36]	; 0x24
 80063e4:	dc40      	bgt.n	8006468 <__kernel_rem_pio2+0x320>
 80063e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ea:	eb0a 0903 	add.w	r9, sl, r3
 80063ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80063f4:	4619      	mov	r1, r3
 80063f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80063f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80063fc:	4415      	add	r5, r2
 80063fe:	eb01 0b02 	add.w	fp, r1, r2
 8006402:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8006406:	ab22      	add	r3, sp, #136	; 0x88
 8006408:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800640c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006410:	9304      	str	r3, [sp, #16]
 8006412:	ab72      	add	r3, sp, #456	; 0x1c8
 8006414:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006418:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800641c:	f000 fd1a 	bl	8006e54 <__aeabi_i2d>
 8006420:	9b00      	ldr	r3, [sp, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	e8e8 0102 	strd	r0, r1, [r8], #8
 8006428:	f04f 0600 	mov.w	r6, #0
 800642c:	f04f 0700 	mov.w	r7, #0
 8006430:	db15      	blt.n	800645e <__kernel_rem_pio2+0x316>
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006438:	eb08 0503 	add.w	r5, r8, r3
 800643c:	4644      	mov	r4, r8
 800643e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006442:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006446:	f000 fd6b 	bl	8006f20 <__aeabi_dmul>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4630      	mov	r0, r6
 8006450:	4639      	mov	r1, r7
 8006452:	f000 fbb3 	bl	8006bbc <__adddf3>
 8006456:	42ac      	cmp	r4, r5
 8006458:	4606      	mov	r6, r0
 800645a:	460f      	mov	r7, r1
 800645c:	d1ef      	bne.n	800643e <__kernel_rem_pio2+0x2f6>
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	4598      	cmp	r8, r3
 8006462:	e8ea 6702 	strd	r6, r7, [sl], #8
 8006466:	d1d7      	bne.n	8006418 <__kernel_rem_pio2+0x2d0>
 8006468:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800646a:	e6e6      	b.n	800623a <__kernel_rem_pio2+0xf2>
 800646c:	0800f5f0 	.word	0x0800f5f0
 8006470:	2aaaaaab 	.word	0x2aaaaaab
 8006474:	3e700000 	.word	0x3e700000
 8006478:	41700000 	.word	0x41700000
 800647c:	40200000 	.word	0x40200000
 8006480:	4632      	mov	r2, r6
 8006482:	463b      	mov	r3, r7
 8006484:	2000      	movs	r0, #0
 8006486:	49bb      	ldr	r1, [pc, #748]	; (8006774 <__kernel_rem_pio2+0x62c>)
 8006488:	f000 fb96 	bl	8006bb8 <__aeabi_dsub>
 800648c:	4606      	mov	r6, r0
 800648e:	460f      	mov	r7, r1
 8006490:	2c00      	cmp	r4, #0
 8006492:	f43f af77 	beq.w	8006384 <__kernel_rem_pio2+0x23c>
 8006496:	9a06      	ldr	r2, [sp, #24]
 8006498:	49b6      	ldr	r1, [pc, #728]	; (8006774 <__kernel_rem_pio2+0x62c>)
 800649a:	2000      	movs	r0, #0
 800649c:	f000 fafc 	bl	8006a98 <scalbn>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f000 fb86 	bl	8006bb8 <__aeabi_dsub>
 80064ac:	4606      	mov	r6, r0
 80064ae:	460f      	mov	r7, r1
 80064b0:	e768      	b.n	8006384 <__kernel_rem_pio2+0x23c>
 80064b2:	d110      	bne.n	80064d6 <__kernel_rem_pio2+0x38e>
 80064b4:	1e6b      	subs	r3, r5, #1
 80064b6:	aa0e      	add	r2, sp, #56	; 0x38
 80064b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064bc:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80064c0:	e72a      	b.n	8006318 <__kernel_rem_pio2+0x1d0>
 80064c2:	1e6a      	subs	r2, r5, #1
 80064c4:	ab0e      	add	r3, sp, #56	; 0x38
 80064c6:	a90e      	add	r1, sp, #56	; 0x38
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80064d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80064d4:	e753      	b.n	800637e <__kernel_rem_pio2+0x236>
 80064d6:	2200      	movs	r2, #0
 80064d8:	4ba7      	ldr	r3, [pc, #668]	; (8006778 <__kernel_rem_pio2+0x630>)
 80064da:	f000 ffa7 	bl	800742c <__aeabi_dcmpge>
 80064de:	b950      	cbnz	r0, 80064f6 <__kernel_rem_pio2+0x3ae>
 80064e0:	4681      	mov	r9, r0
 80064e2:	e74f      	b.n	8006384 <__kernel_rem_pio2+0x23c>
 80064e4:	3508      	adds	r5, #8
 80064e6:	2600      	movs	r6, #0
 80064e8:	2700      	movs	r7, #0
 80064ea:	4555      	cmp	r5, sl
 80064ec:	e8e8 6702 	strd	r6, r7, [r8], #8
 80064f0:	f47f ae74 	bne.w	80061dc <__kernel_rem_pio2+0x94>
 80064f4:	e691      	b.n	800621a <__kernel_rem_pio2+0xd2>
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	f108 0801 	add.w	r8, r8, #1
 80064fc:	bfc8      	it	gt
 80064fe:	f04f 0902 	movgt.w	r9, #2
 8006502:	f73f af11 	bgt.w	8006328 <__kernel_rem_pio2+0x1e0>
 8006506:	4632      	mov	r2, r6
 8006508:	463b      	mov	r3, r7
 800650a:	2000      	movs	r0, #0
 800650c:	4999      	ldr	r1, [pc, #612]	; (8006774 <__kernel_rem_pio2+0x62c>)
 800650e:	f000 fb53 	bl	8006bb8 <__aeabi_dsub>
 8006512:	f04f 0902 	mov.w	r9, #2
 8006516:	4606      	mov	r6, r0
 8006518:	460f      	mov	r7, r1
 800651a:	e733      	b.n	8006384 <__kernel_rem_pio2+0x23c>
 800651c:	9b06      	ldr	r3, [sp, #24]
 800651e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006522:	425a      	negs	r2, r3
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f8cd 8014 	str.w	r8, [sp, #20]
 800652c:	f000 fab4 	bl	8006a98 <scalbn>
 8006530:	2200      	movs	r2, #0
 8006532:	4b92      	ldr	r3, [pc, #584]	; (800677c <__kernel_rem_pio2+0x634>)
 8006534:	4606      	mov	r6, r0
 8006536:	460f      	mov	r7, r1
 8006538:	f000 ff78 	bl	800742c <__aeabi_dcmpge>
 800653c:	2800      	cmp	r0, #0
 800653e:	f000 81e6 	beq.w	800690e <__kernel_rem_pio2+0x7c6>
 8006542:	2200      	movs	r2, #0
 8006544:	4b8e      	ldr	r3, [pc, #568]	; (8006780 <__kernel_rem_pio2+0x638>)
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	f000 fce9 	bl	8006f20 <__aeabi_dmul>
 800654e:	f000 ff81 	bl	8007454 <__aeabi_d2iz>
 8006552:	4604      	mov	r4, r0
 8006554:	f000 fc7e 	bl	8006e54 <__aeabi_i2d>
 8006558:	2200      	movs	r2, #0
 800655a:	4b88      	ldr	r3, [pc, #544]	; (800677c <__kernel_rem_pio2+0x634>)
 800655c:	f000 fce0 	bl	8006f20 <__aeabi_dmul>
 8006560:	460b      	mov	r3, r1
 8006562:	4602      	mov	r2, r0
 8006564:	4639      	mov	r1, r7
 8006566:	4630      	mov	r0, r6
 8006568:	f000 fb26 	bl	8006bb8 <__aeabi_dsub>
 800656c:	f000 ff72 	bl	8007454 <__aeabi_d2iz>
 8006570:	9b06      	ldr	r3, [sp, #24]
 8006572:	3318      	adds	r3, #24
 8006574:	f105 0a01 	add.w	sl, r5, #1
 8006578:	9306      	str	r3, [sp, #24]
 800657a:	ab0e      	add	r3, sp, #56	; 0x38
 800657c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006580:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 8006584:	9a06      	ldr	r2, [sp, #24]
 8006586:	497b      	ldr	r1, [pc, #492]	; (8006774 <__kernel_rem_pio2+0x62c>)
 8006588:	2000      	movs	r0, #0
 800658a:	f000 fa85 	bl	8006a98 <scalbn>
 800658e:	f1ba 0f00 	cmp.w	sl, #0
 8006592:	4604      	mov	r4, r0
 8006594:	460d      	mov	r5, r1
 8006596:	f2c0 80c1 	blt.w	800671c <__kernel_rem_pio2+0x5d4>
 800659a:	f10a 0301 	add.w	r3, sl, #1
 800659e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80065a2:	af72      	add	r7, sp, #456	; 0x1c8
 80065a4:	aa0e      	add	r2, sp, #56	; 0x38
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80065ac:	eb07 0608 	add.w	r6, r7, r8
 80065b0:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 80065b4:	f000 fc4e 	bl	8006e54 <__aeabi_i2d>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	f000 fcb0 	bl	8006f20 <__aeabi_dmul>
 80065c0:	2200      	movs	r2, #0
 80065c2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80065c6:	4b6e      	ldr	r3, [pc, #440]	; (8006780 <__kernel_rem_pio2+0x638>)
 80065c8:	4620      	mov	r0, r4
 80065ca:	4629      	mov	r1, r5
 80065cc:	f000 fca8 	bl	8006f20 <__aeabi_dmul>
 80065d0:	42be      	cmp	r6, r7
 80065d2:	4604      	mov	r4, r0
 80065d4:	460d      	mov	r5, r1
 80065d6:	d1eb      	bne.n	80065b0 <__kernel_rem_pio2+0x468>
 80065d8:	f1a8 0808 	sub.w	r8, r8, #8
 80065dc:	eb06 0308 	add.w	r3, r6, r8
 80065e0:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 80065e4:	f8cd a018 	str.w	sl, [sp, #24]
 80065e8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80065ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80065f0:	f04f 0800 	mov.w	r8, #0
 80065f4:	469b      	mov	fp, r3
 80065f6:	f1ba 0f00 	cmp.w	sl, #0
 80065fa:	f2c0 808c 	blt.w	8006716 <__kernel_rem_pio2+0x5ce>
 80065fe:	f1b8 0f00 	cmp.w	r8, #0
 8006602:	f2c0 8088 	blt.w	8006716 <__kernel_rem_pio2+0x5ce>
 8006606:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006784 <__kernel_rem_pio2+0x63c>
 800660a:	465d      	mov	r5, fp
 800660c:	2600      	movs	r6, #0
 800660e:	2700      	movs	r7, #0
 8006610:	2400      	movs	r4, #0
 8006612:	e001      	b.n	8006618 <__kernel_rem_pio2+0x4d0>
 8006614:	4544      	cmp	r4, r8
 8006616:	dc10      	bgt.n	800663a <__kernel_rem_pio2+0x4f2>
 8006618:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800661c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006620:	f000 fc7e 	bl	8006f20 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f000 fac6 	bl	8006bbc <__adddf3>
 8006630:	3401      	adds	r4, #1
 8006632:	45a2      	cmp	sl, r4
 8006634:	4606      	mov	r6, r0
 8006636:	460f      	mov	r7, r1
 8006638:	daec      	bge.n	8006614 <__kernel_rem_pio2+0x4cc>
 800663a:	9b04      	ldr	r3, [sp, #16]
 800663c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006640:	e9c3 6700 	strd	r6, r7, [r3]
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	f108 0801 	add.w	r8, r8, #1
 800664a:	4598      	cmp	r8, r3
 800664c:	f1ab 0b08 	sub.w	fp, fp, #8
 8006650:	d1d1      	bne.n	80065f6 <__kernel_rem_pio2+0x4ae>
 8006652:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006654:	f8dd a018 	ldr.w	sl, [sp, #24]
 8006658:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d835      	bhi.n	80066cc <__kernel_rem_pio2+0x584>
 8006660:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006664:	0004003b 	.word	0x0004003b
 8006668:	00d50004 	.word	0x00d50004
 800666c:	9b00      	ldr	r3, [sp, #0]
 800666e:	2000      	movs	r0, #0
 8006670:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
 8006674:	2100      	movs	r1, #0
 8006676:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800667a:	f000 fa9f 	bl	8006bbc <__adddf3>
 800667e:	454c      	cmp	r4, r9
 8006680:	d1f9      	bne.n	8006676 <__kernel_rem_pio2+0x52e>
 8006682:	9b03      	ldr	r3, [sp, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8087 	beq.w	8006798 <__kernel_rem_pio2+0x650>
 800668a:	9d08      	ldr	r5, [sp, #32]
 800668c:	4602      	mov	r2, r0
 800668e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006692:	e885 000c 	stmia.w	r5, {r2, r3}
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800669e:	f000 fa8b 	bl	8006bb8 <__aeabi_dsub>
 80066a2:	f1ba 0f00 	cmp.w	sl, #0
 80066a6:	dd0b      	ble.n	80066c0 <__kernel_rem_pio2+0x578>
 80066a8:	ad4c      	add	r5, sp, #304	; 0x130
 80066aa:	2401      	movs	r4, #1
 80066ac:	3401      	adds	r4, #1
 80066ae:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80066b2:	f000 fa83 	bl	8006bbc <__adddf3>
 80066b6:	45a2      	cmp	sl, r4
 80066b8:	daf8      	bge.n	80066ac <__kernel_rem_pio2+0x564>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d078      	beq.n	80067b2 <__kernel_rem_pio2+0x66a>
 80066c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066c4:	9908      	ldr	r1, [sp, #32]
 80066c6:	4602      	mov	r2, r0
 80066c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80066cc:	9b05      	ldr	r3, [sp, #20]
 80066ce:	f003 0007 	and.w	r0, r3, #7
 80066d2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80066d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066da:	9b00      	ldr	r3, [sp, #0]
 80066dc:	2000      	movs	r0, #0
 80066de:	2100      	movs	r1, #0
 80066e0:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 80066e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066e8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80066ec:	f000 fa66 	bl	8006bbc <__adddf3>
 80066f0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80066f4:	d1f6      	bne.n	80066e4 <__kernel_rem_pio2+0x59c>
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	4602      	mov	r2, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d065      	beq.n	80067ca <__kernel_rem_pio2+0x682>
 80066fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006702:	9908      	ldr	r1, [sp, #32]
 8006704:	e9c1 2300 	strd	r2, r3, [r1]
 8006708:	9b05      	ldr	r3, [sp, #20]
 800670a:	f003 0007 	and.w	r0, r3, #7
 800670e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006716:	2600      	movs	r6, #0
 8006718:	2700      	movs	r7, #0
 800671a:	e78e      	b.n	800663a <__kernel_rem_pio2+0x4f2>
 800671c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800671e:	2b03      	cmp	r3, #3
 8006720:	d8d4      	bhi.n	80066cc <__kernel_rem_pio2+0x584>
 8006722:	e8df f003 	tbb	[pc, r3]
 8006726:	314c      	.short	0x314c
 8006728:	0231      	.short	0x0231
 800672a:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	2000      	movs	r0, #0
 8006732:	2100      	movs	r1, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80d8 	beq.w	80068ea <__kernel_rem_pio2+0x7a2>
 800673a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800673e:	9f08      	ldr	r7, [sp, #32]
 8006740:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006744:	f8d9 5000 	ldr.w	r5, [r9]
 8006748:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800674c:	6138      	str	r0, [r7, #16]
 800674e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	9b05      	ldr	r3, [sp, #20]
 8006756:	603d      	str	r5, [r7, #0]
 8006758:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800675c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006760:	f003 0007 	and.w	r0, r3, #7
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	60bc      	str	r4, [r7, #8]
 8006768:	6179      	str	r1, [r7, #20]
 800676a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	bf00      	nop
 8006774:	3ff00000 	.word	0x3ff00000
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	41700000 	.word	0x41700000
 8006780:	3e700000 	.word	0x3e700000
 8006784:	0800f600 	.word	0x0800f600
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	2000      	movs	r0, #0
 800678c:	2100      	movs	r1, #0
 800678e:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8006792:	2b00      	cmp	r3, #0
 8006794:	f47f af79 	bne.w	800668a <__kernel_rem_pio2+0x542>
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	4602      	mov	r2, r0
 800679c:	e9c3 0100 	strd	r0, r1, [r3]
 80067a0:	460b      	mov	r3, r1
 80067a2:	e9d9 0100 	ldrd	r0, r1, [r9]
 80067a6:	f000 fa07 	bl	8006bb8 <__aeabi_dsub>
 80067aa:	f1ba 0f00 	cmp.w	sl, #0
 80067ae:	f73f af7b 	bgt.w	80066a8 <__kernel_rem_pio2+0x560>
 80067b2:	460b      	mov	r3, r1
 80067b4:	9908      	ldr	r1, [sp, #32]
 80067b6:	4602      	mov	r2, r0
 80067b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80067bc:	e786      	b.n	80066cc <__kernel_rem_pio2+0x584>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	2000      	movs	r0, #0
 80067c2:	2100      	movs	r1, #0
 80067c4:	4602      	mov	r2, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d199      	bne.n	80066fe <__kernel_rem_pio2+0x5b6>
 80067ca:	460b      	mov	r3, r1
 80067cc:	9908      	ldr	r1, [sp, #32]
 80067ce:	e9c1 2300 	strd	r2, r3, [r1]
 80067d2:	e799      	b.n	8006708 <__kernel_rem_pio2+0x5c0>
 80067d4:	ab0e      	add	r3, sp, #56	; 0x38
 80067d6:	9a06      	ldr	r2, [sp, #24]
 80067d8:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80067dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80067e0:	3a18      	subs	r2, #24
 80067e2:	f8cd 8014 	str.w	r8, [sp, #20]
 80067e6:	9206      	str	r2, [sp, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f47f aecb 	bne.w	8006584 <__kernel_rem_pio2+0x43c>
 80067ee:	ab0e      	add	r3, sp, #56	; 0x38
 80067f0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80067f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067fc:	3a18      	subs	r2, #24
 80067fe:	2900      	cmp	r1, #0
 8006800:	d0f8      	beq.n	80067f4 <__kernel_rem_pio2+0x6ac>
 8006802:	9206      	str	r2, [sp, #24]
 8006804:	e6be      	b.n	8006584 <__kernel_rem_pio2+0x43c>
 8006806:	2301      	movs	r3, #1
 8006808:	e5e7      	b.n	80063da <__kernel_rem_pio2+0x292>
 800680a:	2400      	movs	r4, #0
 800680c:	e5a6      	b.n	800635c <__kernel_rem_pio2+0x214>
 800680e:	f1ba 0f00 	cmp.w	sl, #0
 8006812:	dd8c      	ble.n	800672e <__kernel_rem_pio2+0x5e6>
 8006814:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 8006818:	eb09 0b08 	add.w	fp, r9, r8
 800681c:	f108 0c08 	add.w	ip, r8, #8
 8006820:	e9db 6700 	ldrd	r6, r7, [fp]
 8006824:	44cc      	add	ip, r9
 8006826:	f8cd 8010 	str.w	r8, [sp, #16]
 800682a:	46e0      	mov	r8, ip
 800682c:	ed3b 7b02 	vldmdb	fp!, {d7}
 8006830:	4630      	mov	r0, r6
 8006832:	ec53 2b17 	vmov	r2, r3, d7
 8006836:	4639      	mov	r1, r7
 8006838:	ed8d 7b00 	vstr	d7, [sp]
 800683c:	f000 f9be 	bl	8006bbc <__adddf3>
 8006840:	4604      	mov	r4, r0
 8006842:	460d      	mov	r5, r1
 8006844:	4622      	mov	r2, r4
 8006846:	462b      	mov	r3, r5
 8006848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800684c:	f000 f9b4 	bl	8006bb8 <__aeabi_dsub>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4630      	mov	r0, r6
 8006856:	4639      	mov	r1, r7
 8006858:	f000 f9b0 	bl	8006bbc <__adddf3>
 800685c:	45cb      	cmp	fp, r9
 800685e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006862:	4626      	mov	r6, r4
 8006864:	462f      	mov	r7, r5
 8006866:	e9cb 4500 	strd	r4, r5, [fp]
 800686a:	d1df      	bne.n	800682c <__kernel_rem_pio2+0x6e4>
 800686c:	f1ba 0f01 	cmp.w	sl, #1
 8006870:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006874:	f77f af5b 	ble.w	800672e <__kernel_rem_pio2+0x5e6>
 8006878:	eb09 0508 	add.w	r5, r9, r8
 800687c:	f108 0408 	add.w	r4, r8, #8
 8006880:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8006884:	444c      	add	r4, r9
 8006886:	46a0      	mov	r8, r4
 8006888:	f50d 7c98 	add.w	ip, sp, #304	; 0x130
 800688c:	ed35 7b02 	vldmdb	r5!, {d7}
 8006890:	4652      	mov	r2, sl
 8006892:	465b      	mov	r3, fp
 8006894:	ec51 0b17 	vmov	r0, r1, d7
 8006898:	f8cd c010 	str.w	ip, [sp, #16]
 800689c:	ed8d 7b00 	vstr	d7, [sp]
 80068a0:	f000 f98c 	bl	8006bbc <__adddf3>
 80068a4:	4606      	mov	r6, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	4632      	mov	r2, r6
 80068aa:	463b      	mov	r3, r7
 80068ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068b0:	f000 f982 	bl	8006bb8 <__aeabi_dsub>
 80068b4:	4652      	mov	r2, sl
 80068b6:	465b      	mov	r3, fp
 80068b8:	f000 f980 	bl	8006bbc <__adddf3>
 80068bc:	f8dd c010 	ldr.w	ip, [sp, #16]
 80068c0:	4565      	cmp	r5, ip
 80068c2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80068c6:	46b2      	mov	sl, r6
 80068c8:	46bb      	mov	fp, r7
 80068ca:	e9c5 6700 	strd	r6, r7, [r5]
 80068ce:	d1dd      	bne.n	800688c <__kernel_rem_pio2+0x744>
 80068d0:	2000      	movs	r0, #0
 80068d2:	2100      	movs	r1, #0
 80068d4:	ad4e      	add	r5, sp, #312	; 0x138
 80068d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80068da:	f000 f96f 	bl	8006bbc <__adddf3>
 80068de:	42ac      	cmp	r4, r5
 80068e0:	d1f9      	bne.n	80068d6 <__kernel_rem_pio2+0x78e>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f af28 	bne.w	800673a <__kernel_rem_pio2+0x5f2>
 80068ea:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 80068ee:	9f08      	ldr	r7, [sp, #32]
 80068f0:	e9d9 4500 	ldrd	r4, r5, [r9]
 80068f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80068f8:	9b05      	ldr	r3, [sp, #20]
 80068fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80068fe:	f003 0007 	and.w	r0, r3, #7
 8006902:	e9c7 4500 	strd	r4, r5, [r7]
 8006906:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	4630      	mov	r0, r6
 8006910:	4639      	mov	r1, r7
 8006912:	f000 fd9f 	bl	8007454 <__aeabi_d2iz>
 8006916:	ab0e      	add	r3, sp, #56	; 0x38
 8006918:	46aa      	mov	sl, r5
 800691a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800691e:	e631      	b.n	8006584 <__kernel_rem_pio2+0x43c>

08006920 <__kernel_sin>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006928:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800692c:	b085      	sub	sp, #20
 800692e:	4604      	mov	r4, r0
 8006930:	460d      	mov	r5, r1
 8006932:	4690      	mov	r8, r2
 8006934:	4699      	mov	r9, r3
 8006936:	da04      	bge.n	8006942 <__kernel_sin+0x22>
 8006938:	f000 fd8c 	bl	8007454 <__aeabi_d2iz>
 800693c:	2800      	cmp	r0, #0
 800693e:	f000 8083 	beq.w	8006a48 <__kernel_sin+0x128>
 8006942:	4622      	mov	r2, r4
 8006944:	462b      	mov	r3, r5
 8006946:	4620      	mov	r0, r4
 8006948:	4629      	mov	r1, r5
 800694a:	f000 fae9 	bl	8006f20 <__aeabi_dmul>
 800694e:	4622      	mov	r2, r4
 8006950:	462b      	mov	r3, r5
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	f000 fae3 	bl	8006f20 <__aeabi_dmul>
 800695a:	a342      	add	r3, pc, #264	; (adr r3, 8006a64 <__kernel_sin+0x144>)
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	4682      	mov	sl, r0
 8006962:	468b      	mov	fp, r1
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f000 fada 	bl	8006f20 <__aeabi_dmul>
 800696c:	a33f      	add	r3, pc, #252	; (adr r3, 8006a6c <__kernel_sin+0x14c>)
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f000 f921 	bl	8006bb8 <__aeabi_dsub>
 8006976:	4632      	mov	r2, r6
 8006978:	463b      	mov	r3, r7
 800697a:	f000 fad1 	bl	8006f20 <__aeabi_dmul>
 800697e:	a33d      	add	r3, pc, #244	; (adr r3, 8006a74 <__kernel_sin+0x154>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f000 f91a 	bl	8006bbc <__adddf3>
 8006988:	4632      	mov	r2, r6
 800698a:	463b      	mov	r3, r7
 800698c:	f000 fac8 	bl	8006f20 <__aeabi_dmul>
 8006990:	a33a      	add	r3, pc, #232	; (adr r3, 8006a7c <__kernel_sin+0x15c>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f000 f90f 	bl	8006bb8 <__aeabi_dsub>
 800699a:	4632      	mov	r2, r6
 800699c:	463b      	mov	r3, r7
 800699e:	f000 fabf 	bl	8006f20 <__aeabi_dmul>
 80069a2:	a338      	add	r3, pc, #224	; (adr r3, 8006a84 <__kernel_sin+0x164>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f000 f908 	bl	8006bbc <__adddf3>
 80069ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ae:	e9cd 0100 	strd	r0, r1, [sp]
 80069b2:	b39b      	cbz	r3, 8006a1c <__kernel_sin+0xfc>
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	2200      	movs	r2, #0
 80069ba:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <__kernel_sin+0x140>)
 80069bc:	f000 fab0 	bl	8006f20 <__aeabi_dmul>
 80069c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c8:	4650      	mov	r0, sl
 80069ca:	4659      	mov	r1, fp
 80069cc:	f000 faa8 	bl	8006f20 <__aeabi_dmul>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d8:	f000 f8ee 	bl	8006bb8 <__aeabi_dsub>
 80069dc:	4632      	mov	r2, r6
 80069de:	463b      	mov	r3, r7
 80069e0:	f000 fa9e 	bl	8006f20 <__aeabi_dmul>
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	f000 f8e6 	bl	8006bb8 <__aeabi_dsub>
 80069ec:	a31a      	add	r3, pc, #104	; (adr r3, 8006a58 <__kernel_sin+0x138>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	4650      	mov	r0, sl
 80069f8:	4659      	mov	r1, fp
 80069fa:	f000 fa91 	bl	8006f20 <__aeabi_dmul>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4630      	mov	r0, r6
 8006a04:	4639      	mov	r1, r7
 8006a06:	f000 f8d9 	bl	8006bbc <__adddf3>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f000 f8d1 	bl	8006bb8 <__aeabi_dsub>
 8006a16:	b005      	add	sp, #20
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f000 fa7c 	bl	8006f20 <__aeabi_dmul>
 8006a28:	a30b      	add	r3, pc, #44	; (adr r3, 8006a58 <__kernel_sin+0x138>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f000 f8c3 	bl	8006bb8 <__aeabi_dsub>
 8006a32:	4652      	mov	r2, sl
 8006a34:	465b      	mov	r3, fp
 8006a36:	f000 fa73 	bl	8006f20 <__aeabi_dmul>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	f000 f8bd 	bl	8006bbc <__adddf3>
 8006a42:	b005      	add	sp, #20
 8006a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	b005      	add	sp, #20
 8006a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a52:	bf00      	nop
 8006a54:	f3af 8000 	nop.w
 8006a58:	55555549 	.word	0x55555549
 8006a5c:	3fc55555 	.word	0x3fc55555
 8006a60:	3fe00000 	.word	0x3fe00000
 8006a64:	5acfd57c 	.word	0x5acfd57c
 8006a68:	3de5d93a 	.word	0x3de5d93a
 8006a6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006a70:	3e5ae5e6 	.word	0x3e5ae5e6
 8006a74:	57b1fe7d 	.word	0x57b1fe7d
 8006a78:	3ec71de3 	.word	0x3ec71de3
 8006a7c:	19c161d5 	.word	0x19c161d5
 8006a80:	3f2a01a0 	.word	0x3f2a01a0
 8006a84:	1110f8a6 	.word	0x1110f8a6
 8006a88:	3f811111 	.word	0x3f811111
 8006a8c:	f3af 8000 	nop.w

08006a90 <fabs>:
 8006a90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop

08006a98 <scalbn>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4617      	mov	r7, r2
 8006aa6:	bb16      	cbnz	r6, 8006aee <scalbn+0x56>
 8006aa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006aac:	4303      	orrs	r3, r0
 8006aae:	d032      	beq.n	8006b16 <scalbn+0x7e>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4b37      	ldr	r3, [pc, #220]	; (8006b90 <scalbn+0xf8>)
 8006ab4:	f000 fa34 	bl	8006f20 <__aeabi_dmul>
 8006ab8:	4a36      	ldr	r2, [pc, #216]	; (8006b94 <scalbn+0xfc>)
 8006aba:	4297      	cmp	r7, r2
 8006abc:	4604      	mov	r4, r0
 8006abe:	460d      	mov	r5, r1
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	db37      	blt.n	8006b34 <scalbn+0x9c>
 8006ac4:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006ac8:	3e36      	subs	r6, #54	; 0x36
 8006aca:	443e      	add	r6, r7
 8006acc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006ad0:	4296      	cmp	r6, r2
 8006ad2:	dd15      	ble.n	8006b00 <scalbn+0x68>
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	462b      	mov	r3, r5
 8006ad8:	a129      	add	r1, pc, #164	; (adr r1, 8006b80 <scalbn+0xe8>)
 8006ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ade:	f000 f85f 	bl	8006ba0 <copysign>
 8006ae2:	a327      	add	r3, pc, #156	; (adr r3, 8006b80 <scalbn+0xe8>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f000 fa1a 	bl	8006f20 <__aeabi_dmul>
 8006aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006af2:	4296      	cmp	r6, r2
 8006af4:	d024      	beq.n	8006b40 <scalbn+0xa8>
 8006af6:	443e      	add	r6, r7
 8006af8:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006afc:	4296      	cmp	r6, r2
 8006afe:	dce9      	bgt.n	8006ad4 <scalbn+0x3c>
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	dd09      	ble.n	8006b18 <scalbn+0x80>
 8006b04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b0c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8006b10:	4620      	mov	r0, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b18:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8006b1c:	da15      	bge.n	8006b4a <scalbn+0xb2>
 8006b1e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b22:	429f      	cmp	r7, r3
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	dc1d      	bgt.n	8006b66 <scalbn+0xce>
 8006b2a:	a117      	add	r1, pc, #92	; (adr r1, 8006b88 <scalbn+0xf0>)
 8006b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b30:	f000 f836 	bl	8006ba0 <copysign>
 8006b34:	a314      	add	r3, pc, #80	; (adr r3, 8006b88 <scalbn+0xf0>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f000 f9f1 	bl	8006f20 <__aeabi_dmul>
 8006b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	f000 f83a 	bl	8006bbc <__adddf3>
 8006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b52:	3636      	adds	r6, #54	; 0x36
 8006b54:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8006b58:	4620      	mov	r0, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <scalbn+0x100>)
 8006b60:	f000 f9de 	bl	8006f20 <__aeabi_dmul>
 8006b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b66:	a106      	add	r1, pc, #24	; (adr r1, 8006b80 <scalbn+0xe8>)
 8006b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b6c:	f000 f818 	bl	8006ba0 <copysign>
 8006b70:	a303      	add	r3, pc, #12	; (adr r3, 8006b80 <scalbn+0xe8>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f000 f9d3 	bl	8006f20 <__aeabi_dmul>
 8006b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7c:	f3af 8000 	nop.w
 8006b80:	8800759c 	.word	0x8800759c
 8006b84:	7e37e43c 	.word	0x7e37e43c
 8006b88:	c2f8f359 	.word	0xc2f8f359
 8006b8c:	01a56e1f 	.word	0x01a56e1f
 8006b90:	43500000 	.word	0x43500000
 8006b94:	ffff3cb0 	.word	0xffff3cb0
 8006b98:	3c900000 	.word	0x3c900000
 8006b9c:	f3af 8000 	nop.w

08006ba0 <copysign>:
 8006ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006ba8:	ea43 0102 	orr.w	r1, r3, r2
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop

08006bb0 <__aeabi_drsub>:
 8006bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006bb4:	e002      	b.n	8006bbc <__adddf3>
 8006bb6:	bf00      	nop

08006bb8 <__aeabi_dsub>:
 8006bb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006bbc <__adddf3>:
 8006bbc:	b530      	push	{r4, r5, lr}
 8006bbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006bc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006bc6:	ea94 0f05 	teq	r4, r5
 8006bca:	bf08      	it	eq
 8006bcc:	ea90 0f02 	teqeq	r0, r2
 8006bd0:	bf1f      	itttt	ne
 8006bd2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006bd6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006bda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006bde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006be2:	f000 80e2 	beq.w	8006daa <__adddf3+0x1ee>
 8006be6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006bea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006bee:	bfb8      	it	lt
 8006bf0:	426d      	neglt	r5, r5
 8006bf2:	dd0c      	ble.n	8006c0e <__adddf3+0x52>
 8006bf4:	442c      	add	r4, r5
 8006bf6:	ea80 0202 	eor.w	r2, r0, r2
 8006bfa:	ea81 0303 	eor.w	r3, r1, r3
 8006bfe:	ea82 0000 	eor.w	r0, r2, r0
 8006c02:	ea83 0101 	eor.w	r1, r3, r1
 8006c06:	ea80 0202 	eor.w	r2, r0, r2
 8006c0a:	ea81 0303 	eor.w	r3, r1, r3
 8006c0e:	2d36      	cmp	r5, #54	; 0x36
 8006c10:	bf88      	it	hi
 8006c12:	bd30      	pophi	{r4, r5, pc}
 8006c14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006c1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006c20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006c24:	d002      	beq.n	8006c2c <__adddf3+0x70>
 8006c26:	4240      	negs	r0, r0
 8006c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006c34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006c38:	d002      	beq.n	8006c40 <__adddf3+0x84>
 8006c3a:	4252      	negs	r2, r2
 8006c3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006c40:	ea94 0f05 	teq	r4, r5
 8006c44:	f000 80a7 	beq.w	8006d96 <__adddf3+0x1da>
 8006c48:	f1a4 0401 	sub.w	r4, r4, #1
 8006c4c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006c50:	db0d      	blt.n	8006c6e <__adddf3+0xb2>
 8006c52:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006c56:	fa22 f205 	lsr.w	r2, r2, r5
 8006c5a:	1880      	adds	r0, r0, r2
 8006c5c:	f141 0100 	adc.w	r1, r1, #0
 8006c60:	fa03 f20e 	lsl.w	r2, r3, lr
 8006c64:	1880      	adds	r0, r0, r2
 8006c66:	fa43 f305 	asr.w	r3, r3, r5
 8006c6a:	4159      	adcs	r1, r3
 8006c6c:	e00e      	b.n	8006c8c <__adddf3+0xd0>
 8006c6e:	f1a5 0520 	sub.w	r5, r5, #32
 8006c72:	f10e 0e20 	add.w	lr, lr, #32
 8006c76:	2a01      	cmp	r2, #1
 8006c78:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006c7c:	bf28      	it	cs
 8006c7e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006c82:	fa43 f305 	asr.w	r3, r3, r5
 8006c86:	18c0      	adds	r0, r0, r3
 8006c88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006c8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006c90:	d507      	bpl.n	8006ca2 <__adddf3+0xe6>
 8006c92:	f04f 0e00 	mov.w	lr, #0
 8006c96:	f1dc 0c00 	rsbs	ip, ip, #0
 8006c9a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006c9e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006ca2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006ca6:	d31b      	bcc.n	8006ce0 <__adddf3+0x124>
 8006ca8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006cac:	d30c      	bcc.n	8006cc8 <__adddf3+0x10c>
 8006cae:	0849      	lsrs	r1, r1, #1
 8006cb0:	ea5f 0030 	movs.w	r0, r0, rrx
 8006cb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006cb8:	f104 0401 	add.w	r4, r4, #1
 8006cbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006cc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006cc4:	f080 809a 	bcs.w	8006dfc <__adddf3+0x240>
 8006cc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006ccc:	bf08      	it	eq
 8006cce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006cd2:	f150 0000 	adcs.w	r0, r0, #0
 8006cd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006cda:	ea41 0105 	orr.w	r1, r1, r5
 8006cde:	bd30      	pop	{r4, r5, pc}
 8006ce0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ce4:	4140      	adcs	r0, r0
 8006ce6:	eb41 0101 	adc.w	r1, r1, r1
 8006cea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006cee:	f1a4 0401 	sub.w	r4, r4, #1
 8006cf2:	d1e9      	bne.n	8006cc8 <__adddf3+0x10c>
 8006cf4:	f091 0f00 	teq	r1, #0
 8006cf8:	bf04      	itt	eq
 8006cfa:	4601      	moveq	r1, r0
 8006cfc:	2000      	moveq	r0, #0
 8006cfe:	fab1 f381 	clz	r3, r1
 8006d02:	bf08      	it	eq
 8006d04:	3320      	addeq	r3, #32
 8006d06:	f1a3 030b 	sub.w	r3, r3, #11
 8006d0a:	f1b3 0220 	subs.w	r2, r3, #32
 8006d0e:	da0c      	bge.n	8006d2a <__adddf3+0x16e>
 8006d10:	320c      	adds	r2, #12
 8006d12:	dd08      	ble.n	8006d26 <__adddf3+0x16a>
 8006d14:	f102 0c14 	add.w	ip, r2, #20
 8006d18:	f1c2 020c 	rsb	r2, r2, #12
 8006d1c:	fa01 f00c 	lsl.w	r0, r1, ip
 8006d20:	fa21 f102 	lsr.w	r1, r1, r2
 8006d24:	e00c      	b.n	8006d40 <__adddf3+0x184>
 8006d26:	f102 0214 	add.w	r2, r2, #20
 8006d2a:	bfd8      	it	le
 8006d2c:	f1c2 0c20 	rsble	ip, r2, #32
 8006d30:	fa01 f102 	lsl.w	r1, r1, r2
 8006d34:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006d38:	bfdc      	itt	le
 8006d3a:	ea41 010c 	orrle.w	r1, r1, ip
 8006d3e:	4090      	lslle	r0, r2
 8006d40:	1ae4      	subs	r4, r4, r3
 8006d42:	bfa2      	ittt	ge
 8006d44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006d48:	4329      	orrge	r1, r5
 8006d4a:	bd30      	popge	{r4, r5, pc}
 8006d4c:	ea6f 0404 	mvn.w	r4, r4
 8006d50:	3c1f      	subs	r4, #31
 8006d52:	da1c      	bge.n	8006d8e <__adddf3+0x1d2>
 8006d54:	340c      	adds	r4, #12
 8006d56:	dc0e      	bgt.n	8006d76 <__adddf3+0x1ba>
 8006d58:	f104 0414 	add.w	r4, r4, #20
 8006d5c:	f1c4 0220 	rsb	r2, r4, #32
 8006d60:	fa20 f004 	lsr.w	r0, r0, r4
 8006d64:	fa01 f302 	lsl.w	r3, r1, r2
 8006d68:	ea40 0003 	orr.w	r0, r0, r3
 8006d6c:	fa21 f304 	lsr.w	r3, r1, r4
 8006d70:	ea45 0103 	orr.w	r1, r5, r3
 8006d74:	bd30      	pop	{r4, r5, pc}
 8006d76:	f1c4 040c 	rsb	r4, r4, #12
 8006d7a:	f1c4 0220 	rsb	r2, r4, #32
 8006d7e:	fa20 f002 	lsr.w	r0, r0, r2
 8006d82:	fa01 f304 	lsl.w	r3, r1, r4
 8006d86:	ea40 0003 	orr.w	r0, r0, r3
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	bd30      	pop	{r4, r5, pc}
 8006d8e:	fa21 f004 	lsr.w	r0, r1, r4
 8006d92:	4629      	mov	r1, r5
 8006d94:	bd30      	pop	{r4, r5, pc}
 8006d96:	f094 0f00 	teq	r4, #0
 8006d9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006d9e:	bf06      	itte	eq
 8006da0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006da4:	3401      	addeq	r4, #1
 8006da6:	3d01      	subne	r5, #1
 8006da8:	e74e      	b.n	8006c48 <__adddf3+0x8c>
 8006daa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006dae:	bf18      	it	ne
 8006db0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006db4:	d029      	beq.n	8006e0a <__adddf3+0x24e>
 8006db6:	ea94 0f05 	teq	r4, r5
 8006dba:	bf08      	it	eq
 8006dbc:	ea90 0f02 	teqeq	r0, r2
 8006dc0:	d005      	beq.n	8006dce <__adddf3+0x212>
 8006dc2:	ea54 0c00 	orrs.w	ip, r4, r0
 8006dc6:	bf04      	itt	eq
 8006dc8:	4619      	moveq	r1, r3
 8006dca:	4610      	moveq	r0, r2
 8006dcc:	bd30      	pop	{r4, r5, pc}
 8006dce:	ea91 0f03 	teq	r1, r3
 8006dd2:	bf1e      	ittt	ne
 8006dd4:	2100      	movne	r1, #0
 8006dd6:	2000      	movne	r0, #0
 8006dd8:	bd30      	popne	{r4, r5, pc}
 8006dda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006dde:	d105      	bne.n	8006dec <__adddf3+0x230>
 8006de0:	0040      	lsls	r0, r0, #1
 8006de2:	4149      	adcs	r1, r1
 8006de4:	bf28      	it	cs
 8006de6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006dea:	bd30      	pop	{r4, r5, pc}
 8006dec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006df0:	bf3c      	itt	cc
 8006df2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006df6:	bd30      	popcc	{r4, r5, pc}
 8006df8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006dfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006e00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e04:	f04f 0000 	mov.w	r0, #0
 8006e08:	bd30      	pop	{r4, r5, pc}
 8006e0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006e0e:	bf1a      	itte	ne
 8006e10:	4619      	movne	r1, r3
 8006e12:	4610      	movne	r0, r2
 8006e14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006e18:	bf1c      	itt	ne
 8006e1a:	460b      	movne	r3, r1
 8006e1c:	4602      	movne	r2, r0
 8006e1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006e22:	bf06      	itte	eq
 8006e24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006e28:	ea91 0f03 	teqeq	r1, r3
 8006e2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006e30:	bd30      	pop	{r4, r5, pc}
 8006e32:	bf00      	nop

08006e34 <__aeabi_ui2d>:
 8006e34:	f090 0f00 	teq	r0, #0
 8006e38:	bf04      	itt	eq
 8006e3a:	2100      	moveq	r1, #0
 8006e3c:	4770      	bxeq	lr
 8006e3e:	b530      	push	{r4, r5, lr}
 8006e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006e48:	f04f 0500 	mov.w	r5, #0
 8006e4c:	f04f 0100 	mov.w	r1, #0
 8006e50:	e750      	b.n	8006cf4 <__adddf3+0x138>
 8006e52:	bf00      	nop

08006e54 <__aeabi_i2d>:
 8006e54:	f090 0f00 	teq	r0, #0
 8006e58:	bf04      	itt	eq
 8006e5a:	2100      	moveq	r1, #0
 8006e5c:	4770      	bxeq	lr
 8006e5e:	b530      	push	{r4, r5, lr}
 8006e60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006e64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006e68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006e6c:	bf48      	it	mi
 8006e6e:	4240      	negmi	r0, r0
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	e73e      	b.n	8006cf4 <__adddf3+0x138>
 8006e76:	bf00      	nop

08006e78 <__aeabi_f2d>:
 8006e78:	0042      	lsls	r2, r0, #1
 8006e7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006e7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006e82:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006e86:	bf1f      	itttt	ne
 8006e88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006e8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006e90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006e94:	4770      	bxne	lr
 8006e96:	f092 0f00 	teq	r2, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006ea0:	4770      	bxeq	lr
 8006ea2:	b530      	push	{r4, r5, lr}
 8006ea4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006ea8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006eac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006eb0:	e720      	b.n	8006cf4 <__adddf3+0x138>
 8006eb2:	bf00      	nop

08006eb4 <__aeabi_ul2d>:
 8006eb4:	ea50 0201 	orrs.w	r2, r0, r1
 8006eb8:	bf08      	it	eq
 8006eba:	4770      	bxeq	lr
 8006ebc:	b530      	push	{r4, r5, lr}
 8006ebe:	f04f 0500 	mov.w	r5, #0
 8006ec2:	e00a      	b.n	8006eda <__aeabi_l2d+0x16>

08006ec4 <__aeabi_l2d>:
 8006ec4:	ea50 0201 	orrs.w	r2, r0, r1
 8006ec8:	bf08      	it	eq
 8006eca:	4770      	bxeq	lr
 8006ecc:	b530      	push	{r4, r5, lr}
 8006ece:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006ed2:	d502      	bpl.n	8006eda <__aeabi_l2d+0x16>
 8006ed4:	4240      	negs	r0, r0
 8006ed6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006eda:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006ede:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006ee2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006ee6:	f43f aedc 	beq.w	8006ca2 <__adddf3+0xe6>
 8006eea:	f04f 0203 	mov.w	r2, #3
 8006eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006ef2:	bf18      	it	ne
 8006ef4:	3203      	addne	r2, #3
 8006ef6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006efa:	bf18      	it	ne
 8006efc:	3203      	addne	r2, #3
 8006efe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006f02:	f1c2 0320 	rsb	r3, r2, #32
 8006f06:	fa00 fc03 	lsl.w	ip, r0, r3
 8006f0a:	fa20 f002 	lsr.w	r0, r0, r2
 8006f0e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006f12:	ea40 000e 	orr.w	r0, r0, lr
 8006f16:	fa21 f102 	lsr.w	r1, r1, r2
 8006f1a:	4414      	add	r4, r2
 8006f1c:	e6c1      	b.n	8006ca2 <__adddf3+0xe6>
 8006f1e:	bf00      	nop

08006f20 <__aeabi_dmul>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006f2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f2e:	bf1d      	ittte	ne
 8006f30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f34:	ea94 0f0c 	teqne	r4, ip
 8006f38:	ea95 0f0c 	teqne	r5, ip
 8006f3c:	f000 f8de 	bleq	80070fc <__aeabi_dmul+0x1dc>
 8006f40:	442c      	add	r4, r5
 8006f42:	ea81 0603 	eor.w	r6, r1, r3
 8006f46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006f4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006f4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006f52:	bf18      	it	ne
 8006f54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006f58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f60:	d038      	beq.n	8006fd4 <__aeabi_dmul+0xb4>
 8006f62:	fba0 ce02 	umull	ip, lr, r0, r2
 8006f66:	f04f 0500 	mov.w	r5, #0
 8006f6a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006f6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006f72:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006f76:	f04f 0600 	mov.w	r6, #0
 8006f7a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006f7e:	f09c 0f00 	teq	ip, #0
 8006f82:	bf18      	it	ne
 8006f84:	f04e 0e01 	orrne.w	lr, lr, #1
 8006f88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006f8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006f90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006f94:	d204      	bcs.n	8006fa0 <__aeabi_dmul+0x80>
 8006f96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006f9a:	416d      	adcs	r5, r5
 8006f9c:	eb46 0606 	adc.w	r6, r6, r6
 8006fa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006fa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006fa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006fac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006fb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006fb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006fb8:	bf88      	it	hi
 8006fba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006fbe:	d81e      	bhi.n	8006ffe <__aeabi_dmul+0xde>
 8006fc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006fc4:	bf08      	it	eq
 8006fc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006fca:	f150 0000 	adcs.w	r0, r0, #0
 8006fce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006fd8:	ea46 0101 	orr.w	r1, r6, r1
 8006fdc:	ea40 0002 	orr.w	r0, r0, r2
 8006fe0:	ea81 0103 	eor.w	r1, r1, r3
 8006fe4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006fe8:	bfc2      	ittt	gt
 8006fea:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006fee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006ff2:	bd70      	popgt	{r4, r5, r6, pc}
 8006ff4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ff8:	f04f 0e00 	mov.w	lr, #0
 8006ffc:	3c01      	subs	r4, #1
 8006ffe:	f300 80ab 	bgt.w	8007158 <__aeabi_dmul+0x238>
 8007002:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007006:	bfde      	ittt	le
 8007008:	2000      	movle	r0, #0
 800700a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800700e:	bd70      	pople	{r4, r5, r6, pc}
 8007010:	f1c4 0400 	rsb	r4, r4, #0
 8007014:	3c20      	subs	r4, #32
 8007016:	da35      	bge.n	8007084 <__aeabi_dmul+0x164>
 8007018:	340c      	adds	r4, #12
 800701a:	dc1b      	bgt.n	8007054 <__aeabi_dmul+0x134>
 800701c:	f104 0414 	add.w	r4, r4, #20
 8007020:	f1c4 0520 	rsb	r5, r4, #32
 8007024:	fa00 f305 	lsl.w	r3, r0, r5
 8007028:	fa20 f004 	lsr.w	r0, r0, r4
 800702c:	fa01 f205 	lsl.w	r2, r1, r5
 8007030:	ea40 0002 	orr.w	r0, r0, r2
 8007034:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800703c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007040:	fa21 f604 	lsr.w	r6, r1, r4
 8007044:	eb42 0106 	adc.w	r1, r2, r6
 8007048:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800704c:	bf08      	it	eq
 800704e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	f1c4 040c 	rsb	r4, r4, #12
 8007058:	f1c4 0520 	rsb	r5, r4, #32
 800705c:	fa00 f304 	lsl.w	r3, r0, r4
 8007060:	fa20 f005 	lsr.w	r0, r0, r5
 8007064:	fa01 f204 	lsl.w	r2, r1, r4
 8007068:	ea40 0002 	orr.w	r0, r0, r2
 800706c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007070:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007074:	f141 0100 	adc.w	r1, r1, #0
 8007078:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800707c:	bf08      	it	eq
 800707e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f1c4 0520 	rsb	r5, r4, #32
 8007088:	fa00 f205 	lsl.w	r2, r0, r5
 800708c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007090:	fa20 f304 	lsr.w	r3, r0, r4
 8007094:	fa01 f205 	lsl.w	r2, r1, r5
 8007098:	ea43 0302 	orr.w	r3, r3, r2
 800709c:	fa21 f004 	lsr.w	r0, r1, r4
 80070a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80070a4:	fa21 f204 	lsr.w	r2, r1, r4
 80070a8:	ea20 0002 	bic.w	r0, r0, r2
 80070ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80070b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80070b4:	bf08      	it	eq
 80070b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f094 0f00 	teq	r4, #0
 80070c0:	d10f      	bne.n	80070e2 <__aeabi_dmul+0x1c2>
 80070c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80070c6:	0040      	lsls	r0, r0, #1
 80070c8:	eb41 0101 	adc.w	r1, r1, r1
 80070cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80070d0:	bf08      	it	eq
 80070d2:	3c01      	subeq	r4, #1
 80070d4:	d0f7      	beq.n	80070c6 <__aeabi_dmul+0x1a6>
 80070d6:	ea41 0106 	orr.w	r1, r1, r6
 80070da:	f095 0f00 	teq	r5, #0
 80070de:	bf18      	it	ne
 80070e0:	4770      	bxne	lr
 80070e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80070e6:	0052      	lsls	r2, r2, #1
 80070e8:	eb43 0303 	adc.w	r3, r3, r3
 80070ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80070f0:	bf08      	it	eq
 80070f2:	3d01      	subeq	r5, #1
 80070f4:	d0f7      	beq.n	80070e6 <__aeabi_dmul+0x1c6>
 80070f6:	ea43 0306 	orr.w	r3, r3, r6
 80070fa:	4770      	bx	lr
 80070fc:	ea94 0f0c 	teq	r4, ip
 8007100:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007104:	bf18      	it	ne
 8007106:	ea95 0f0c 	teqne	r5, ip
 800710a:	d00c      	beq.n	8007126 <__aeabi_dmul+0x206>
 800710c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007110:	bf18      	it	ne
 8007112:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007116:	d1d1      	bne.n	80070bc <__aeabi_dmul+0x19c>
 8007118:	ea81 0103 	eor.w	r1, r1, r3
 800711c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007120:	f04f 0000 	mov.w	r0, #0
 8007124:	bd70      	pop	{r4, r5, r6, pc}
 8007126:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800712a:	bf06      	itte	eq
 800712c:	4610      	moveq	r0, r2
 800712e:	4619      	moveq	r1, r3
 8007130:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007134:	d019      	beq.n	800716a <__aeabi_dmul+0x24a>
 8007136:	ea94 0f0c 	teq	r4, ip
 800713a:	d102      	bne.n	8007142 <__aeabi_dmul+0x222>
 800713c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007140:	d113      	bne.n	800716a <__aeabi_dmul+0x24a>
 8007142:	ea95 0f0c 	teq	r5, ip
 8007146:	d105      	bne.n	8007154 <__aeabi_dmul+0x234>
 8007148:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800714c:	bf1c      	itt	ne
 800714e:	4610      	movne	r0, r2
 8007150:	4619      	movne	r1, r3
 8007152:	d10a      	bne.n	800716a <__aeabi_dmul+0x24a>
 8007154:	ea81 0103 	eor.w	r1, r1, r3
 8007158:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800715c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007160:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007164:	f04f 0000 	mov.w	r0, #0
 8007168:	bd70      	pop	{r4, r5, r6, pc}
 800716a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800716e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007172:	bd70      	pop	{r4, r5, r6, pc}

08007174 <__aeabi_ddiv>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800717a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800717e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007182:	bf1d      	ittte	ne
 8007184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007188:	ea94 0f0c 	teqne	r4, ip
 800718c:	ea95 0f0c 	teqne	r5, ip
 8007190:	f000 f8a7 	bleq	80072e2 <__aeabi_ddiv+0x16e>
 8007194:	eba4 0405 	sub.w	r4, r4, r5
 8007198:	ea81 0e03 	eor.w	lr, r1, r3
 800719c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80071a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80071a4:	f000 8088 	beq.w	80072b8 <__aeabi_ddiv+0x144>
 80071a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80071ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80071b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80071b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80071b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80071bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80071c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80071c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80071c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80071cc:	429d      	cmp	r5, r3
 80071ce:	bf08      	it	eq
 80071d0:	4296      	cmpeq	r6, r2
 80071d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80071d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80071da:	d202      	bcs.n	80071e2 <__aeabi_ddiv+0x6e>
 80071dc:	085b      	lsrs	r3, r3, #1
 80071de:	ea4f 0232 	mov.w	r2, r2, rrx
 80071e2:	1ab6      	subs	r6, r6, r2
 80071e4:	eb65 0503 	sbc.w	r5, r5, r3
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80071ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80071f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80071f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80071fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80071fe:	bf22      	ittt	cs
 8007200:	1ab6      	subcs	r6, r6, r2
 8007202:	4675      	movcs	r5, lr
 8007204:	ea40 000c 	orrcs.w	r0, r0, ip
 8007208:	085b      	lsrs	r3, r3, #1
 800720a:	ea4f 0232 	mov.w	r2, r2, rrx
 800720e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007212:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007216:	bf22      	ittt	cs
 8007218:	1ab6      	subcs	r6, r6, r2
 800721a:	4675      	movcs	r5, lr
 800721c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	ea4f 0232 	mov.w	r2, r2, rrx
 8007226:	ebb6 0e02 	subs.w	lr, r6, r2
 800722a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800722e:	bf22      	ittt	cs
 8007230:	1ab6      	subcs	r6, r6, r2
 8007232:	4675      	movcs	r5, lr
 8007234:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	ea4f 0232 	mov.w	r2, r2, rrx
 800723e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007242:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007246:	bf22      	ittt	cs
 8007248:	1ab6      	subcs	r6, r6, r2
 800724a:	4675      	movcs	r5, lr
 800724c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007250:	ea55 0e06 	orrs.w	lr, r5, r6
 8007254:	d018      	beq.n	8007288 <__aeabi_ddiv+0x114>
 8007256:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800725a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800725e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8007262:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007266:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800726a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800726e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007272:	d1c0      	bne.n	80071f6 <__aeabi_ddiv+0x82>
 8007274:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007278:	d10b      	bne.n	8007292 <__aeabi_ddiv+0x11e>
 800727a:	ea41 0100 	orr.w	r1, r1, r0
 800727e:	f04f 0000 	mov.w	r0, #0
 8007282:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007286:	e7b6      	b.n	80071f6 <__aeabi_ddiv+0x82>
 8007288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800728c:	bf04      	itt	eq
 800728e:	4301      	orreq	r1, r0
 8007290:	2000      	moveq	r0, #0
 8007292:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007296:	bf88      	it	hi
 8007298:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800729c:	f63f aeaf 	bhi.w	8006ffe <__aeabi_dmul+0xde>
 80072a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80072a4:	bf04      	itt	eq
 80072a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80072aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80072ae:	f150 0000 	adcs.w	r0, r0, #0
 80072b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80072bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80072c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80072c4:	bfc2      	ittt	gt
 80072c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80072ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80072ce:	bd70      	popgt	{r4, r5, r6, pc}
 80072d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072d4:	f04f 0e00 	mov.w	lr, #0
 80072d8:	3c01      	subs	r4, #1
 80072da:	e690      	b.n	8006ffe <__aeabi_dmul+0xde>
 80072dc:	ea45 0e06 	orr.w	lr, r5, r6
 80072e0:	e68d      	b.n	8006ffe <__aeabi_dmul+0xde>
 80072e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80072e6:	ea94 0f0c 	teq	r4, ip
 80072ea:	bf08      	it	eq
 80072ec:	ea95 0f0c 	teqeq	r5, ip
 80072f0:	f43f af3b 	beq.w	800716a <__aeabi_dmul+0x24a>
 80072f4:	ea94 0f0c 	teq	r4, ip
 80072f8:	d10a      	bne.n	8007310 <__aeabi_ddiv+0x19c>
 80072fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80072fe:	f47f af34 	bne.w	800716a <__aeabi_dmul+0x24a>
 8007302:	ea95 0f0c 	teq	r5, ip
 8007306:	f47f af25 	bne.w	8007154 <__aeabi_dmul+0x234>
 800730a:	4610      	mov	r0, r2
 800730c:	4619      	mov	r1, r3
 800730e:	e72c      	b.n	800716a <__aeabi_dmul+0x24a>
 8007310:	ea95 0f0c 	teq	r5, ip
 8007314:	d106      	bne.n	8007324 <__aeabi_ddiv+0x1b0>
 8007316:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800731a:	f43f aefd 	beq.w	8007118 <__aeabi_dmul+0x1f8>
 800731e:	4610      	mov	r0, r2
 8007320:	4619      	mov	r1, r3
 8007322:	e722      	b.n	800716a <__aeabi_dmul+0x24a>
 8007324:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007328:	bf18      	it	ne
 800732a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800732e:	f47f aec5 	bne.w	80070bc <__aeabi_dmul+0x19c>
 8007332:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007336:	f47f af0d 	bne.w	8007154 <__aeabi_dmul+0x234>
 800733a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800733e:	f47f aeeb 	bne.w	8007118 <__aeabi_dmul+0x1f8>
 8007342:	e712      	b.n	800716a <__aeabi_dmul+0x24a>

08007344 <__gedf2>:
 8007344:	f04f 3cff 	mov.w	ip, #4294967295
 8007348:	e006      	b.n	8007358 <__cmpdf2+0x4>
 800734a:	bf00      	nop

0800734c <__ledf2>:
 800734c:	f04f 0c01 	mov.w	ip, #1
 8007350:	e002      	b.n	8007358 <__cmpdf2+0x4>
 8007352:	bf00      	nop

08007354 <__cmpdf2>:
 8007354:	f04f 0c01 	mov.w	ip, #1
 8007358:	f84d cd04 	str.w	ip, [sp, #-4]!
 800735c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007364:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007368:	bf18      	it	ne
 800736a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800736e:	d01b      	beq.n	80073a8 <__cmpdf2+0x54>
 8007370:	b001      	add	sp, #4
 8007372:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007376:	bf0c      	ite	eq
 8007378:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800737c:	ea91 0f03 	teqne	r1, r3
 8007380:	bf02      	ittt	eq
 8007382:	ea90 0f02 	teqeq	r0, r2
 8007386:	2000      	moveq	r0, #0
 8007388:	4770      	bxeq	lr
 800738a:	f110 0f00 	cmn.w	r0, #0
 800738e:	ea91 0f03 	teq	r1, r3
 8007392:	bf58      	it	pl
 8007394:	4299      	cmppl	r1, r3
 8007396:	bf08      	it	eq
 8007398:	4290      	cmpeq	r0, r2
 800739a:	bf2c      	ite	cs
 800739c:	17d8      	asrcs	r0, r3, #31
 800739e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80073a2:	f040 0001 	orr.w	r0, r0, #1
 80073a6:	4770      	bx	lr
 80073a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80073ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80073b0:	d102      	bne.n	80073b8 <__cmpdf2+0x64>
 80073b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80073b6:	d107      	bne.n	80073c8 <__cmpdf2+0x74>
 80073b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80073bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80073c0:	d1d6      	bne.n	8007370 <__cmpdf2+0x1c>
 80073c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80073c6:	d0d3      	beq.n	8007370 <__cmpdf2+0x1c>
 80073c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop

080073d0 <__aeabi_cdrcmple>:
 80073d0:	4684      	mov	ip, r0
 80073d2:	4610      	mov	r0, r2
 80073d4:	4662      	mov	r2, ip
 80073d6:	468c      	mov	ip, r1
 80073d8:	4619      	mov	r1, r3
 80073da:	4663      	mov	r3, ip
 80073dc:	e000      	b.n	80073e0 <__aeabi_cdcmpeq>
 80073de:	bf00      	nop

080073e0 <__aeabi_cdcmpeq>:
 80073e0:	b501      	push	{r0, lr}
 80073e2:	f7ff ffb7 	bl	8007354 <__cmpdf2>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	bf48      	it	mi
 80073ea:	f110 0f00 	cmnmi.w	r0, #0
 80073ee:	bd01      	pop	{r0, pc}

080073f0 <__aeabi_dcmpeq>:
 80073f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80073f4:	f7ff fff4 	bl	80073e0 <__aeabi_cdcmpeq>
 80073f8:	bf0c      	ite	eq
 80073fa:	2001      	moveq	r0, #1
 80073fc:	2000      	movne	r0, #0
 80073fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8007402:	bf00      	nop

08007404 <__aeabi_dcmplt>:
 8007404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007408:	f7ff ffea 	bl	80073e0 <__aeabi_cdcmpeq>
 800740c:	bf34      	ite	cc
 800740e:	2001      	movcc	r0, #1
 8007410:	2000      	movcs	r0, #0
 8007412:	f85d fb08 	ldr.w	pc, [sp], #8
 8007416:	bf00      	nop

08007418 <__aeabi_dcmple>:
 8007418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800741c:	f7ff ffe0 	bl	80073e0 <__aeabi_cdcmpeq>
 8007420:	bf94      	ite	ls
 8007422:	2001      	movls	r0, #1
 8007424:	2000      	movhi	r0, #0
 8007426:	f85d fb08 	ldr.w	pc, [sp], #8
 800742a:	bf00      	nop

0800742c <__aeabi_dcmpge>:
 800742c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007430:	f7ff ffce 	bl	80073d0 <__aeabi_cdrcmple>
 8007434:	bf94      	ite	ls
 8007436:	2001      	movls	r0, #1
 8007438:	2000      	movhi	r0, #0
 800743a:	f85d fb08 	ldr.w	pc, [sp], #8
 800743e:	bf00      	nop

08007440 <__aeabi_dcmpgt>:
 8007440:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007444:	f7ff ffc4 	bl	80073d0 <__aeabi_cdrcmple>
 8007448:	bf34      	ite	cc
 800744a:	2001      	movcc	r0, #1
 800744c:	2000      	movcs	r0, #0
 800744e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007452:	bf00      	nop

08007454 <__aeabi_d2iz>:
 8007454:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800745c:	d215      	bcs.n	800748a <__aeabi_d2iz+0x36>
 800745e:	d511      	bpl.n	8007484 <__aeabi_d2iz+0x30>
 8007460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007468:	d912      	bls.n	8007490 <__aeabi_d2iz+0x3c>
 800746a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800746e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007476:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800747a:	fa23 f002 	lsr.w	r0, r3, r2
 800747e:	bf18      	it	ne
 8007480:	4240      	negne	r0, r0
 8007482:	4770      	bx	lr
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	4770      	bx	lr
 800748a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800748e:	d105      	bne.n	800749c <__aeabi_d2iz+0x48>
 8007490:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007494:	bf08      	it	eq
 8007496:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800749a:	4770      	bx	lr
 800749c:	f04f 0000 	mov.w	r0, #0
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop

080074a4 <__aeabi_d2uiz>:
 80074a4:	004a      	lsls	r2, r1, #1
 80074a6:	d211      	bcs.n	80074cc <__aeabi_d2uiz+0x28>
 80074a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80074ac:	d211      	bcs.n	80074d2 <__aeabi_d2uiz+0x2e>
 80074ae:	d50d      	bpl.n	80074cc <__aeabi_d2uiz+0x28>
 80074b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80074b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80074b8:	d40e      	bmi.n	80074d8 <__aeabi_d2uiz+0x34>
 80074ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80074be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80074c6:	fa23 f002 	lsr.w	r0, r3, r2
 80074ca:	4770      	bx	lr
 80074cc:	f04f 0000 	mov.w	r0, #0
 80074d0:	4770      	bx	lr
 80074d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80074d6:	d102      	bne.n	80074de <__aeabi_d2uiz+0x3a>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	4770      	bx	lr
 80074de:	f04f 0000 	mov.w	r0, #0
 80074e2:	4770      	bx	lr

080074e4 <__errno>:
 80074e4:	4b01      	ldr	r3, [pc, #4]	; (80074ec <__errno+0x8>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	1ffe89c8 	.word	0x1ffe89c8

080074f0 <memcpy>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	1e43      	subs	r3, r0, #1
 80074f4:	440a      	add	r2, r1
 80074f6:	4291      	cmp	r1, r2
 80074f8:	d004      	beq.n	8007504 <memcpy+0x14>
 80074fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007502:	e7f8      	b.n	80074f6 <memcpy+0x6>
 8007504:	bd10      	pop	{r4, pc}

08007506 <memset>:
 8007506:	4402      	add	r2, r0
 8007508:	4603      	mov	r3, r0
 800750a:	4293      	cmp	r3, r2
 800750c:	d002      	beq.n	8007514 <memset+0xe>
 800750e:	f803 1b01 	strb.w	r1, [r3], #1
 8007512:	e7fa      	b.n	800750a <memset+0x4>
 8007514:	4770      	bx	lr

08007516 <__cvt>:
 8007516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007520:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007522:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007524:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007528:	461d      	mov	r5, r3
 800752a:	bfb8      	it	lt
 800752c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007530:	f027 0720 	bic.w	r7, r7, #32
 8007534:	bfb6      	itet	lt
 8007536:	461d      	movlt	r5, r3
 8007538:	2300      	movge	r3, #0
 800753a:	232d      	movlt	r3, #45	; 0x2d
 800753c:	4614      	mov	r4, r2
 800753e:	bfb8      	it	lt
 8007540:	4614      	movlt	r4, r2
 8007542:	2f46      	cmp	r7, #70	; 0x46
 8007544:	700b      	strb	r3, [r1, #0]
 8007546:	d003      	beq.n	8007550 <__cvt+0x3a>
 8007548:	2f45      	cmp	r7, #69	; 0x45
 800754a:	d103      	bne.n	8007554 <__cvt+0x3e>
 800754c:	3601      	adds	r6, #1
 800754e:	e001      	b.n	8007554 <__cvt+0x3e>
 8007550:	2303      	movs	r3, #3
 8007552:	e000      	b.n	8007556 <__cvt+0x40>
 8007554:	2302      	movs	r3, #2
 8007556:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 800755a:	ab06      	add	r3, sp, #24
 800755c:	9303      	str	r3, [sp, #12]
 800755e:	ab07      	add	r3, sp, #28
 8007560:	9304      	str	r3, [sp, #16]
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	f000 fe5f 	bl	8008228 <_dtoa_r>
 800756a:	2f47      	cmp	r7, #71	; 0x47
 800756c:	4680      	mov	r8, r0
 800756e:	d102      	bne.n	8007576 <__cvt+0x60>
 8007570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007572:	07db      	lsls	r3, r3, #31
 8007574:	d526      	bpl.n	80075c4 <__cvt+0xae>
 8007576:	2f46      	cmp	r7, #70	; 0x46
 8007578:	eb08 0906 	add.w	r9, r8, r6
 800757c:	d111      	bne.n	80075a2 <__cvt+0x8c>
 800757e:	f898 3000 	ldrb.w	r3, [r8]
 8007582:	2b30      	cmp	r3, #48	; 0x30
 8007584:	d10a      	bne.n	800759c <__cvt+0x86>
 8007586:	4620      	mov	r0, r4
 8007588:	4629      	mov	r1, r5
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	f7ff ff2f 	bl	80073f0 <__aeabi_dcmpeq>
 8007592:	b918      	cbnz	r0, 800759c <__cvt+0x86>
 8007594:	f1c6 0601 	rsb	r6, r6, #1
 8007598:	f8ca 6000 	str.w	r6, [sl]
 800759c:	f8da 3000 	ldr.w	r3, [sl]
 80075a0:	4499      	add	r9, r3
 80075a2:	4620      	mov	r0, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	2200      	movs	r2, #0
 80075a8:	2300      	movs	r3, #0
 80075aa:	f7ff ff21 	bl	80073f0 <__aeabi_dcmpeq>
 80075ae:	b108      	cbz	r0, 80075b4 <__cvt+0x9e>
 80075b0:	f8cd 901c 	str.w	r9, [sp, #28]
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	454b      	cmp	r3, r9
 80075b8:	d204      	bcs.n	80075c4 <__cvt+0xae>
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	9207      	str	r2, [sp, #28]
 80075be:	2230      	movs	r2, #48	; 0x30
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	e7f7      	b.n	80075b4 <__cvt+0x9e>
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075c8:	ebc8 0303 	rsb	r3, r8, r3
 80075cc:	4640      	mov	r0, r8
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	b008      	add	sp, #32
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080075d6 <__exponent>:
 80075d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075d8:	4603      	mov	r3, r0
 80075da:	2900      	cmp	r1, #0
 80075dc:	bfb8      	it	lt
 80075de:	4249      	neglt	r1, r1
 80075e0:	f803 2b02 	strb.w	r2, [r3], #2
 80075e4:	bfb4      	ite	lt
 80075e6:	222d      	movlt	r2, #45	; 0x2d
 80075e8:	222b      	movge	r2, #43	; 0x2b
 80075ea:	2909      	cmp	r1, #9
 80075ec:	7042      	strb	r2, [r0, #1]
 80075ee:	dd19      	ble.n	8007624 <__exponent+0x4e>
 80075f0:	f10d 0407 	add.w	r4, sp, #7
 80075f4:	4626      	mov	r6, r4
 80075f6:	220a      	movs	r2, #10
 80075f8:	fb91 f5f2 	sdiv	r5, r1, r2
 80075fc:	fb02 1115 	mls	r1, r2, r5, r1
 8007600:	3130      	adds	r1, #48	; 0x30
 8007602:	2d09      	cmp	r5, #9
 8007604:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8007608:	4629      	mov	r1, r5
 800760a:	dcf4      	bgt.n	80075f6 <__exponent+0x20>
 800760c:	3130      	adds	r1, #48	; 0x30
 800760e:	1e65      	subs	r5, r4, #1
 8007610:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007614:	42b5      	cmp	r5, r6
 8007616:	461a      	mov	r2, r3
 8007618:	d20a      	bcs.n	8007630 <__exponent+0x5a>
 800761a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800761e:	f803 2b01 	strb.w	r2, [r3], #1
 8007622:	e7f7      	b.n	8007614 <__exponent+0x3e>
 8007624:	2430      	movs	r4, #48	; 0x30
 8007626:	461a      	mov	r2, r3
 8007628:	4421      	add	r1, r4
 800762a:	f802 4b02 	strb.w	r4, [r2], #2
 800762e:	7059      	strb	r1, [r3, #1]
 8007630:	1a10      	subs	r0, r2, r0
 8007632:	b002      	add	sp, #8
 8007634:	bd70      	pop	{r4, r5, r6, pc}
	...

08007638 <_printf_float>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	b091      	sub	sp, #68	; 0x44
 800763e:	468b      	mov	fp, r1
 8007640:	4615      	mov	r5, r2
 8007642:	461e      	mov	r6, r3
 8007644:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007646:	4604      	mov	r4, r0
 8007648:	f001 fd28 	bl	800909c <_localeconv_r>
 800764c:	f8d0 a000 	ldr.w	sl, [r0]
 8007650:	4650      	mov	r0, sl
 8007652:	f000 fc91 	bl	8007f78 <strlen>
 8007656:	2300      	movs	r3, #0
 8007658:	930e      	str	r3, [sp, #56]	; 0x38
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	9009      	str	r0, [sp, #36]	; 0x24
 800765e:	3307      	adds	r3, #7
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007668:	f103 0208 	add.w	r2, r3, #8
 800766c:	f89b 8018 	ldrb.w	r8, [fp, #24]
 8007670:	603a      	str	r2, [r7, #0]
 8007672:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8007676:	f000 fc31 	bl	8007edc <__fpclassifyd>
 800767a:	2801      	cmp	r0, #1
 800767c:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8007680:	d119      	bne.n	80076b6 <_printf_float+0x7e>
 8007682:	2200      	movs	r2, #0
 8007684:	2300      	movs	r3, #0
 8007686:	f7ff febd 	bl	8007404 <__aeabi_dcmplt>
 800768a:	b110      	cbz	r0, 8007692 <_printf_float+0x5a>
 800768c:	232d      	movs	r3, #45	; 0x2d
 800768e:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8007692:	4ba0      	ldr	r3, [pc, #640]	; (8007914 <_printf_float+0x2dc>)
 8007694:	4fa0      	ldr	r7, [pc, #640]	; (8007918 <_printf_float+0x2e0>)
 8007696:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800769a:	bf88      	it	hi
 800769c:	461f      	movhi	r7, r3
 800769e:	2303      	movs	r3, #3
 80076a0:	f8cb 3010 	str.w	r3, [fp, #16]
 80076a4:	f8db 3000 	ldr.w	r3, [fp]
 80076a8:	f023 0304 	bic.w	r3, r3, #4
 80076ac:	f8cb 3000 	str.w	r3, [fp]
 80076b0:	f04f 0900 	mov.w	r9, #0
 80076b4:	e0a1      	b.n	80077fa <_printf_float+0x1c2>
 80076b6:	f000 fc11 	bl	8007edc <__fpclassifyd>
 80076ba:	f8db 3000 	ldr.w	r3, [fp]
 80076be:	b948      	cbnz	r0, 80076d4 <_printf_float+0x9c>
 80076c0:	4a96      	ldr	r2, [pc, #600]	; (800791c <_printf_float+0x2e4>)
 80076c2:	4f97      	ldr	r7, [pc, #604]	; (8007920 <_printf_float+0x2e8>)
 80076c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076c8:	bf88      	it	hi
 80076ca:	4617      	movhi	r7, r2
 80076cc:	2203      	movs	r2, #3
 80076ce:	f8cb 2010 	str.w	r2, [fp, #16]
 80076d2:	e7e9      	b.n	80076a8 <_printf_float+0x70>
 80076d4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80076d8:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 80076dc:	1c57      	adds	r7, r2, #1
 80076de:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80076e2:	d101      	bne.n	80076e8 <_printf_float+0xb0>
 80076e4:	2206      	movs	r2, #6
 80076e6:	e009      	b.n	80076fc <_printf_float+0xc4>
 80076e8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80076ec:	d002      	beq.n	80076f4 <_printf_float+0xbc>
 80076ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076f2:	d105      	bne.n	8007700 <_printf_float+0xc8>
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	f040 81c7 	bne.w	8007a88 <_printf_float+0x450>
 80076fa:	2201      	movs	r2, #1
 80076fc:	f8cb 2004 	str.w	r2, [fp, #4]
 8007700:	f8db 2004 	ldr.w	r2, [fp, #4]
 8007704:	f8cd 8010 	str.w	r8, [sp, #16]
 8007708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800770c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007710:	f8cb 3000 	str.w	r3, [fp]
 8007714:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	ab0d      	add	r3, sp, #52	; 0x34
 800771c:	9303      	str	r3, [sp, #12]
 800771e:	ab0e      	add	r3, sp, #56	; 0x38
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	2300      	movs	r3, #0
 8007724:	9306      	str	r3, [sp, #24]
 8007726:	4620      	mov	r0, r4
 8007728:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800772c:	f7ff fef3 	bl	8007516 <__cvt>
 8007730:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007734:	2b47      	cmp	r3, #71	; 0x47
 8007736:	4607      	mov	r7, r0
 8007738:	d10a      	bne.n	8007750 <_printf_float+0x118>
 800773a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800773c:	1cd8      	adds	r0, r3, #3
 800773e:	db03      	blt.n	8007748 <_printf_float+0x110>
 8007740:	f8db 2004 	ldr.w	r2, [fp, #4]
 8007744:	4293      	cmp	r3, r2
 8007746:	dd37      	ble.n	80077b8 <_printf_float+0x180>
 8007748:	f1a8 0802 	sub.w	r8, r8, #2
 800774c:	fa5f f888 	uxtb.w	r8, r8
 8007750:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007754:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007756:	d815      	bhi.n	8007784 <_printf_float+0x14c>
 8007758:	3901      	subs	r1, #1
 800775a:	4642      	mov	r2, r8
 800775c:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8007760:	910d      	str	r1, [sp, #52]	; 0x34
 8007762:	f7ff ff38 	bl	80075d6 <__exponent>
 8007766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007768:	1883      	adds	r3, r0, r2
 800776a:	2a01      	cmp	r2, #1
 800776c:	4681      	mov	r9, r0
 800776e:	f8cb 3010 	str.w	r3, [fp, #16]
 8007772:	dc03      	bgt.n	800777c <_printf_float+0x144>
 8007774:	f8db 2000 	ldr.w	r2, [fp]
 8007778:	07d1      	lsls	r1, r2, #31
 800777a:	d538      	bpl.n	80077ee <_printf_float+0x1b6>
 800777c:	3301      	adds	r3, #1
 800777e:	f8cb 3010 	str.w	r3, [fp, #16]
 8007782:	e034      	b.n	80077ee <_printf_float+0x1b6>
 8007784:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007788:	d118      	bne.n	80077bc <_printf_float+0x184>
 800778a:	2900      	cmp	r1, #0
 800778c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007790:	dd09      	ble.n	80077a6 <_printf_float+0x16e>
 8007792:	f8cb 1010 	str.w	r1, [fp, #16]
 8007796:	b91b      	cbnz	r3, 80077a0 <_printf_float+0x168>
 8007798:	f8db 2000 	ldr.w	r2, [fp]
 800779c:	07d2      	lsls	r2, r2, #31
 800779e:	d521      	bpl.n	80077e4 <_printf_float+0x1ac>
 80077a0:	3301      	adds	r3, #1
 80077a2:	440b      	add	r3, r1
 80077a4:	e01c      	b.n	80077e0 <_printf_float+0x1a8>
 80077a6:	b91b      	cbnz	r3, 80077b0 <_printf_float+0x178>
 80077a8:	f8db 2000 	ldr.w	r2, [fp]
 80077ac:	07d0      	lsls	r0, r2, #31
 80077ae:	d501      	bpl.n	80077b4 <_printf_float+0x17c>
 80077b0:	3302      	adds	r3, #2
 80077b2:	e015      	b.n	80077e0 <_printf_float+0x1a8>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e013      	b.n	80077e0 <_printf_float+0x1a8>
 80077b8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80077bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077c0:	4293      	cmp	r3, r2
 80077c2:	db07      	blt.n	80077d4 <_printf_float+0x19c>
 80077c4:	f8db 2000 	ldr.w	r2, [fp]
 80077c8:	f8cb 3010 	str.w	r3, [fp, #16]
 80077cc:	07d1      	lsls	r1, r2, #31
 80077ce:	d509      	bpl.n	80077e4 <_printf_float+0x1ac>
 80077d0:	3301      	adds	r3, #1
 80077d2:	e005      	b.n	80077e0 <_printf_float+0x1a8>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bfd4      	ite	le
 80077d8:	f1c3 0302 	rsble	r3, r3, #2
 80077dc:	2301      	movgt	r3, #1
 80077de:	4413      	add	r3, r2
 80077e0:	f8cb 3010 	str.w	r3, [fp, #16]
 80077e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e6:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80077f2:	b113      	cbz	r3, 80077fa <_printf_float+0x1c2>
 80077f4:	232d      	movs	r3, #45	; 0x2d
 80077f6:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 80077fa:	9600      	str	r6, [sp, #0]
 80077fc:	4620      	mov	r0, r4
 80077fe:	4659      	mov	r1, fp
 8007800:	aa0f      	add	r2, sp, #60	; 0x3c
 8007802:	462b      	mov	r3, r5
 8007804:	f000 f95c 	bl	8007ac0 <_printf_common>
 8007808:	3001      	adds	r0, #1
 800780a:	d102      	bne.n	8007812 <_printf_float+0x1da>
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	e152      	b.n	8007ab8 <_printf_float+0x480>
 8007812:	f8db 3000 	ldr.w	r3, [fp]
 8007816:	055a      	lsls	r2, r3, #21
 8007818:	d405      	bmi.n	8007826 <_printf_float+0x1ee>
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	463a      	mov	r2, r7
 8007820:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007824:	e108      	b.n	8007a38 <_printf_float+0x400>
 8007826:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800782a:	f240 80d0 	bls.w	80079ce <_printf_float+0x396>
 800782e:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8007832:	2200      	movs	r2, #0
 8007834:	2300      	movs	r3, #0
 8007836:	f7ff fddb 	bl	80073f0 <__aeabi_dcmpeq>
 800783a:	b350      	cbz	r0, 8007892 <_printf_float+0x25a>
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	4a38      	ldr	r2, [pc, #224]	; (8007924 <_printf_float+0x2ec>)
 8007842:	2301      	movs	r3, #1
 8007844:	47b0      	blx	r6
 8007846:	3001      	adds	r0, #1
 8007848:	d0e0      	beq.n	800780c <_printf_float+0x1d4>
 800784a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800784c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800784e:	429a      	cmp	r2, r3
 8007850:	db09      	blt.n	8007866 <_printf_float+0x22e>
 8007852:	f8db 3000 	ldr.w	r3, [fp]
 8007856:	07d8      	lsls	r0, r3, #31
 8007858:	d405      	bmi.n	8007866 <_printf_float+0x22e>
 800785a:	f8db 3000 	ldr.w	r3, [fp]
 800785e:	079f      	lsls	r7, r3, #30
 8007860:	f100 8110 	bmi.w	8007a84 <_printf_float+0x44c>
 8007864:	e107      	b.n	8007a76 <_printf_float+0x43e>
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	4652      	mov	r2, sl
 800786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786e:	47b0      	blx	r6
 8007870:	3001      	adds	r0, #1
 8007872:	d0cb      	beq.n	800780c <_printf_float+0x1d4>
 8007874:	2700      	movs	r7, #0
 8007876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007878:	3b01      	subs	r3, #1
 800787a:	429f      	cmp	r7, r3
 800787c:	daed      	bge.n	800785a <_printf_float+0x222>
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	f10b 021a 	add.w	r2, fp, #26
 8007886:	2301      	movs	r3, #1
 8007888:	47b0      	blx	r6
 800788a:	3001      	adds	r0, #1
 800788c:	d0be      	beq.n	800780c <_printf_float+0x1d4>
 800788e:	3701      	adds	r7, #1
 8007890:	e7f1      	b.n	8007876 <_printf_float+0x23e>
 8007892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc29      	bgt.n	80078ec <_printf_float+0x2b4>
 8007898:	4620      	mov	r0, r4
 800789a:	4629      	mov	r1, r5
 800789c:	4a21      	ldr	r2, [pc, #132]	; (8007924 <_printf_float+0x2ec>)
 800789e:	2301      	movs	r3, #1
 80078a0:	47b0      	blx	r6
 80078a2:	3001      	adds	r0, #1
 80078a4:	d0b2      	beq.n	800780c <_printf_float+0x1d4>
 80078a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a8:	b92b      	cbnz	r3, 80078b6 <_printf_float+0x27e>
 80078aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ac:	b91b      	cbnz	r3, 80078b6 <_printf_float+0x27e>
 80078ae:	f8db 3000 	ldr.w	r3, [fp]
 80078b2:	07d9      	lsls	r1, r3, #31
 80078b4:	d5d1      	bpl.n	800785a <_printf_float+0x222>
 80078b6:	4620      	mov	r0, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	4652      	mov	r2, sl
 80078bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078be:	47b0      	blx	r6
 80078c0:	3001      	adds	r0, #1
 80078c2:	d0a3      	beq.n	800780c <_printf_float+0x1d4>
 80078c4:	f04f 0800 	mov.w	r8, #0
 80078c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ca:	425b      	negs	r3, r3
 80078cc:	4598      	cmp	r8, r3
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	da08      	bge.n	80078e6 <_printf_float+0x2ae>
 80078d4:	f10b 021a 	add.w	r2, fp, #26
 80078d8:	2301      	movs	r3, #1
 80078da:	47b0      	blx	r6
 80078dc:	3001      	adds	r0, #1
 80078de:	d095      	beq.n	800780c <_printf_float+0x1d4>
 80078e0:	f108 0801 	add.w	r8, r8, #1
 80078e4:	e7f0      	b.n	80078c8 <_printf_float+0x290>
 80078e6:	463a      	mov	r2, r7
 80078e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ea:	e0a5      	b.n	8007a38 <_printf_float+0x400>
 80078ec:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 80078f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f2:	429a      	cmp	r2, r3
 80078f4:	bfa8      	it	ge
 80078f6:	461a      	movge	r2, r3
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	4691      	mov	r9, r2
 80078fc:	dc02      	bgt.n	8007904 <_printf_float+0x2cc>
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	e01c      	b.n	800793e <_printf_float+0x306>
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	463a      	mov	r2, r7
 800790a:	464b      	mov	r3, r9
 800790c:	47b0      	blx	r6
 800790e:	3001      	adds	r0, #1
 8007910:	d1f5      	bne.n	80078fe <_printf_float+0x2c6>
 8007912:	e77b      	b.n	800780c <_printf_float+0x1d4>
 8007914:	0800f64c 	.word	0x0800f64c
 8007918:	0800f648 	.word	0x0800f648
 800791c:	0800f654 	.word	0x0800f654
 8007920:	0800f650 	.word	0x0800f650
 8007924:	0800f658 	.word	0x0800f658
 8007928:	4620      	mov	r0, r4
 800792a:	4629      	mov	r1, r5
 800792c:	f10b 021a 	add.w	r2, fp, #26
 8007930:	2301      	movs	r3, #1
 8007932:	47b0      	blx	r6
 8007934:	3001      	adds	r0, #1
 8007936:	f43f af69 	beq.w	800780c <_printf_float+0x1d4>
 800793a:	f108 0801 	add.w	r8, r8, #1
 800793e:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8007942:	f1b9 0f00 	cmp.w	r9, #0
 8007946:	bfac      	ite	ge
 8007948:	ebc9 0203 	rsbge	r2, r9, r3
 800794c:	461a      	movlt	r2, r3
 800794e:	4590      	cmp	r8, r2
 8007950:	dbea      	blt.n	8007928 <_printf_float+0x2f0>
 8007952:	eb07 0803 	add.w	r8, r7, r3
 8007956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800795a:	429a      	cmp	r2, r3
 800795c:	db10      	blt.n	8007980 <_printf_float+0x348>
 800795e:	f8db 3000 	ldr.w	r3, [fp]
 8007962:	07da      	lsls	r2, r3, #31
 8007964:	d40c      	bmi.n	8007980 <_printf_float+0x348>
 8007966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007968:	4417      	add	r7, r2
 800796a:	ebc8 0307 	rsb	r3, r8, r7
 800796e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007970:	1bd2      	subs	r2, r2, r7
 8007972:	4293      	cmp	r3, r2
 8007974:	bfa8      	it	ge
 8007976:	4613      	movge	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	461f      	mov	r7, r3
 800797c:	dc08      	bgt.n	8007990 <_printf_float+0x358>
 800797e:	e00e      	b.n	800799e <_printf_float+0x366>
 8007980:	4620      	mov	r0, r4
 8007982:	4629      	mov	r1, r5
 8007984:	4652      	mov	r2, sl
 8007986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007988:	47b0      	blx	r6
 800798a:	3001      	adds	r0, #1
 800798c:	d1eb      	bne.n	8007966 <_printf_float+0x32e>
 800798e:	e73d      	b.n	800780c <_printf_float+0x1d4>
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	4642      	mov	r2, r8
 8007996:	47b0      	blx	r6
 8007998:	3001      	adds	r0, #1
 800799a:	f43f af37 	beq.w	800780c <_printf_float+0x1d4>
 800799e:	f04f 0800 	mov.w	r8, #0
 80079a2:	e00a      	b.n	80079ba <_printf_float+0x382>
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	f10b 021a 	add.w	r2, fp, #26
 80079ac:	2301      	movs	r3, #1
 80079ae:	47b0      	blx	r6
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f af2b 	beq.w	800780c <_printf_float+0x1d4>
 80079b6:	f108 0801 	add.w	r8, r8, #1
 80079ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079be:	2f00      	cmp	r7, #0
 80079c0:	eba3 0302 	sub.w	r3, r3, r2
 80079c4:	bfa8      	it	ge
 80079c6:	1bdb      	subge	r3, r3, r7
 80079c8:	4598      	cmp	r8, r3
 80079ca:	dbeb      	blt.n	80079a4 <_printf_float+0x36c>
 80079cc:	e745      	b.n	800785a <_printf_float+0x222>
 80079ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079d0:	2a01      	cmp	r2, #1
 80079d2:	dc01      	bgt.n	80079d8 <_printf_float+0x3a0>
 80079d4:	07db      	lsls	r3, r3, #31
 80079d6:	d536      	bpl.n	8007a46 <_printf_float+0x40e>
 80079d8:	4620      	mov	r0, r4
 80079da:	4629      	mov	r1, r5
 80079dc:	463a      	mov	r2, r7
 80079de:	2301      	movs	r3, #1
 80079e0:	47b0      	blx	r6
 80079e2:	3001      	adds	r0, #1
 80079e4:	f43f af12 	beq.w	800780c <_printf_float+0x1d4>
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	4652      	mov	r2, sl
 80079ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f0:	47b0      	blx	r6
 80079f2:	3001      	adds	r0, #1
 80079f4:	f43f af0a 	beq.w	800780c <_printf_float+0x1d4>
 80079f8:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 80079fc:	2200      	movs	r2, #0
 80079fe:	2300      	movs	r3, #0
 8007a00:	f7ff fcf6 	bl	80073f0 <__aeabi_dcmpeq>
 8007a04:	b9e8      	cbnz	r0, 8007a42 <_printf_float+0x40a>
 8007a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	1c7a      	adds	r2, r7, #1
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	e01d      	b.n	8007a4e <_printf_float+0x416>
 8007a12:	4620      	mov	r0, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	f10b 021a 	add.w	r2, fp, #26
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	47b0      	blx	r6
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f aef4 	beq.w	800780c <_printf_float+0x1d4>
 8007a24:	3701      	adds	r7, #1
 8007a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	429f      	cmp	r7, r3
 8007a2c:	dbf1      	blt.n	8007a12 <_printf_float+0x3da>
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8007a36:	464b      	mov	r3, r9
 8007a38:	47b0      	blx	r6
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f47f af0d 	bne.w	800785a <_printf_float+0x222>
 8007a40:	e6e4      	b.n	800780c <_printf_float+0x1d4>
 8007a42:	2700      	movs	r7, #0
 8007a44:	e7ef      	b.n	8007a26 <_printf_float+0x3ee>
 8007a46:	4620      	mov	r0, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	463a      	mov	r2, r7
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	47b0      	blx	r6
 8007a50:	3001      	adds	r0, #1
 8007a52:	d1ec      	bne.n	8007a2e <_printf_float+0x3f6>
 8007a54:	e6da      	b.n	800780c <_printf_float+0x1d4>
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f10b 0219 	add.w	r2, fp, #25
 8007a5e:	2301      	movs	r3, #1
 8007a60:	47b0      	blx	r6
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f aed2 	beq.w	800780c <_printf_float+0x1d4>
 8007a68:	3701      	adds	r7, #1
 8007a6a:	f8db 300c 	ldr.w	r3, [fp, #12]
 8007a6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	429f      	cmp	r7, r3
 8007a74:	dbef      	blt.n	8007a56 <_printf_float+0x41e>
 8007a76:	f8db 000c 	ldr.w	r0, [fp, #12]
 8007a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a7c:	4298      	cmp	r0, r3
 8007a7e:	bfb8      	it	lt
 8007a80:	4618      	movlt	r0, r3
 8007a82:	e019      	b.n	8007ab8 <_printf_float+0x480>
 8007a84:	2700      	movs	r7, #0
 8007a86:	e7f0      	b.n	8007a6a <_printf_float+0x432>
 8007a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a8c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007a90:	f8cb 3000 	str.w	r3, [fp]
 8007a94:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007a98:	9302      	str	r3, [sp, #8]
 8007a9a:	ab0d      	add	r3, sp, #52	; 0x34
 8007a9c:	9303      	str	r3, [sp, #12]
 8007a9e:	ab0e      	add	r3, sp, #56	; 0x38
 8007aa0:	9305      	str	r3, [sp, #20]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9306      	str	r3, [sp, #24]
 8007aa6:	f8cd 8010 	str.w	r8, [sp, #16]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ab0:	f7ff fd31 	bl	8007516 <__cvt>
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	e640      	b.n	800773a <_printf_float+0x102>
 8007ab8:	b011      	add	sp, #68	; 0x44
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	bf00      	nop

08007ac0 <_printf_common>:
 8007ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac4:	4691      	mov	r9, r2
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	688a      	ldr	r2, [r1, #8]
 8007aca:	690b      	ldr	r3, [r1, #16]
 8007acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	bfb8      	it	lt
 8007ad4:	4613      	movlt	r3, r2
 8007ad6:	f8c9 3000 	str.w	r3, [r9]
 8007ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	b112      	cbz	r2, 8007aea <_printf_common+0x2a>
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c9 3000 	str.w	r3, [r9]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	0699      	lsls	r1, r3, #26
 8007aee:	bf42      	ittt	mi
 8007af0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007af4:	3302      	addmi	r3, #2
 8007af6:	f8c9 3000 	strmi.w	r3, [r9]
 8007afa:	6825      	ldr	r5, [r4, #0]
 8007afc:	f015 0506 	ands.w	r5, r5, #6
 8007b00:	d01c      	beq.n	8007b3c <_printf_common+0x7c>
 8007b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b06:	6822      	ldr	r2, [r4, #0]
 8007b08:	3300      	adds	r3, #0
 8007b0a:	bf18      	it	ne
 8007b0c:	2301      	movne	r3, #1
 8007b0e:	0692      	lsls	r2, r2, #26
 8007b10:	d51f      	bpl.n	8007b52 <_printf_common+0x92>
 8007b12:	18e1      	adds	r1, r4, r3
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	2030      	movs	r0, #48	; 0x30
 8007b18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b1c:	4422      	add	r2, r4
 8007b1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b26:	3302      	adds	r3, #2
 8007b28:	e013      	b.n	8007b52 <_printf_common+0x92>
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f104 0219 	add.w	r2, r4, #25
 8007b32:	2301      	movs	r3, #1
 8007b34:	47c0      	blx	r8
 8007b36:	3001      	adds	r0, #1
 8007b38:	d007      	beq.n	8007b4a <_printf_common+0x8a>
 8007b3a:	3501      	adds	r5, #1
 8007b3c:	68e3      	ldr	r3, [r4, #12]
 8007b3e:	f8d9 2000 	ldr.w	r2, [r9]
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	429d      	cmp	r5, r3
 8007b46:	dbf0      	blt.n	8007b2a <_printf_common+0x6a>
 8007b48:	e7db      	b.n	8007b02 <_printf_common+0x42>
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b5a:	47c0      	blx	r8
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d0f4      	beq.n	8007b4a <_printf_common+0x8a>
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	f8d9 5000 	ldr.w	r5, [r9]
 8007b66:	68e3      	ldr	r3, [r4, #12]
 8007b68:	f002 0206 	and.w	r2, r2, #6
 8007b6c:	2a04      	cmp	r2, #4
 8007b6e:	bf08      	it	eq
 8007b70:	1b5d      	subeq	r5, r3, r5
 8007b72:	6922      	ldr	r2, [r4, #16]
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	bf0c      	ite	eq
 8007b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b7c:	2500      	movne	r5, #0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bfc4      	itt	gt
 8007b82:	1a9b      	subgt	r3, r3, r2
 8007b84:	18ed      	addgt	r5, r5, r3
 8007b86:	f04f 0900 	mov.w	r9, #0
 8007b8a:	45a9      	cmp	r9, r5
 8007b8c:	da0a      	bge.n	8007ba4 <_printf_common+0xe4>
 8007b8e:	4630      	mov	r0, r6
 8007b90:	4639      	mov	r1, r7
 8007b92:	f104 021a 	add.w	r2, r4, #26
 8007b96:	2301      	movs	r3, #1
 8007b98:	47c0      	blx	r8
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	d0d5      	beq.n	8007b4a <_printf_common+0x8a>
 8007b9e:	f109 0901 	add.w	r9, r9, #1
 8007ba2:	e7f2      	b.n	8007b8a <_printf_common+0xca>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08007bac <_printf_i>:
 8007bac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	4617      	mov	r7, r2
 8007bb4:	7e22      	ldrb	r2, [r4, #24]
 8007bb6:	2a6e      	cmp	r2, #110	; 0x6e
 8007bb8:	4698      	mov	r8, r3
 8007bba:	4606      	mov	r6, r0
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbe:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8007bc2:	f000 80a9 	beq.w	8007d18 <_printf_i+0x16c>
 8007bc6:	d812      	bhi.n	8007bee <_printf_i+0x42>
 8007bc8:	2a63      	cmp	r2, #99	; 0x63
 8007bca:	d023      	beq.n	8007c14 <_printf_i+0x68>
 8007bcc:	d80a      	bhi.n	8007be4 <_printf_i+0x38>
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	f000 80b6 	beq.w	8007d40 <_printf_i+0x194>
 8007bd4:	2a58      	cmp	r2, #88	; 0x58
 8007bd6:	f040 80c5 	bne.w	8007d64 <_printf_i+0x1b8>
 8007bda:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007bde:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8007dd8 <_printf_i+0x22c>
 8007be2:	e051      	b.n	8007c88 <_printf_i+0xdc>
 8007be4:	2a64      	cmp	r2, #100	; 0x64
 8007be6:	d01e      	beq.n	8007c26 <_printf_i+0x7a>
 8007be8:	2a69      	cmp	r2, #105	; 0x69
 8007bea:	d01c      	beq.n	8007c26 <_printf_i+0x7a>
 8007bec:	e0ba      	b.n	8007d64 <_printf_i+0x1b8>
 8007bee:	2a73      	cmp	r2, #115	; 0x73
 8007bf0:	f000 80aa 	beq.w	8007d48 <_printf_i+0x19c>
 8007bf4:	d809      	bhi.n	8007c0a <_printf_i+0x5e>
 8007bf6:	2a6f      	cmp	r2, #111	; 0x6f
 8007bf8:	d02b      	beq.n	8007c52 <_printf_i+0xa6>
 8007bfa:	2a70      	cmp	r2, #112	; 0x70
 8007bfc:	f040 80b2 	bne.w	8007d64 <_printf_i+0x1b8>
 8007c00:	6822      	ldr	r2, [r4, #0]
 8007c02:	f042 0220 	orr.w	r2, r2, #32
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	e039      	b.n	8007c7e <_printf_i+0xd2>
 8007c0a:	2a75      	cmp	r2, #117	; 0x75
 8007c0c:	d021      	beq.n	8007c52 <_printf_i+0xa6>
 8007c0e:	2a78      	cmp	r2, #120	; 0x78
 8007c10:	d035      	beq.n	8007c7e <_printf_i+0xd2>
 8007c12:	e0a7      	b.n	8007d64 <_printf_i+0x1b8>
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	1d11      	adds	r1, r2, #4
 8007c18:	6019      	str	r1, [r3, #0]
 8007c1a:	6813      	ldr	r3, [r2, #0]
 8007c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c24:	e0a2      	b.n	8007d6c <_printf_i+0x1c0>
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007c2e:	d003      	beq.n	8007c38 <_printf_i+0x8c>
 8007c30:	1d10      	adds	r0, r2, #4
 8007c32:	6018      	str	r0, [r3, #0]
 8007c34:	6813      	ldr	r3, [r2, #0]
 8007c36:	e005      	b.n	8007c44 <_printf_i+0x98>
 8007c38:	0645      	lsls	r5, r0, #25
 8007c3a:	d5f9      	bpl.n	8007c30 <_printf_i+0x84>
 8007c3c:	1d10      	adds	r0, r2, #4
 8007c3e:	6018      	str	r0, [r3, #0]
 8007c40:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	da3b      	bge.n	8007cc0 <_printf_i+0x114>
 8007c48:	222d      	movs	r2, #45	; 0x2d
 8007c4a:	425b      	negs	r3, r3
 8007c4c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c50:	e036      	b.n	8007cc0 <_printf_i+0x114>
 8007c52:	6820      	ldr	r0, [r4, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007c5a:	d003      	beq.n	8007c64 <_printf_i+0xb8>
 8007c5c:	1d10      	adds	r0, r2, #4
 8007c5e:	6018      	str	r0, [r3, #0]
 8007c60:	6813      	ldr	r3, [r2, #0]
 8007c62:	e004      	b.n	8007c6e <_printf_i+0xc2>
 8007c64:	0640      	lsls	r0, r0, #25
 8007c66:	d5f9      	bpl.n	8007c5c <_printf_i+0xb0>
 8007c68:	1d10      	adds	r0, r2, #4
 8007c6a:	6018      	str	r0, [r3, #0]
 8007c6c:	8813      	ldrh	r3, [r2, #0]
 8007c6e:	7e22      	ldrb	r2, [r4, #24]
 8007c70:	f8df e164 	ldr.w	lr, [pc, #356]	; 8007dd8 <_printf_i+0x22c>
 8007c74:	2a6f      	cmp	r2, #111	; 0x6f
 8007c76:	bf0c      	ite	eq
 8007c78:	2208      	moveq	r2, #8
 8007c7a:	220a      	movne	r2, #10
 8007c7c:	e01c      	b.n	8007cb8 <_printf_i+0x10c>
 8007c7e:	2278      	movs	r2, #120	; 0x78
 8007c80:	f8df e158 	ldr.w	lr, [pc, #344]	; 8007ddc <_printf_i+0x230>
 8007c84:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007c90:	f100 0504 	add.w	r5, r0, #4
 8007c94:	601d      	str	r5, [r3, #0]
 8007c96:	d001      	beq.n	8007c9c <_printf_i+0xf0>
 8007c98:	6803      	ldr	r3, [r0, #0]
 8007c9a:	e002      	b.n	8007ca2 <_printf_i+0xf6>
 8007c9c:	0655      	lsls	r5, r2, #25
 8007c9e:	d5fb      	bpl.n	8007c98 <_printf_i+0xec>
 8007ca0:	8803      	ldrh	r3, [r0, #0]
 8007ca2:	07d0      	lsls	r0, r2, #31
 8007ca4:	bf44      	itt	mi
 8007ca6:	f042 0220 	orrmi.w	r2, r2, #32
 8007caa:	6022      	strmi	r2, [r4, #0]
 8007cac:	b91b      	cbnz	r3, 8007cb6 <_printf_i+0x10a>
 8007cae:	6822      	ldr	r2, [r4, #0]
 8007cb0:	f022 0220 	bic.w	r2, r2, #32
 8007cb4:	6022      	str	r2, [r4, #0]
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007cbe:	e002      	b.n	8007cc6 <_printf_i+0x11a>
 8007cc0:	f8df e114 	ldr.w	lr, [pc, #276]	; 8007dd8 <_printf_i+0x22c>
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	6865      	ldr	r5, [r4, #4]
 8007cc8:	60a5      	str	r5, [r4, #8]
 8007cca:	2d00      	cmp	r5, #0
 8007ccc:	bfa2      	ittt	ge
 8007cce:	6820      	ldrge	r0, [r4, #0]
 8007cd0:	f020 0004 	bicge.w	r0, r0, #4
 8007cd4:	6020      	strge	r0, [r4, #0]
 8007cd6:	b903      	cbnz	r3, 8007cda <_printf_i+0x12e>
 8007cd8:	b165      	cbz	r5, 8007cf4 <_printf_i+0x148>
 8007cda:	460d      	mov	r5, r1
 8007cdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ce0:	fb02 3310 	mls	r3, r2, r0, r3
 8007ce4:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8007ce8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cec:	4603      	mov	r3, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1f4      	bne.n	8007cdc <_printf_i+0x130>
 8007cf2:	e000      	b.n	8007cf6 <_printf_i+0x14a>
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	2a08      	cmp	r2, #8
 8007cf8:	d10b      	bne.n	8007d12 <_printf_i+0x166>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	07da      	lsls	r2, r3, #31
 8007cfe:	d508      	bpl.n	8007d12 <_printf_i+0x166>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	6862      	ldr	r2, [r4, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	bfde      	ittt	le
 8007d08:	2330      	movle	r3, #48	; 0x30
 8007d0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d12:	1b49      	subs	r1, r1, r5
 8007d14:	6121      	str	r1, [r4, #16]
 8007d16:	e02e      	b.n	8007d76 <_printf_i+0x1ca>
 8007d18:	6825      	ldr	r5, [r4, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	6960      	ldr	r0, [r4, #20]
 8007d1e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8007d22:	d003      	beq.n	8007d2c <_printf_i+0x180>
 8007d24:	1d15      	adds	r5, r2, #4
 8007d26:	601d      	str	r5, [r3, #0]
 8007d28:	6813      	ldr	r3, [r2, #0]
 8007d2a:	e008      	b.n	8007d3e <_printf_i+0x192>
 8007d2c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d30:	f102 0504 	add.w	r5, r2, #4
 8007d34:	601d      	str	r5, [r3, #0]
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	d001      	beq.n	8007d3e <_printf_i+0x192>
 8007d3a:	8018      	strh	r0, [r3, #0]
 8007d3c:	e000      	b.n	8007d40 <_printf_i+0x194>
 8007d3e:	6018      	str	r0, [r3, #0]
 8007d40:	2300      	movs	r3, #0
 8007d42:	6123      	str	r3, [r4, #16]
 8007d44:	460d      	mov	r5, r1
 8007d46:	e016      	b.n	8007d76 <_printf_i+0x1ca>
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	1d11      	adds	r1, r2, #4
 8007d4c:	6019      	str	r1, [r3, #0]
 8007d4e:	6815      	ldr	r5, [r2, #0]
 8007d50:	6862      	ldr	r2, [r4, #4]
 8007d52:	4628      	mov	r0, r5
 8007d54:	2100      	movs	r1, #0
 8007d56:	f001 f9fb 	bl	8009150 <memchr>
 8007d5a:	b108      	cbz	r0, 8007d60 <_printf_i+0x1b4>
 8007d5c:	1b40      	subs	r0, r0, r5
 8007d5e:	6060      	str	r0, [r4, #4]
 8007d60:	6863      	ldr	r3, [r4, #4]
 8007d62:	e004      	b.n	8007d6e <_printf_i+0x1c2>
 8007d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	6123      	str	r3, [r4, #16]
 8007d70:	2300      	movs	r3, #0
 8007d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d76:	f8cd 8000 	str.w	r8, [sp]
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	aa03      	add	r2, sp, #12
 8007d80:	463b      	mov	r3, r7
 8007d82:	f7ff fe9d 	bl	8007ac0 <_printf_common>
 8007d86:	3001      	adds	r0, #1
 8007d88:	d102      	bne.n	8007d90 <_printf_i+0x1e4>
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	e01f      	b.n	8007dd0 <_printf_i+0x224>
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	462a      	mov	r2, r5
 8007d96:	6923      	ldr	r3, [r4, #16]
 8007d98:	47c0      	blx	r8
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d0f5      	beq.n	8007d8a <_printf_i+0x1de>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	079b      	lsls	r3, r3, #30
 8007da2:	d405      	bmi.n	8007db0 <_printf_i+0x204>
 8007da4:	68e0      	ldr	r0, [r4, #12]
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	4298      	cmp	r0, r3
 8007daa:	bfb8      	it	lt
 8007dac:	4618      	movlt	r0, r3
 8007dae:	e00f      	b.n	8007dd0 <_printf_i+0x224>
 8007db0:	2500      	movs	r5, #0
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	9a03      	ldr	r2, [sp, #12]
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	429d      	cmp	r5, r3
 8007dba:	daf3      	bge.n	8007da4 <_printf_i+0x1f8>
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	f104 0219 	add.w	r2, r4, #25
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	47c0      	blx	r8
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d0de      	beq.n	8007d8a <_printf_i+0x1de>
 8007dcc:	3501      	adds	r5, #1
 8007dce:	e7f0      	b.n	8007db2 <_printf_i+0x206>
 8007dd0:	b004      	add	sp, #16
 8007dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd6:	bf00      	nop
 8007dd8:	0800f65a 	.word	0x0800f65a
 8007ddc:	0800f66b 	.word	0x0800f66b

08007de0 <iprintf>:
 8007de0:	b40f      	push	{r0, r1, r2, r3}
 8007de2:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <iprintf+0x2c>)
 8007de4:	b513      	push	{r0, r1, r4, lr}
 8007de6:	681c      	ldr	r4, [r3, #0]
 8007de8:	b124      	cbz	r4, 8007df4 <iprintf+0x14>
 8007dea:	69a3      	ldr	r3, [r4, #24]
 8007dec:	b913      	cbnz	r3, 8007df4 <iprintf+0x14>
 8007dee:	4620      	mov	r0, r4
 8007df0:	f001 f8cc 	bl	8008f8c <__sinit>
 8007df4:	ab05      	add	r3, sp, #20
 8007df6:	4620      	mov	r0, r4
 8007df8:	68a1      	ldr	r1, [r4, #8]
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	f001 feb1 	bl	8009b64 <_vfiprintf_r>
 8007e02:	b002      	add	sp, #8
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	b004      	add	sp, #16
 8007e0a:	4770      	bx	lr
 8007e0c:	1ffe89c8 	.word	0x1ffe89c8

08007e10 <_puts_r>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	460e      	mov	r6, r1
 8007e14:	4605      	mov	r5, r0
 8007e16:	b118      	cbz	r0, 8007e20 <_puts_r+0x10>
 8007e18:	6983      	ldr	r3, [r0, #24]
 8007e1a:	b90b      	cbnz	r3, 8007e20 <_puts_r+0x10>
 8007e1c:	f001 f8b6 	bl	8008f8c <__sinit>
 8007e20:	68ac      	ldr	r4, [r5, #8]
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	0719      	lsls	r1, r3, #28
 8007e26:	d501      	bpl.n	8007e2c <_puts_r+0x1c>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	b983      	cbnz	r3, 8007e4e <_puts_r+0x3e>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f000 f8fe 	bl	8008030 <__swsetup_r>
 8007e34:	b158      	cbz	r0, 8007e4e <_puts_r+0x3e>
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	db0e      	blt.n	8007e5e <_puts_r+0x4e>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	f816 2b01 	ldrb.w	r2, [r6], #1
 8007e54:	3b01      	subs	r3, #1
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	d1ef      	bne.n	8007e3c <_puts_r+0x2c>
 8007e5c:	e016      	b.n	8007e8c <_puts_r+0x7c>
 8007e5e:	69a2      	ldr	r2, [r4, #24]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	db09      	blt.n	8007e78 <_puts_r+0x68>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	7819      	ldrb	r1, [r3, #0]
 8007e70:	290a      	cmp	r1, #10
 8007e72:	d1ea      	bne.n	8007e4a <_puts_r+0x3a>
 8007e74:	4628      	mov	r0, r5
 8007e76:	e002      	b.n	8007e7e <_puts_r+0x6e>
 8007e78:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	4622      	mov	r2, r4
 8007e80:	f000 f882 	bl	8007f88 <__swbuf_r>
 8007e84:	1c42      	adds	r2, r0, #1
 8007e86:	4250      	negs	r0, r2
 8007e88:	4150      	adcs	r0, r2
 8007e8a:	e7d3      	b.n	8007e34 <_puts_r+0x24>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	da15      	bge.n	8007ebc <_puts_r+0xac>
 8007e90:	69a2      	ldr	r2, [r4, #24]
 8007e92:	4293      	cmp	r3, r2
 8007e94:	db08      	blt.n	8007ea8 <_puts_r+0x98>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	220a      	movs	r2, #10
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	7819      	ldrb	r1, [r3, #0]
 8007ea0:	4291      	cmp	r1, r2
 8007ea2:	d10f      	bne.n	8007ec4 <_puts_r+0xb4>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	e001      	b.n	8007eac <_puts_r+0x9c>
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	210a      	movs	r1, #10
 8007eac:	4622      	mov	r2, r4
 8007eae:	f000 f86b 	bl	8007f88 <__swbuf_r>
 8007eb2:	1c43      	adds	r3, r0, #1
 8007eb4:	4258      	negs	r0, r3
 8007eb6:	4158      	adcs	r0, r3
 8007eb8:	b130      	cbz	r0, 8007ec8 <_puts_r+0xb8>
 8007eba:	e7bc      	b.n	8007e36 <_puts_r+0x26>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	200a      	movs	r0, #10
 8007eca:	bd70      	pop	{r4, r5, r6, pc}

08007ecc <puts>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <puts+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f7ff bf9d 	b.w	8007e10 <_puts_r>
 8007ed6:	bf00      	nop
 8007ed8:	1ffe89c8 	.word	0x1ffe89c8

08007edc <__fpclassifyd>:
 8007edc:	460a      	mov	r2, r1
 8007ede:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8007ee2:	b510      	push	{r4, lr}
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	d01b      	beq.n	8007f20 <__fpclassifyd+0x44>
 8007ee8:	480f      	ldr	r0, [pc, #60]	; (8007f28 <__fpclassifyd+0x4c>)
 8007eea:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 8007eee:	4284      	cmp	r4, r0
 8007ef0:	d910      	bls.n	8007f14 <__fpclassifyd+0x38>
 8007ef2:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8007ef6:	480c      	ldr	r0, [pc, #48]	; (8007f28 <__fpclassifyd+0x4c>)
 8007ef8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8007efc:	4282      	cmp	r2, r0
 8007efe:	d909      	bls.n	8007f14 <__fpclassifyd+0x38>
 8007f00:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007f04:	d308      	bcc.n	8007f18 <__fpclassifyd+0x3c>
 8007f06:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <__fpclassifyd+0x50>)
 8007f08:	4291      	cmp	r1, r2
 8007f0a:	d107      	bne.n	8007f1c <__fpclassifyd+0x40>
 8007f0c:	fab3 f083 	clz	r0, r3
 8007f10:	0940      	lsrs	r0, r0, #5
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	2004      	movs	r0, #4
 8007f16:	bd10      	pop	{r4, pc}
 8007f18:	2003      	movs	r0, #3
 8007f1a:	bd10      	pop	{r4, pc}
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	bd10      	pop	{r4, pc}
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1e6      	bne.n	8007ef2 <__fpclassifyd+0x16>
 8007f24:	2002      	movs	r0, #2
 8007f26:	bd10      	pop	{r4, pc}
 8007f28:	7fdfffff 	.word	0x7fdfffff
 8007f2c:	7ff00000 	.word	0x7ff00000

08007f30 <siprintf>:
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	b500      	push	{lr}
 8007f34:	b09c      	sub	sp, #112	; 0x70
 8007f36:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007f3a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007f3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f42:	9104      	str	r1, [sp, #16]
 8007f44:	9107      	str	r1, [sp, #28]
 8007f46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f4c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007f50:	4908      	ldr	r1, [pc, #32]	; (8007f74 <siprintf+0x44>)
 8007f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f56:	9002      	str	r0, [sp, #8]
 8007f58:	9006      	str	r0, [sp, #24]
 8007f5a:	6808      	ldr	r0, [r1, #0]
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	a902      	add	r1, sp, #8
 8007f60:	f001 fce6 	bl	8009930 <_svfiprintf_r>
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	b01c      	add	sp, #112	; 0x70
 8007f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f70:	b003      	add	sp, #12
 8007f72:	4770      	bx	lr
 8007f74:	1ffe89c8 	.word	0x1ffe89c8

08007f78 <strlen>:
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	d1fb      	bne.n	8007f7a <strlen+0x2>
 8007f82:	1a18      	subs	r0, r3, r0
 8007f84:	3801      	subs	r0, #1
 8007f86:	4770      	bx	lr

08007f88 <__swbuf_r>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	460d      	mov	r5, r1
 8007f8c:	4614      	mov	r4, r2
 8007f8e:	4606      	mov	r6, r0
 8007f90:	b118      	cbz	r0, 8007f9a <__swbuf_r+0x12>
 8007f92:	6983      	ldr	r3, [r0, #24]
 8007f94:	b90b      	cbnz	r3, 8007f9a <__swbuf_r+0x12>
 8007f96:	f000 fff9 	bl	8008f8c <__sinit>
 8007f9a:	4b22      	ldr	r3, [pc, #136]	; (8008024 <__swbuf_r+0x9c>)
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	d101      	bne.n	8007fa4 <__swbuf_r+0x1c>
 8007fa0:	6874      	ldr	r4, [r6, #4]
 8007fa2:	e008      	b.n	8007fb6 <__swbuf_r+0x2e>
 8007fa4:	4b20      	ldr	r3, [pc, #128]	; (8008028 <__swbuf_r+0xa0>)
 8007fa6:	429c      	cmp	r4, r3
 8007fa8:	d101      	bne.n	8007fae <__swbuf_r+0x26>
 8007faa:	68b4      	ldr	r4, [r6, #8]
 8007fac:	e003      	b.n	8007fb6 <__swbuf_r+0x2e>
 8007fae:	4b1f      	ldr	r3, [pc, #124]	; (800802c <__swbuf_r+0xa4>)
 8007fb0:	429c      	cmp	r4, r3
 8007fb2:	bf08      	it	eq
 8007fb4:	68f4      	ldreq	r4, [r6, #12]
 8007fb6:	69a3      	ldr	r3, [r4, #24]
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	071a      	lsls	r2, r3, #28
 8007fbe:	d509      	bpl.n	8007fd4 <__swbuf_r+0x4c>
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	b13b      	cbz	r3, 8007fd4 <__swbuf_r+0x4c>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	6920      	ldr	r0, [r4, #16]
 8007fc8:	1a18      	subs	r0, r3, r0
 8007fca:	6963      	ldr	r3, [r4, #20]
 8007fcc:	4298      	cmp	r0, r3
 8007fce:	b2ed      	uxtb	r5, r5
 8007fd0:	db0f      	blt.n	8007ff2 <__swbuf_r+0x6a>
 8007fd2:	e008      	b.n	8007fe6 <__swbuf_r+0x5e>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	f000 f82a 	bl	8008030 <__swsetup_r>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d0f1      	beq.n	8007fc4 <__swbuf_r+0x3c>
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f000 ff65 	bl	8008eb8 <_fflush_r>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d1f6      	bne.n	8007fe0 <__swbuf_r+0x58>
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	60a3      	str	r3, [r4, #8]
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	701d      	strb	r5, [r3, #0]
 8008000:	6963      	ldr	r3, [r4, #20]
 8008002:	3001      	adds	r0, #1
 8008004:	4298      	cmp	r0, r3
 8008006:	d004      	beq.n	8008012 <__swbuf_r+0x8a>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	07db      	lsls	r3, r3, #31
 800800c:	d507      	bpl.n	800801e <__swbuf_r+0x96>
 800800e:	2d0a      	cmp	r5, #10
 8008010:	d105      	bne.n	800801e <__swbuf_r+0x96>
 8008012:	4630      	mov	r0, r6
 8008014:	4621      	mov	r1, r4
 8008016:	f000 ff4f 	bl	8008eb8 <_fflush_r>
 800801a:	2800      	cmp	r0, #0
 800801c:	d1e0      	bne.n	8007fe0 <__swbuf_r+0x58>
 800801e:	4628      	mov	r0, r5
 8008020:	bd70      	pop	{r4, r5, r6, pc}
 8008022:	bf00      	nop
 8008024:	0800f68c 	.word	0x0800f68c
 8008028:	0800f6ac 	.word	0x0800f6ac
 800802c:	0800f6cc 	.word	0x0800f6cc

08008030 <__swsetup_r>:
 8008030:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <__swsetup_r+0xc8>)
 8008032:	b570      	push	{r4, r5, r6, lr}
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	4606      	mov	r6, r0
 8008038:	460c      	mov	r4, r1
 800803a:	b125      	cbz	r5, 8008046 <__swsetup_r+0x16>
 800803c:	69ab      	ldr	r3, [r5, #24]
 800803e:	b913      	cbnz	r3, 8008046 <__swsetup_r+0x16>
 8008040:	4628      	mov	r0, r5
 8008042:	f000 ffa3 	bl	8008f8c <__sinit>
 8008046:	4b2d      	ldr	r3, [pc, #180]	; (80080fc <__swsetup_r+0xcc>)
 8008048:	429c      	cmp	r4, r3
 800804a:	d101      	bne.n	8008050 <__swsetup_r+0x20>
 800804c:	686c      	ldr	r4, [r5, #4]
 800804e:	e008      	b.n	8008062 <__swsetup_r+0x32>
 8008050:	4b2b      	ldr	r3, [pc, #172]	; (8008100 <__swsetup_r+0xd0>)
 8008052:	429c      	cmp	r4, r3
 8008054:	d101      	bne.n	800805a <__swsetup_r+0x2a>
 8008056:	68ac      	ldr	r4, [r5, #8]
 8008058:	e003      	b.n	8008062 <__swsetup_r+0x32>
 800805a:	4b2a      	ldr	r3, [pc, #168]	; (8008104 <__swsetup_r+0xd4>)
 800805c:	429c      	cmp	r4, r3
 800805e:	bf08      	it	eq
 8008060:	68ec      	ldreq	r4, [r5, #12]
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	b29a      	uxth	r2, r3
 8008066:	0711      	lsls	r1, r2, #28
 8008068:	d41d      	bmi.n	80080a6 <__swsetup_r+0x76>
 800806a:	06d5      	lsls	r5, r2, #27
 800806c:	d402      	bmi.n	8008074 <__swsetup_r+0x44>
 800806e:	2209      	movs	r2, #9
 8008070:	6032      	str	r2, [r6, #0]
 8008072:	e038      	b.n	80080e6 <__swsetup_r+0xb6>
 8008074:	0750      	lsls	r0, r2, #29
 8008076:	d512      	bpl.n	800809e <__swsetup_r+0x6e>
 8008078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800807a:	b141      	cbz	r1, 800808e <__swsetup_r+0x5e>
 800807c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008080:	4299      	cmp	r1, r3
 8008082:	d002      	beq.n	800808a <__swsetup_r+0x5a>
 8008084:	4630      	mov	r0, r6
 8008086:	f001 fb5f 	bl	8009748 <_free_r>
 800808a:	2300      	movs	r3, #0
 800808c:	6363      	str	r3, [r4, #52]	; 0x34
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	2300      	movs	r3, #0
 8008098:	6063      	str	r3, [r4, #4]
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f043 0308 	orr.w	r3, r3, #8
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	b94b      	cbnz	r3, 80080be <__swsetup_r+0x8e>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b4:	d003      	beq.n	80080be <__swsetup_r+0x8e>
 80080b6:	4630      	mov	r0, r6
 80080b8:	4621      	mov	r1, r4
 80080ba:	f000 fff3 	bl	80090a4 <__smakebuf_r>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f013 0201 	ands.w	r2, r3, #1
 80080c4:	d005      	beq.n	80080d2 <__swsetup_r+0xa2>
 80080c6:	2200      	movs	r2, #0
 80080c8:	60a2      	str	r2, [r4, #8]
 80080ca:	6962      	ldr	r2, [r4, #20]
 80080cc:	4252      	negs	r2, r2
 80080ce:	61a2      	str	r2, [r4, #24]
 80080d0:	e003      	b.n	80080da <__swsetup_r+0xaa>
 80080d2:	0799      	lsls	r1, r3, #30
 80080d4:	bf58      	it	pl
 80080d6:	6962      	ldrpl	r2, [r4, #20]
 80080d8:	60a2      	str	r2, [r4, #8]
 80080da:	6922      	ldr	r2, [r4, #16]
 80080dc:	b94a      	cbnz	r2, 80080f2 <__swsetup_r+0xc2>
 80080de:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80080e2:	b280      	uxth	r0, r0
 80080e4:	b130      	cbz	r0, 80080f4 <__swsetup_r+0xc4>
 80080e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ea:	81a3      	strh	r3, [r4, #12]
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295
 80080f0:	bd70      	pop	{r4, r5, r6, pc}
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	bf00      	nop
 80080f8:	1ffe89c8 	.word	0x1ffe89c8
 80080fc:	0800f68c 	.word	0x0800f68c
 8008100:	0800f6ac 	.word	0x0800f6ac
 8008104:	0800f6cc 	.word	0x0800f6cc

08008108 <quorem>:
 8008108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	6903      	ldr	r3, [r0, #16]
 800810e:	690c      	ldr	r4, [r1, #16]
 8008110:	42a3      	cmp	r3, r4
 8008112:	4680      	mov	r8, r0
 8008114:	f2c0 8081 	blt.w	800821a <quorem+0x112>
 8008118:	3c01      	subs	r4, #1
 800811a:	f101 0714 	add.w	r7, r1, #20
 800811e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008122:	f100 0614 	add.w	r6, r0, #20
 8008126:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800812a:	eb06 030e 	add.w	r3, r6, lr
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	3501      	adds	r5, #1
 8008132:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8008136:	fbb3 f5f5 	udiv	r5, r3, r5
 800813a:	eb07 090e 	add.w	r9, r7, lr
 800813e:	b3c5      	cbz	r5, 80081b2 <quorem+0xaa>
 8008140:	f04f 0a00 	mov.w	sl, #0
 8008144:	4638      	mov	r0, r7
 8008146:	46b4      	mov	ip, r6
 8008148:	46d3      	mov	fp, sl
 800814a:	f850 3b04 	ldr.w	r3, [r0], #4
 800814e:	b29a      	uxth	r2, r3
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	fb02 a205 	mla	r2, r2, r5, sl
 8008156:	436b      	muls	r3, r5
 8008158:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800815c:	b292      	uxth	r2, r2
 800815e:	ebc2 020b 	rsb	r2, r2, fp
 8008162:	f8bc b000 	ldrh.w	fp, [ip]
 8008166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800816a:	fa12 f28b 	uxtah	r2, r2, fp
 800816e:	fa1f fb83 	uxth.w	fp, r3
 8008172:	f8dc 3000 	ldr.w	r3, [ip]
 8008176:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 800817a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800817e:	b292      	uxth	r2, r2
 8008180:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008184:	4548      	cmp	r0, r9
 8008186:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800818a:	f84c 2b04 	str.w	r2, [ip], #4
 800818e:	d9dc      	bls.n	800814a <quorem+0x42>
 8008190:	f856 300e 	ldr.w	r3, [r6, lr]
 8008194:	b96b      	cbnz	r3, 80081b2 <quorem+0xaa>
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	3b04      	subs	r3, #4
 800819a:	42b3      	cmp	r3, r6
 800819c:	461a      	mov	r2, r3
 800819e:	d802      	bhi.n	80081a6 <quorem+0x9e>
 80081a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80081a4:	e005      	b.n	80081b2 <quorem+0xaa>
 80081a6:	6812      	ldr	r2, [r2, #0]
 80081a8:	3b04      	subs	r3, #4
 80081aa:	2a00      	cmp	r2, #0
 80081ac:	d1f8      	bne.n	80081a0 <quorem+0x98>
 80081ae:	3c01      	subs	r4, #1
 80081b0:	e7f3      	b.n	800819a <quorem+0x92>
 80081b2:	4640      	mov	r0, r8
 80081b4:	f001 f9ed 	bl	8009592 <__mcmp>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	db2c      	blt.n	8008216 <quorem+0x10e>
 80081bc:	3501      	adds	r5, #1
 80081be:	4630      	mov	r0, r6
 80081c0:	f04f 0e00 	mov.w	lr, #0
 80081c4:	f857 1b04 	ldr.w	r1, [r7], #4
 80081c8:	f8d0 c000 	ldr.w	ip, [r0]
 80081cc:	b28a      	uxth	r2, r1
 80081ce:	ebc2 030e 	rsb	r3, r2, lr
 80081d2:	0c09      	lsrs	r1, r1, #16
 80081d4:	fa13 f38c 	uxtah	r3, r3, ip
 80081d8:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80081dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e6:	454f      	cmp	r7, r9
 80081e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80081ec:	f840 3b04 	str.w	r3, [r0], #4
 80081f0:	d9e8      	bls.n	80081c4 <quorem+0xbc>
 80081f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80081f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80081fa:	b962      	cbnz	r2, 8008216 <quorem+0x10e>
 80081fc:	3b04      	subs	r3, #4
 80081fe:	42b3      	cmp	r3, r6
 8008200:	461a      	mov	r2, r3
 8008202:	d802      	bhi.n	800820a <quorem+0x102>
 8008204:	f8c8 4010 	str.w	r4, [r8, #16]
 8008208:	e005      	b.n	8008216 <quorem+0x10e>
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	3b04      	subs	r3, #4
 800820e:	2a00      	cmp	r2, #0
 8008210:	d1f8      	bne.n	8008204 <quorem+0xfc>
 8008212:	3c01      	subs	r4, #1
 8008214:	e7f3      	b.n	80081fe <quorem+0xf6>
 8008216:	4628      	mov	r0, r5
 8008218:	e000      	b.n	800821c <quorem+0x114>
 800821a:	2000      	movs	r0, #0
 800821c:	b003      	add	sp, #12
 800821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008222:	0000      	movs	r0, r0
 8008224:	0000      	movs	r0, r0
	...

08008228 <_dtoa_r>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800822e:	b097      	sub	sp, #92	; 0x5c
 8008230:	4682      	mov	sl, r0
 8008232:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8008234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008238:	b945      	cbnz	r5, 800824c <_dtoa_r+0x24>
 800823a:	2010      	movs	r0, #16
 800823c:	f000 ff80 	bl	8009140 <malloc>
 8008240:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8008244:	6045      	str	r5, [r0, #4]
 8008246:	6085      	str	r5, [r0, #8]
 8008248:	6005      	str	r5, [r0, #0]
 800824a:	60c5      	str	r5, [r0, #12]
 800824c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008250:	6819      	ldr	r1, [r3, #0]
 8008252:	b159      	cbz	r1, 800826c <_dtoa_r+0x44>
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	604a      	str	r2, [r1, #4]
 8008258:	2301      	movs	r3, #1
 800825a:	4093      	lsls	r3, r2
 800825c:	608b      	str	r3, [r1, #8]
 800825e:	4650      	mov	r0, sl
 8008260:	f000 ffba 	bl	80091d8 <_Bfree>
 8008264:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	4aa2      	ldr	r2, [pc, #648]	; (80084f8 <_dtoa_r+0x2d0>)
 8008270:	2b00      	cmp	r3, #0
 8008272:	bfbf      	itttt	lt
 8008274:	2301      	movlt	r3, #1
 8008276:	6023      	strlt	r3, [r4, #0]
 8008278:	9b03      	ldrlt	r3, [sp, #12]
 800827a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800827e:	bfb8      	it	lt
 8008280:	9303      	strlt	r3, [sp, #12]
 8008282:	9f03      	ldr	r7, [sp, #12]
 8008284:	bfa4      	itt	ge
 8008286:	2300      	movge	r3, #0
 8008288:	6023      	strge	r3, [r4, #0]
 800828a:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800828e:	0d1b      	lsrs	r3, r3, #20
 8008290:	051b      	lsls	r3, r3, #20
 8008292:	4293      	cmp	r3, r2
 8008294:	d11d      	bne.n	80082d2 <_dtoa_r+0xaa>
 8008296:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008298:	f242 730f 	movw	r3, #9999	; 0x270f
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	9b02      	ldr	r3, [sp, #8]
 80082a0:	b943      	cbnz	r3, 80082b4 <_dtoa_r+0x8c>
 80082a2:	4a96      	ldr	r2, [pc, #600]	; (80084fc <_dtoa_r+0x2d4>)
 80082a4:	4b96      	ldr	r3, [pc, #600]	; (8008500 <_dtoa_r+0x2d8>)
 80082a6:	f3c7 0013 	ubfx	r0, r7, #0, #20
 80082aa:	2800      	cmp	r0, #0
 80082ac:	bf14      	ite	ne
 80082ae:	4618      	movne	r0, r3
 80082b0:	4610      	moveq	r0, r2
 80082b2:	e000      	b.n	80082b6 <_dtoa_r+0x8e>
 80082b4:	4892      	ldr	r0, [pc, #584]	; (8008500 <_dtoa_r+0x2d8>)
 80082b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8573 	beq.w	8008da4 <_dtoa_r+0xb7c>
 80082be:	78c3      	ldrb	r3, [r0, #3]
 80082c0:	b113      	cbz	r3, 80082c8 <_dtoa_r+0xa0>
 80082c2:	f100 0308 	add.w	r3, r0, #8
 80082c6:	e000      	b.n	80082ca <_dtoa_r+0xa2>
 80082c8:	1cc3      	adds	r3, r0, #3
 80082ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	f000 bd69 	b.w	8008da4 <_dtoa_r+0xb7c>
 80082d2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082d6:	2200      	movs	r2, #0
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	2300      	movs	r3, #0
 80082de:	f7ff f887 	bl	80073f0 <__aeabi_dcmpeq>
 80082e2:	4680      	mov	r8, r0
 80082e4:	b158      	cbz	r0, 80082fe <_dtoa_r+0xd6>
 80082e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80082e8:	2301      	movs	r3, #1
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 8546 	beq.w	8008d80 <_dtoa_r+0xb58>
 80082f4:	4883      	ldr	r0, [pc, #524]	; (8008504 <_dtoa_r+0x2dc>)
 80082f6:	6018      	str	r0, [r3, #0]
 80082f8:	3801      	subs	r0, #1
 80082fa:	f000 bd53 	b.w	8008da4 <_dtoa_r+0xb7c>
 80082fe:	ab15      	add	r3, sp, #84	; 0x54
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	ab14      	add	r3, sp, #80	; 0x50
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	4650      	mov	r0, sl
 8008308:	4622      	mov	r2, r4
 800830a:	462b      	mov	r3, r5
 800830c:	f001 f9bc 	bl	8009688 <__d2b>
 8008310:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008314:	9007      	str	r0, [sp, #28]
 8008316:	b15e      	cbz	r6, 8008330 <_dtoa_r+0x108>
 8008318:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800831c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008320:	4620      	mov	r0, r4
 8008322:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008326:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800832a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800832e:	e01d      	b.n	800836c <_dtoa_r+0x144>
 8008330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008332:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008334:	441e      	add	r6, r3
 8008336:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800833a:	429e      	cmp	r6, r3
 800833c:	bfad      	iteet	ge
 800833e:	9a02      	ldrge	r2, [sp, #8]
 8008340:	4b71      	ldrlt	r3, [pc, #452]	; (8008508 <_dtoa_r+0x2e0>)
 8008342:	9a02      	ldrlt	r2, [sp, #8]
 8008344:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 8008348:	bfa3      	ittte	ge
 800834a:	fa22 f003 	lsrge.w	r0, r2, r3
 800834e:	4b6f      	ldrge	r3, [pc, #444]	; (800850c <_dtoa_r+0x2e4>)
 8008350:	1b9b      	subge	r3, r3, r6
 8008352:	1b9b      	sublt	r3, r3, r6
 8008354:	bfaa      	itet	ge
 8008356:	409f      	lslge	r7, r3
 8008358:	fa02 f003 	lsllt.w	r0, r2, r3
 800835c:	4338      	orrge	r0, r7
 800835e:	f7fe fd69 	bl	8006e34 <__aeabi_ui2d>
 8008362:	2301      	movs	r3, #1
 8008364:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008368:	3e01      	subs	r6, #1
 800836a:	9313      	str	r3, [sp, #76]	; 0x4c
 800836c:	2200      	movs	r2, #0
 800836e:	4b68      	ldr	r3, [pc, #416]	; (8008510 <_dtoa_r+0x2e8>)
 8008370:	f7fe fc22 	bl	8006bb8 <__aeabi_dsub>
 8008374:	a35a      	add	r3, pc, #360	; (adr r3, 80084e0 <_dtoa_r+0x2b8>)
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f7fe fdd1 	bl	8006f20 <__aeabi_dmul>
 800837e:	a35a      	add	r3, pc, #360	; (adr r3, 80084e8 <_dtoa_r+0x2c0>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7fe fc1a 	bl	8006bbc <__adddf3>
 8008388:	4604      	mov	r4, r0
 800838a:	4630      	mov	r0, r6
 800838c:	460d      	mov	r5, r1
 800838e:	f7fe fd61 	bl	8006e54 <__aeabi_i2d>
 8008392:	a357      	add	r3, pc, #348	; (adr r3, 80084f0 <_dtoa_r+0x2c8>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7fe fdc2 	bl	8006f20 <__aeabi_dmul>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4620      	mov	r0, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	f7fe fc0a 	bl	8006bbc <__adddf3>
 80083a8:	4604      	mov	r4, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	f7ff f852 	bl	8007454 <__aeabi_d2iz>
 80083b0:	4629      	mov	r1, r5
 80083b2:	4683      	mov	fp, r0
 80083b4:	2200      	movs	r2, #0
 80083b6:	4620      	mov	r0, r4
 80083b8:	2300      	movs	r3, #0
 80083ba:	f7ff f823 	bl	8007404 <__aeabi_dcmplt>
 80083be:	b158      	cbz	r0, 80083d8 <_dtoa_r+0x1b0>
 80083c0:	4658      	mov	r0, fp
 80083c2:	f7fe fd47 	bl	8006e54 <__aeabi_i2d>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4620      	mov	r0, r4
 80083cc:	4629      	mov	r1, r5
 80083ce:	f7ff f80f 	bl	80073f0 <__aeabi_dcmpeq>
 80083d2:	b908      	cbnz	r0, 80083d8 <_dtoa_r+0x1b0>
 80083d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083d8:	f1bb 0f16 	cmp.w	fp, #22
 80083dc:	d80d      	bhi.n	80083fa <_dtoa_r+0x1d2>
 80083de:	4b4d      	ldr	r3, [pc, #308]	; (8008514 <_dtoa_r+0x2ec>)
 80083e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ec:	f7ff f828 	bl	8007440 <__aeabi_dcmpgt>
 80083f0:	b130      	cbz	r0, 8008400 <_dtoa_r+0x1d8>
 80083f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083f6:	2300      	movs	r3, #0
 80083f8:	e000      	b.n	80083fc <_dtoa_r+0x1d4>
 80083fa:	2301      	movs	r3, #1
 80083fc:	9312      	str	r3, [sp, #72]	; 0x48
 80083fe:	e000      	b.n	8008402 <_dtoa_r+0x1da>
 8008400:	9012      	str	r0, [sp, #72]	; 0x48
 8008402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008404:	1b9e      	subs	r6, r3, r6
 8008406:	1e73      	subs	r3, r6, #1
 8008408:	930a      	str	r3, [sp, #40]	; 0x28
 800840a:	bf45      	ittet	mi
 800840c:	425b      	negmi	r3, r3
 800840e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008410:	2300      	movpl	r3, #0
 8008412:	2300      	movmi	r3, #0
 8008414:	bf4c      	ite	mi
 8008416:	930a      	strmi	r3, [sp, #40]	; 0x28
 8008418:	9309      	strpl	r3, [sp, #36]	; 0x24
 800841a:	f1bb 0f00 	cmp.w	fp, #0
 800841e:	db07      	blt.n	8008430 <_dtoa_r+0x208>
 8008420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008422:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8008426:	445b      	add	r3, fp
 8008428:	930a      	str	r3, [sp, #40]	; 0x28
 800842a:	2300      	movs	r3, #0
 800842c:	930b      	str	r3, [sp, #44]	; 0x2c
 800842e:	e008      	b.n	8008442 <_dtoa_r+0x21a>
 8008430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008432:	ebcb 0303 	rsb	r3, fp, r3
 8008436:	9309      	str	r3, [sp, #36]	; 0x24
 8008438:	f1cb 0300 	rsb	r3, fp, #0
 800843c:	930b      	str	r3, [sp, #44]	; 0x2c
 800843e:	2300      	movs	r3, #0
 8008440:	930d      	str	r3, [sp, #52]	; 0x34
 8008442:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008444:	2b09      	cmp	r3, #9
 8008446:	d828      	bhi.n	800849a <_dtoa_r+0x272>
 8008448:	2b05      	cmp	r3, #5
 800844a:	bfc4      	itt	gt
 800844c:	3b04      	subgt	r3, #4
 800844e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8008450:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008452:	f1a3 0302 	sub.w	r3, r3, #2
 8008456:	bfcc      	ite	gt
 8008458:	2500      	movgt	r5, #0
 800845a:	2501      	movle	r5, #1
 800845c:	2b03      	cmp	r3, #3
 800845e:	d821      	bhi.n	80084a4 <_dtoa_r+0x27c>
 8008460:	e8df f003 	tbb	[pc, r3]
 8008464:	10040e02 	.word	0x10040e02
 8008468:	2300      	movs	r3, #0
 800846a:	e000      	b.n	800846e <_dtoa_r+0x246>
 800846c:	2301      	movs	r3, #1
 800846e:	930c      	str	r3, [sp, #48]	; 0x30
 8008470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008472:	2b00      	cmp	r3, #0
 8008474:	dc20      	bgt.n	80084b8 <_dtoa_r+0x290>
 8008476:	2301      	movs	r3, #1
 8008478:	9306      	str	r3, [sp, #24]
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	461a      	mov	r2, r3
 800847e:	e019      	b.n	80084b4 <_dtoa_r+0x28c>
 8008480:	2300      	movs	r3, #0
 8008482:	e000      	b.n	8008486 <_dtoa_r+0x25e>
 8008484:	2301      	movs	r3, #1
 8008486:	930c      	str	r3, [sp, #48]	; 0x30
 8008488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800848a:	445b      	add	r3, fp
 800848c:	9306      	str	r3, [sp, #24]
 800848e:	3301      	adds	r3, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	bfb8      	it	lt
 8008496:	2301      	movlt	r3, #1
 8008498:	e011      	b.n	80084be <_dtoa_r+0x296>
 800849a:	2501      	movs	r5, #1
 800849c:	2300      	movs	r3, #0
 800849e:	9320      	str	r3, [sp, #128]	; 0x80
 80084a0:	950c      	str	r5, [sp, #48]	; 0x30
 80084a2:	e001      	b.n	80084a8 <_dtoa_r+0x280>
 80084a4:	2301      	movs	r3, #1
 80084a6:	930c      	str	r3, [sp, #48]	; 0x30
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2312      	movs	r3, #18
 80084b4:	9221      	str	r2, [sp, #132]	; 0x84
 80084b6:	e002      	b.n	80084be <_dtoa_r+0x296>
 80084b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084ba:	9306      	str	r3, [sp, #24]
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 80084c2:	2200      	movs	r2, #0
 80084c4:	6062      	str	r2, [r4, #4]
 80084c6:	2104      	movs	r1, #4
 80084c8:	f101 0214 	add.w	r2, r1, #20
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d823      	bhi.n	8008518 <_dtoa_r+0x2f0>
 80084d0:	6862      	ldr	r2, [r4, #4]
 80084d2:	3201      	adds	r2, #1
 80084d4:	6062      	str	r2, [r4, #4]
 80084d6:	0049      	lsls	r1, r1, #1
 80084d8:	e7f6      	b.n	80084c8 <_dtoa_r+0x2a0>
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	636f4361 	.word	0x636f4361
 80084e4:	3fd287a7 	.word	0x3fd287a7
 80084e8:	8b60c8b3 	.word	0x8b60c8b3
 80084ec:	3fc68a28 	.word	0x3fc68a28
 80084f0:	509f79fb 	.word	0x509f79fb
 80084f4:	3fd34413 	.word	0x3fd34413
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	0800f67c 	.word	0x0800f67c
 8008500:	0800f685 	.word	0x0800f685
 8008504:	0800f659 	.word	0x0800f659
 8008508:	fffffbee 	.word	0xfffffbee
 800850c:	fffffc0e 	.word	0xfffffc0e
 8008510:	3ff80000 	.word	0x3ff80000
 8008514:	0800f6f8 	.word	0x0800f6f8
 8008518:	4650      	mov	r0, sl
 800851a:	6861      	ldr	r1, [r4, #4]
 800851c:	f000 fe27 	bl	800916e <_Balloc>
 8008520:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008524:	6020      	str	r0, [r4, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	9308      	str	r3, [sp, #32]
 800852a:	9b05      	ldr	r3, [sp, #20]
 800852c:	2b0e      	cmp	r3, #14
 800852e:	f200 814b 	bhi.w	80087c8 <_dtoa_r+0x5a0>
 8008532:	2d00      	cmp	r5, #0
 8008534:	f000 8148 	beq.w	80087c8 <_dtoa_r+0x5a0>
 8008538:	ed9d 7b02 	vldr	d7, [sp, #8]
 800853c:	f1bb 0f00 	cmp.w	fp, #0
 8008540:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008544:	dd31      	ble.n	80085aa <_dtoa_r+0x382>
 8008546:	4ab3      	ldr	r2, [pc, #716]	; (8008814 <_dtoa_r+0x5ec>)
 8008548:	f00b 030f 	and.w	r3, fp, #15
 800854c:	ea4f 172b 	mov.w	r7, fp, asr #4
 8008550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008554:	06f8      	lsls	r0, r7, #27
 8008556:	e9d3 4500 	ldrd	r4, r5, [r3]
 800855a:	d50c      	bpl.n	8008576 <_dtoa_r+0x34e>
 800855c:	4bae      	ldr	r3, [pc, #696]	; (8008818 <_dtoa_r+0x5f0>)
 800855e:	ec51 0b17 	vmov	r0, r1, d7
 8008562:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008566:	f7fe fe05 	bl	8007174 <__aeabi_ddiv>
 800856a:	f007 070f 	and.w	r7, r7, #15
 800856e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008572:	2603      	movs	r6, #3
 8008574:	e000      	b.n	8008578 <_dtoa_r+0x350>
 8008576:	2602      	movs	r6, #2
 8008578:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8008818 <_dtoa_r+0x5f0>
 800857c:	b177      	cbz	r7, 800859c <_dtoa_r+0x374>
 800857e:	07f9      	lsls	r1, r7, #31
 8008580:	d508      	bpl.n	8008594 <_dtoa_r+0x36c>
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	e9d8 2300 	ldrd	r2, r3, [r8]
 800858a:	f7fe fcc9 	bl	8006f20 <__aeabi_dmul>
 800858e:	3601      	adds	r6, #1
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	107f      	asrs	r7, r7, #1
 8008596:	f108 0808 	add.w	r8, r8, #8
 800859a:	e7ef      	b.n	800857c <_dtoa_r+0x354>
 800859c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a0:	4622      	mov	r2, r4
 80085a2:	462b      	mov	r3, r5
 80085a4:	f7fe fde6 	bl	8007174 <__aeabi_ddiv>
 80085a8:	e01b      	b.n	80085e2 <_dtoa_r+0x3ba>
 80085aa:	f1cb 0400 	rsb	r4, fp, #0
 80085ae:	b1dc      	cbz	r4, 80085e8 <_dtoa_r+0x3c0>
 80085b0:	4b98      	ldr	r3, [pc, #608]	; (8008814 <_dtoa_r+0x5ec>)
 80085b2:	4d99      	ldr	r5, [pc, #612]	; (8008818 <_dtoa_r+0x5f0>)
 80085b4:	f004 020f 	and.w	r2, r4, #15
 80085b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	f7fe fcac 	bl	8006f20 <__aeabi_dmul>
 80085c8:	1124      	asrs	r4, r4, #4
 80085ca:	2602      	movs	r6, #2
 80085cc:	b14c      	cbz	r4, 80085e2 <_dtoa_r+0x3ba>
 80085ce:	07e2      	lsls	r2, r4, #31
 80085d0:	d504      	bpl.n	80085dc <_dtoa_r+0x3b4>
 80085d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085d6:	3601      	adds	r6, #1
 80085d8:	f7fe fca2 	bl	8006f20 <__aeabi_dmul>
 80085dc:	1064      	asrs	r4, r4, #1
 80085de:	3508      	adds	r5, #8
 80085e0:	e7f4      	b.n	80085cc <_dtoa_r+0x3a4>
 80085e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e6:	e000      	b.n	80085ea <_dtoa_r+0x3c2>
 80085e8:	2602      	movs	r6, #2
 80085ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ec:	b1db      	cbz	r3, 8008626 <_dtoa_r+0x3fe>
 80085ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085f2:	2200      	movs	r2, #0
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	4b88      	ldr	r3, [pc, #544]	; (800881c <_dtoa_r+0x5f4>)
 80085fa:	f7fe ff03 	bl	8007404 <__aeabi_dcmplt>
 80085fe:	b190      	cbz	r0, 8008626 <_dtoa_r+0x3fe>
 8008600:	9b05      	ldr	r3, [sp, #20]
 8008602:	b183      	cbz	r3, 8008626 <_dtoa_r+0x3fe>
 8008604:	9b06      	ldr	r3, [sp, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f340 80da 	ble.w	80087c0 <_dtoa_r+0x598>
 800860c:	4629      	mov	r1, r5
 800860e:	4620      	mov	r0, r4
 8008610:	2200      	movs	r2, #0
 8008612:	4b83      	ldr	r3, [pc, #524]	; (8008820 <_dtoa_r+0x5f8>)
 8008614:	f7fe fc84 	bl	8006f20 <__aeabi_dmul>
 8008618:	f10b 37ff 	add.w	r7, fp, #4294967295
 800861c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008620:	3601      	adds	r6, #1
 8008622:	9d06      	ldr	r5, [sp, #24]
 8008624:	e001      	b.n	800862a <_dtoa_r+0x402>
 8008626:	9d05      	ldr	r5, [sp, #20]
 8008628:	465f      	mov	r7, fp
 800862a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800862e:	4630      	mov	r0, r6
 8008630:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008634:	f7fe fc0e 	bl	8006e54 <__aeabi_i2d>
 8008638:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800863c:	f7fe fc70 	bl	8006f20 <__aeabi_dmul>
 8008640:	2200      	movs	r2, #0
 8008642:	4b78      	ldr	r3, [pc, #480]	; (8008824 <_dtoa_r+0x5fc>)
 8008644:	f7fe faba 	bl	8006bbc <__adddf3>
 8008648:	4680      	mov	r8, r0
 800864a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800864e:	b9cd      	cbnz	r5, 8008684 <_dtoa_r+0x45c>
 8008650:	2200      	movs	r2, #0
 8008652:	4b75      	ldr	r3, [pc, #468]	; (8008828 <_dtoa_r+0x600>)
 8008654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008658:	f7fe faae 	bl	8006bb8 <__aeabi_dsub>
 800865c:	4642      	mov	r2, r8
 800865e:	464b      	mov	r3, r9
 8008660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008664:	f7fe feec 	bl	8007440 <__aeabi_dcmpgt>
 8008668:	2800      	cmp	r0, #0
 800866a:	f040 8246 	bne.w	8008afa <_dtoa_r+0x8d2>
 800866e:	4642      	mov	r2, r8
 8008670:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008678:	f7fe fec4 	bl	8007404 <__aeabi_dcmplt>
 800867c:	2800      	cmp	r0, #0
 800867e:	f040 8236 	bne.w	8008aee <_dtoa_r+0x8c6>
 8008682:	e09d      	b.n	80087c0 <_dtoa_r+0x598>
 8008684:	4b63      	ldr	r3, [pc, #396]	; (8008814 <_dtoa_r+0x5ec>)
 8008686:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008688:	1e6a      	subs	r2, r5, #1
 800868a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868e:	2900      	cmp	r1, #0
 8008690:	d049      	beq.n	8008726 <_dtoa_r+0x4fe>
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	2000      	movs	r0, #0
 8008698:	4964      	ldr	r1, [pc, #400]	; (800882c <_dtoa_r+0x604>)
 800869a:	f7fe fd6b 	bl	8007174 <__aeabi_ddiv>
 800869e:	4642      	mov	r2, r8
 80086a0:	464b      	mov	r3, r9
 80086a2:	f7fe fa89 	bl	8006bb8 <__aeabi_dsub>
 80086a6:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80086aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ae:	9c08      	ldr	r4, [sp, #32]
 80086b0:	4649      	mov	r1, r9
 80086b2:	4640      	mov	r0, r8
 80086b4:	f7fe fece 	bl	8007454 <__aeabi_d2iz>
 80086b8:	4606      	mov	r6, r0
 80086ba:	f7fe fbcb 	bl	8006e54 <__aeabi_i2d>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4640      	mov	r0, r8
 80086c4:	4649      	mov	r1, r9
 80086c6:	f7fe fa77 	bl	8006bb8 <__aeabi_dsub>
 80086ca:	3630      	adds	r6, #48	; 0x30
 80086cc:	f804 6b01 	strb.w	r6, [r4], #1
 80086d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d4:	4680      	mov	r8, r0
 80086d6:	4689      	mov	r9, r1
 80086d8:	f7fe fe94 	bl	8007404 <__aeabi_dcmplt>
 80086dc:	2800      	cmp	r0, #0
 80086de:	f040 8340 	bne.w	8008d62 <_dtoa_r+0xb3a>
 80086e2:	4642      	mov	r2, r8
 80086e4:	464b      	mov	r3, r9
 80086e6:	2000      	movs	r0, #0
 80086e8:	494c      	ldr	r1, [pc, #304]	; (800881c <_dtoa_r+0x5f4>)
 80086ea:	f7fe fa65 	bl	8006bb8 <__aeabi_dsub>
 80086ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086f2:	f7fe fe87 	bl	8007404 <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f040 80d3 	bne.w	80088a2 <_dtoa_r+0x67a>
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	1ae3      	subs	r3, r4, r3
 8008700:	42ab      	cmp	r3, r5
 8008702:	da5d      	bge.n	80087c0 <_dtoa_r+0x598>
 8008704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	4b45      	ldr	r3, [pc, #276]	; (8008820 <_dtoa_r+0x5f8>)
 800870c:	f7fe fc08 	bl	8006f20 <__aeabi_dmul>
 8008710:	2200      	movs	r2, #0
 8008712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008716:	4b42      	ldr	r3, [pc, #264]	; (8008820 <_dtoa_r+0x5f8>)
 8008718:	4640      	mov	r0, r8
 800871a:	4649      	mov	r1, r9
 800871c:	f7fe fc00 	bl	8006f20 <__aeabi_dmul>
 8008720:	4680      	mov	r8, r0
 8008722:	4689      	mov	r9, r1
 8008724:	e7c4      	b.n	80086b0 <_dtoa_r+0x488>
 8008726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800872a:	4642      	mov	r2, r8
 800872c:	464b      	mov	r3, r9
 800872e:	f7fe fbf7 	bl	8006f20 <__aeabi_dmul>
 8008732:	9b08      	ldr	r3, [sp, #32]
 8008734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008738:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800873c:	195c      	adds	r4, r3, r5
 800873e:	461d      	mov	r5, r3
 8008740:	4649      	mov	r1, r9
 8008742:	4640      	mov	r0, r8
 8008744:	f7fe fe86 	bl	8007454 <__aeabi_d2iz>
 8008748:	4606      	mov	r6, r0
 800874a:	f7fe fb83 	bl	8006e54 <__aeabi_i2d>
 800874e:	3630      	adds	r6, #48	; 0x30
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4640      	mov	r0, r8
 8008756:	4649      	mov	r1, r9
 8008758:	f7fe fa2e 	bl	8006bb8 <__aeabi_dsub>
 800875c:	f805 6b01 	strb.w	r6, [r5], #1
 8008760:	42a5      	cmp	r5, r4
 8008762:	4680      	mov	r8, r0
 8008764:	4689      	mov	r9, r1
 8008766:	d124      	bne.n	80087b2 <_dtoa_r+0x58a>
 8008768:	2200      	movs	r2, #0
 800876a:	4b30      	ldr	r3, [pc, #192]	; (800882c <_dtoa_r+0x604>)
 800876c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008770:	f7fe fa24 	bl	8006bbc <__adddf3>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4640      	mov	r0, r8
 800877a:	4649      	mov	r1, r9
 800877c:	f7fe fe60 	bl	8007440 <__aeabi_dcmpgt>
 8008780:	2800      	cmp	r0, #0
 8008782:	f040 808e 	bne.w	80088a2 <_dtoa_r+0x67a>
 8008786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800878a:	2000      	movs	r0, #0
 800878c:	4927      	ldr	r1, [pc, #156]	; (800882c <_dtoa_r+0x604>)
 800878e:	f7fe fa13 	bl	8006bb8 <__aeabi_dsub>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	f7fe fe33 	bl	8007404 <__aeabi_dcmplt>
 800879e:	b178      	cbz	r0, 80087c0 <_dtoa_r+0x598>
 80087a0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80087a4:	2b30      	cmp	r3, #48	; 0x30
 80087a6:	f104 32ff 	add.w	r2, r4, #4294967295
 80087aa:	f040 82da 	bne.w	8008d62 <_dtoa_r+0xb3a>
 80087ae:	4614      	mov	r4, r2
 80087b0:	e7f6      	b.n	80087a0 <_dtoa_r+0x578>
 80087b2:	2200      	movs	r2, #0
 80087b4:	4b1a      	ldr	r3, [pc, #104]	; (8008820 <_dtoa_r+0x5f8>)
 80087b6:	f7fe fbb3 	bl	8006f20 <__aeabi_dmul>
 80087ba:	4680      	mov	r8, r0
 80087bc:	4689      	mov	r9, r1
 80087be:	e7bf      	b.n	8008740 <_dtoa_r+0x518>
 80087c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f2c0 808b 	blt.w	80088e6 <_dtoa_r+0x6be>
 80087d0:	f1bb 0f0e 	cmp.w	fp, #14
 80087d4:	f300 8087 	bgt.w	80088e6 <_dtoa_r+0x6be>
 80087d8:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <_dtoa_r+0x5ec>)
 80087da:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087de:	e9d3 6700 	ldrd	r6, r7, [r3]
 80087e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	da23      	bge.n	8008830 <_dtoa_r+0x608>
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dc20      	bgt.n	8008830 <_dtoa_r+0x608>
 80087ee:	f040 817d 	bne.w	8008aec <_dtoa_r+0x8c4>
 80087f2:	4630      	mov	r0, r6
 80087f4:	2200      	movs	r2, #0
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <_dtoa_r+0x600>)
 80087f8:	4639      	mov	r1, r7
 80087fa:	f7fe fb91 	bl	8006f20 <__aeabi_dmul>
 80087fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008802:	f7fe fe13 	bl	800742c <__aeabi_dcmpge>
 8008806:	9d05      	ldr	r5, [sp, #20]
 8008808:	462e      	mov	r6, r5
 800880a:	2800      	cmp	r0, #0
 800880c:	f040 8170 	bne.w	8008af0 <_dtoa_r+0x8c8>
 8008810:	e175      	b.n	8008afe <_dtoa_r+0x8d6>
 8008812:	bf00      	nop
 8008814:	0800f6f8 	.word	0x0800f6f8
 8008818:	0800f7c0 	.word	0x0800f7c0
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	40240000 	.word	0x40240000
 8008824:	401c0000 	.word	0x401c0000
 8008828:	40140000 	.word	0x40140000
 800882c:	3fe00000 	.word	0x3fe00000
 8008830:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008834:	9c08      	ldr	r4, [sp, #32]
 8008836:	4632      	mov	r2, r6
 8008838:	463b      	mov	r3, r7
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	f7fe fc99 	bl	8007174 <__aeabi_ddiv>
 8008842:	f7fe fe07 	bl	8007454 <__aeabi_d2iz>
 8008846:	4605      	mov	r5, r0
 8008848:	f7fe fb04 	bl	8006e54 <__aeabi_i2d>
 800884c:	4632      	mov	r2, r6
 800884e:	463b      	mov	r3, r7
 8008850:	f7fe fb66 	bl	8006f20 <__aeabi_dmul>
 8008854:	460b      	mov	r3, r1
 8008856:	4602      	mov	r2, r0
 8008858:	4649      	mov	r1, r9
 800885a:	4640      	mov	r0, r8
 800885c:	f7fe f9ac 	bl	8006bb8 <__aeabi_dsub>
 8008860:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	f804 eb01 	strb.w	lr, [r4], #1
 800886a:	ebc3 0e04 	rsb	lr, r3, r4
 800886e:	9b05      	ldr	r3, [sp, #20]
 8008870:	459e      	cmp	lr, r3
 8008872:	d12b      	bne.n	80088cc <_dtoa_r+0x6a4>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	f7fe f9a0 	bl	8006bbc <__adddf3>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	4680      	mov	r8, r0
 8008882:	4689      	mov	r9, r1
 8008884:	f7fe fddc 	bl	8007440 <__aeabi_dcmpgt>
 8008888:	b970      	cbnz	r0, 80088a8 <_dtoa_r+0x680>
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	4632      	mov	r2, r6
 8008890:	463b      	mov	r3, r7
 8008892:	f7fe fdad 	bl	80073f0 <__aeabi_dcmpeq>
 8008896:	2800      	cmp	r0, #0
 8008898:	f000 8264 	beq.w	8008d64 <_dtoa_r+0xb3c>
 800889c:	07eb      	lsls	r3, r5, #31
 800889e:	d403      	bmi.n	80088a8 <_dtoa_r+0x680>
 80088a0:	e260      	b.n	8008d64 <_dtoa_r+0xb3c>
 80088a2:	46bb      	mov	fp, r7
 80088a4:	e000      	b.n	80088a8 <_dtoa_r+0x680>
 80088a6:	461c      	mov	r4, r3
 80088a8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80088ac:	2a39      	cmp	r2, #57	; 0x39
 80088ae:	f104 33ff 	add.w	r3, r4, #4294967295
 80088b2:	d107      	bne.n	80088c4 <_dtoa_r+0x69c>
 80088b4:	9a08      	ldr	r2, [sp, #32]
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d1f5      	bne.n	80088a6 <_dtoa_r+0x67e>
 80088ba:	2330      	movs	r3, #48	; 0x30
 80088bc:	7013      	strb	r3, [r2, #0]
 80088be:	f10b 0b01 	add.w	fp, fp, #1
 80088c2:	4613      	mov	r3, r2
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	3201      	adds	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e24b      	b.n	8008d64 <_dtoa_r+0xb3c>
 80088cc:	2200      	movs	r2, #0
 80088ce:	4ba4      	ldr	r3, [pc, #656]	; (8008b60 <_dtoa_r+0x938>)
 80088d0:	f7fe fb26 	bl	8006f20 <__aeabi_dmul>
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	4680      	mov	r8, r0
 80088da:	4689      	mov	r9, r1
 80088dc:	f7fe fd88 	bl	80073f0 <__aeabi_dcmpeq>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d0a8      	beq.n	8008836 <_dtoa_r+0x60e>
 80088e4:	e23e      	b.n	8008d64 <_dtoa_r+0xb3c>
 80088e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	d032      	beq.n	8008952 <_dtoa_r+0x72a>
 80088ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088ee:	2a01      	cmp	r2, #1
 80088f0:	dc0a      	bgt.n	8008908 <_dtoa_r+0x6e0>
 80088f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088f4:	b112      	cbz	r2, 80088fc <_dtoa_r+0x6d4>
 80088f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088fa:	e002      	b.n	8008902 <_dtoa_r+0x6da>
 80088fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008902:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008904:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008906:	e018      	b.n	800893a <_dtoa_r+0x712>
 8008908:	9b05      	ldr	r3, [sp, #20]
 800890a:	1e5d      	subs	r5, r3, #1
 800890c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890e:	42ab      	cmp	r3, r5
 8008910:	bfbf      	itttt	lt
 8008912:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008914:	950b      	strlt	r5, [sp, #44]	; 0x2c
 8008916:	1aea      	sublt	r2, r5, r3
 8008918:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800891a:	bfb6      	itet	lt
 800891c:	189b      	addlt	r3, r3, r2
 800891e:	1b5d      	subge	r5, r3, r5
 8008920:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008922:	9b05      	ldr	r3, [sp, #20]
 8008924:	bfb8      	it	lt
 8008926:	2500      	movlt	r5, #0
 8008928:	2b00      	cmp	r3, #0
 800892a:	bfb9      	ittee	lt
 800892c:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 800892e:	9a05      	ldrlt	r2, [sp, #20]
 8008930:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 8008932:	9b05      	ldrge	r3, [sp, #20]
 8008934:	bfbc      	itt	lt
 8008936:	1a9c      	sublt	r4, r3, r2
 8008938:	2300      	movlt	r3, #0
 800893a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800893c:	441a      	add	r2, r3
 800893e:	9209      	str	r2, [sp, #36]	; 0x24
 8008940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008942:	4650      	mov	r0, sl
 8008944:	441a      	add	r2, r3
 8008946:	2101      	movs	r1, #1
 8008948:	920a      	str	r2, [sp, #40]	; 0x28
 800894a:	f000 fce7 	bl	800931c <__i2b>
 800894e:	4606      	mov	r6, r0
 8008950:	e002      	b.n	8008958 <_dtoa_r+0x730>
 8008952:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008954:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008956:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008958:	b164      	cbz	r4, 8008974 <_dtoa_r+0x74c>
 800895a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895c:	2b00      	cmp	r3, #0
 800895e:	dd09      	ble.n	8008974 <_dtoa_r+0x74c>
 8008960:	42a3      	cmp	r3, r4
 8008962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008964:	bfa8      	it	ge
 8008966:	4623      	movge	r3, r4
 8008968:	1ad2      	subs	r2, r2, r3
 800896a:	9209      	str	r2, [sp, #36]	; 0x24
 800896c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800896e:	1ae4      	subs	r4, r4, r3
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	930a      	str	r3, [sp, #40]	; 0x28
 8008974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008976:	2b00      	cmp	r3, #0
 8008978:	dd20      	ble.n	80089bc <_dtoa_r+0x794>
 800897a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800897c:	b1c3      	cbz	r3, 80089b0 <_dtoa_r+0x788>
 800897e:	2d00      	cmp	r5, #0
 8008980:	dd10      	ble.n	80089a4 <_dtoa_r+0x77c>
 8008982:	4631      	mov	r1, r6
 8008984:	462a      	mov	r2, r5
 8008986:	4650      	mov	r0, sl
 8008988:	f000 fd62 	bl	8009450 <__pow5mult>
 800898c:	4606      	mov	r6, r0
 800898e:	4631      	mov	r1, r6
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	4650      	mov	r0, sl
 8008994:	f000 fccb 	bl	800932e <__multiply>
 8008998:	9907      	ldr	r1, [sp, #28]
 800899a:	4607      	mov	r7, r0
 800899c:	4650      	mov	r0, sl
 800899e:	f000 fc1b 	bl	80091d8 <_Bfree>
 80089a2:	9707      	str	r7, [sp, #28]
 80089a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a6:	1b5a      	subs	r2, r3, r5
 80089a8:	d008      	beq.n	80089bc <_dtoa_r+0x794>
 80089aa:	4650      	mov	r0, sl
 80089ac:	9907      	ldr	r1, [sp, #28]
 80089ae:	e002      	b.n	80089b6 <_dtoa_r+0x78e>
 80089b0:	9907      	ldr	r1, [sp, #28]
 80089b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089b4:	4650      	mov	r0, sl
 80089b6:	f000 fd4b 	bl	8009450 <__pow5mult>
 80089ba:	9007      	str	r0, [sp, #28]
 80089bc:	4650      	mov	r0, sl
 80089be:	2101      	movs	r1, #1
 80089c0:	f000 fcac 	bl	800931c <__i2b>
 80089c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	4605      	mov	r5, r0
 80089ca:	dd0a      	ble.n	80089e2 <_dtoa_r+0x7ba>
 80089cc:	4629      	mov	r1, r5
 80089ce:	461a      	mov	r2, r3
 80089d0:	4650      	mov	r0, sl
 80089d2:	f000 fd3d 	bl	8009450 <__pow5mult>
 80089d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80089d8:	2b01      	cmp	r3, #1
 80089da:	4605      	mov	r5, r0
 80089dc:	dd04      	ble.n	80089e8 <_dtoa_r+0x7c0>
 80089de:	2700      	movs	r7, #0
 80089e0:	e01b      	b.n	8008a1a <_dtoa_r+0x7f2>
 80089e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	dc13      	bgt.n	8008a10 <_dtoa_r+0x7e8>
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	b98b      	cbnz	r3, 8008a10 <_dtoa_r+0x7e8>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089f2:	b97b      	cbnz	r3, 8008a14 <_dtoa_r+0x7ec>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80089fa:	0d3f      	lsrs	r7, r7, #20
 80089fc:	053f      	lsls	r7, r7, #20
 80089fe:	b157      	cbz	r7, 8008a16 <_dtoa_r+0x7ee>
 8008a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a02:	3301      	adds	r3, #1
 8008a04:	9309      	str	r3, [sp, #36]	; 0x24
 8008a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a08:	3301      	adds	r3, #1
 8008a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a0c:	2701      	movs	r7, #1
 8008a0e:	e002      	b.n	8008a16 <_dtoa_r+0x7ee>
 8008a10:	2700      	movs	r7, #0
 8008a12:	e000      	b.n	8008a16 <_dtoa_r+0x7ee>
 8008a14:	9f02      	ldr	r7, [sp, #8]
 8008a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a18:	b143      	cbz	r3, 8008a2c <_dtoa_r+0x804>
 8008a1a:	692b      	ldr	r3, [r5, #16]
 8008a1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a20:	6918      	ldr	r0, [r3, #16]
 8008a22:	f000 fc2e 	bl	8009282 <__hi0bits>
 8008a26:	f1c0 0020 	rsb	r0, r0, #32
 8008a2a:	e000      	b.n	8008a2e <_dtoa_r+0x806>
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a30:	4418      	add	r0, r3
 8008a32:	f010 001f 	ands.w	r0, r0, #31
 8008a36:	d008      	beq.n	8008a4a <_dtoa_r+0x822>
 8008a38:	f1c0 0320 	rsb	r3, r0, #32
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	dd02      	ble.n	8008a46 <_dtoa_r+0x81e>
 8008a40:	f1c0 001c 	rsb	r0, r0, #28
 8008a44:	e002      	b.n	8008a4c <_dtoa_r+0x824>
 8008a46:	d008      	beq.n	8008a5a <_dtoa_r+0x832>
 8008a48:	4618      	mov	r0, r3
 8008a4a:	301c      	adds	r0, #28
 8008a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4e:	4403      	add	r3, r0
 8008a50:	9309      	str	r3, [sp, #36]	; 0x24
 8008a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a54:	4403      	add	r3, r0
 8008a56:	4404      	add	r4, r0
 8008a58:	930a      	str	r3, [sp, #40]	; 0x28
 8008a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dd05      	ble.n	8008a6c <_dtoa_r+0x844>
 8008a60:	4650      	mov	r0, sl
 8008a62:	9907      	ldr	r1, [sp, #28]
 8008a64:	461a      	mov	r2, r3
 8008a66:	f000 fd41 	bl	80094ec <__lshift>
 8008a6a:	9007      	str	r0, [sp, #28]
 8008a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dd05      	ble.n	8008a7e <_dtoa_r+0x856>
 8008a72:	4629      	mov	r1, r5
 8008a74:	4650      	mov	r0, sl
 8008a76:	461a      	mov	r2, r3
 8008a78:	f000 fd38 	bl	80094ec <__lshift>
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a80:	b1eb      	cbz	r3, 8008abe <_dtoa_r+0x896>
 8008a82:	9807      	ldr	r0, [sp, #28]
 8008a84:	4629      	mov	r1, r5
 8008a86:	f000 fd84 	bl	8009592 <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	da17      	bge.n	8008abe <_dtoa_r+0x896>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	4650      	mov	r0, sl
 8008a92:	9907      	ldr	r1, [sp, #28]
 8008a94:	220a      	movs	r2, #10
 8008a96:	f000 fbb6 	bl	8009206 <__multadd>
 8008a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a9c:	9007      	str	r0, [sp, #28]
 8008a9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8170 	beq.w	8008d88 <_dtoa_r+0xb60>
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4650      	mov	r0, sl
 8008aae:	220a      	movs	r2, #10
 8008ab0:	f000 fba9 	bl	8009206 <__multadd>
 8008ab4:	9b06      	ldr	r3, [sp, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	4606      	mov	r6, r0
 8008aba:	dc33      	bgt.n	8008b24 <_dtoa_r+0x8fc>
 8008abc:	e16d      	b.n	8008d9a <_dtoa_r+0xb72>
 8008abe:	9b05      	ldr	r3, [sp, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dc26      	bgt.n	8008b12 <_dtoa_r+0x8ea>
 8008ac4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	dd23      	ble.n	8008b12 <_dtoa_r+0x8ea>
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	9306      	str	r3, [sp, #24]
 8008ace:	9b06      	ldr	r3, [sp, #24]
 8008ad0:	b973      	cbnz	r3, 8008af0 <_dtoa_r+0x8c8>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	2205      	movs	r2, #5
 8008ad6:	4650      	mov	r0, sl
 8008ad8:	f000 fb95 	bl	8009206 <__multadd>
 8008adc:	4605      	mov	r5, r0
 8008ade:	4629      	mov	r1, r5
 8008ae0:	9807      	ldr	r0, [sp, #28]
 8008ae2:	f000 fd56 	bl	8009592 <__mcmp>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	dc09      	bgt.n	8008afe <_dtoa_r+0x8d6>
 8008aea:	e001      	b.n	8008af0 <_dtoa_r+0x8c8>
 8008aec:	2500      	movs	r5, #0
 8008aee:	462e      	mov	r6, r5
 8008af0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008af2:	9c08      	ldr	r4, [sp, #32]
 8008af4:	ea6f 0b03 	mvn.w	fp, r3
 8008af8:	e008      	b.n	8008b0c <_dtoa_r+0x8e4>
 8008afa:	46bb      	mov	fp, r7
 8008afc:	462e      	mov	r6, r5
 8008afe:	9b08      	ldr	r3, [sp, #32]
 8008b00:	9a08      	ldr	r2, [sp, #32]
 8008b02:	1c5c      	adds	r4, r3, #1
 8008b04:	2331      	movs	r3, #49	; 0x31
 8008b06:	7013      	strb	r3, [r2, #0]
 8008b08:	f10b 0b01 	add.w	fp, fp, #1
 8008b0c:	46b1      	mov	r9, r6
 8008b0e:	2600      	movs	r6, #0
 8008b10:	e114      	b.n	8008d3c <_dtoa_r+0xb14>
 8008b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b14:	b923      	cbnz	r3, 8008b20 <_dtoa_r+0x8f8>
 8008b16:	9b05      	ldr	r3, [sp, #20]
 8008b18:	9306      	str	r3, [sp, #24]
 8008b1a:	9f08      	ldr	r7, [sp, #32]
 8008b1c:	9c07      	ldr	r4, [sp, #28]
 8008b1e:	e0cc      	b.n	8008cba <_dtoa_r+0xa92>
 8008b20:	9b05      	ldr	r3, [sp, #20]
 8008b22:	9306      	str	r3, [sp, #24]
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	dd05      	ble.n	8008b34 <_dtoa_r+0x90c>
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	f000 fcdd 	bl	80094ec <__lshift>
 8008b32:	4606      	mov	r6, r0
 8008b34:	b1b7      	cbz	r7, 8008b64 <_dtoa_r+0x93c>
 8008b36:	6871      	ldr	r1, [r6, #4]
 8008b38:	4650      	mov	r0, sl
 8008b3a:	f000 fb18 	bl	800916e <_Balloc>
 8008b3e:	6932      	ldr	r2, [r6, #16]
 8008b40:	3202      	adds	r2, #2
 8008b42:	4604      	mov	r4, r0
 8008b44:	f106 010c 	add.w	r1, r6, #12
 8008b48:	0092      	lsls	r2, r2, #2
 8008b4a:	300c      	adds	r0, #12
 8008b4c:	f7fe fcd0 	bl	80074f0 <memcpy>
 8008b50:	4650      	mov	r0, sl
 8008b52:	4621      	mov	r1, r4
 8008b54:	2201      	movs	r2, #1
 8008b56:	f000 fcc9 	bl	80094ec <__lshift>
 8008b5a:	4681      	mov	r9, r0
 8008b5c:	e003      	b.n	8008b66 <_dtoa_r+0x93e>
 8008b5e:	bf00      	nop
 8008b60:	40240000 	.word	0x40240000
 8008b64:	46b1      	mov	r9, r6
 8008b66:	9f08      	ldr	r7, [sp, #32]
 8008b68:	9c07      	ldr	r4, [sp, #28]
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f7ff facb 	bl	8008108 <quorem>
 8008b72:	4631      	mov	r1, r6
 8008b74:	9009      	str	r0, [sp, #36]	; 0x24
 8008b76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fd09 	bl	8009592 <__mcmp>
 8008b80:	464a      	mov	r2, r9
 8008b82:	9005      	str	r0, [sp, #20]
 8008b84:	4629      	mov	r1, r5
 8008b86:	4650      	mov	r0, sl
 8008b88:	f000 fd1f 	bl	80095ca <__mdiff>
 8008b8c:	68c2      	ldr	r2, [r0, #12]
 8008b8e:	4603      	mov	r3, r0
 8008b90:	b93a      	cbnz	r2, 8008ba2 <_dtoa_r+0x97a>
 8008b92:	4619      	mov	r1, r3
 8008b94:	4620      	mov	r0, r4
 8008b96:	9307      	str	r3, [sp, #28]
 8008b98:	f000 fcfb 	bl	8009592 <__mcmp>
 8008b9c:	9b07      	ldr	r3, [sp, #28]
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	e000      	b.n	8008ba4 <_dtoa_r+0x97c>
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4650      	mov	r0, sl
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	9207      	str	r2, [sp, #28]
 8008baa:	f000 fb15 	bl	80091d8 <_Bfree>
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	b9a2      	cbnz	r2, 8008bdc <_dtoa_r+0x9b4>
 8008bb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008bb4:	b993      	cbnz	r3, 8008bdc <_dtoa_r+0x9b4>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	b973      	cbnz	r3, 8008bdc <_dtoa_r+0x9b4>
 8008bbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	9407      	str	r4, [sp, #28]
 8008bc6:	d040      	beq.n	8008c4a <_dtoa_r+0xa22>
 8008bc8:	9b05      	ldr	r3, [sp, #20]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bfc8      	it	gt
 8008bce:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8008bd0:	f107 0401 	add.w	r4, r7, #1
 8008bd4:	bfc8      	it	gt
 8008bd6:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 8008bda:	e03d      	b.n	8008c58 <_dtoa_r+0xa30>
 8008bdc:	9b05      	ldr	r3, [sp, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da04      	bge.n	8008bec <_dtoa_r+0x9c4>
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	46c4      	mov	ip, r8
 8008be6:	9407      	str	r4, [sp, #28]
 8008be8:	dc08      	bgt.n	8008bfc <_dtoa_r+0x9d4>
 8008bea:	e021      	b.n	8008c30 <_dtoa_r+0xa08>
 8008bec:	d124      	bne.n	8008c38 <_dtoa_r+0xa10>
 8008bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008bf0:	bb13      	cbnz	r3, 8008c38 <_dtoa_r+0xa10>
 8008bf2:	9b02      	ldr	r3, [sp, #8]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	b9f3      	cbnz	r3, 8008c38 <_dtoa_r+0xa10>
 8008bfa:	e7f2      	b.n	8008be2 <_dtoa_r+0x9ba>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4650      	mov	r0, sl
 8008c02:	9705      	str	r7, [sp, #20]
 8008c04:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c08:	f000 fc70 	bl	80094ec <__lshift>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	9007      	str	r0, [sp, #28]
 8008c10:	f000 fcbf 	bl	8009592 <__mcmp>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f8dd c008 	ldr.w	ip, [sp, #8]
 8008c1a:	9b05      	ldr	r3, [sp, #20]
 8008c1c:	dc03      	bgt.n	8008c26 <_dtoa_r+0x9fe>
 8008c1e:	d107      	bne.n	8008c30 <_dtoa_r+0xa08>
 8008c20:	f018 0f01 	tst.w	r8, #1
 8008c24:	d004      	beq.n	8008c30 <_dtoa_r+0xa08>
 8008c26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c2a:	d00e      	beq.n	8008c4a <_dtoa_r+0xa22>
 8008c2c:	f108 0c01 	add.w	ip, r8, #1
 8008c30:	1c7c      	adds	r4, r7, #1
 8008c32:	f887 c000 	strb.w	ip, [r7]
 8008c36:	e081      	b.n	8008d3c <_dtoa_r+0xb14>
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	f107 0201 	add.w	r2, r7, #1
 8008c3e:	dd0e      	ble.n	8008c5e <_dtoa_r+0xa36>
 8008c40:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c44:	463b      	mov	r3, r7
 8008c46:	9407      	str	r4, [sp, #28]
 8008c48:	d103      	bne.n	8008c52 <_dtoa_r+0xa2a>
 8008c4a:	2239      	movs	r2, #57	; 0x39
 8008c4c:	3701      	adds	r7, #1
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	e057      	b.n	8008d02 <_dtoa_r+0xada>
 8008c52:	4614      	mov	r4, r2
 8008c54:	f108 0801 	add.w	r8, r8, #1
 8008c58:	f887 8000 	strb.w	r8, [r7]
 8008c5c:	e06e      	b.n	8008d3c <_dtoa_r+0xb14>
 8008c5e:	9b08      	ldr	r3, [sp, #32]
 8008c60:	f802 8c01 	strb.w	r8, [r2, #-1]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	4617      	mov	r7, r2
 8008c68:	9a06      	ldr	r2, [sp, #24]
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d03a      	beq.n	8008ce4 <_dtoa_r+0xabc>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	220a      	movs	r2, #10
 8008c72:	2300      	movs	r3, #0
 8008c74:	4650      	mov	r0, sl
 8008c76:	f000 fac6 	bl	8009206 <__multadd>
 8008c7a:	454e      	cmp	r6, r9
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4650      	mov	r0, sl
 8008c82:	f04f 020a 	mov.w	r2, #10
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <_dtoa_r+0xa6e>
 8008c8c:	f000 fabb 	bl	8009206 <__multadd>
 8008c90:	4606      	mov	r6, r0
 8008c92:	4681      	mov	r9, r0
 8008c94:	e769      	b.n	8008b6a <_dtoa_r+0x942>
 8008c96:	f000 fab6 	bl	8009206 <__multadd>
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	220a      	movs	r2, #10
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f000 faaf 	bl	8009206 <__multadd>
 8008ca8:	4681      	mov	r9, r0
 8008caa:	e75e      	b.n	8008b6a <_dtoa_r+0x942>
 8008cac:	4621      	mov	r1, r4
 8008cae:	4650      	mov	r0, sl
 8008cb0:	220a      	movs	r2, #10
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f000 faa7 	bl	8009206 <__multadd>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	4620      	mov	r0, r4
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7ff fa23 	bl	8008108 <quorem>
 8008cc2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008cc6:	f807 8b01 	strb.w	r8, [r7], #1
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	9a06      	ldr	r2, [sp, #24]
 8008cce:	1afb      	subs	r3, r7, r3
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	dbeb      	blt.n	8008cac <_dtoa_r+0xa84>
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	2a01      	cmp	r2, #1
 8008cd8:	bfac      	ite	ge
 8008cda:	189b      	addge	r3, r3, r2
 8008cdc:	3301      	addlt	r3, #1
 8008cde:	46b1      	mov	r9, r6
 8008ce0:	461f      	mov	r7, r3
 8008ce2:	2600      	movs	r6, #0
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4650      	mov	r0, sl
 8008cea:	f000 fbff 	bl	80094ec <__lshift>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	9007      	str	r0, [sp, #28]
 8008cf2:	f000 fc4e 	bl	8009592 <__mcmp>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	dc03      	bgt.n	8008d02 <_dtoa_r+0xada>
 8008cfa:	d116      	bne.n	8008d2a <_dtoa_r+0xb02>
 8008cfc:	f018 0f01 	tst.w	r8, #1
 8008d00:	d013      	beq.n	8008d2a <_dtoa_r+0xb02>
 8008d02:	463c      	mov	r4, r7
 8008d04:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008d08:	2b39      	cmp	r3, #57	; 0x39
 8008d0a:	f104 32ff 	add.w	r2, r4, #4294967295
 8008d0e:	d109      	bne.n	8008d24 <_dtoa_r+0xafc>
 8008d10:	9b08      	ldr	r3, [sp, #32]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d104      	bne.n	8008d20 <_dtoa_r+0xaf8>
 8008d16:	f10b 0b01 	add.w	fp, fp, #1
 8008d1a:	2331      	movs	r3, #49	; 0x31
 8008d1c:	9a08      	ldr	r2, [sp, #32]
 8008d1e:	e002      	b.n	8008d26 <_dtoa_r+0xafe>
 8008d20:	4614      	mov	r4, r2
 8008d22:	e7ef      	b.n	8008d04 <_dtoa_r+0xadc>
 8008d24:	3301      	adds	r3, #1
 8008d26:	7013      	strb	r3, [r2, #0]
 8008d28:	e008      	b.n	8008d3c <_dtoa_r+0xb14>
 8008d2a:	463c      	mov	r4, r7
 8008d2c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008d30:	2b30      	cmp	r3, #48	; 0x30
 8008d32:	f104 32ff 	add.w	r2, r4, #4294967295
 8008d36:	d101      	bne.n	8008d3c <_dtoa_r+0xb14>
 8008d38:	4614      	mov	r4, r2
 8008d3a:	e7f7      	b.n	8008d2c <_dtoa_r+0xb04>
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	4629      	mov	r1, r5
 8008d40:	f000 fa4a 	bl	80091d8 <_Bfree>
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	d00c      	beq.n	8008d64 <_dtoa_r+0xb3c>
 8008d4a:	b12e      	cbz	r6, 8008d58 <_dtoa_r+0xb30>
 8008d4c:	454e      	cmp	r6, r9
 8008d4e:	d003      	beq.n	8008d58 <_dtoa_r+0xb30>
 8008d50:	4650      	mov	r0, sl
 8008d52:	4631      	mov	r1, r6
 8008d54:	f000 fa40 	bl	80091d8 <_Bfree>
 8008d58:	4650      	mov	r0, sl
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	f000 fa3c 	bl	80091d8 <_Bfree>
 8008d60:	e000      	b.n	8008d64 <_dtoa_r+0xb3c>
 8008d62:	46bb      	mov	fp, r7
 8008d64:	4650      	mov	r0, sl
 8008d66:	9907      	ldr	r1, [sp, #28]
 8008d68:	f000 fa36 	bl	80091d8 <_Bfree>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d70:	7023      	strb	r3, [r4, #0]
 8008d72:	f10b 0301 	add.w	r3, fp, #1
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d7a:	b11b      	cbz	r3, 8008d84 <_dtoa_r+0xb5c>
 8008d7c:	601c      	str	r4, [r3, #0]
 8008d7e:	e001      	b.n	8008d84 <_dtoa_r+0xb5c>
 8008d80:	480a      	ldr	r0, [pc, #40]	; (8008dac <_dtoa_r+0xb84>)
 8008d82:	e00f      	b.n	8008da4 <_dtoa_r+0xb7c>
 8008d84:	9808      	ldr	r0, [sp, #32]
 8008d86:	e00d      	b.n	8008da4 <_dtoa_r+0xb7c>
 8008d88:	9b06      	ldr	r3, [sp, #24]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f73f aec5 	bgt.w	8008b1a <_dtoa_r+0x8f2>
 8008d90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	f73f ae9b 	bgt.w	8008ace <_dtoa_r+0x8a6>
 8008d98:	e6bf      	b.n	8008b1a <_dtoa_r+0x8f2>
 8008d9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	f73f ae96 	bgt.w	8008ace <_dtoa_r+0x8a6>
 8008da2:	e6bf      	b.n	8008b24 <_dtoa_r+0x8fc>
 8008da4:	b017      	add	sp, #92	; 0x5c
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	bf00      	nop
 8008dac:	0800f658 	.word	0x0800f658

08008db0 <__sflush_r>:
 8008db0:	898a      	ldrh	r2, [r1, #12]
 8008db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db6:	4605      	mov	r5, r0
 8008db8:	0710      	lsls	r0, r2, #28
 8008dba:	460c      	mov	r4, r1
 8008dbc:	d457      	bmi.n	8008e6e <__sflush_r+0xbe>
 8008dbe:	684b      	ldr	r3, [r1, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dc02      	bgt.n	8008dca <__sflush_r+0x1a>
 8008dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dd18      	ble.n	8008dfc <__sflush_r+0x4c>
 8008dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dcc:	b1b6      	cbz	r6, 8008dfc <__sflush_r+0x4c>
 8008dce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	b292      	uxth	r2, r2
 8008dd6:	682f      	ldr	r7, [r5, #0]
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	b10a      	cbz	r2, 8008de0 <__sflush_r+0x30>
 8008ddc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008dde:	e010      	b.n	8008e02 <__sflush_r+0x52>
 8008de0:	6a21      	ldr	r1, [r4, #32]
 8008de2:	4628      	mov	r0, r5
 8008de4:	2301      	movs	r3, #1
 8008de6:	47b0      	blx	r6
 8008de8:	1c41      	adds	r1, r0, #1
 8008dea:	4602      	mov	r2, r0
 8008dec:	d109      	bne.n	8008e02 <__sflush_r+0x52>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b13b      	cbz	r3, 8008e02 <__sflush_r+0x52>
 8008df2:	2b1d      	cmp	r3, #29
 8008df4:	d001      	beq.n	8008dfa <__sflush_r+0x4a>
 8008df6:	2b16      	cmp	r3, #22
 8008df8:	d147      	bne.n	8008e8a <__sflush_r+0xda>
 8008dfa:	602f      	str	r7, [r5, #0]
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	075b      	lsls	r3, r3, #29
 8008e06:	d505      	bpl.n	8008e14 <__sflush_r+0x64>
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e0e:	b10b      	cbz	r3, 8008e14 <__sflush_r+0x64>
 8008e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e12:	1ad2      	subs	r2, r2, r3
 8008e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e16:	6a21      	ldr	r1, [r4, #32]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	47b0      	blx	r6
 8008e1e:	1c46      	adds	r6, r0, #1
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	d105      	bne.n	8008e30 <__sflush_r+0x80>
 8008e24:	682a      	ldr	r2, [r5, #0]
 8008e26:	b11a      	cbz	r2, 8008e30 <__sflush_r+0x80>
 8008e28:	2a1d      	cmp	r2, #29
 8008e2a:	d001      	beq.n	8008e30 <__sflush_r+0x80>
 8008e2c:	2a16      	cmp	r2, #22
 8008e2e:	d119      	bne.n	8008e64 <__sflush_r+0xb4>
 8008e30:	2200      	movs	r2, #0
 8008e32:	6062      	str	r2, [r4, #4]
 8008e34:	04d9      	lsls	r1, r3, #19
 8008e36:	6922      	ldr	r2, [r4, #16]
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	d504      	bpl.n	8008e46 <__sflush_r+0x96>
 8008e3c:	1c42      	adds	r2, r0, #1
 8008e3e:	d101      	bne.n	8008e44 <__sflush_r+0x94>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b903      	cbnz	r3, 8008e46 <__sflush_r+0x96>
 8008e44:	6560      	str	r0, [r4, #84]	; 0x54
 8008e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e48:	602f      	str	r7, [r5, #0]
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	d0d6      	beq.n	8008dfc <__sflush_r+0x4c>
 8008e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e52:	4299      	cmp	r1, r3
 8008e54:	d002      	beq.n	8008e5c <__sflush_r+0xac>
 8008e56:	4628      	mov	r0, r5
 8008e58:	f000 fc76 	bl	8009748 <_free_r>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	6360      	str	r0, [r4, #52]	; 0x34
 8008e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6e:	690f      	ldr	r7, [r1, #16]
 8008e70:	2f00      	cmp	r7, #0
 8008e72:	d0c3      	beq.n	8008dfc <__sflush_r+0x4c>
 8008e74:	0793      	lsls	r3, r2, #30
 8008e76:	680e      	ldr	r6, [r1, #0]
 8008e78:	bf08      	it	eq
 8008e7a:	694b      	ldreq	r3, [r1, #20]
 8008e7c:	600f      	str	r7, [r1, #0]
 8008e7e:	bf18      	it	ne
 8008e80:	2300      	movne	r3, #0
 8008e82:	ebc7 0806 	rsb	r8, r7, r6
 8008e86:	608b      	str	r3, [r1, #8]
 8008e88:	e012      	b.n	8008eb0 <__sflush_r+0x100>
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	6a21      	ldr	r1, [r4, #32]
 8008e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ea0:	463a      	mov	r2, r7
 8008ea2:	4643      	mov	r3, r8
 8008ea4:	47b0      	blx	r6
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	ddef      	ble.n	8008e8a <__sflush_r+0xda>
 8008eaa:	4407      	add	r7, r0
 8008eac:	ebc0 0808 	rsb	r8, r0, r8
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	dcf1      	bgt.n	8008e9a <__sflush_r+0xea>
 8008eb6:	e7a1      	b.n	8008dfc <__sflush_r+0x4c>

08008eb8 <_fflush_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	690b      	ldr	r3, [r1, #16]
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	b1db      	cbz	r3, 8008efa <_fflush_r+0x42>
 8008ec2:	b118      	cbz	r0, 8008ecc <_fflush_r+0x14>
 8008ec4:	6983      	ldr	r3, [r0, #24]
 8008ec6:	b90b      	cbnz	r3, 8008ecc <_fflush_r+0x14>
 8008ec8:	f000 f860 	bl	8008f8c <__sinit>
 8008ecc:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <_fflush_r+0x48>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d101      	bne.n	8008ed6 <_fflush_r+0x1e>
 8008ed2:	686c      	ldr	r4, [r5, #4]
 8008ed4:	e008      	b.n	8008ee8 <_fflush_r+0x30>
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <_fflush_r+0x4c>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	d101      	bne.n	8008ee0 <_fflush_r+0x28>
 8008edc:	68ac      	ldr	r4, [r5, #8]
 8008ede:	e003      	b.n	8008ee8 <_fflush_r+0x30>
 8008ee0:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <_fflush_r+0x50>)
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	bf08      	it	eq
 8008ee6:	68ec      	ldreq	r4, [r5, #12]
 8008ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eec:	b12b      	cbz	r3, 8008efa <_fflush_r+0x42>
 8008eee:	4628      	mov	r0, r5
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef6:	f7ff bf5b 	b.w	8008db0 <__sflush_r>
 8008efa:	2000      	movs	r0, #0
 8008efc:	bd38      	pop	{r3, r4, r5, pc}
 8008efe:	bf00      	nop
 8008f00:	0800f68c 	.word	0x0800f68c
 8008f04:	0800f6ac 	.word	0x0800f6ac
 8008f08:	0800f6cc 	.word	0x0800f6cc

08008f0c <_cleanup_r>:
 8008f0c:	4901      	ldr	r1, [pc, #4]	; (8008f14 <_cleanup_r+0x8>)
 8008f0e:	f000 b8a7 	b.w	8009060 <_fwalk_reent>
 8008f12:	bf00      	nop
 8008f14:	08008eb9 	.word	0x08008eb9

08008f18 <std.isra.0>:
 8008f18:	2300      	movs	r3, #0
 8008f1a:	b510      	push	{r4, lr}
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	6003      	str	r3, [r0, #0]
 8008f20:	6043      	str	r3, [r0, #4]
 8008f22:	6083      	str	r3, [r0, #8]
 8008f24:	8181      	strh	r1, [r0, #12]
 8008f26:	6643      	str	r3, [r0, #100]	; 0x64
 8008f28:	81c2      	strh	r2, [r0, #14]
 8008f2a:	6103      	str	r3, [r0, #16]
 8008f2c:	6143      	str	r3, [r0, #20]
 8008f2e:	6183      	str	r3, [r0, #24]
 8008f30:	4619      	mov	r1, r3
 8008f32:	305c      	adds	r0, #92	; 0x5c
 8008f34:	2208      	movs	r2, #8
 8008f36:	f7fe fae6 	bl	8007506 <memset>
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <std.isra.0+0x38>)
 8008f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <std.isra.0+0x3c>)
 8008f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f42:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <std.isra.0+0x40>)
 8008f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <std.isra.0+0x44>)
 8008f48:	6224      	str	r4, [r4, #32]
 8008f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	bf00      	nop
 8008f50:	08009d95 	.word	0x08009d95
 8008f54:	08009db7 	.word	0x08009db7
 8008f58:	08009def 	.word	0x08009def
 8008f5c:	08009e13 	.word	0x08009e13

08008f60 <__sfmoreglue>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	2368      	movs	r3, #104	; 0x68
 8008f64:	1e4d      	subs	r5, r1, #1
 8008f66:	435d      	muls	r5, r3
 8008f68:	460e      	mov	r6, r1
 8008f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f6e:	f000 fc2f 	bl	80097d0 <_malloc_r>
 8008f72:	4604      	mov	r4, r0
 8008f74:	b140      	cbz	r0, 8008f88 <__sfmoreglue+0x28>
 8008f76:	2100      	movs	r1, #0
 8008f78:	e880 0042 	stmia.w	r0, {r1, r6}
 8008f7c:	300c      	adds	r0, #12
 8008f7e:	60a0      	str	r0, [r4, #8]
 8008f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f84:	f7fe fabf 	bl	8007506 <memset>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}

08008f8c <__sinit>:
 8008f8c:	6983      	ldr	r3, [r0, #24]
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	bb33      	cbnz	r3, 8008fe2 <__sinit+0x56>
 8008f94:	6483      	str	r3, [r0, #72]	; 0x48
 8008f96:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008f98:	6503      	str	r3, [r0, #80]	; 0x50
 8008f9a:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <__sinit+0x58>)
 8008f9c:	4a12      	ldr	r2, [pc, #72]	; (8008fe8 <__sinit+0x5c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6282      	str	r2, [r0, #40]	; 0x28
 8008fa2:	4298      	cmp	r0, r3
 8008fa4:	bf04      	itt	eq
 8008fa6:	2301      	moveq	r3, #1
 8008fa8:	6183      	streq	r3, [r0, #24]
 8008faa:	f000 f81f 	bl	8008fec <__sfp>
 8008fae:	6060      	str	r0, [r4, #4]
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 f81b 	bl	8008fec <__sfp>
 8008fb6:	60a0      	str	r0, [r4, #8]
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 f817 	bl	8008fec <__sfp>
 8008fbe:	2104      	movs	r1, #4
 8008fc0:	60e0      	str	r0, [r4, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	6860      	ldr	r0, [r4, #4]
 8008fc6:	f7ff ffa7 	bl	8008f18 <std.isra.0>
 8008fca:	68a0      	ldr	r0, [r4, #8]
 8008fcc:	2109      	movs	r1, #9
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f7ff ffa2 	bl	8008f18 <std.isra.0>
 8008fd4:	68e0      	ldr	r0, [r4, #12]
 8008fd6:	2112      	movs	r1, #18
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f7ff ff9d 	bl	8008f18 <std.isra.0>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	61a3      	str	r3, [r4, #24]
 8008fe2:	bd10      	pop	{r4, pc}
 8008fe4:	0800f644 	.word	0x0800f644
 8008fe8:	08008f0d 	.word	0x08008f0d

08008fec <__sfp>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	4b1b      	ldr	r3, [pc, #108]	; (800905c <__sfp+0x70>)
 8008ff0:	681e      	ldr	r6, [r3, #0]
 8008ff2:	69b3      	ldr	r3, [r6, #24]
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	b913      	cbnz	r3, 8008ffe <__sfp+0x12>
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff ffc7 	bl	8008f8c <__sinit>
 8008ffe:	3648      	adds	r6, #72	; 0x48
 8009000:	68b4      	ldr	r4, [r6, #8]
 8009002:	6873      	ldr	r3, [r6, #4]
 8009004:	3b01      	subs	r3, #1
 8009006:	d404      	bmi.n	8009012 <__sfp+0x26>
 8009008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800900c:	b175      	cbz	r5, 800902c <__sfp+0x40>
 800900e:	3468      	adds	r4, #104	; 0x68
 8009010:	e7f8      	b.n	8009004 <__sfp+0x18>
 8009012:	6833      	ldr	r3, [r6, #0]
 8009014:	b92b      	cbnz	r3, 8009022 <__sfp+0x36>
 8009016:	4638      	mov	r0, r7
 8009018:	2104      	movs	r1, #4
 800901a:	f7ff ffa1 	bl	8008f60 <__sfmoreglue>
 800901e:	6030      	str	r0, [r6, #0]
 8009020:	b108      	cbz	r0, 8009026 <__sfp+0x3a>
 8009022:	6836      	ldr	r6, [r6, #0]
 8009024:	e7ec      	b.n	8009000 <__sfp+0x14>
 8009026:	230c      	movs	r3, #12
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009030:	81e3      	strh	r3, [r4, #14]
 8009032:	2301      	movs	r3, #1
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	6665      	str	r5, [r4, #100]	; 0x64
 8009038:	6025      	str	r5, [r4, #0]
 800903a:	60a5      	str	r5, [r4, #8]
 800903c:	6065      	str	r5, [r4, #4]
 800903e:	6125      	str	r5, [r4, #16]
 8009040:	6165      	str	r5, [r4, #20]
 8009042:	61a5      	str	r5, [r4, #24]
 8009044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009048:	4629      	mov	r1, r5
 800904a:	2208      	movs	r2, #8
 800904c:	f7fe fa5b 	bl	8007506 <memset>
 8009050:	6365      	str	r5, [r4, #52]	; 0x34
 8009052:	63a5      	str	r5, [r4, #56]	; 0x38
 8009054:	64a5      	str	r5, [r4, #72]	; 0x48
 8009056:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009058:	4620      	mov	r0, r4
 800905a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800905c:	0800f644 	.word	0x0800f644

08009060 <_fwalk_reent>:
 8009060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009064:	4680      	mov	r8, r0
 8009066:	4689      	mov	r9, r1
 8009068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800906c:	2600      	movs	r6, #0
 800906e:	b194      	cbz	r4, 8009096 <_fwalk_reent+0x36>
 8009070:	68a5      	ldr	r5, [r4, #8]
 8009072:	6867      	ldr	r7, [r4, #4]
 8009074:	3f01      	subs	r7, #1
 8009076:	d40c      	bmi.n	8009092 <_fwalk_reent+0x32>
 8009078:	89ab      	ldrh	r3, [r5, #12]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d907      	bls.n	800908e <_fwalk_reent+0x2e>
 800907e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009082:	3301      	adds	r3, #1
 8009084:	d003      	beq.n	800908e <_fwalk_reent+0x2e>
 8009086:	4640      	mov	r0, r8
 8009088:	4629      	mov	r1, r5
 800908a:	47c8      	blx	r9
 800908c:	4306      	orrs	r6, r0
 800908e:	3568      	adds	r5, #104	; 0x68
 8009090:	e7f0      	b.n	8009074 <_fwalk_reent+0x14>
 8009092:	6824      	ldr	r4, [r4, #0]
 8009094:	e7eb      	b.n	800906e <_fwalk_reent+0xe>
 8009096:	4630      	mov	r0, r6
 8009098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800909c <_localeconv_r>:
 800909c:	4800      	ldr	r0, [pc, #0]	; (80090a0 <_localeconv_r+0x4>)
 800909e:	4770      	bx	lr
 80090a0:	1ffe89cc 	.word	0x1ffe89cc

080090a4 <__smakebuf_r>:
 80090a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a6:	898b      	ldrh	r3, [r1, #12]
 80090a8:	079d      	lsls	r5, r3, #30
 80090aa:	b091      	sub	sp, #68	; 0x44
 80090ac:	4606      	mov	r6, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	d426      	bmi.n	8009100 <__smakebuf_r+0x5c>
 80090b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b6:	2900      	cmp	r1, #0
 80090b8:	da09      	bge.n	80090ce <__smakebuf_r+0x2a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090c0:	f04f 0500 	mov.w	r5, #0
 80090c4:	bf14      	ite	ne
 80090c6:	2740      	movne	r7, #64	; 0x40
 80090c8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80090cc:	e00d      	b.n	80090ea <__smakebuf_r+0x46>
 80090ce:	aa01      	add	r2, sp, #4
 80090d0:	f000 fec6 	bl	8009e60 <_fstat_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	dbf0      	blt.n	80090ba <__smakebuf_r+0x16>
 80090d8:	9d02      	ldr	r5, [sp, #8]
 80090da:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80090de:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 80090e2:	424d      	negs	r5, r1
 80090e4:	414d      	adcs	r5, r1
 80090e6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80090ea:	4630      	mov	r0, r6
 80090ec:	4639      	mov	r1, r7
 80090ee:	f000 fb6f 	bl	80097d0 <_malloc_r>
 80090f2:	b960      	cbnz	r0, 800910e <__smakebuf_r+0x6a>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	059a      	lsls	r2, r3, #22
 80090f8:	d41d      	bmi.n	8009136 <__smakebuf_r+0x92>
 80090fa:	f043 0302 	orr.w	r3, r3, #2
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	2301      	movs	r3, #1
 800910a:	6163      	str	r3, [r4, #20]
 800910c:	e013      	b.n	8009136 <__smakebuf_r+0x92>
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <__smakebuf_r+0x98>)
 8009110:	62b3      	str	r3, [r6, #40]	; 0x28
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	6020      	str	r0, [r4, #0]
 8009116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	6120      	str	r0, [r4, #16]
 800911e:	6167      	str	r7, [r4, #20]
 8009120:	b14d      	cbz	r5, 8009136 <__smakebuf_r+0x92>
 8009122:	4630      	mov	r0, r6
 8009124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009128:	f000 feac 	bl	8009e84 <_isatty_r>
 800912c:	b118      	cbz	r0, 8009136 <__smakebuf_r+0x92>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	b011      	add	sp, #68	; 0x44
 8009138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913a:	bf00      	nop
 800913c:	08008f0d 	.word	0x08008f0d

08009140 <malloc>:
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <malloc+0xc>)
 8009142:	4601      	mov	r1, r0
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	f000 bb43 	b.w	80097d0 <_malloc_r>
 800914a:	bf00      	nop
 800914c:	1ffe89c8 	.word	0x1ffe89c8

08009150 <memchr>:
 8009150:	b510      	push	{r4, lr}
 8009152:	b2c9      	uxtb	r1, r1
 8009154:	4402      	add	r2, r0
 8009156:	4290      	cmp	r0, r2
 8009158:	4603      	mov	r3, r0
 800915a:	d006      	beq.n	800916a <memchr+0x1a>
 800915c:	781c      	ldrb	r4, [r3, #0]
 800915e:	428c      	cmp	r4, r1
 8009160:	f100 0001 	add.w	r0, r0, #1
 8009164:	d1f7      	bne.n	8009156 <memchr+0x6>
 8009166:	4618      	mov	r0, r3
 8009168:	bd10      	pop	{r4, pc}
 800916a:	2000      	movs	r0, #0
 800916c:	bd10      	pop	{r4, pc}

0800916e <_Balloc>:
 800916e:	b570      	push	{r4, r5, r6, lr}
 8009170:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009172:	4604      	mov	r4, r0
 8009174:	460e      	mov	r6, r1
 8009176:	b93d      	cbnz	r5, 8009188 <_Balloc+0x1a>
 8009178:	2010      	movs	r0, #16
 800917a:	f7ff ffe1 	bl	8009140 <malloc>
 800917e:	6260      	str	r0, [r4, #36]	; 0x24
 8009180:	6045      	str	r5, [r0, #4]
 8009182:	6085      	str	r5, [r0, #8]
 8009184:	6005      	str	r5, [r0, #0]
 8009186:	60c5      	str	r5, [r0, #12]
 8009188:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800918a:	68eb      	ldr	r3, [r5, #12]
 800918c:	b143      	cbz	r3, 80091a0 <_Balloc+0x32>
 800918e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009196:	b178      	cbz	r0, 80091b8 <_Balloc+0x4a>
 8009198:	6802      	ldr	r2, [r0, #0]
 800919a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800919e:	e017      	b.n	80091d0 <_Balloc+0x62>
 80091a0:	4620      	mov	r0, r4
 80091a2:	2104      	movs	r1, #4
 80091a4:	2221      	movs	r2, #33	; 0x21
 80091a6:	f000 fac1 	bl	800972c <_calloc_r>
 80091aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ac:	60e8      	str	r0, [r5, #12]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1ec      	bne.n	800918e <_Balloc+0x20>
 80091b4:	2000      	movs	r0, #0
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	2101      	movs	r1, #1
 80091ba:	fa01 f506 	lsl.w	r5, r1, r6
 80091be:	1d6a      	adds	r2, r5, #5
 80091c0:	4620      	mov	r0, r4
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	f000 fab2 	bl	800972c <_calloc_r>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d0f3      	beq.n	80091b4 <_Balloc+0x46>
 80091cc:	6046      	str	r6, [r0, #4]
 80091ce:	6085      	str	r5, [r0, #8]
 80091d0:	2300      	movs	r3, #0
 80091d2:	6103      	str	r3, [r0, #16]
 80091d4:	60c3      	str	r3, [r0, #12]
 80091d6:	bd70      	pop	{r4, r5, r6, pc}

080091d8 <_Bfree>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80091dc:	4606      	mov	r6, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	b93c      	cbnz	r4, 80091f2 <_Bfree+0x1a>
 80091e2:	2010      	movs	r0, #16
 80091e4:	f7ff ffac 	bl	8009140 <malloc>
 80091e8:	6270      	str	r0, [r6, #36]	; 0x24
 80091ea:	6044      	str	r4, [r0, #4]
 80091ec:	6084      	str	r4, [r0, #8]
 80091ee:	6004      	str	r4, [r0, #0]
 80091f0:	60c4      	str	r4, [r0, #12]
 80091f2:	b13d      	cbz	r5, 8009204 <_Bfree+0x2c>
 80091f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091f6:	686a      	ldr	r2, [r5, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091fe:	6029      	str	r1, [r5, #0]
 8009200:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009204:	bd70      	pop	{r4, r5, r6, pc}

08009206 <__multadd>:
 8009206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800920a:	690f      	ldr	r7, [r1, #16]
 800920c:	4698      	mov	r8, r3
 800920e:	4606      	mov	r6, r0
 8009210:	460c      	mov	r4, r1
 8009212:	f101 0e14 	add.w	lr, r1, #20
 8009216:	2300      	movs	r3, #0
 8009218:	f8de 0000 	ldr.w	r0, [lr]
 800921c:	b285      	uxth	r5, r0
 800921e:	0c01      	lsrs	r1, r0, #16
 8009220:	fb02 8505 	mla	r5, r2, r5, r8
 8009224:	4351      	muls	r1, r2
 8009226:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800922a:	3301      	adds	r3, #1
 800922c:	b2ad      	uxth	r5, r5
 800922e:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8009232:	42bb      	cmp	r3, r7
 8009234:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8009238:	f84e 1b04 	str.w	r1, [lr], #4
 800923c:	dbec      	blt.n	8009218 <__multadd+0x12>
 800923e:	f1b8 0f00 	cmp.w	r8, #0
 8009242:	d01b      	beq.n	800927c <__multadd+0x76>
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	429f      	cmp	r7, r3
 8009248:	db12      	blt.n	8009270 <__multadd+0x6a>
 800924a:	6861      	ldr	r1, [r4, #4]
 800924c:	4630      	mov	r0, r6
 800924e:	3101      	adds	r1, #1
 8009250:	f7ff ff8d 	bl	800916e <_Balloc>
 8009254:	6922      	ldr	r2, [r4, #16]
 8009256:	3202      	adds	r2, #2
 8009258:	f104 010c 	add.w	r1, r4, #12
 800925c:	4605      	mov	r5, r0
 800925e:	0092      	lsls	r2, r2, #2
 8009260:	300c      	adds	r0, #12
 8009262:	f7fe f945 	bl	80074f0 <memcpy>
 8009266:	4621      	mov	r1, r4
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff ffb5 	bl	80091d8 <_Bfree>
 800926e:	462c      	mov	r4, r5
 8009270:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8009274:	3701      	adds	r7, #1
 8009276:	f8c3 8014 	str.w	r8, [r3, #20]
 800927a:	6127      	str	r7, [r4, #16]
 800927c:	4620      	mov	r0, r4
 800927e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009282 <__hi0bits>:
 8009282:	0c03      	lsrs	r3, r0, #16
 8009284:	041b      	lsls	r3, r3, #16
 8009286:	b913      	cbnz	r3, 800928e <__hi0bits+0xc>
 8009288:	0400      	lsls	r0, r0, #16
 800928a:	2310      	movs	r3, #16
 800928c:	e000      	b.n	8009290 <__hi0bits+0xe>
 800928e:	2300      	movs	r3, #0
 8009290:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009294:	bf04      	itt	eq
 8009296:	0200      	lsleq	r0, r0, #8
 8009298:	3308      	addeq	r3, #8
 800929a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800929e:	bf04      	itt	eq
 80092a0:	0100      	lsleq	r0, r0, #4
 80092a2:	3304      	addeq	r3, #4
 80092a4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092a8:	bf04      	itt	eq
 80092aa:	0080      	lsleq	r0, r0, #2
 80092ac:	3302      	addeq	r3, #2
 80092ae:	2800      	cmp	r0, #0
 80092b0:	db03      	blt.n	80092ba <__hi0bits+0x38>
 80092b2:	0042      	lsls	r2, r0, #1
 80092b4:	d503      	bpl.n	80092be <__hi0bits+0x3c>
 80092b6:	1c58      	adds	r0, r3, #1
 80092b8:	4770      	bx	lr
 80092ba:	4618      	mov	r0, r3
 80092bc:	4770      	bx	lr
 80092be:	2020      	movs	r0, #32
 80092c0:	4770      	bx	lr

080092c2 <__lo0bits>:
 80092c2:	6803      	ldr	r3, [r0, #0]
 80092c4:	f013 0207 	ands.w	r2, r3, #7
 80092c8:	d00b      	beq.n	80092e2 <__lo0bits+0x20>
 80092ca:	07d9      	lsls	r1, r3, #31
 80092cc:	d422      	bmi.n	8009314 <__lo0bits+0x52>
 80092ce:	079a      	lsls	r2, r3, #30
 80092d0:	bf4b      	itete	mi
 80092d2:	085b      	lsrmi	r3, r3, #1
 80092d4:	089b      	lsrpl	r3, r3, #2
 80092d6:	6003      	strmi	r3, [r0, #0]
 80092d8:	6003      	strpl	r3, [r0, #0]
 80092da:	bf4c      	ite	mi
 80092dc:	2001      	movmi	r0, #1
 80092de:	2002      	movpl	r0, #2
 80092e0:	4770      	bx	lr
 80092e2:	b299      	uxth	r1, r3
 80092e4:	b909      	cbnz	r1, 80092ea <__lo0bits+0x28>
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	2210      	movs	r2, #16
 80092ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80092ee:	bf04      	itt	eq
 80092f0:	0a1b      	lsreq	r3, r3, #8
 80092f2:	3208      	addeq	r2, #8
 80092f4:	0719      	lsls	r1, r3, #28
 80092f6:	bf04      	itt	eq
 80092f8:	091b      	lsreq	r3, r3, #4
 80092fa:	3204      	addeq	r2, #4
 80092fc:	0799      	lsls	r1, r3, #30
 80092fe:	bf04      	itt	eq
 8009300:	089b      	lsreq	r3, r3, #2
 8009302:	3202      	addeq	r2, #2
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	d402      	bmi.n	800930e <__lo0bits+0x4c>
 8009308:	085b      	lsrs	r3, r3, #1
 800930a:	d005      	beq.n	8009318 <__lo0bits+0x56>
 800930c:	3201      	adds	r2, #1
 800930e:	6003      	str	r3, [r0, #0]
 8009310:	4610      	mov	r0, r2
 8009312:	4770      	bx	lr
 8009314:	2000      	movs	r0, #0
 8009316:	4770      	bx	lr
 8009318:	2020      	movs	r0, #32
 800931a:	4770      	bx	lr

0800931c <__i2b>:
 800931c:	b510      	push	{r4, lr}
 800931e:	460c      	mov	r4, r1
 8009320:	2101      	movs	r1, #1
 8009322:	f7ff ff24 	bl	800916e <_Balloc>
 8009326:	2201      	movs	r2, #1
 8009328:	6144      	str	r4, [r0, #20]
 800932a:	6102      	str	r2, [r0, #16]
 800932c:	bd10      	pop	{r4, pc}

0800932e <__multiply>:
 800932e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009332:	4614      	mov	r4, r2
 8009334:	690a      	ldr	r2, [r1, #16]
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	429a      	cmp	r2, r3
 800933a:	bfb8      	it	lt
 800933c:	460b      	movlt	r3, r1
 800933e:	4688      	mov	r8, r1
 8009340:	bfbc      	itt	lt
 8009342:	46a0      	movlt	r8, r4
 8009344:	461c      	movlt	r4, r3
 8009346:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800934a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800934e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009352:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009356:	eb07 0609 	add.w	r6, r7, r9
 800935a:	429e      	cmp	r6, r3
 800935c:	bfc8      	it	gt
 800935e:	3101      	addgt	r1, #1
 8009360:	f7ff ff05 	bl	800916e <_Balloc>
 8009364:	f100 0514 	add.w	r5, r0, #20
 8009368:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800936c:	462b      	mov	r3, r5
 800936e:	4563      	cmp	r3, ip
 8009370:	d203      	bcs.n	800937a <__multiply+0x4c>
 8009372:	2200      	movs	r2, #0
 8009374:	f843 2b04 	str.w	r2, [r3], #4
 8009378:	e7f9      	b.n	800936e <__multiply+0x40>
 800937a:	f104 0214 	add.w	r2, r4, #20
 800937e:	f108 0114 	add.w	r1, r8, #20
 8009382:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009386:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	9b00      	ldr	r3, [sp, #0]
 800938e:	9201      	str	r2, [sp, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d257      	bcs.n	8009444 <__multiply+0x116>
 8009394:	f8b2 b000 	ldrh.w	fp, [r2]
 8009398:	f1bb 0f00 	cmp.w	fp, #0
 800939c:	d023      	beq.n	80093e6 <__multiply+0xb8>
 800939e:	4689      	mov	r9, r1
 80093a0:	46ae      	mov	lr, r5
 80093a2:	f04f 0800 	mov.w	r8, #0
 80093a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80093aa:	f8be a000 	ldrh.w	sl, [lr]
 80093ae:	b2a3      	uxth	r3, r4
 80093b0:	fb0b a303 	mla	r3, fp, r3, sl
 80093b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80093b8:	f8de 4000 	ldr.w	r4, [lr]
 80093bc:	4443      	add	r3, r8
 80093be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80093c2:	fb0b 840a 	mla	r4, fp, sl, r8
 80093c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80093ca:	46f2      	mov	sl, lr
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80093d2:	454f      	cmp	r7, r9
 80093d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80093d8:	f84a 3b04 	str.w	r3, [sl], #4
 80093dc:	d901      	bls.n	80093e2 <__multiply+0xb4>
 80093de:	46d6      	mov	lr, sl
 80093e0:	e7e1      	b.n	80093a6 <__multiply+0x78>
 80093e2:	f8ce 8004 	str.w	r8, [lr, #4]
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80093ec:	3204      	adds	r2, #4
 80093ee:	f1ba 0f00 	cmp.w	sl, #0
 80093f2:	d021      	beq.n	8009438 <__multiply+0x10a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	462c      	mov	r4, r5
 80093f8:	4689      	mov	r9, r1
 80093fa:	f04f 0800 	mov.w	r8, #0
 80093fe:	f8b9 e000 	ldrh.w	lr, [r9]
 8009402:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8009406:	fb0a be0e 	mla	lr, sl, lr, fp
 800940a:	44f0      	add	r8, lr
 800940c:	46a3      	mov	fp, r4
 800940e:	b29b      	uxth	r3, r3
 8009410:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8009414:	f84b 3b04 	str.w	r3, [fp], #4
 8009418:	f859 3b04 	ldr.w	r3, [r9], #4
 800941c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8009420:	0c1b      	lsrs	r3, r3, #16
 8009422:	fb0a e303 	mla	r3, sl, r3, lr
 8009426:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800942a:	45b9      	cmp	r9, r7
 800942c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8009430:	d201      	bcs.n	8009436 <__multiply+0x108>
 8009432:	465c      	mov	r4, fp
 8009434:	e7e3      	b.n	80093fe <__multiply+0xd0>
 8009436:	6063      	str	r3, [r4, #4]
 8009438:	3504      	adds	r5, #4
 800943a:	e7a7      	b.n	800938c <__multiply+0x5e>
 800943c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8009440:	b913      	cbnz	r3, 8009448 <__multiply+0x11a>
 8009442:	3e01      	subs	r6, #1
 8009444:	2e00      	cmp	r6, #0
 8009446:	dcf9      	bgt.n	800943c <__multiply+0x10e>
 8009448:	6106      	str	r6, [r0, #16]
 800944a:	b003      	add	sp, #12
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009450 <__pow5mult>:
 8009450:	f012 0303 	ands.w	r3, r2, #3
 8009454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009458:	4606      	mov	r6, r0
 800945a:	460f      	mov	r7, r1
 800945c:	4615      	mov	r5, r2
 800945e:	d007      	beq.n	8009470 <__pow5mult+0x20>
 8009460:	3b01      	subs	r3, #1
 8009462:	4a21      	ldr	r2, [pc, #132]	; (80094e8 <__pow5mult+0x98>)
 8009464:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009468:	2300      	movs	r3, #0
 800946a:	f7ff fecc 	bl	8009206 <__multadd>
 800946e:	4607      	mov	r7, r0
 8009470:	10ad      	asrs	r5, r5, #2
 8009472:	d035      	beq.n	80094e0 <__pow5mult+0x90>
 8009474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009476:	b93c      	cbnz	r4, 8009488 <__pow5mult+0x38>
 8009478:	2010      	movs	r0, #16
 800947a:	f7ff fe61 	bl	8009140 <malloc>
 800947e:	6270      	str	r0, [r6, #36]	; 0x24
 8009480:	6044      	str	r4, [r0, #4]
 8009482:	6084      	str	r4, [r0, #8]
 8009484:	6004      	str	r4, [r0, #0]
 8009486:	60c4      	str	r4, [r0, #12]
 8009488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800948c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009490:	b97c      	cbnz	r4, 80094b2 <__pow5mult+0x62>
 8009492:	4630      	mov	r0, r6
 8009494:	f240 2171 	movw	r1, #625	; 0x271
 8009498:	f7ff ff40 	bl	800931c <__i2b>
 800949c:	2300      	movs	r3, #0
 800949e:	f8c8 0008 	str.w	r0, [r8, #8]
 80094a2:	4604      	mov	r4, r0
 80094a4:	6003      	str	r3, [r0, #0]
 80094a6:	e004      	b.n	80094b2 <__pow5mult+0x62>
 80094a8:	106d      	asrs	r5, r5, #1
 80094aa:	d019      	beq.n	80094e0 <__pow5mult+0x90>
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	b170      	cbz	r0, 80094ce <__pow5mult+0x7e>
 80094b0:	4604      	mov	r4, r0
 80094b2:	07eb      	lsls	r3, r5, #31
 80094b4:	d5f8      	bpl.n	80094a8 <__pow5mult+0x58>
 80094b6:	4639      	mov	r1, r7
 80094b8:	4622      	mov	r2, r4
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ff37 	bl	800932e <__multiply>
 80094c0:	4639      	mov	r1, r7
 80094c2:	4680      	mov	r8, r0
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7ff fe87 	bl	80091d8 <_Bfree>
 80094ca:	4647      	mov	r7, r8
 80094cc:	e7ec      	b.n	80094a8 <__pow5mult+0x58>
 80094ce:	4630      	mov	r0, r6
 80094d0:	4621      	mov	r1, r4
 80094d2:	4622      	mov	r2, r4
 80094d4:	f7ff ff2b 	bl	800932e <__multiply>
 80094d8:	2300      	movs	r3, #0
 80094da:	6020      	str	r0, [r4, #0]
 80094dc:	6003      	str	r3, [r0, #0]
 80094de:	e7e7      	b.n	80094b0 <__pow5mult+0x60>
 80094e0:	4638      	mov	r0, r7
 80094e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e6:	bf00      	nop
 80094e8:	0800f7e8 	.word	0x0800f7e8

080094ec <__lshift>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	6849      	ldr	r1, [r1, #4]
 80094fa:	eb0a 0903 	add.w	r9, sl, r3
 80094fe:	68a3      	ldr	r3, [r4, #8]
 8009500:	4607      	mov	r7, r0
 8009502:	4616      	mov	r6, r2
 8009504:	f109 0501 	add.w	r5, r9, #1
 8009508:	429d      	cmp	r5, r3
 800950a:	dd02      	ble.n	8009512 <__lshift+0x26>
 800950c:	3101      	adds	r1, #1
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	e7fa      	b.n	8009508 <__lshift+0x1c>
 8009512:	4638      	mov	r0, r7
 8009514:	f7ff fe2b 	bl	800916e <_Balloc>
 8009518:	2300      	movs	r3, #0
 800951a:	4680      	mov	r8, r0
 800951c:	f100 0114 	add.w	r1, r0, #20
 8009520:	4553      	cmp	r3, sl
 8009522:	da04      	bge.n	800952e <__lshift+0x42>
 8009524:	2200      	movs	r2, #0
 8009526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800952a:	3301      	adds	r3, #1
 800952c:	e7f8      	b.n	8009520 <__lshift+0x34>
 800952e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8009532:	6920      	ldr	r0, [r4, #16]
 8009534:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009538:	f016 021f 	ands.w	r2, r6, #31
 800953c:	f104 0114 	add.w	r1, r4, #20
 8009540:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009544:	d014      	beq.n	8009570 <__lshift+0x84>
 8009546:	f1c2 0c20 	rsb	ip, r2, #32
 800954a:	2000      	movs	r0, #0
 800954c:	680e      	ldr	r6, [r1, #0]
 800954e:	4096      	lsls	r6, r2
 8009550:	4330      	orrs	r0, r6
 8009552:	469a      	mov	sl, r3
 8009554:	f843 0b04 	str.w	r0, [r3], #4
 8009558:	f851 0b04 	ldr.w	r0, [r1], #4
 800955c:	4571      	cmp	r1, lr
 800955e:	fa20 f00c 	lsr.w	r0, r0, ip
 8009562:	d3f3      	bcc.n	800954c <__lshift+0x60>
 8009564:	f8ca 0004 	str.w	r0, [sl, #4]
 8009568:	b148      	cbz	r0, 800957e <__lshift+0x92>
 800956a:	f109 0502 	add.w	r5, r9, #2
 800956e:	e006      	b.n	800957e <__lshift+0x92>
 8009570:	3b04      	subs	r3, #4
 8009572:	f851 2b04 	ldr.w	r2, [r1], #4
 8009576:	f843 2f04 	str.w	r2, [r3, #4]!
 800957a:	4571      	cmp	r1, lr
 800957c:	d3f9      	bcc.n	8009572 <__lshift+0x86>
 800957e:	3d01      	subs	r5, #1
 8009580:	4638      	mov	r0, r7
 8009582:	f8c8 5010 	str.w	r5, [r8, #16]
 8009586:	4621      	mov	r1, r4
 8009588:	f7ff fe26 	bl	80091d8 <_Bfree>
 800958c:	4640      	mov	r0, r8
 800958e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009592 <__mcmp>:
 8009592:	6903      	ldr	r3, [r0, #16]
 8009594:	690a      	ldr	r2, [r1, #16]
 8009596:	1a9b      	subs	r3, r3, r2
 8009598:	b510      	push	{r4, lr}
 800959a:	d111      	bne.n	80095c0 <__mcmp+0x2e>
 800959c:	0092      	lsls	r2, r2, #2
 800959e:	3014      	adds	r0, #20
 80095a0:	3114      	adds	r1, #20
 80095a2:	1883      	adds	r3, r0, r2
 80095a4:	440a      	add	r2, r1
 80095a6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80095aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80095ae:	428c      	cmp	r4, r1
 80095b0:	d002      	beq.n	80095b8 <__mcmp+0x26>
 80095b2:	d307      	bcc.n	80095c4 <__mcmp+0x32>
 80095b4:	2001      	movs	r0, #1
 80095b6:	bd10      	pop	{r4, pc}
 80095b8:	4283      	cmp	r3, r0
 80095ba:	d8f4      	bhi.n	80095a6 <__mcmp+0x14>
 80095bc:	2000      	movs	r0, #0
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	4618      	mov	r0, r3
 80095c2:	bd10      	pop	{r4, pc}
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	bd10      	pop	{r4, pc}

080095ca <__mdiff>:
 80095ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ce:	4607      	mov	r7, r0
 80095d0:	460c      	mov	r4, r1
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	4615      	mov	r5, r2
 80095d8:	f7ff ffdb 	bl	8009592 <__mcmp>
 80095dc:	1e06      	subs	r6, r0, #0
 80095de:	d108      	bne.n	80095f2 <__mdiff+0x28>
 80095e0:	4638      	mov	r0, r7
 80095e2:	4631      	mov	r1, r6
 80095e4:	f7ff fdc3 	bl	800916e <_Balloc>
 80095e8:	2301      	movs	r3, #1
 80095ea:	6103      	str	r3, [r0, #16]
 80095ec:	6146      	str	r6, [r0, #20]
 80095ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f2:	bfbc      	itt	lt
 80095f4:	4623      	movlt	r3, r4
 80095f6:	462c      	movlt	r4, r5
 80095f8:	4638      	mov	r0, r7
 80095fa:	6861      	ldr	r1, [r4, #4]
 80095fc:	bfba      	itte	lt
 80095fe:	461d      	movlt	r5, r3
 8009600:	2601      	movlt	r6, #1
 8009602:	2600      	movge	r6, #0
 8009604:	f7ff fdb3 	bl	800916e <_Balloc>
 8009608:	692b      	ldr	r3, [r5, #16]
 800960a:	60c6      	str	r6, [r0, #12]
 800960c:	6926      	ldr	r6, [r4, #16]
 800960e:	f105 0914 	add.w	r9, r5, #20
 8009612:	3414      	adds	r4, #20
 8009614:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8009618:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800961c:	f100 0514 	add.w	r5, r0, #20
 8009620:	f04f 0c00 	mov.w	ip, #0
 8009624:	f854 3b04 	ldr.w	r3, [r4], #4
 8009628:	f859 2b04 	ldr.w	r2, [r9], #4
 800962c:	fa1c f183 	uxtah	r1, ip, r3
 8009630:	fa1f fe82 	uxth.w	lr, r2
 8009634:	0c12      	lsrs	r2, r2, #16
 8009636:	ebce 0101 	rsb	r1, lr, r1
 800963a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800963e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009642:	b289      	uxth	r1, r1
 8009644:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009648:	45c8      	cmp	r8, r9
 800964a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800964e:	46a6      	mov	lr, r4
 8009650:	f845 3b04 	str.w	r3, [r5], #4
 8009654:	d8e6      	bhi.n	8009624 <__mdiff+0x5a>
 8009656:	45be      	cmp	lr, r7
 8009658:	d20e      	bcs.n	8009678 <__mdiff+0xae>
 800965a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800965e:	fa1c f482 	uxtah	r4, ip, r2
 8009662:	0c12      	lsrs	r2, r2, #16
 8009664:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8009668:	b2a4      	uxth	r4, r4
 800966a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800966e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8009672:	f845 2b04 	str.w	r2, [r5], #4
 8009676:	e7ee      	b.n	8009656 <__mdiff+0x8c>
 8009678:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800967c:	b90b      	cbnz	r3, 8009682 <__mdiff+0xb8>
 800967e:	3e01      	subs	r6, #1
 8009680:	e7fa      	b.n	8009678 <__mdiff+0xae>
 8009682:	6106      	str	r6, [r0, #16]
 8009684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009688 <__d2b>:
 8009688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800968c:	2101      	movs	r1, #1
 800968e:	461d      	mov	r5, r3
 8009690:	9f08      	ldr	r7, [sp, #32]
 8009692:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009694:	4614      	mov	r4, r2
 8009696:	f7ff fd6a 	bl	800916e <_Balloc>
 800969a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800969e:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80096a2:	4680      	mov	r8, r0
 80096a4:	b10d      	cbz	r5, 80096aa <__d2b+0x22>
 80096a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	b1ec      	cbz	r4, 80096ea <__d2b+0x62>
 80096ae:	a802      	add	r0, sp, #8
 80096b0:	f840 4d08 	str.w	r4, [r0, #-8]!
 80096b4:	f7ff fe05 	bl	80092c2 <__lo0bits>
 80096b8:	9b00      	ldr	r3, [sp, #0]
 80096ba:	b150      	cbz	r0, 80096d2 <__d2b+0x4a>
 80096bc:	9a01      	ldr	r2, [sp, #4]
 80096be:	f1c0 0120 	rsb	r1, r0, #32
 80096c2:	fa02 f101 	lsl.w	r1, r2, r1
 80096c6:	430b      	orrs	r3, r1
 80096c8:	40c2      	lsrs	r2, r0
 80096ca:	f8c8 3014 	str.w	r3, [r8, #20]
 80096ce:	9201      	str	r2, [sp, #4]
 80096d0:	e001      	b.n	80096d6 <__d2b+0x4e>
 80096d2:	f8c8 3014 	str.w	r3, [r8, #20]
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	f8c8 3018 	str.w	r3, [r8, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bf14      	ite	ne
 80096e0:	2402      	movne	r4, #2
 80096e2:	2401      	moveq	r4, #1
 80096e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80096e8:	e009      	b.n	80096fe <__d2b+0x76>
 80096ea:	a801      	add	r0, sp, #4
 80096ec:	f7ff fde9 	bl	80092c2 <__lo0bits>
 80096f0:	2401      	movs	r4, #1
 80096f2:	9b01      	ldr	r3, [sp, #4]
 80096f4:	f8c8 3014 	str.w	r3, [r8, #20]
 80096f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80096fc:	3020      	adds	r0, #32
 80096fe:	b135      	cbz	r5, 800970e <__d2b+0x86>
 8009700:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009704:	4405      	add	r5, r0
 8009706:	603d      	str	r5, [r7, #0]
 8009708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800970c:	e009      	b.n	8009722 <__d2b+0x9a>
 800970e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8009712:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009716:	6038      	str	r0, [r7, #0]
 8009718:	6918      	ldr	r0, [r3, #16]
 800971a:	f7ff fdb2 	bl	8009282 <__hi0bits>
 800971e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8009722:	6030      	str	r0, [r6, #0]
 8009724:	4640      	mov	r0, r8
 8009726:	b002      	add	sp, #8
 8009728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800972c <_calloc_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	fb02 f401 	mul.w	r4, r2, r1
 8009732:	4621      	mov	r1, r4
 8009734:	f000 f84c 	bl	80097d0 <_malloc_r>
 8009738:	4605      	mov	r5, r0
 800973a:	b118      	cbz	r0, 8009744 <_calloc_r+0x18>
 800973c:	2100      	movs	r1, #0
 800973e:	4622      	mov	r2, r4
 8009740:	f7fd fee1 	bl	8007506 <memset>
 8009744:	4628      	mov	r0, r5
 8009746:	bd38      	pop	{r3, r4, r5, pc}

08009748 <_free_r>:
 8009748:	b530      	push	{r4, r5, lr}
 800974a:	2900      	cmp	r1, #0
 800974c:	d03d      	beq.n	80097ca <_free_r+0x82>
 800974e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8009752:	1f0b      	subs	r3, r1, #4
 8009754:	491d      	ldr	r1, [pc, #116]	; (80097cc <_free_r+0x84>)
 8009756:	2a00      	cmp	r2, #0
 8009758:	bfb8      	it	lt
 800975a:	189b      	addlt	r3, r3, r2
 800975c:	680a      	ldr	r2, [r1, #0]
 800975e:	460c      	mov	r4, r1
 8009760:	b912      	cbnz	r2, 8009768 <_free_r+0x20>
 8009762:	605a      	str	r2, [r3, #4]
 8009764:	600b      	str	r3, [r1, #0]
 8009766:	bd30      	pop	{r4, r5, pc}
 8009768:	4293      	cmp	r3, r2
 800976a:	d20d      	bcs.n	8009788 <_free_r+0x40>
 800976c:	6819      	ldr	r1, [r3, #0]
 800976e:	1858      	adds	r0, r3, r1
 8009770:	4290      	cmp	r0, r2
 8009772:	bf01      	itttt	eq
 8009774:	585a      	ldreq	r2, [r3, r1]
 8009776:	1852      	addeq	r2, r2, r1
 8009778:	601a      	streq	r2, [r3, #0]
 800977a:	6842      	ldreq	r2, [r0, #4]
 800977c:	605a      	str	r2, [r3, #4]
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd30      	pop	{r4, r5, pc}
 8009782:	4299      	cmp	r1, r3
 8009784:	d803      	bhi.n	800978e <_free_r+0x46>
 8009786:	460a      	mov	r2, r1
 8009788:	6851      	ldr	r1, [r2, #4]
 800978a:	2900      	cmp	r1, #0
 800978c:	d1f9      	bne.n	8009782 <_free_r+0x3a>
 800978e:	6814      	ldr	r4, [r2, #0]
 8009790:	1915      	adds	r5, r2, r4
 8009792:	429d      	cmp	r5, r3
 8009794:	d10a      	bne.n	80097ac <_free_r+0x64>
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4423      	add	r3, r4
 800979a:	18d0      	adds	r0, r2, r3
 800979c:	4288      	cmp	r0, r1
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	d113      	bne.n	80097ca <_free_r+0x82>
 80097a2:	6808      	ldr	r0, [r1, #0]
 80097a4:	4403      	add	r3, r0
 80097a6:	6013      	str	r3, [r2, #0]
 80097a8:	684b      	ldr	r3, [r1, #4]
 80097aa:	e00d      	b.n	80097c8 <_free_r+0x80>
 80097ac:	d902      	bls.n	80097b4 <_free_r+0x6c>
 80097ae:	230c      	movs	r3, #12
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	bd30      	pop	{r4, r5, pc}
 80097b4:	681c      	ldr	r4, [r3, #0]
 80097b6:	1918      	adds	r0, r3, r4
 80097b8:	4288      	cmp	r0, r1
 80097ba:	bf04      	itt	eq
 80097bc:	6808      	ldreq	r0, [r1, #0]
 80097be:	6849      	ldreq	r1, [r1, #4]
 80097c0:	6059      	str	r1, [r3, #4]
 80097c2:	bf04      	itt	eq
 80097c4:	1900      	addeq	r0, r0, r4
 80097c6:	6018      	streq	r0, [r3, #0]
 80097c8:	6053      	str	r3, [r2, #4]
 80097ca:	bd30      	pop	{r4, r5, pc}
 80097cc:	1ffe8dc8 	.word	0x1ffe8dc8

080097d0 <_malloc_r>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	1ccc      	adds	r4, r1, #3
 80097d4:	f024 0403 	bic.w	r4, r4, #3
 80097d8:	3408      	adds	r4, #8
 80097da:	2c0c      	cmp	r4, #12
 80097dc:	bf38      	it	cc
 80097de:	240c      	movcc	r4, #12
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	4606      	mov	r6, r0
 80097e4:	da03      	bge.n	80097ee <_malloc_r+0x1e>
 80097e6:	230c      	movs	r3, #12
 80097e8:	6033      	str	r3, [r6, #0]
 80097ea:	2000      	movs	r0, #0
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
 80097ee:	428c      	cmp	r4, r1
 80097f0:	d3f9      	bcc.n	80097e6 <_malloc_r+0x16>
 80097f2:	4a20      	ldr	r2, [pc, #128]	; (8009874 <_malloc_r+0xa4>)
 80097f4:	6813      	ldr	r3, [r2, #0]
 80097f6:	4610      	mov	r0, r2
 80097f8:	4619      	mov	r1, r3
 80097fa:	b1a1      	cbz	r1, 8009826 <_malloc_r+0x56>
 80097fc:	680a      	ldr	r2, [r1, #0]
 80097fe:	1b12      	subs	r2, r2, r4
 8009800:	d40e      	bmi.n	8009820 <_malloc_r+0x50>
 8009802:	2a0b      	cmp	r2, #11
 8009804:	d903      	bls.n	800980e <_malloc_r+0x3e>
 8009806:	600a      	str	r2, [r1, #0]
 8009808:	188b      	adds	r3, r1, r2
 800980a:	508c      	str	r4, [r1, r2]
 800980c:	e01f      	b.n	800984e <_malloc_r+0x7e>
 800980e:	428b      	cmp	r3, r1
 8009810:	bf0d      	iteet	eq
 8009812:	685a      	ldreq	r2, [r3, #4]
 8009814:	684a      	ldrne	r2, [r1, #4]
 8009816:	605a      	strne	r2, [r3, #4]
 8009818:	6002      	streq	r2, [r0, #0]
 800981a:	bf18      	it	ne
 800981c:	460b      	movne	r3, r1
 800981e:	e016      	b.n	800984e <_malloc_r+0x7e>
 8009820:	460b      	mov	r3, r1
 8009822:	6849      	ldr	r1, [r1, #4]
 8009824:	e7e9      	b.n	80097fa <_malloc_r+0x2a>
 8009826:	4d14      	ldr	r5, [pc, #80]	; (8009878 <_malloc_r+0xa8>)
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b91b      	cbnz	r3, 8009834 <_malloc_r+0x64>
 800982c:	4630      	mov	r0, r6
 800982e:	f000 faa1 	bl	8009d74 <_sbrk_r>
 8009832:	6028      	str	r0, [r5, #0]
 8009834:	4630      	mov	r0, r6
 8009836:	4621      	mov	r1, r4
 8009838:	f000 fa9c 	bl	8009d74 <_sbrk_r>
 800983c:	1c42      	adds	r2, r0, #1
 800983e:	4603      	mov	r3, r0
 8009840:	d0d1      	beq.n	80097e6 <_malloc_r+0x16>
 8009842:	1cc5      	adds	r5, r0, #3
 8009844:	f025 0503 	bic.w	r5, r5, #3
 8009848:	4285      	cmp	r5, r0
 800984a:	d10a      	bne.n	8009862 <_malloc_r+0x92>
 800984c:	601c      	str	r4, [r3, #0]
 800984e:	f103 000b 	add.w	r0, r3, #11
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	f020 0007 	bic.w	r0, r0, #7
 8009858:	1a82      	subs	r2, r0, r2
 800985a:	d00a      	beq.n	8009872 <_malloc_r+0xa2>
 800985c:	4251      	negs	r1, r2
 800985e:	5099      	str	r1, [r3, r2]
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	4630      	mov	r0, r6
 8009864:	1ae9      	subs	r1, r5, r3
 8009866:	f000 fa85 	bl	8009d74 <_sbrk_r>
 800986a:	3001      	adds	r0, #1
 800986c:	d0bb      	beq.n	80097e6 <_malloc_r+0x16>
 800986e:	462b      	mov	r3, r5
 8009870:	e7ec      	b.n	800984c <_malloc_r+0x7c>
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	1ffe8dc8 	.word	0x1ffe8dc8
 8009878:	1ffe8dc4 	.word	0x1ffe8dc4

0800987c <__ssputs_r>:
 800987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009880:	688e      	ldr	r6, [r1, #8]
 8009882:	42b3      	cmp	r3, r6
 8009884:	4682      	mov	sl, r0
 8009886:	460c      	mov	r4, r1
 8009888:	4690      	mov	r8, r2
 800988a:	4699      	mov	r9, r3
 800988c:	d340      	bcc.n	8009910 <__ssputs_r+0x94>
 800988e:	898a      	ldrh	r2, [r1, #12]
 8009890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009894:	d03a      	beq.n	800990c <__ssputs_r+0x90>
 8009896:	6825      	ldr	r5, [r4, #0]
 8009898:	6909      	ldr	r1, [r1, #16]
 800989a:	1a6f      	subs	r7, r5, r1
 800989c:	6965      	ldr	r5, [r4, #20]
 800989e:	2302      	movs	r3, #2
 80098a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80098a8:	1c7b      	adds	r3, r7, #1
 80098aa:	444b      	add	r3, r9
 80098ac:	429d      	cmp	r5, r3
 80098ae:	bf38      	it	cc
 80098b0:	461d      	movcc	r5, r3
 80098b2:	0553      	lsls	r3, r2, #21
 80098b4:	d50f      	bpl.n	80098d6 <__ssputs_r+0x5a>
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7ff ff8a 	bl	80097d0 <_malloc_r>
 80098bc:	4606      	mov	r6, r0
 80098be:	b198      	cbz	r0, 80098e8 <__ssputs_r+0x6c>
 80098c0:	6921      	ldr	r1, [r4, #16]
 80098c2:	463a      	mov	r2, r7
 80098c4:	f7fd fe14 	bl	80074f0 <memcpy>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	e013      	b.n	80098fe <__ssputs_r+0x82>
 80098d6:	462a      	mov	r2, r5
 80098d8:	f000 fb11 	bl	8009efe <_realloc_r>
 80098dc:	4606      	mov	r6, r0
 80098de:	b970      	cbnz	r0, 80098fe <__ssputs_r+0x82>
 80098e0:	4650      	mov	r0, sl
 80098e2:	6921      	ldr	r1, [r4, #16]
 80098e4:	f7ff ff30 	bl	8009748 <_free_r>
 80098e8:	230c      	movs	r3, #12
 80098ea:	f8ca 3000 	str.w	r3, [sl]
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fe:	6126      	str	r6, [r4, #16]
 8009900:	6165      	str	r5, [r4, #20]
 8009902:	443e      	add	r6, r7
 8009904:	1bed      	subs	r5, r5, r7
 8009906:	6026      	str	r6, [r4, #0]
 8009908:	60a5      	str	r5, [r4, #8]
 800990a:	464e      	mov	r6, r9
 800990c:	45b1      	cmp	r9, r6
 800990e:	d200      	bcs.n	8009912 <__ssputs_r+0x96>
 8009910:	464e      	mov	r6, r9
 8009912:	4632      	mov	r2, r6
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	4641      	mov	r1, r8
 8009918:	f000 fad6 	bl	8009ec8 <memmove>
 800991c:	68a3      	ldr	r3, [r4, #8]
 800991e:	1b9b      	subs	r3, r3, r6
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	441e      	add	r6, r3
 8009926:	6026      	str	r6, [r4, #0]
 8009928:	2000      	movs	r0, #0
 800992a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009930 <_svfiprintf_r>:
 8009930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009934:	b09d      	sub	sp, #116	; 0x74
 8009936:	4606      	mov	r6, r0
 8009938:	9303      	str	r3, [sp, #12]
 800993a:	898b      	ldrh	r3, [r1, #12]
 800993c:	061c      	lsls	r4, r3, #24
 800993e:	460d      	mov	r5, r1
 8009940:	4690      	mov	r8, r2
 8009942:	d50c      	bpl.n	800995e <_svfiprintf_r+0x2e>
 8009944:	690b      	ldr	r3, [r1, #16]
 8009946:	b953      	cbnz	r3, 800995e <_svfiprintf_r+0x2e>
 8009948:	2140      	movs	r1, #64	; 0x40
 800994a:	f7ff ff41 	bl	80097d0 <_malloc_r>
 800994e:	6028      	str	r0, [r5, #0]
 8009950:	6128      	str	r0, [r5, #16]
 8009952:	b910      	cbnz	r0, 800995a <_svfiprintf_r+0x2a>
 8009954:	230c      	movs	r3, #12
 8009956:	6033      	str	r3, [r6, #0]
 8009958:	e0cc      	b.n	8009af4 <_svfiprintf_r+0x1c4>
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	616b      	str	r3, [r5, #20]
 800995e:	2300      	movs	r3, #0
 8009960:	9309      	str	r3, [sp, #36]	; 0x24
 8009962:	2320      	movs	r3, #32
 8009964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009968:	2330      	movs	r3, #48	; 0x30
 800996a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800996e:	4643      	mov	r3, r8
 8009970:	461c      	mov	r4, r3
 8009972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009976:	b91a      	cbnz	r2, 8009980 <_svfiprintf_r+0x50>
 8009978:	ebb4 0908 	subs.w	r9, r4, r8
 800997c:	d00f      	beq.n	800999e <_svfiprintf_r+0x6e>
 800997e:	e002      	b.n	8009986 <_svfiprintf_r+0x56>
 8009980:	2a25      	cmp	r2, #37	; 0x25
 8009982:	d1f5      	bne.n	8009970 <_svfiprintf_r+0x40>
 8009984:	e7f8      	b.n	8009978 <_svfiprintf_r+0x48>
 8009986:	4630      	mov	r0, r6
 8009988:	4629      	mov	r1, r5
 800998a:	4642      	mov	r2, r8
 800998c:	464b      	mov	r3, r9
 800998e:	f7ff ff75 	bl	800987c <__ssputs_r>
 8009992:	3001      	adds	r0, #1
 8009994:	f000 80a9 	beq.w	8009aea <_svfiprintf_r+0x1ba>
 8009998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999a:	444b      	add	r3, r9
 800999c:	9309      	str	r3, [sp, #36]	; 0x24
 800999e:	7823      	ldrb	r3, [r4, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80a2 	beq.w	8009aea <_svfiprintf_r+0x1ba>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	9307      	str	r3, [sp, #28]
 80099b0:	9205      	str	r2, [sp, #20]
 80099b2:	9306      	str	r3, [sp, #24]
 80099b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b8:	931a      	str	r3, [sp, #104]	; 0x68
 80099ba:	f104 0801 	add.w	r8, r4, #1
 80099be:	4644      	mov	r4, r8
 80099c0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8009b0c <_svfiprintf_r+0x1dc>
 80099c4:	7821      	ldrb	r1, [r4, #0]
 80099c6:	4648      	mov	r0, r9
 80099c8:	2205      	movs	r2, #5
 80099ca:	f7ff fbc1 	bl	8009150 <memchr>
 80099ce:	f108 0801 	add.w	r8, r8, #1
 80099d2:	9b04      	ldr	r3, [sp, #16]
 80099d4:	b130      	cbz	r0, 80099e4 <_svfiprintf_r+0xb4>
 80099d6:	ebc9 0000 	rsb	r0, r9, r0
 80099da:	2201      	movs	r2, #1
 80099dc:	4082      	lsls	r2, r0
 80099de:	4313      	orrs	r3, r2
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	e7ec      	b.n	80099be <_svfiprintf_r+0x8e>
 80099e4:	06d8      	lsls	r0, r3, #27
 80099e6:	bf44      	itt	mi
 80099e8:	2220      	movmi	r2, #32
 80099ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099ee:	0719      	lsls	r1, r3, #28
 80099f0:	bf44      	itt	mi
 80099f2:	222b      	movmi	r2, #43	; 0x2b
 80099f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099f8:	7822      	ldrb	r2, [r4, #0]
 80099fa:	2a2a      	cmp	r2, #42	; 0x2a
 80099fc:	d002      	beq.n	8009a04 <_svfiprintf_r+0xd4>
 80099fe:	9907      	ldr	r1, [sp, #28]
 8009a00:	4623      	mov	r3, r4
 8009a02:	e00e      	b.n	8009a22 <_svfiprintf_r+0xf2>
 8009a04:	9a03      	ldr	r2, [sp, #12]
 8009a06:	1d11      	adds	r1, r2, #4
 8009a08:	6812      	ldr	r2, [r2, #0]
 8009a0a:	9103      	str	r1, [sp, #12]
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	bfbb      	ittet	lt
 8009a10:	4252      	neglt	r2, r2
 8009a12:	f043 0302 	orrlt.w	r3, r3, #2
 8009a16:	9207      	strge	r2, [sp, #28]
 8009a18:	9207      	strlt	r2, [sp, #28]
 8009a1a:	bfb8      	it	lt
 8009a1c:	9304      	strlt	r3, [sp, #16]
 8009a1e:	3401      	adds	r4, #1
 8009a20:	e00a      	b.n	8009a38 <_svfiprintf_r+0x108>
 8009a22:	461c      	mov	r4, r3
 8009a24:	3301      	adds	r3, #1
 8009a26:	7822      	ldrb	r2, [r4, #0]
 8009a28:	3a30      	subs	r2, #48	; 0x30
 8009a2a:	2a09      	cmp	r2, #9
 8009a2c:	d803      	bhi.n	8009a36 <_svfiprintf_r+0x106>
 8009a2e:	200a      	movs	r0, #10
 8009a30:	fb00 2101 	mla	r1, r0, r1, r2
 8009a34:	e7f5      	b.n	8009a22 <_svfiprintf_r+0xf2>
 8009a36:	9107      	str	r1, [sp, #28]
 8009a38:	7823      	ldrb	r3, [r4, #0]
 8009a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3c:	d11a      	bne.n	8009a74 <_svfiprintf_r+0x144>
 8009a3e:	7863      	ldrb	r3, [r4, #1]
 8009a40:	2b2a      	cmp	r3, #42	; 0x2a
 8009a42:	d10a      	bne.n	8009a5a <_svfiprintf_r+0x12a>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	1d1a      	adds	r2, r3, #4
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	9203      	str	r2, [sp, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfb8      	it	lt
 8009a50:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a54:	3402      	adds	r4, #2
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	e00c      	b.n	8009a74 <_svfiprintf_r+0x144>
 8009a5a:	1c61      	adds	r1, r4, #1
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	3101      	adds	r1, #1
 8009a62:	7823      	ldrb	r3, [r4, #0]
 8009a64:	3b30      	subs	r3, #48	; 0x30
 8009a66:	2b09      	cmp	r3, #9
 8009a68:	d803      	bhi.n	8009a72 <_svfiprintf_r+0x142>
 8009a6a:	200a      	movs	r0, #10
 8009a6c:	fb00 3202 	mla	r2, r0, r2, r3
 8009a70:	e7f5      	b.n	8009a5e <_svfiprintf_r+0x12e>
 8009a72:	9205      	str	r2, [sp, #20]
 8009a74:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009b10 <_svfiprintf_r+0x1e0>
 8009a78:	7821      	ldrb	r1, [r4, #0]
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	f7ff fb67 	bl	8009150 <memchr>
 8009a82:	b138      	cbz	r0, 8009a94 <_svfiprintf_r+0x164>
 8009a84:	9a04      	ldr	r2, [sp, #16]
 8009a86:	ebc8 0000 	rsb	r0, r8, r0
 8009a8a:	2340      	movs	r3, #64	; 0x40
 8009a8c:	4083      	lsls	r3, r0
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	9304      	str	r3, [sp, #16]
 8009a92:	3401      	adds	r4, #1
 8009a94:	7821      	ldrb	r1, [r4, #0]
 8009a96:	481a      	ldr	r0, [pc, #104]	; (8009b00 <_svfiprintf_r+0x1d0>)
 8009a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a9c:	2206      	movs	r2, #6
 8009a9e:	f104 0801 	add.w	r8, r4, #1
 8009aa2:	f7ff fb55 	bl	8009150 <memchr>
 8009aa6:	b188      	cbz	r0, 8009acc <_svfiprintf_r+0x19c>
 8009aa8:	4b16      	ldr	r3, [pc, #88]	; (8009b04 <_svfiprintf_r+0x1d4>)
 8009aaa:	b933      	cbnz	r3, 8009aba <_svfiprintf_r+0x18a>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	3307      	adds	r3, #7
 8009ab0:	f023 0307 	bic.w	r3, r3, #7
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	9303      	str	r3, [sp, #12]
 8009ab8:	e013      	b.n	8009ae2 <_svfiprintf_r+0x1b2>
 8009aba:	ab03      	add	r3, sp, #12
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4630      	mov	r0, r6
 8009ac0:	a904      	add	r1, sp, #16
 8009ac2:	462a      	mov	r2, r5
 8009ac4:	4b10      	ldr	r3, [pc, #64]	; (8009b08 <_svfiprintf_r+0x1d8>)
 8009ac6:	f7fd fdb7 	bl	8007638 <_printf_float>
 8009aca:	e007      	b.n	8009adc <_svfiprintf_r+0x1ac>
 8009acc:	ab03      	add	r3, sp, #12
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	a904      	add	r1, sp, #16
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <_svfiprintf_r+0x1d8>)
 8009ad8:	f7fe f868 	bl	8007bac <_printf_i>
 8009adc:	1c42      	adds	r2, r0, #1
 8009ade:	4607      	mov	r7, r0
 8009ae0:	d003      	beq.n	8009aea <_svfiprintf_r+0x1ba>
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	443b      	add	r3, r7
 8009ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae8:	e741      	b.n	800996e <_svfiprintf_r+0x3e>
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	065b      	lsls	r3, r3, #25
 8009aee:	d401      	bmi.n	8009af4 <_svfiprintf_r+0x1c4>
 8009af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009af2:	e001      	b.n	8009af8 <_svfiprintf_r+0x1c8>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	b01d      	add	sp, #116	; 0x74
 8009afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009afe:	bf00      	nop
 8009b00:	0800f7fe 	.word	0x0800f7fe
 8009b04:	08007639 	.word	0x08007639
 8009b08:	0800987d 	.word	0x0800987d
 8009b0c:	0800f7f4 	.word	0x0800f7f4
 8009b10:	0800f7fa 	.word	0x0800f7fa

08009b14 <__sfputc_r>:
 8009b14:	6893      	ldr	r3, [r2, #8]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	6093      	str	r3, [r2, #8]
 8009b1e:	da09      	bge.n	8009b34 <__sfputc_r+0x20>
 8009b20:	6994      	ldr	r4, [r2, #24]
 8009b22:	42a3      	cmp	r3, r4
 8009b24:	db02      	blt.n	8009b2c <__sfputc_r+0x18>
 8009b26:	b2cb      	uxtb	r3, r1
 8009b28:	2b0a      	cmp	r3, #10
 8009b2a:	d103      	bne.n	8009b34 <__sfputc_r+0x20>
 8009b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b30:	f7fe ba2a 	b.w	8007f88 <__swbuf_r>
 8009b34:	6813      	ldr	r3, [r2, #0]
 8009b36:	1c58      	adds	r0, r3, #1
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	7019      	strb	r1, [r3, #0]
 8009b3c:	b2c8      	uxtb	r0, r1
 8009b3e:	bd10      	pop	{r4, pc}

08009b40 <__sfputs_r>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	4614      	mov	r4, r2
 8009b48:	18d5      	adds	r5, r2, r3
 8009b4a:	42ac      	cmp	r4, r5
 8009b4c:	d008      	beq.n	8009b60 <__sfputs_r+0x20>
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b54:	463a      	mov	r2, r7
 8009b56:	f7ff ffdd 	bl	8009b14 <__sfputc_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	d1f5      	bne.n	8009b4a <__sfputs_r+0xa>
 8009b5e:	e000      	b.n	8009b62 <__sfputs_r+0x22>
 8009b60:	2000      	movs	r0, #0
 8009b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b64 <_vfiprintf_r>:
 8009b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b68:	b09d      	sub	sp, #116	; 0x74
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	4690      	mov	r8, r2
 8009b6e:	9303      	str	r3, [sp, #12]
 8009b70:	4606      	mov	r6, r0
 8009b72:	b118      	cbz	r0, 8009b7c <_vfiprintf_r+0x18>
 8009b74:	6983      	ldr	r3, [r0, #24]
 8009b76:	b90b      	cbnz	r3, 8009b7c <_vfiprintf_r+0x18>
 8009b78:	f7ff fa08 	bl	8008f8c <__sinit>
 8009b7c:	4b75      	ldr	r3, [pc, #468]	; (8009d54 <_vfiprintf_r+0x1f0>)
 8009b7e:	429d      	cmp	r5, r3
 8009b80:	d101      	bne.n	8009b86 <_vfiprintf_r+0x22>
 8009b82:	6875      	ldr	r5, [r6, #4]
 8009b84:	e008      	b.n	8009b98 <_vfiprintf_r+0x34>
 8009b86:	4b74      	ldr	r3, [pc, #464]	; (8009d58 <_vfiprintf_r+0x1f4>)
 8009b88:	429d      	cmp	r5, r3
 8009b8a:	d101      	bne.n	8009b90 <_vfiprintf_r+0x2c>
 8009b8c:	68b5      	ldr	r5, [r6, #8]
 8009b8e:	e003      	b.n	8009b98 <_vfiprintf_r+0x34>
 8009b90:	4b72      	ldr	r3, [pc, #456]	; (8009d5c <_vfiprintf_r+0x1f8>)
 8009b92:	429d      	cmp	r5, r3
 8009b94:	bf08      	it	eq
 8009b96:	68f5      	ldreq	r5, [r6, #12]
 8009b98:	89ab      	ldrh	r3, [r5, #12]
 8009b9a:	071c      	lsls	r4, r3, #28
 8009b9c:	d50a      	bpl.n	8009bb4 <_vfiprintf_r+0x50>
 8009b9e:	692b      	ldr	r3, [r5, #16]
 8009ba0:	b143      	cbz	r3, 8009bb4 <_vfiprintf_r+0x50>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba6:	2320      	movs	r3, #32
 8009ba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bac:	2330      	movs	r3, #48	; 0x30
 8009bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bb2:	e041      	b.n	8009c38 <_vfiprintf_r+0xd4>
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	f7fe fa3a 	bl	8008030 <__swsetup_r>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d0f0      	beq.n	8009ba2 <_vfiprintf_r+0x3e>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	e0c2      	b.n	8009d4c <_vfiprintf_r+0x1e8>
 8009bc6:	9a03      	ldr	r2, [sp, #12]
 8009bc8:	1d11      	adds	r1, r2, #4
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	9103      	str	r1, [sp, #12]
 8009bce:	2a00      	cmp	r2, #0
 8009bd0:	bfbb      	ittet	lt
 8009bd2:	4252      	neglt	r2, r2
 8009bd4:	f043 0302 	orrlt.w	r3, r3, #2
 8009bd8:	9207      	strge	r2, [sp, #28]
 8009bda:	9207      	strlt	r2, [sp, #28]
 8009bdc:	bfb8      	it	lt
 8009bde:	9304      	strlt	r3, [sp, #16]
 8009be0:	3401      	adds	r4, #1
 8009be2:	7823      	ldrb	r3, [r4, #0]
 8009be4:	2b2e      	cmp	r3, #46	; 0x2e
 8009be6:	d07b      	beq.n	8009ce0 <_vfiprintf_r+0x17c>
 8009be8:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8009d6c <_vfiprintf_r+0x208>
 8009bec:	7821      	ldrb	r1, [r4, #0]
 8009bee:	4640      	mov	r0, r8
 8009bf0:	2203      	movs	r2, #3
 8009bf2:	f7ff faad 	bl	8009150 <memchr>
 8009bf6:	b138      	cbz	r0, 8009c08 <_vfiprintf_r+0xa4>
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	ebc8 0000 	rsb	r0, r8, r0
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	4083      	lsls	r3, r0
 8009c02:	4313      	orrs	r3, r2
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	3401      	adds	r4, #1
 8009c08:	7821      	ldrb	r1, [r4, #0]
 8009c0a:	4855      	ldr	r0, [pc, #340]	; (8009d60 <_vfiprintf_r+0x1fc>)
 8009c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c10:	2206      	movs	r2, #6
 8009c12:	f104 0801 	add.w	r8, r4, #1
 8009c16:	f7ff fa9b 	bl	8009150 <memchr>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f000 8085 	beq.w	8009d2a <_vfiprintf_r+0x1c6>
 8009c20:	4b50      	ldr	r3, [pc, #320]	; (8009d64 <_vfiprintf_r+0x200>)
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d178      	bne.n	8009d18 <_vfiprintf_r+0x1b4>
 8009c26:	9b03      	ldr	r3, [sp, #12]
 8009c28:	3307      	adds	r3, #7
 8009c2a:	f023 0307 	bic.w	r3, r3, #7
 8009c2e:	3308      	adds	r3, #8
 8009c30:	9303      	str	r3, [sp, #12]
 8009c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c34:	443b      	add	r3, r7
 8009c36:	9309      	str	r3, [sp, #36]	; 0x24
 8009c38:	4643      	mov	r3, r8
 8009c3a:	461c      	mov	r4, r3
 8009c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c40:	b91a      	cbnz	r2, 8009c4a <_vfiprintf_r+0xe6>
 8009c42:	ebb4 0908 	subs.w	r9, r4, r8
 8009c46:	d00e      	beq.n	8009c66 <_vfiprintf_r+0x102>
 8009c48:	e002      	b.n	8009c50 <_vfiprintf_r+0xec>
 8009c4a:	2a25      	cmp	r2, #37	; 0x25
 8009c4c:	d1f5      	bne.n	8009c3a <_vfiprintf_r+0xd6>
 8009c4e:	e7f8      	b.n	8009c42 <_vfiprintf_r+0xde>
 8009c50:	4630      	mov	r0, r6
 8009c52:	4629      	mov	r1, r5
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	f7ff ff72 	bl	8009b40 <__sfputs_r>
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	d070      	beq.n	8009d42 <_vfiprintf_r+0x1de>
 8009c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c62:	444b      	add	r3, r9
 8009c64:	9309      	str	r3, [sp, #36]	; 0x24
 8009c66:	7823      	ldrb	r3, [r4, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d06a      	beq.n	8009d42 <_vfiprintf_r+0x1de>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	9307      	str	r3, [sp, #28]
 8009c76:	9205      	str	r2, [sp, #20]
 8009c78:	9306      	str	r3, [sp, #24]
 8009c7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c80:	f104 0801 	add.w	r8, r4, #1
 8009c84:	4644      	mov	r4, r8
 8009c86:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8009d70 <_vfiprintf_r+0x20c>
 8009c8a:	7821      	ldrb	r1, [r4, #0]
 8009c8c:	4648      	mov	r0, r9
 8009c8e:	2205      	movs	r2, #5
 8009c90:	f7ff fa5e 	bl	8009150 <memchr>
 8009c94:	f108 0801 	add.w	r8, r8, #1
 8009c98:	9b04      	ldr	r3, [sp, #16]
 8009c9a:	b130      	cbz	r0, 8009caa <_vfiprintf_r+0x146>
 8009c9c:	ebc9 0000 	rsb	r0, r9, r0
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	4082      	lsls	r2, r0
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	e7ec      	b.n	8009c84 <_vfiprintf_r+0x120>
 8009caa:	06d8      	lsls	r0, r3, #27
 8009cac:	bf44      	itt	mi
 8009cae:	2220      	movmi	r2, #32
 8009cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009cb4:	0719      	lsls	r1, r3, #28
 8009cb6:	bf44      	itt	mi
 8009cb8:	222b      	movmi	r2, #43	; 0x2b
 8009cba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009cbe:	7822      	ldrb	r2, [r4, #0]
 8009cc0:	2a2a      	cmp	r2, #42	; 0x2a
 8009cc2:	d080      	beq.n	8009bc6 <_vfiprintf_r+0x62>
 8009cc4:	9907      	ldr	r1, [sp, #28]
 8009cc6:	4623      	mov	r3, r4
 8009cc8:	461c      	mov	r4, r3
 8009cca:	3301      	adds	r3, #1
 8009ccc:	7822      	ldrb	r2, [r4, #0]
 8009cce:	3a30      	subs	r2, #48	; 0x30
 8009cd0:	2a09      	cmp	r2, #9
 8009cd2:	d803      	bhi.n	8009cdc <_vfiprintf_r+0x178>
 8009cd4:	200a      	movs	r0, #10
 8009cd6:	fb00 2101 	mla	r1, r0, r1, r2
 8009cda:	e7f5      	b.n	8009cc8 <_vfiprintf_r+0x164>
 8009cdc:	9107      	str	r1, [sp, #28]
 8009cde:	e780      	b.n	8009be2 <_vfiprintf_r+0x7e>
 8009ce0:	7863      	ldrb	r3, [r4, #1]
 8009ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce4:	d10a      	bne.n	8009cfc <_vfiprintf_r+0x198>
 8009ce6:	9b03      	ldr	r3, [sp, #12]
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	9203      	str	r2, [sp, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	bfb8      	it	lt
 8009cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cf6:	3402      	adds	r4, #2
 8009cf8:	9305      	str	r3, [sp, #20]
 8009cfa:	e775      	b.n	8009be8 <_vfiprintf_r+0x84>
 8009cfc:	1c61      	adds	r1, r4, #1
 8009cfe:	2200      	movs	r2, #0
 8009d00:	460c      	mov	r4, r1
 8009d02:	3101      	adds	r1, #1
 8009d04:	7823      	ldrb	r3, [r4, #0]
 8009d06:	3b30      	subs	r3, #48	; 0x30
 8009d08:	2b09      	cmp	r3, #9
 8009d0a:	d803      	bhi.n	8009d14 <_vfiprintf_r+0x1b0>
 8009d0c:	200a      	movs	r0, #10
 8009d0e:	fb00 3202 	mla	r2, r0, r2, r3
 8009d12:	e7f5      	b.n	8009d00 <_vfiprintf_r+0x19c>
 8009d14:	9205      	str	r2, [sp, #20]
 8009d16:	e767      	b.n	8009be8 <_vfiprintf_r+0x84>
 8009d18:	ab03      	add	r3, sp, #12
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	a904      	add	r1, sp, #16
 8009d20:	462a      	mov	r2, r5
 8009d22:	4b11      	ldr	r3, [pc, #68]	; (8009d68 <_vfiprintf_r+0x204>)
 8009d24:	f7fd fc88 	bl	8007638 <_printf_float>
 8009d28:	e007      	b.n	8009d3a <_vfiprintf_r+0x1d6>
 8009d2a:	ab03      	add	r3, sp, #12
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	4630      	mov	r0, r6
 8009d30:	a904      	add	r1, sp, #16
 8009d32:	462a      	mov	r2, r5
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <_vfiprintf_r+0x204>)
 8009d36:	f7fd ff39 	bl	8007bac <_printf_i>
 8009d3a:	1c42      	adds	r2, r0, #1
 8009d3c:	4607      	mov	r7, r0
 8009d3e:	f47f af78 	bne.w	8009c32 <_vfiprintf_r+0xce>
 8009d42:	89ab      	ldrh	r3, [r5, #12]
 8009d44:	065b      	lsls	r3, r3, #25
 8009d46:	f53f af3b 	bmi.w	8009bc0 <_vfiprintf_r+0x5c>
 8009d4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d4c:	b01d      	add	sp, #116	; 0x74
 8009d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d52:	bf00      	nop
 8009d54:	0800f68c 	.word	0x0800f68c
 8009d58:	0800f6ac 	.word	0x0800f6ac
 8009d5c:	0800f6cc 	.word	0x0800f6cc
 8009d60:	0800f7fe 	.word	0x0800f7fe
 8009d64:	08007639 	.word	0x08007639
 8009d68:	08009b41 	.word	0x08009b41
 8009d6c:	0800f7fa 	.word	0x0800f7fa
 8009d70:	0800f7f4 	.word	0x0800f7f4

08009d74 <_sbrk_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4c06      	ldr	r4, [pc, #24]	; (8009d90 <_sbrk_r+0x1c>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	f7f7 fe3e 	bl	8001a00 <_sbrk>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_sbrk_r+0x1a>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_sbrk_r+0x1a>
 8009d8c:	602b      	str	r3, [r5, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	1ffe8e74 	.word	0x1ffe8e74

08009d94 <__sread>:
 8009d94:	b510      	push	{r4, lr}
 8009d96:	460c      	mov	r4, r1
 8009d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9c:	f000 f8d6 	bl	8009f4c <_read_r>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	bfab      	itete	ge
 8009da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009da6:	89a3      	ldrhlt	r3, [r4, #12]
 8009da8:	181b      	addge	r3, r3, r0
 8009daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dae:	bfac      	ite	ge
 8009db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009db2:	81a3      	strhlt	r3, [r4, #12]
 8009db4:	bd10      	pop	{r4, pc}

08009db6 <__swrite>:
 8009db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dba:	461d      	mov	r5, r3
 8009dbc:	898b      	ldrh	r3, [r1, #12]
 8009dbe:	05db      	lsls	r3, r3, #23
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	4616      	mov	r6, r2
 8009dc6:	d505      	bpl.n	8009dd4 <__swrite+0x1e>
 8009dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2302      	movs	r3, #2
 8009dd0:	f000 f868 	bl	8009ea4 <_lseek_r>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	4638      	mov	r0, r7
 8009de2:	4632      	mov	r2, r6
 8009de4:	462b      	mov	r3, r5
 8009de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dea:	f000 b817 	b.w	8009e1c <_write_r>

08009dee <__sseek>:
 8009dee:	b510      	push	{r4, lr}
 8009df0:	460c      	mov	r4, r1
 8009df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df6:	f000 f855 	bl	8009ea4 <_lseek_r>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	bf15      	itete	ne
 8009e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e0a:	81a3      	strheq	r3, [r4, #12]
 8009e0c:	bf18      	it	ne
 8009e0e:	81a3      	strhne	r3, [r4, #12]
 8009e10:	bd10      	pop	{r4, pc}

08009e12 <__sclose>:
 8009e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e16:	f000 b813 	b.w	8009e40 <_close_r>
	...

08009e1c <_write_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4c07      	ldr	r4, [pc, #28]	; (8009e3c <_write_r+0x20>)
 8009e20:	4605      	mov	r5, r0
 8009e22:	2000      	movs	r0, #0
 8009e24:	6020      	str	r0, [r4, #0]
 8009e26:	4608      	mov	r0, r1
 8009e28:	4611      	mov	r1, r2
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f000 f950 	bl	800a0d0 <_write>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_write_r+0x1e>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_write_r+0x1e>
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	1ffe8e74 	.word	0x1ffe8e74

08009e40 <_close_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4c06      	ldr	r4, [pc, #24]	; (8009e5c <_close_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4605      	mov	r5, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	f000 f970 	bl	800a130 <_close>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_close_r+0x1a>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_close_r+0x1a>
 8009e58:	602b      	str	r3, [r5, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	1ffe8e74 	.word	0x1ffe8e74

08009e60 <_fstat_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4c07      	ldr	r4, [pc, #28]	; (8009e80 <_fstat_r+0x20>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4605      	mov	r5, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	f000 f9a4 	bl	800a1ba <_fstat>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	d102      	bne.n	8009e7c <_fstat_r+0x1c>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	b103      	cbz	r3, 8009e7c <_fstat_r+0x1c>
 8009e7a:	602b      	str	r3, [r5, #0]
 8009e7c:	bd38      	pop	{r3, r4, r5, pc}
 8009e7e:	bf00      	nop
 8009e80:	1ffe8e74 	.word	0x1ffe8e74

08009e84 <_isatty_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4c06      	ldr	r4, [pc, #24]	; (8009ea0 <_isatty_r+0x1c>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	6023      	str	r3, [r4, #0]
 8009e90:	f000 f9a1 	bl	800a1d6 <_isatty>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_isatty_r+0x1a>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_isatty_r+0x1a>
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	1ffe8e74 	.word	0x1ffe8e74

08009ea4 <_lseek_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4c07      	ldr	r4, [pc, #28]	; (8009ec4 <_lseek_r+0x20>)
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	2000      	movs	r0, #0
 8009eac:	6020      	str	r0, [r4, #0]
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f000 f8fa 	bl	800a0ac <_lseek>
 8009eb8:	1c43      	adds	r3, r0, #1
 8009eba:	d102      	bne.n	8009ec2 <_lseek_r+0x1e>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	b103      	cbz	r3, 8009ec2 <_lseek_r+0x1e>
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	1ffe8e74 	.word	0x1ffe8e74

08009ec8 <memmove>:
 8009ec8:	4281      	cmp	r1, r0
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	eb01 0302 	add.w	r3, r1, r2
 8009ed0:	d301      	bcc.n	8009ed6 <memmove+0xe>
 8009ed2:	1e42      	subs	r2, r0, #1
 8009ed4:	e00b      	b.n	8009eee <memmove+0x26>
 8009ed6:	4298      	cmp	r0, r3
 8009ed8:	d2fb      	bcs.n	8009ed2 <memmove+0xa>
 8009eda:	1881      	adds	r1, r0, r2
 8009edc:	1ad2      	subs	r2, r2, r3
 8009ede:	42d3      	cmn	r3, r2
 8009ee0:	d004      	beq.n	8009eec <memmove+0x24>
 8009ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ee6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009eea:	e7f8      	b.n	8009ede <memmove+0x16>
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	4299      	cmp	r1, r3
 8009ef0:	d004      	beq.n	8009efc <memmove+0x34>
 8009ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009efa:	e7f8      	b.n	8009eee <memmove+0x26>
 8009efc:	bd10      	pop	{r4, pc}

08009efe <_realloc_r>:
 8009efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f00:	4607      	mov	r7, r0
 8009f02:	4615      	mov	r5, r2
 8009f04:	460e      	mov	r6, r1
 8009f06:	b921      	cbnz	r1, 8009f12 <_realloc_r+0x14>
 8009f08:	4611      	mov	r1, r2
 8009f0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f0e:	f7ff bc5f 	b.w	80097d0 <_malloc_r>
 8009f12:	b91a      	cbnz	r2, 8009f1c <_realloc_r+0x1e>
 8009f14:	f7ff fc18 	bl	8009748 <_free_r>
 8009f18:	4628      	mov	r0, r5
 8009f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f1c:	f000 f828 	bl	8009f70 <_malloc_usable_size_r>
 8009f20:	42a8      	cmp	r0, r5
 8009f22:	d20e      	bcs.n	8009f42 <_realloc_r+0x44>
 8009f24:	4638      	mov	r0, r7
 8009f26:	4629      	mov	r1, r5
 8009f28:	f7ff fc52 	bl	80097d0 <_malloc_r>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	b150      	cbz	r0, 8009f46 <_realloc_r+0x48>
 8009f30:	4631      	mov	r1, r6
 8009f32:	462a      	mov	r2, r5
 8009f34:	f7fd fadc 	bl	80074f0 <memcpy>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	f7ff fc04 	bl	8009748 <_free_r>
 8009f40:	e001      	b.n	8009f46 <_realloc_r+0x48>
 8009f42:	4630      	mov	r0, r6
 8009f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f46:	4620      	mov	r0, r4
 8009f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f4c <_read_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4c07      	ldr	r4, [pc, #28]	; (8009f6c <_read_r+0x20>)
 8009f50:	4605      	mov	r5, r0
 8009f52:	2000      	movs	r0, #0
 8009f54:	6020      	str	r0, [r4, #0]
 8009f56:	4608      	mov	r0, r1
 8009f58:	4611      	mov	r1, r2
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f000 f84f 	bl	8009ffe <_read>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_read_r+0x1e>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_read_r+0x1e>
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	1ffe8e74 	.word	0x1ffe8e74

08009f70 <_malloc_usable_size_r>:
 8009f70:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009f74:	2800      	cmp	r0, #0
 8009f76:	bfbe      	ittt	lt
 8009f78:	1809      	addlt	r1, r1, r0
 8009f7a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8009f7e:	18c0      	addlt	r0, r0, r3
 8009f80:	3804      	subs	r0, #4
 8009f82:	4770      	bx	lr

08009f84 <findslot>:
 8009f84:	4b0a      	ldr	r3, [pc, #40]	; (8009fb0 <findslot+0x2c>)
 8009f86:	b510      	push	{r4, lr}
 8009f88:	4604      	mov	r4, r0
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	b118      	cbz	r0, 8009f96 <findslot+0x12>
 8009f8e:	6983      	ldr	r3, [r0, #24]
 8009f90:	b90b      	cbnz	r3, 8009f96 <findslot+0x12>
 8009f92:	f7fe fffb 	bl	8008f8c <__sinit>
 8009f96:	2c13      	cmp	r4, #19
 8009f98:	d807      	bhi.n	8009faa <findslot+0x26>
 8009f9a:	4806      	ldr	r0, [pc, #24]	; (8009fb4 <findslot+0x30>)
 8009f9c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	d002      	beq.n	8009faa <findslot+0x26>
 8009fa4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	2000      	movs	r0, #0
 8009fac:	bd10      	pop	{r4, pc}
 8009fae:	bf00      	nop
 8009fb0:	1ffe89c8 	.word	0x1ffe89c8
 8009fb4:	1ffe8dcc 	.word	0x1ffe8dcc

08009fb8 <error>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	4605      	mov	r5, r0
 8009fbc:	f7fd fa92 	bl	80074e4 <__errno>
 8009fc0:	2700      	movs	r7, #0
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	2413      	movs	r4, #19
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4639      	mov	r1, r7
 8009fca:	beab      	bkpt	0x00ab
 8009fcc:	4604      	mov	r4, r0
 8009fce:	6034      	str	r4, [r6, #0]
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fd4 <checkerror>:
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d101      	bne.n	8009fdc <checkerror+0x8>
 8009fd8:	f7ff bfee 	b.w	8009fb8 <error>
 8009fdc:	4770      	bx	lr

08009fde <_swiread>:
 8009fde:	b530      	push	{r4, r5, lr}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	ad01      	add	r5, sp, #4
 8009fe4:	9001      	str	r0, [sp, #4]
 8009fe6:	9102      	str	r1, [sp, #8]
 8009fe8:	9203      	str	r2, [sp, #12]
 8009fea:	2406      	movs	r4, #6
 8009fec:	4620      	mov	r0, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	beab      	bkpt	0x00ab
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f7ff ffed 	bl	8009fd4 <checkerror>
 8009ffa:	b005      	add	sp, #20
 8009ffc:	bd30      	pop	{r4, r5, pc}

08009ffe <_read>:
 8009ffe:	b570      	push	{r4, r5, r6, lr}
 800a000:	460e      	mov	r6, r1
 800a002:	4615      	mov	r5, r2
 800a004:	f7ff ffbe 	bl	8009f84 <findslot>
 800a008:	4604      	mov	r4, r0
 800a00a:	b930      	cbnz	r0, 800a01a <_read+0x1c>
 800a00c:	f7fd fa6a 	bl	80074e4 <__errno>
 800a010:	2309      	movs	r3, #9
 800a012:	6003      	str	r3, [r0, #0]
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	bd70      	pop	{r4, r5, r6, pc}
 800a01a:	4631      	mov	r1, r6
 800a01c:	462a      	mov	r2, r5
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	f7ff ffdd 	bl	8009fde <_swiread>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	bf1f      	itttt	ne
 800a028:	6863      	ldrne	r3, [r4, #4]
 800a02a:	1a28      	subne	r0, r5, r0
 800a02c:	181b      	addne	r3, r3, r0
 800a02e:	6063      	strne	r3, [r4, #4]
 800a030:	bd70      	pop	{r4, r5, r6, pc}

0800a032 <_swilseek>:
 800a032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a034:	460c      	mov	r4, r1
 800a036:	4616      	mov	r6, r2
 800a038:	f7ff ffa4 	bl	8009f84 <findslot>
 800a03c:	4605      	mov	r5, r0
 800a03e:	b918      	cbnz	r0, 800a048 <_swilseek+0x16>
 800a040:	f7fd fa50 	bl	80074e4 <__errno>
 800a044:	2309      	movs	r3, #9
 800a046:	e004      	b.n	800a052 <_swilseek+0x20>
 800a048:	2e02      	cmp	r6, #2
 800a04a:	d906      	bls.n	800a05a <_swilseek+0x28>
 800a04c:	f7fd fa4a 	bl	80074e4 <__errno>
 800a050:	2316      	movs	r3, #22
 800a052:	6003      	str	r3, [r0, #0]
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	e026      	b.n	800a0a8 <_swilseek+0x76>
 800a05a:	2e01      	cmp	r6, #1
 800a05c:	d103      	bne.n	800a066 <_swilseek+0x34>
 800a05e:	6843      	ldr	r3, [r0, #4]
 800a060:	18e4      	adds	r4, r4, r3
 800a062:	d511      	bpl.n	800a088 <_swilseek+0x56>
 800a064:	e7f2      	b.n	800a04c <_swilseek+0x1a>
 800a066:	2e02      	cmp	r6, #2
 800a068:	d10e      	bne.n	800a088 <_swilseek+0x56>
 800a06a:	af02      	add	r7, sp, #8
 800a06c:	6803      	ldr	r3, [r0, #0]
 800a06e:	f847 3d08 	str.w	r3, [r7, #-8]!
 800a072:	260c      	movs	r6, #12
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	beab      	bkpt	0x00ab
 800a07a:	4606      	mov	r6, r0
 800a07c:	4630      	mov	r0, r6
 800a07e:	f7ff ffa9 	bl	8009fd4 <checkerror>
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	d0e6      	beq.n	800a054 <_swilseek+0x22>
 800a086:	4404      	add	r4, r0
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	466f      	mov	r7, sp
 800a08c:	e88d 0018 	stmia.w	sp, {r3, r4}
 800a090:	260a      	movs	r6, #10
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	beab      	bkpt	0x00ab
 800a098:	4606      	mov	r6, r0
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7ff ff9a 	bl	8009fd4 <checkerror>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	dbd7      	blt.n	800a054 <_swilseek+0x22>
 800a0a4:	606c      	str	r4, [r5, #4]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	b003      	add	sp, #12
 800a0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0ac <_lseek>:
 800a0ac:	f7ff bfc1 	b.w	800a032 <_swilseek>

0800a0b0 <_swiwrite>:
 800a0b0:	b530      	push	{r4, r5, lr}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	ad01      	add	r5, sp, #4
 800a0b6:	9001      	str	r0, [sp, #4]
 800a0b8:	9102      	str	r1, [sp, #8]
 800a0ba:	9203      	str	r2, [sp, #12]
 800a0bc:	2405      	movs	r4, #5
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	beab      	bkpt	0x00ab
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f7ff ff84 	bl	8009fd4 <checkerror>
 800a0cc:	b005      	add	sp, #20
 800a0ce:	bd30      	pop	{r4, r5, pc}

0800a0d0 <_write>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	460e      	mov	r6, r1
 800a0d4:	4615      	mov	r5, r2
 800a0d6:	f7ff ff55 	bl	8009f84 <findslot>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	b920      	cbnz	r0, 800a0e8 <_write+0x18>
 800a0de:	f7fd fa01 	bl	80074e4 <__errno>
 800a0e2:	2309      	movs	r3, #9
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	e011      	b.n	800a10c <_write+0x3c>
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	6800      	ldr	r0, [r0, #0]
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	f7ff ffdf 	bl	800a0b0 <_swiwrite>
 800a0f2:	1e02      	subs	r2, r0, #0
 800a0f4:	db0a      	blt.n	800a10c <_write+0x3c>
 800a0f6:	6863      	ldr	r3, [r4, #4]
 800a0f8:	1aa8      	subs	r0, r5, r2
 800a0fa:	4403      	add	r3, r0
 800a0fc:	4295      	cmp	r5, r2
 800a0fe:	6063      	str	r3, [r4, #4]
 800a100:	d106      	bne.n	800a110 <_write+0x40>
 800a102:	2000      	movs	r0, #0
 800a104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a108:	f7ff bf56 	b.w	8009fb8 <error>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	bd70      	pop	{r4, r5, r6, pc}

0800a112 <_swiclose>:
 800a112:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a114:	ad02      	add	r5, sp, #8
 800a116:	2402      	movs	r4, #2
 800a118:	f845 0d04 	str.w	r0, [r5, #-4]!
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	beab      	bkpt	0x00ab
 800a122:	4604      	mov	r4, r0
 800a124:	4620      	mov	r0, r4
 800a126:	f7ff ff55 	bl	8009fd4 <checkerror>
 800a12a:	b003      	add	sp, #12
 800a12c:	bd30      	pop	{r4, r5, pc}
	...

0800a130 <_close>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4605      	mov	r5, r0
 800a134:	f7ff ff26 	bl	8009f84 <findslot>
 800a138:	4604      	mov	r4, r0
 800a13a:	b930      	cbnz	r0, 800a14a <_close+0x1a>
 800a13c:	f7fd f9d2 	bl	80074e4 <__errno>
 800a140:	2309      	movs	r3, #9
 800a142:	6003      	str	r3, [r0, #0]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	bd38      	pop	{r3, r4, r5, pc}
 800a14a:	3d01      	subs	r5, #1
 800a14c:	2d01      	cmp	r5, #1
 800a14e:	d809      	bhi.n	800a164 <_close+0x34>
 800a150:	4b08      	ldr	r3, [pc, #32]	; (800a174 <_close+0x44>)
 800a152:	689a      	ldr	r2, [r3, #8]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	429a      	cmp	r2, r3
 800a158:	d104      	bne.n	800a164 <_close+0x34>
 800a15a:	f04f 33ff 	mov.w	r3, #4294967295
 800a15e:	6003      	str	r3, [r0, #0]
 800a160:	2000      	movs	r0, #0
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	f7ff ffd4 	bl	800a112 <_swiclose>
 800a16a:	b910      	cbnz	r0, 800a172 <_close+0x42>
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	1ffe8dcc 	.word	0x1ffe8dcc

0800a178 <_swistat>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	460c      	mov	r4, r1
 800a17c:	f7ff ff02 	bl	8009f84 <findslot>
 800a180:	4606      	mov	r6, r0
 800a182:	b930      	cbnz	r0, 800a192 <_swistat+0x1a>
 800a184:	f7fd f9ae 	bl	80074e4 <__errno>
 800a188:	2309      	movs	r3, #9
 800a18a:	6003      	str	r3, [r0, #0]
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	bd70      	pop	{r4, r5, r6, pc}
 800a192:	6863      	ldr	r3, [r4, #4]
 800a194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a198:	6063      	str	r3, [r4, #4]
 800a19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a19e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1a0:	250c      	movs	r5, #12
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	beab      	bkpt	0x00ab
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f7ff ff12 	bl	8009fd4 <checkerror>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	bf1c      	itt	ne
 800a1b4:	6120      	strne	r0, [r4, #16]
 800a1b6:	2000      	movne	r0, #0
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}

0800a1ba <_fstat>:
 800a1ba:	b538      	push	{r3, r4, r5, lr}
 800a1bc:	223c      	movs	r2, #60	; 0x3c
 800a1be:	4605      	mov	r5, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	f7fd f99e 	bl	8007506 <memset>
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d2:	f7ff bfd1 	b.w	800a178 <_swistat>

0800a1d6 <_isatty>:
 800a1d6:	b570      	push	{r4, r5, r6, lr}
 800a1d8:	f7ff fed4 	bl	8009f84 <findslot>
 800a1dc:	2509      	movs	r5, #9
 800a1de:	4604      	mov	r4, r0
 800a1e0:	b918      	cbnz	r0, 800a1ea <_isatty+0x14>
 800a1e2:	f7fd f97f 	bl	80074e4 <__errno>
 800a1e6:	6005      	str	r5, [r0, #0]
 800a1e8:	e00f      	b.n	800a20a <_isatty+0x34>
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	beab      	bkpt	0x00ab
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	2c01      	cmp	r4, #1
 800a1f4:	d009      	beq.n	800a20a <_isatty+0x34>
 800a1f6:	f7fd f975 	bl	80074e4 <__errno>
 800a1fa:	2400      	movs	r4, #0
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	2513      	movs	r5, #19
 800a200:	4628      	mov	r0, r5
 800a202:	4621      	mov	r1, r4
 800a204:	beab      	bkpt	0x00ab
 800a206:	4605      	mov	r5, r0
 800a208:	6035      	str	r5, [r6, #0]
 800a20a:	4620      	mov	r0, r4
 800a20c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a210 <g_xmc_vadc_group_array>:
 800a210:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@
 800a220:	5645 5f45 7562 7973 2d20 6320 2d6f 7270     EVE_busy - co-pr
 800a230:	636f 7365 6f73 2072 6166 6c75 2c74 7420     ocessor fault, t
 800a240:	7972 7420 206f 6572 6f73 766c 0065 0000     ry to resolve...
 800a250:	5645 5f45 6e69 7469 4620 6961 656c 2064     EVE_init Failed 
 800a260:	202d 6863 7069 6469 2120 203d 7830 4337     - chipid != 0x7C
 800a270:	7720 7361 2720 3025 5834 0a27 0000 0000      was '%04X'.....
 800a280:	5645 5f45 6e69 7469 2d20 6320 6968 6970     EVE_init - chipi
 800a290:	2064 7830 4337 4f20 204b 6177 2073 2527     d 0x7C OK was '%
 800a2a0:	3430 2758 000a 0000 5645 5f45 6e69 7469     04X'....EVE_init
 800a2b0:	4620 6961 656c 2064 202d 5645 2045 6f77      Failed - EVE wo
 800a2c0:	6b72 6e69 2067 7473 7461 7375 6e20 206f     rking status no 
 800a2d0:	6b6f 0000 5645 5f45 6e69 7469 2d20 4520     ok..EVE_init - E
 800a2e0:	4556 7720 726f 696b 676e 7320 6174 7574     VE working statu
 800a2f0:	2073 4b4f 0021 0000 5645 5f45 6e69 7469     s OK!...EVE_init
 800a300:	2d20 4420 7369 6c70 7961 6920 696e 6974      - Display initi
 800a310:	6c61 7a69 6465 0021 5645 5f45 6e69 7469     alized!.EVE_init
 800a320:	2d20 4220 7361 6369 6420 7369 6c70 7961      - Basic display
 800a330:	6c20 7369 2074 7277 7469 6574 216e 0000      list written!..
 800a340:	5645 5f45 6e69 7469 2d20 4620 6e69 7369     EVE_init - Finis
 800a350:	0068 0000 6c50 6165 6573 7420 7061 6f20     h...Please tap o
 800a360:	206e 6874 2065 6f64 2e74 0000 0056 0000     n the dot...V...
 800a370:	0074 0000 2e25 6c31 0066 0000 263d 0800     t...%.1lf...=&..
 800a380:	2665 0800 2959 0800 2a05 0800 27a9 0800     e&..Y)...*...'..
 800a390:	2855 0800 4c44 732d 7a69 3a65 0000 0000     U(..DL-size:....
 800a3a0:	6553 736e 726f 003a 6553 736e 726f 0000     Sensor:.Sensor..
 800a3b0:	6d49 0070 6153 0077 6953 656e 0000 0000     Imp.Saw.Sine....
 800a3c0:	6f52 6c6c 0000 0000 7246 6d61 0065 0000     Roll....Frame...
 800a3d0:	6944 6d6d 7265 0000 2e25 6c32 0066 0000     Dimmer..%.2lf...
 800a3e0:	5620 0000 696c 0000 6572 0000                V..li..re..

0800a3ec <logo_init>:
 800a3ec:	9c78 7ded 484d 6f1b f7bb 55d3 bbed dc69     x..}MH.o...U..i.
 800a3fc:	c63c 769d b8d5 6e32 e35e 76ae 7b55 c636     <..v..2n^..vU{6.
 800a40c:	6bcd d5dc d4ae 31b3 8e6e 5171 e7f8 12ff     .k.....1n.qQ....
 800a41c:	3c70 e384 e108 0138 9d03 c042 8429 08e3     p<....8...B.)...
 800a42c:	71e1 0602 3d3a 1c04 7861 c29d 8f3c 6033     .q..:=..ax..<.3`
 800a43c:	e3a0 c061 0611 611c 9278 bef7 5a26 32bf     ..a....ax...&Z.2
 800a44c:	c993 6a24 bd5b da6e 36da f31f cd71 5f75     ..$j[.n..6..q.u_
 800a45c:	bf9f b55f 28fa 2276 bf5b 5324 ff32 1669     .._..(v"[.$S2.i.
 800a46c:	7dcc e7f4 81be 66fe f030 0993 493f 6326     .}.....f0...?I&c
 800a47c:	d056 2f42 e534 3dfb 47d8 a5f9 b644 4634     V.B/4..=.G..D.4F
 800a48c:	16aa 424c a88b d97e 6910 1711 b996 1728     ..LB..~..i....(.
 800a49c:	452d 634b b85c 5634 5f82 d663 b3cf 945c     -EKc\.4V._c...\.
 800a4ac:	115f 0536 f243 11cb d095 f425 f85e 6a84     _.6.C.....%.^..j
 800a4bc:	d2d5 47bd 9479 c23a f398 bf9a 482c e27b     ...Gy.:.....,H{.
 800a4cc:	8f06 a373 8d25 e8a1 dc99 f21b 4665 3e21     ..s.%.......eF!>
 800a4dc:	48a5 9e3c 278c 27df b127 303f 29f8 fc9e     .H<..'.''.?0.)..
 800a4ec:	ff13 2b82 1d6b 4099 9a76 a1da 2635 cec8     ...+k..@v...5&..
 800a4fc:	1bf1 a6c2 8828 72fe 6544 fb8c 9f3e f947     ....(..rDe..>.G.
 800a50c:	4499 aeae 43ea 218a 1209 8fce 9fb2 b7e9     .D...C.!........
 800a51c:	a459 4855 26a7 49b1 386c b171 635e 3793     Y.UH.&.Il8q.^c.7
 800a52c:	bbd6 ff6b 4f1f b892 8c42 7764 20e8 f38b     ..k..O..B.dw. ..
 800a53c:	7882 107a 5652 e975 e351 b41e c630 1a84     .xz.RVu.Q...0...
 800a54c:	f642 966b f2d3 4823 48bb bb4b 5a6a 6933     B.k...#H.HK.jZ3i
 800a55c:	cd69 24c7 284b 2044 8233 d62c d2bf 8e58     i..$K(D 3.,...X.
 800a56c:	39a2 277a 99ff 41de 3d6b e587 a9a6 b59a     .9z'...Ak=......
 800a57c:	5363 df60 b126 e8d7 2fdd 77ac 93c7 2c9f     cS`.&..../.w...,
 800a58c:	a38d 28e8 4827 2521 a6a2 b51f 81ed 7c89     ...('H!%.......|
 800a59c:	61a6 821b 4cc6 1d53 af99 3c44 9c39 8de8     .a...LS...D<9...
 800a5ac:	c6f7 1387 93ef aa6c 8b2f 8ee5 6099 8e69     ......l./....`i.
 800a5bc:	e0db f857 6b4d 3c27 b641 5fc9 cbf6 72fe     ..W.Mk'<A.._...r
 800a5cc:	e948 fb2e 6e95 5fc5 3d3e a430 a26f fc80     H....n._>=0.o...
 800a5dc:	15b3 8561 f28f 5641 c6db 37e8 f7e4 c5d4     ..a...AV...7....
 800a5ec:	21e7 237d 903a ee9e 57e6 bf04 8f32 4db4     .!}#:....W..2..M
 800a5fc:	efbe 7fd3 5b94 0917 d869 e682 9657 2e79     .....[..i...W.y.
 800a60c:	953f 5c3d 7123 87d0 f127 ec49 ea6b 490d     ?.=\#q..'.I.k..I
 800a61c:	7de5 d46c aed2 3113 2ca4 05e8 bc03 8afa     .}l....1.,......
 800a62c:	d7e5 ed23 ad34 cd3f e7da cd54 7fb3 16b5     ..#.4.?...T.....
 800a63c:	8bfc 2e64 e3e8 5f8a 7ffe 1cc2 563f 2fea     ..d...._....?V./
 800a64c:	d0ee d923 a9ef ac49 6fa6 fe24 0d34 69fb     ..#...I..o$.4..i
 800a65c:	eb94 6256 f31a 6da8 adbf 1bec 465b 5948     ..Vb...m....[FHY
 800a66c:	b5e1 22fc 61b2 64f1 bc6f c3e7 a46b 235f     ...".a.do...k._#
 800a67c:	87c8 5e7f 9688 be68 215b 6e90 4c55 3514     ...^..h.[!.nUL.5
 800a68c:	969a 357e f02d c82e 4883 a126 2b77 7c1b     ..~5-....H&.w+.|
 800a69c:	e4b4 722b 08f4 22c5 fb7d 87cb 78de 793c     ..+r..."}....x<y
 800a6ac:	36b8 694d 39f9 487e f465 e982 3be5 e51e     .6Mi.9~He....;..
 800a6bc:	9567 758a 0ddf 9469 a1dd 2403 5868 fc6f     g..u..i....$hXo.
 800a6cc:	4c0f a621 9fb2 5f69 1051 d1c7 c66e d2e8     .L!...i_Q...n...
 800a6dc:	8599 9b6a 6fa0 982d 3d69 d2a2 da02 7f51     ..j..o-.i=....Q.
 800a6ec:	3768 5b68 fc80 074c 864b a0b4 b7ef 5bfb     h7h[..L.K......[
 800a6fc:	e51f 045e 4bec a34c 5f45 cb11 a9b1 0917     ..^..KL.E_......
 800a70c:	23d8 a7bf 9046 8d86 8c95 7983 6d2d 9014     .#..F......y-m..
 800a71c:	baf5 23cd de40 49a0 ab18 775a ca39 0c73     ...#@..I..Zw9.s.
 800a72c:	378a 60d6 7d2f ff15 9a94 7ca6 0dc5 a43e     .7.`/}.....|..>.
 800a73c:	5db4 1fc3 8ee5 3245 15c6 ef9a df67 3f66     .]....E2....g.f?
 800a74c:	6b26 525e 0647 8dcb 5d71 88e5 aaba 7733     &k^RG...q]....3w
 800a75c:	777c 8cb7 b579 1cab 512e 0eb9 53f2 3c0a     |w..y....Q...S.<
 800a76c:	3fc3 3eb0 98f2 85a1 f571 8fae 51e5 25da     .?.>....q....Q.%
 800a77c:	7305 dd48 8f14 5fb7 6a66 0ab9 7912 3efa     .sH...._fj...y.>
 800a78c:	4056 1f51 eda1 dbdf 955d 84ab 521e 3104     V@Q.....]....R.1
 800a79c:	1c58 92c9 5838 49b6 23ac 6da3 420b 2d44     X...8X.I.#.m.BD-
 800a7ac:	ea3c 2fda 0526 a233 0a6d c2be e433 4111     <../&.3.m...3..A
 800a7bc:	eb3e da0b c6a3 274a 4fe2 2f72 7dcd a233     >.....J'.Or/.}3.
 800a7cc:	4a9e 25b3 cbd8 29e1 9f78 c8ec 231c 9b5d     .J.%...)x....#].
 800a7dc:	a4d0 e19f 1ef8 85c5 9f20 335f 820e 806c     ........ ._3..l.
 800a7ec:	7124 b1d0 29ef 95c8 121a dfa1 91f7 955d     $q...)........].
 800a7fc:	154a 1362 b3e4 0ad1 9c31 8578 83a2 9997     J.b.....1.x.....
 800a80c:	d64e 1710 f934 0fbe 51ed 0a1a 0c63 c796     N...4....Q..c...
 800a81c:	69b8 4d8a bdc1 4afb d12c 9c63 ccbf 64fc     .i.M...J,.c....d
 800a82c:	763a 8c21 97ee 4b67 7d14 bc48 fe40 17da     :v!...gK.}H.@...
 800a83c:	2a7c 2c1b 1485 b8c6 d8dd 51e4 115a 9cd9     |*.,.......QZ...
 800a84c:	6957 a29e b595 7077 52cf b98b eb20 0997     Wi....wp.R.. ...
 800a85c:	67fd 67bf 7a5b 3957 adca 14e7 15e2 558a     .g.g[zW9.......U
 800a86c:	8214 71a2 5e6e e7fb 7e4f 0fd4 2a53 92c8     ...qn^..O~..S*..
 800a87c:	2b75 c59d 7e5a 4fec 247c 6dab 937f 5f88     u+..Z~.O|$.m..._
 800a88c:	2ec4 d1c0 e5fb 3b20 6285 2b03 96bf 5e7d     ...... ;.b.+..}^
 800a89c:	92ec c789 e88a 264f 7552 c542 2591 5363     ......O&RuB..%cS
 800a8ac:	acaf 8df8 be63 3149 a7ed f9f0 8b5d ae64     ....c.I1....].d.
 800a8bc:	df6a 2e24 f10f 6f71 c49c 7a31 8b8e f2a8     j.$...qo..1z....
 800a8cc:	1f7d a3d6 10fc f4c6 e02b 4ff7 2f62 2412     }.......+..Ob/.$
 800a8dc:	4d3e 71cd ca43 a5af e763 98c2 6521 5843     >M.qC...c...!eCX
 800a8ec:	41cf 75dd eb12 7d23 53c5 eb69 f5a7 1f2d     .A.u..#}.Si...-.
 800a8fc:	4096 b6d4 7ccb 7e45 24f4 1106 bf9b 684c     .@...|E~.$....Lh
 800a90c:	70bf dd7e 42dc 4191 f5a7 f4d4 3fc6 14e1     .p~..B.A.....?..
 800a91c:	0b4d 8f0b 769a 22cf 2357 946a ce9f 4fbd     M....v."W#j....O
 800a92c:	5e42 2960 7387 cae3 dfaf 2855 e39b 86ea     B^`).s....U(....
 800a93c:	d140 abe0 81fd 508d c8b3 573e f97e fab3     @......P..>W~...
 800a94c:	a575 7660 3e2b 9036 4c85 42a7 9668 f64f     u.`v+>6..L.Bh.O.
 800a95c:	5b0b cbb2 3262 a9c6 59d4 c8ec 270c 25de     .[..b2...Y...'.%
 800a96c:	d70e 198e fcbf 7a6b bf02 30be 89c6 d148     ......kz...0..H.
 800a97c:	53df 09c3 e678 ecc3 fa90 5beb cbb2 5522     .S..x......[.."U
 800a98c:	ea43 372c 414d fcfc 4535 27d1 da62 4df8     C.,7MA..5E.'b..M
 800a99c:	a29e 485f 4308 fe40 27f2 221c a5b3 cadc     .._H.C@..'."....
 800a9ac:	ea6f c4c3 5a74 e8e0 a94f f8de e4c7 b534     o...tZ..O.....4.
 800a9bc:	1029 a3fa dda6 98a1 8e84 d3f3 7bd4 a4f4     )............{..
 800a9cc:	292b 2f2d 3f88 be6f 35bf bc81 575a db59     +)-/.?o..5..ZWY.
 800a9dc:	ca86 24d4 9236 39c5 19e4 ca3c 88dd af39     ...$6..9..<...9.
 800a9ec:	f1ce 67d3 995e 8d8f bfa8 ed77 3199 ca22     ...g^.....w..1".
 800a9fc:	fb00 032c 55b3 6c81 4394 7be7 87df 10f4     ..,..U.l.C.{....
 800aa0c:	44c4 2611 2017 f9e1 900e eca3 f6bc f7fb     .D.&. ..........
 800aa1c:	cb3e 4c66 2d9b 648d 3f21 2018 a5c3 7a90     >.fL.-.d!?. ...z
 800aa2c:	7d7f 0f4d 6443 65a4 96b3 8196 1fef e7e5     .}M.Cd.e........
 800aa3c:	c81f 222e 1755 65f4 53cb 9178 c8e8 4b04     ..."U..e.Sx....K
 800aa4c:	ca43 6def efc3 a457 446a 2d1d ccbd bf40     C..m..W.jD.-..@.
 800aa5c:	74d6 856e 785f 5a20 1356 a342 2c05 b717     .tn._x ZV.B..,..
 800aa6c:	ad34 38bf 68f4 6ed3 cc4b a409 9065 8a51     4..8.h.nK...e.Q.
 800aa7c:	b127 fe1c 469b 4e98 e842 029b ff45 bf89     '....F.NB...E...
 800aa8c:	1c48 05ae 90d9 88fa 71e1 321b 7c8f d814     H........q.2.|..
 800aa9c:	3f31 9726 9b72 cfe2 b5d6 3778 d692 110d     1?&.r.....x7....
 800aaac:	04ea c8c3 85a6 88d9 18f2 b411 625b 6cea     ............[b.l
 800aabc:	8fa9 d9ac 5a32 eb4c bfbf 5ff7 d25f 37c6     ....2ZL....__..7
 800aacc:	f3f1 a699 958d d5e6 3efb df9e 624b 2e1a     .........>..Kb..
 800aadc:	b4d4 866c f9a2 07d5 cb69 25ce ec6d eb09     ..l.....i..%m...
 800aaec:	8fb9 e1c9 1f44 c739 1ec7 b5f4 af68 196c     ....D.9.....h.l.
 800aafc:	3882 7b9d 9897 66c4 0da8 61e1 196b 6108     .8.{...f...ak..a
 800ab0c:	e2d0 0d3a 1e18 b36f fc2b f4c3 da20 922f     ..:...o.+... ./.
 800ab1c:	4829 0d18 5018 0f90 1e27 8c54 2369 96e6     )H...P..'.T.i#..
 800ab2c:	f34e 1433 13a0 fb21 3e2e ad22 2eb5 e6fb     N.3...!..>".....
 800ab3c:	01e9 4345 b286 3323 3dcb 18bc 46d3 424c     ..EC..#3.=...FLB
 800ab4c:	3b9f 56cb d3af 5227 51e1 5ad3 d912 541c     .;.V..'R.Q.Z...T
 800ab5c:	f28e 87d0 10a5 f641 78a1 8cbd 5311 ca43     ......A..x...SC.
 800ab6c:	b960 315b 2ea4 abb9 880c a158 90f2 713a     `.[1......X...:q
 800ab7c:	d505 a62a 718e 334f 6150 65df cbba 798f     ..*..qO3Pa.e...y
 800ab8c:	56db a624 d906 69a7 5d98 2cea a90e 7bbf     .V$....i.].,...{
 800ab9c:	82af dd54 26d2 7f34 8379 160f d33f 5453     ..T..&4.y...?.ST
 800abac:	ec80 c0c8 997a 9009 d9d3 9ca5 b0af 1bcc     ....z...........
 800abbc:	4307 82ea 592e cbe8 b590 5366 f1bd a243     .C...Y....fS..C.
 800abcc:	fd9f e537 bf77 b73a 8c27 f381 486f c540     ..7.w.:.'...oH@.
 800abdc:	f2e0 6521 d2ff 20de 2859 8c53 18ce 918c     ..!e... Y(S.....
 800abec:	d1d6 f04f b3b7 b7df 8bf4 e85f 8d7f efda     ..O......._.....
 800abfc:	f584 69bf 65f8 fbfd 4af9 bd9f beee ebb3     ...i.e...J......
 800ac0c:	8530 add2 3944 7e8a 7d9b 069a c964 521a     0...D9.~.}..d..R
 800ac1c:	5fdf f43e a87c a821 81fd 4201 8064 72c4     ._>.|.!....Bd..r
 800ac2c:	a2c1 d521 a1a2 f2c1 0311 d0d3 7201 7b8e     ..!..........r.{
 800ac3c:	8f8c 89bc 1864 8b07 2014 4e70 04e7 eaf1     ....d.... pN....
 800ac4c:	4634 a144 d985 6012 2f60 ff73 cdc1 fe96     4FD....``/s.....
 800ac5c:	14a3 7f45 459b cd3f 0602 6976 fad6 32db     ..E..E?...vi...2
 800ac6c:	04fc 29af ff59 c353 e6cc ff6a 7b57 fa3d     ...)Y.S...j.W{=.
 800ac7c:	0e17 69e7 5361 2ae8 1447 0742 aa7c 7982     ...iaS.*G.B.|..y
 800ac8c:	7bd7 a550 369a 244e 715f 3a86 a024 e9d7     .{P..6N$_q.:$...
 800ac9c:	1f2f 57ec b30d ca8d 09ed fde0 c64b c1e9     /..W........K...
 800acac:	0e52 4b10 2867 ba41 67ef 57e5 a914 521a     R..Kg(A..g.W...R
 800acbc:	eb38 7d59 2e43 8b5f e5dd 20aa 9a02 4758     8.Y}C._.... ..XG
 800accc:	59e6 e3a6 9d6c 44fd fc76 17f8 33f4 e579     .Y..l..Dv....3y.
 800acdc:	99ef e467 57a5 b593 5f3f fa66 37c8 08e4     ..g..W..?_f..7..
 800acec:	48b5 3451 d797 fbb6 39d9 44fe 698a 1dcc     .HQ4.....9.D.i..
 800acfc:	17a1 8743 a0d9 c632 50d5 9cb3 ec34 eaf2     ..C...2..P..4...
 800ad0c:	acc8 5bf0 f1d6 2811 1cf2 42c9 8495 07a3     ...[...(...B....
 800ad1c:	bb95 e238 4adf 79cc 8c6d d653 ff2c 38bf     ..8..J.ym.S.,..8
 800ad2c:	bd71 dfeb 14dc 3f0f 3f3a 5ef7 0d56 2ab9     q......?:?.^V..*
 800ad3c:	5990 69cc 18cc 29b7 df8c ad7a 301a 3636     .Y.i...)..z..066
 800ad4c:	2e78 10af 9dcd 074d f67a 166a 52be 455d     x.....M.z.j..R]E
 800ad5c:	2c3e 9fbc 0d4d 1e94 ff4a bb4a 60a4 89ee     >,..M...J.J..`..
 800ad6c:	94f0 93c6 7e5a 9150 fdaf 056f 6cf4 fdad     ....Z~P...o..l..
 800ad7c:	767a df55 b246 0bcf dccb 9960 b5b9 971a     zvU.F.....`.....
 800ad8c:	5d04 a54e 6c91 d93c 11ec ccbe fce0 0f79     .]N..l<.......y.
 800ad9c:	54b1 471d 3931 07d4 2402 3c2d b0ce 97bb     .T.G19...$-<....
 800adac:	d54a de5f 83cd 3c27 ed43 3789 8a6d dd5c     J._...'<C..7m.\.
 800adbc:	15bb 767b db5d 3126 ed65 8d33 83f3 6dca     ..{v].&1e.3....m
 800adcc:	a7e4 b324 095b 87b2 b0c4 ddeb 62f2 cb3d     ..$.[........b=.
 800addc:	17fc 9177 959d 13cc 8971 7a86 4ec9 5fde     ..w.....q..z.N._
 800adec:	ff6e fe91 029e c97b c718 af12 cae2 58da     n.....{........X
 800adfc:	5ea9 5666 6eae 1d0a 6de4 d9eb 5d0f 3823     .^fV.n...m...]#8
 800ae0c:	4f66 6f98 3233 d219 b2b2 00af 0959 c72f     fO.o32......Y./.
 800ae1c:	91d5 b9c1 55cb 4200 f28f 492f c998 b209     .....U.B../I....
 800ae2c:	0fab cb24 aad8 5648 1335 ccf6 2663 d4a4     ..$...HV5...c&..
 800ae3c:	b3dd a44c 9967 d0bb 9ab3 c5ae 7d93 68e4     ..L.g........}.h
 800ae4c:	bba9 3edc 4f6c ecc9 9f92 2117 ecff 98ed     ...>lO.....!....
 800ae5c:	665e b996 112b da38 7d81 e805 1c81 d2c9     ^f..+.8..}......
 800ae6c:	e3fc a7a4 310b 4dff 5e7d 3d80 0473 99ed     .....1.M}^.=s...
 800ae7c:	3636 7904 776f cf63 d7ce 4270 e359 edf2     66.yowc...pBY...
 800ae8c:	eac2 47db ecb6 9b78 9fc4 3e78 cb03 bb3f     ...G..x...x>..?.
 800ae9c:	97b2 a64b 4e21 ef53 8f2c b1f6 b203 6cb1     ..K.!NS.,......l
 800aeac:	7319 d81c efaa b0a9 357d 96f3 80e3 ab7a     .s......}5....z.
 800aebc:	e086 d7b3 9a96 90f5 63ea 54d9 0b4f 0347     .........c.TO.G.
 800aecc:	ecf6 2cfa a121 732f 7710 7e1e e31c 8fd2     ...,!./s.w.~....
 800aedc:	5b39 9147 a1aa 9532 c49f 27de fca9 6ca0     9[G...2....'...l
 800aeec:	baff e14d ee7f cf58 4160 78c6 6845 d34d     ..M...X.`A.xEhM.
 800aefc:	e62a 1abc 292e 6b44 7247 de39 f8bc 50e4     *....)DkGr9....P
 800af0c:	b399 27a2 f68c bfcb 6cd7 bb7e 5565 960f     ...'.....l~.eU..
 800af1c:	99e0 c8ec df38 414f 3bbc ecff 9af2 a6c4     ....8.OA.;......
 800af2c:	0da9 15a1 b046 0d55 03e7 ef2d 90f9 bb3f     ....F.U...-...?.
 800af3c:	b369 e60a 109e 5f20 be24 50a6 f034 d168     i..... _$..P4.h.
 800af4c:	456c 4f32 69a5 720a 4757 48f9 08fd 92c0     lE2O.i.rWG.H....
 800af5c:	ba0a f79e cf61 9a6a 94b6 4433 79af c60e     ....a.j...3D.y..
 800af6c:	a410 0a19 7838 d45a ccb3 7f32 39f3 54ac     ....8xZ...2..9.T
 800af7c:	5027 0034 c5d1 d654 1e90 9a2d 2c9d fde8     'P4...T...-..,..
 800af8c:	efc5 d228 437f 889e b14e a55d d77a c071     ..(..C..N.].z.q.
 800af9c:	05e5 fd55 edff 0fa9 52a7 571d 3cb8 b789     ..U......R.W.<..
 800afac:	0c7e 492f 6f14 d1d6 c923 c414 59b7 68b0     ~./I.o..#....Y.h
 800afbc:	e2be 4223 7d42 07d9 966b 4e1d 4a7c 0af9     ..#BB}..k..N|J..
 800afcc:	d7ce d2c8 7bb3 37d9 4b6b ab59 0b53 2173     .....{.7kKY.S.s!
 800afdc:	9bd0 5d08 ad4e 411f c407 7501 d5ed 1e82     ...]N..A...u....
 800afec:	9eb4 b7d5 4359 b47c f568 a624 17f6 6f21     ....YC|.h.$...!o
 800affc:	4539 8d19 0f3a fa4c e3ce cbcd 37ab bffe     9E..:.L......7..
 800b00c:	bc48 2f69 324d 89bf d953 f7d6 73cc ab3d     H.i/M2..S....s=.
 800b01c:	cf67 8f90 1866 f7c8 1578 5327 ec9d b563     g...f...x.'S..c.
 800b02c:	a6f3 55c8 fcbf b296 59ac 61b1 ca96 85a4     ...U.....Y.a....
 800b03c:	d4fb f033 30d2 1a78 d29a 88b4 59da d2fc     ..3..0x......Y..
 800b04c:	3d86 d613 6bcb 80f5 42cb f780 bc41 bc48     .=...k...B..A.H.
 800b05c:	9ec9 8f48 b65d 85d7 c3d0 6f56 34e8 d8d5     ..H.].....Vo.4..
 800b06c:	9583 414d 9ff8 af5b 3a6f 1ead a5e4 0781     ..MA..[.o:......
 800b07c:	bee4 2ec2 1b21 b10c 7b60 bfbe f323 bc5f     ....!...`{..#._.
 800b08c:	3d9d 6885 266a ab57 3d41 b45a 52ab bb31     .=.hj&W.A=Z..R1.
 800b09c:	d3ca 0e28 98fb b1f4 278d e112 dd9e 7fa7     ..(......'......
 800b0ac:	0b06 587a c105 bdb5 e730 4eb5 f9b6 0cbe     ..zX....0..N....
 800b0bc:	e5bb cf64 8900 c823 c17e 1387 2823 94ea     ..d...#.~...#(..
 800b0cc:	1e5d c3e0 c210 e658 9ac0 508d e082 8aa6     ].....X....P....
 800b0dc:	f778 80f5 2b9b d49e 2198 5d97 fbf9 9ec6     x....+...!.]....
 800b0ec:	7ad8 ecd6 4162 dd1d 3fde a02c 9b6f a0a6     .z..bA...?,.o...
 800b0fc:	2d23 3dcc ac2c 671b 54a9 cbbb f93b 6c49     #-.=,..g.T..;.Il
 800b10c:	f312 e615 4cdd 989b e27b 7bb3 67b6 0d10     .....L..{..{.g..
 800b11c:	6474 7836 9977 4234 b60f 9ad1 5e41 bf03     td6xw.4B....A^..
 800b12c:	7751 2cba 7a0b f167 f27d 8635 fce5 dbb2     Qw.,.zg.}.5.....
 800b13c:	f0bb 8bfb 6e64 0a08 1301 739a bb9c 035e     ....dn.....s..^.
 800b14c:	b85a 3d7f 6883 57c0 a88c 7c2e f334 00f4     Z..=.h.W...|4...
 800b15c:	bda3 99f4 e939 fd59 b378 0526 e693 1bc1     ....9.Y.x.&.....
 800b16c:	9efc e15a 631f 7381 6989 e8fd 7be9 d897     ..Z..c.s.i...{..
 800b17c:	0665 5715 069d 9ec8 ffdd 09be 6d16 4b24     e..W.........m$K
 800b18c:	f0bb 18d1 ca33 56b5 bf37 67a1 ea75 579b     ....3..V7..gu..W
 800b19c:	4865 de3d 1d86 db42 3c8e a3f6 2259 a157     eH=...B..<..Y"W.
 800b1ac:	0316 a6d5 ce59 c71d a54c dc2a ff61 d399     ....Y...L.*.a...
 800b1bc:	98fa 970c f61a 9846 ed31 6998 35a7 e9ab     ......F.1..i.5..
 800b1cc:	9399 033d 868b c073 390d 6d42 b20a 5bdb     ..=...s..9Bm...[
 800b1dc:	5bf1 becb 2d1e ce01 14d2 8825 df2e a772     .[...-....%...r.
 800b1ec:	8e7d 6b4e 4138 a1d1 33b2 590a 34c5 c5a4     }.Nk8A...3.Y.4..
 800b1fc:	7b5c f68f cc25 38a1 59ea 6aa5 dd58 e8a2     \{..%..8.Y.jX...
 800b20c:	6049 a95b fffb f23e ca6f 22f3 cf74 af82     I`[...>.o.."t...
 800b21c:	f6e3 3f3d 9e8b e5fd 0043 57fa ef1d bee3     ..=?....C..W....
 800b22c:	db3e 1f72 0dd0 ab3d 475b 2abf cb30 1d0f     >.r...=.[G.*0...
 800b23c:	bbb6 50f9 a1f9 c5a2 085d 6974 648f 0621     ...P....].ti.d!.
 800b24c:	14df f7dd df1b dd6f f2e9 98fa 160c ef9d     ......o.........
 800b25c:	da78 5e78 a3f8 d52d 8ba6 f565 346b afd8     x.x^..-...e.k4..
 800b26c:	c62b 009e 563d 1201 02c5 de0f 31a2 b046     +...=V.......1F.
 800b27c:	2244 623f d726 7ae5 a752 13f2 b3d9 b8de     D"?b&..zR.......
 800b28c:	7796 9566 555a da29 877b 9db6 e19e e35c     .wf.ZU).{.....\.
 800b29c:	3a09 197f bcf0 263e d9fb cf07 68ad a84e     .:....>&.....hN.
 800b2ac:	1e5c 3358 ac7d 3efb 1416 8807 eecf 2fad     \.X3}..>......./
 800b2bc:	fae8 e8c2 872e 212e ecc9 2f2a ed52 cefe     .......!..*/R...
 800b2cc:	d20e 4f29 2e7b 73b0 3742 0eda fa1d b9cd     ..)O{..sB7......
 800b2dc:	1a3c f409 4d4b ff65 41f2 3621 d7dd aa70     <...KMe..A!6..p.
 800b2ec:	9fe0 2cfd 26fb d0f2 a8c8 0d53 58c8 0211     ...,.&....S..X..
 800b2fc:	db64 2cf5 ecb3 cf42 4f90 1d22 3dae bf89     d..,..B..O"..=..
 800b30c:	d2cd c3c2 4846 f463 d2d1 35d7 bfc0 741c     ....FHc....5...t
 800b31c:	9fe8 29bd fbde 0035 e77b f562 e1b4 b39e     ...)..5.{.b.....
 800b32c:	3f44 df6b b261 0faa 4ab0 5daa f5fa ece4     D?k.a....J.]....
 800b33c:	5f88 fe66 31cb 7b4f 212e 3205 6c46 9faa     ._f..1O{.!.2Fl..
 800b34c:	d87d 8f98 9a0b 00c6 1022 1f97 2a6f 289b     }......."...o*.(
 800b35c:	d478 1233 2c07 3eb1 4032 b206 332f d34f     x.3..,.>2@../3O.
 800b36c:	0a6c 76b0 b55e 1964 b127 bca3 9a3d a129     l..v^.d.'...=.).
 800b37c:	331d db1f 7150 8982 1265 9eff 5362 931f     .3..Pq..e...bS..
 800b38c:	9bc0 374c 378c 2241 f41a 0f71 7627 87e8     ..L7.7A"..q.'v..
 800b39c:	848d 5219 5cb0 87cf 0243 9977 ada1 a549     ...R.\..C.w...I.
 800b3ac:	e7ba cf49 e37a 8d14 7bf3 2082 c2d0 28a6     ..I.z....{. ...(
 800b3bc:	2b88 ce02 7ce3 117f bda3 85ce 3ed7 8775     .+...|.......>u.
 800b3cc:	b7b6 8467 950e 56db ecb5 7263 173a d164     ..g....V..cr:.d.
 800b3dc:	0ad1 30b8 f9c7 2e58 e9bf a38a 0b6f daed     ...0..X.....o...
 800b3ec:	d34f 1f3d 73a6 65dd fdd9 fe05 84cd 3631     O.=..s.e......16
 800b3fc:	bef8 0f6c 70f2 4dfc dbf5 1ecb 6cf5 1b12     ..l..p.M.....l..
 800b40c:	d52b 80ac cb0c 9aac 7572 58df 0dd0 c829     +.......ru.X..).
 800b41c:	cdbe af79 5373 7db4 0457 53a1 6b74 b2f6     ..y.sS.}W..Stk..
 800b42c:	7907 bbaf 3df9 4161 47df 0bc7 7e99 ef42     .y...=aA.G...~B.
 800b43c:	0f2a f4b9 fdec 640a 9e8d 98dd 7e2b b248     *......d....+~H.
 800b44c:	05a0 508b c11b e372 21cd 9977 e2de 4980     ...P..r..!w....I
 800b45c:	b66c f374 54ee bf90 8c0c 4b36 d7b4 d72c     l.t..T....6K..,.
 800b46c:	e6bf 6c86 fd77 1d05 b5cb 65a2 ffc8 3d4b     ...lw......e..K=
 800b47c:	862f 05ca 92f3 8aff cdf4 37ad d11b dcb0     /..........7....
 800b48c:	f624 d705 8798 ff8b d31e fca8 181f d14c     $.............L.
 800b49c:	9ac5 f5ab ec7a 9c73 c2c4 9d9c 6015 4d8c     ....z.s......`.M
 800b4ac:	4df1 5bd6 7215 7b2a db6a 8dc3 8cf4 456e     .M.[.r*{j.....nE
 800b4bc:	26cb 2a31 addf c778 8b61 cfe9 5f0b d7f0     .&1*..x.a...._..
 800b4cc:	7ad8 e1ee d6f6 5446 ea8c 3f8d 874d f29b     .z....FT...?M...
 800b4dc:	40ce cdbc 4d3b 5162 be87 09a3 b46d 6de4     .@..;MbQ....m..m
 800b4ec:	6de6 fb24 b6cd 3cd7 b5a6 cf62 9b20 dcbf     .m$....<..b. ...
 800b4fc:	8a12 5a41 f28f 991d f127 ec91 8fef 5d23     ..AZ....'.....#]
 800b50c:	185f 38d3 9378 bb3d 4d4b 015e f6af 5a2c     _..8x.=.KM^...,Z
 800b51c:	df67 973c e37d d49b f191 0da2 c86f d13d     g.<.}.......o.=.
 800b52c:	9ece 7da1 85ab ed2c 4c6b 2263 dcaa c5dc     ...}..,.kLc"....
 800b53c:	76b9 fe56 6432 9f28 0f91 cf95 4b62 728f     .vV.2d(.....bK.r
 800b54c:	d34f f97f e580 9be6 24c6 aaf7 b367 fbb6     O........$..g...
 800b55c:	4826 3ca8 7945 1499 23e9 b2ed 150c dff3     &H.<Ey...#......
 800b56c:	56d4 01aa 705f 0b27 4eec da62 0e52 c7ea     .V.._p'..Nb.R...
 800b57c:	a563 e987 cda1 3eab 7216 943b 5643 4ec0     c......>.r;.CV.N
 800b58c:	f5bc 42d3 e9bc 67a4 0ae3 ccf8 f45e 3ecc     ...B...g....^..>
 800b59c:	8b9a 3369 f59e 760c 3dcd 6e41 cf51 7d08     ..i3...v.=AnQ..}
 800b5ac:	9997 bcb4 87e0 a1e9 2b8d f44b e4fb a4c7     .........+K.....
 800b5bc:	ddb6 9eac d549 d14d be0b d206 4733 367b     ....I.M.....3G{6
 800b5cc:	aca4 bce7 9cc4 597d b05a cecb 1f23 b3d4     ......}YZ...#...
 800b5dc:	367f 589c 0ca4 55b1 8aaf e1d0 9e79 b0c4     .6.X...U....y...
 800b5ec:	d0dc c483 0ee3 8029 7c74 8448 cd4b 0dfb     ......).t|H.K...
 800b5fc:	f0de 9c82 00e3 89d0 4f25 ecf6 f20d ec7d     ........%O....}.
 800b60c:	97f4 bcd0 9bc7 d893 ba67 bc75 c659 9708     ........g.u.Y...
 800b61c:	6ae0 648d 1fbb 9ea8 c805 6827 d867 9be0     .j.d......'hg...
 800b62c:	eb9b f106 17d6 8934 4b85 9d4e 4358 4c2a     ......4..KN.XC*L
 800b63c:	37c4 0faf ce80 a763 0bbf 7afa 6bce d057     .7....c....z.kW.
 800b64c:	8c6b 036a 31ae 4263 5f87 87cf e640 ce21     k.j..1cB._..@.!.
 800b65c:	013e 01ce 7744 d48b 41e9 5df3 5e78 1af3     >...Dw...A.]x^..
 800b66c:	f9f6 1033 197f bf34 7d79 a698 79ec 16bc     ..3...4.y}...y..
 800b67c:	ca74 a4f3 7413 fde5 6e55 daf6 94dc 6541     t....t..Un....Ae
 800b68c:	0729 313d 1edf 6320 96ca c1b1 3743 4533     ).=1.. c....C73E
 800b69c:	b8a3 e9bd f7b3 4756 fcb7 5b33 669d 640c     ......VG..3[.f.d
 800b6ac:	d325 f45e cb01 6cc5 eba7 3416 f68e df5a     %.^....l...4..Z.
 800b6bc:	857c 3dac 76ed c266 4c5e e742 bf98 f87c     |..=.vf.^LB...|.
 800b6cc:	5a9a fee6 e0f6 ce22 3d55 e16a ec69 9be6     .Z....".U=j.i...
 800b6dc:	368f e2bd d552 3baf 4b9d c2c4 6e5f 1b5e     .6..R..;.K.._n^.
 800b6ec:	e37a 1d9f 9beb ccc7 9e9f 5bd1 14d8 86de     z..........[....
 800b6fc:	6b9e d0c2 de98 17f8 a07c f0f4 d130 6722     .k......|...0."g
 800b70c:	8d59 c663 1f4d 75d5 f4d9 6fba ec96 a8fc     Y.c.M..u...o....
 800b71c:	b1b4 7c82 2f3e ef15 6c49 a1d7 682f 0b55     ...|>/..Il../hU.
 800b72c:	dfb2 4f3d c0a1 b711 a0ce e8cc f31a fb1a     ..=O............
 800b73c:	3808 0f0d 966e 4873 cc01 49de b3ac 14c1     .8..n.sH...I....
 800b74c:	3d47 de01 af1d acf6 7a2e 1987 36d3 ca05     G=.......z...6..
 800b75c:	4e53 7a03 9eda ec17 0175 1db8 7a5f 32aa     SN.z....u..._z.2
 800b76c:	7ac0 a091 e468 b7bd 55e8 196d 22be 6b5c     .z..h....Um.."\k
 800b77c:	172c 707a 6711 c148 3fe8 3fb0 7ef1 d32f     ,.zp.gH..?.?.~/.
 800b78c:	9e85 e8eb 3fb3 99ec 955c 02cc 5b5a 4c46     .....?..\...Z[FL
 800b79c:	a90f 7e51 f29a 17da 91d4 2d99 cfd9 0084     ..Q~.......-....
 800b7ac:	ffae e78c 1a0c 7860 b72c 5c8c e8c0 9641     ......`x,..\..A.
 800b7bc:	0025 d9c3 d0ff 60d8 bf4d 3c0c 6cf2 582a     %......`M..<.l*X
 800b7cc:	b2f2 7a6f dbeb fa86 2d66 62e2 718c 4bb5     ..oz....f-.b.q.K
 800b7dc:	4436 985a 9fe3 3117 23ba bde3 7117 e73a     6DZ....1.#...q:.
 800b7ec:	678c a137 ce7d fd7b 386c e7e6 6685 d670     .g7.}.{.l8...fp.
 800b7fc:	c9ea 0196 7fdc 5380 2fe5 2c3f ab3d bb54     .......S./?,=.T.
 800b80c:	c864 2ad2 d844 8661 4ec3 5364 84f0 f417     d..*D.a..NdS....
 800b81c:	4f23 466b 2094 433b 534d c86f 0c8e 8978     #OkF. ;CMSo...x.
 800b82c:	f5de 37a0 e5ce 8e63 23fc faab de51 37fb     ...7..c..#..Q..7
 800b83c:	c6f4 b3a7 b0ee ecba 3245 f8e7 0c8e d9f0     ........E2......
 800b84c:	d219 9ac3 ae18 8d54 0083 b3d2 4c8e 6b94     ......T......L.k
 800b85c:	a73e 5303 ad52 d1d4 b465 1f6b cf21 bbd8     >..SR...e.k.!...
 800b86c:	5d76 78ac d1b2 078c f463 c917 2616 0051     v].x....c....&Q.
 800b87c:	b239 58b5 60a0 f06e b26f 07b0 d21b b2c3     9..X.`n.o.......
 800b88c:	d567 e9ea 6801 358a ed2b cce1 8f69 80f5     g....h.5+...i...
 800b89c:	cb59 c99e 41d5 6b85 9e8b cf41 ee39 fb98     Y....A.k..A.9...
 800b8ac:	d405 9c3b 640f 7fbd 93c7 4cf8 9d83 91b9     ..;..d.....L....
 800b8bc:	fe00 dbe5 702c b6e6 eb23 6bfb d749 41df     ....,p..#..kI..A
 800b8cc:	de53 3d20 de6b c19e b09c fe17 f3cd 4038     S. =k.........8@
 800b8dc:	76aa 7797 30db 021d e0f1 7e6e 81bc 2d6f     .v.w.0....n~..o-
 800b8ec:	fd55 a5e5 2696 d9d2 7f54 15b1 c65c 737d     U....&..T...\.}s
 800b8fc:	984f f4b2 9bec e433 6fcc 7f28 3bfd e920     O.....3..o(..; .
 800b90c:	8b03 279f e67b 5f09 bce3 51cf 7746 3dbe     ...'{.._...QFw.=
 800b91c:	ecf6 7263 45c0 c017 f6aa d0bc 0f9a a168     ..cr.E........h.
 800b92c:	7b43 68b6 2880 380f 87a2 d184 757a d7e1     C{.h.(.8....zu..
 800b93c:	b312 efeb 3180 9232 6e6d fd0e bc5c d1d6     .....12.mn..\...
 800b94c:	bc51 5869 c57c d70a 7b06 f706 4f7f 6c6c     Q.iX|....{...Oll
 800b95c:	f622 30cd 1ad7 fba2 dae1 0b68 8a5d 37c0     "..0......h.]..7
 800b96c:	48bc 3d81 687b 4071 fab5 524d 2cd6 567b     .H.={hq@..MR.,{V
 800b97c:	9787 91ba c8c8 799e 3feb 9f0b 33db 3765     .......y.?...3e7
 800b98c:	badf 8b3d 8327 9bac 9a09 498a fb5b f796     ..=.'......I[...
 800b99c:	7a6f 2d8d de52 7abb 01f6 0d81 d9ec 89da     oz.-R..z........
 800b9ac:	b0f8 acf4 9e82 b030 6f67 3d91 be6b 592f     ......0.go.=k./Y
 800b9bc:	9cf6 0b3f e59f 0635 bc51 aad9 7b3d 1891     ..?...5.Q...={..
 800b9cc:	e871 bb3b b672 88d5 6daa 86b7 f8e8 8d34     q.;.r....m....4.
 800b9dc:	5e73 9a2d cf65 9672 6b3d 6bb9 57f2 1393     s^-.e.r.=k.k.W..
 800b9ec:	e6b1 6d9f 1e0a 1af2 eb80 29ee 880e f2d6     ...m.......)....
 800b9fc:	661a dca8 3dba 98fb 98b4 dc6d bae1 519b     .f...=....m....Q
 800ba0c:	6c8e a109 9e36 a1dc 56bd f727 fccf 8533     .l..6....V'...3.
 800ba1c:	8d70 f998 089b 67b2 ffd2 fb58 86e6 7887     p......g..X....x
 800ba2c:	7bd3 ed3f d9ec 89be cde2 e316 7780 a989     .{?..........w..
 800ba3c:	9826 64ba 9053 3ca6 874e 16d6 bf64 b9be     &..dS..<N...d...
 800ba4c:	9eb2 6537 d8df 6a13 767a e0f2 4de2 197f     ..7e...jzv...M..
 800ba5c:	fa32 2423 81ee 5e35 1ef6 d66f c2b2 a866     2.#$..5^..o...f.
 800ba6c:	ff45 ee0c 6cd9 fb33 3998 42a1 bb2d cd15     E....l3..9.B-...
 800ba7c:	f126 a960 79c9 33ea 4c91 1841 a079 0d79     &.`..y.3.LA.y.y.
 800ba8c:	e0e3 f919 fe2a c48c 2f39 5cc8 1e9b 4eeb     ....*...9/.\...N
 800ba9c:	f367 e64e 9960 496b e2cf 8e49 350e 51d5     g.N.`.kI..I..5.Q
 800baac:	6fbd 5f42 2b67 00b1 77a0 0719 5fcd d02b     .oB_g+...w..._+.
 800babc:	15b3 f41e 69ec 01fa 33da bcf9 e4ee 2fa1     .....i...3...../
 800bacc:	fbc8 e6fc bf59 e406 bc35 19eb a454 9af7     ....Y...5...T...
 800badc:	ba9c 54ad 95bb 2dcf 52e5 3e7a 4d7c cb79     ...T...-.Rz>|My.
 800baec:	4a36 32e6 ac07 813f e9cc 43c1 378b 254f     6J.2..?....C.7O%
 800bafc:	a3a8 44b3 53d8 86bf 3ee7 ce47 48aa dd9b     ...D.S...>G..H..
 800bb0c:	c42d bd01 97f1 e9e8 be68 7533 5f4b d9e6     -.......h.3uK_..
 800bb1c:	1096 e2f7 fec9 c462 5d43 60a0 96ce 8ea0     ......b.C].`....
 800bb2c:	26fe f5db 90e0 bbb7 7e2d 2fba e7c8 8370     .&......-~./..p.
 800bb3c:	75e3 5a55 3ba9 3cd5 a877 7807 2db5 d10a     .uUZ.;.<w..x.-..
 800bb4c:	8c59 c279 f0aa df97 ef52 885a 8605 3313     Y.y.....R.Z....3
 800bb5c:	39ee 2e16 6309 5904 3525 989c face 9c1f     .9...c.Y%5......
 800bb6c:	0d9e 142a 4f1d 6b02 f340 8e7d cf15 2873     ..*..O.k@.}...s(
 800bb7c:	38b5 fa00 bc35 9bee a12c 8331 b78a 2fb8     .8..5...,.1..../
 800bb8c:	0da6 5a94 68b1 e24f 53df 1e2b 27ea e7d0     ...Z.hO..S+..'..
 800bb9c:	9b58 7614 6bc9 1bf4 90c9 947a 0407 8d4c     X..v.k....z...L.
 800bbac:	5e69 bccf 69e7 56a3 36df 6bf4 1e68 a57c     i^...i.V.6.kh.|.
 800bbbc:	0f9e ce2c bbe5 5eca 2f11 f324 60f4 a5a4     ..,....^./$..`..
 800bbcc:	c6ec 64fb 05d4 f1fe 2175 e074 84fe dc0c     ...d....u!t.....
 800bbdc:	83e0 dbeb 579e 5807 d532 3f1b a0f6 2d67     .....W.X2..?..g-
 800bbec:	b8e1 df58 e836 bea9 7709 a4ea 3609 3a8d     ..X.6....w...6.:
 800bbfc:	ad67 8c69 ec37 daab 4e1a 7970 9cb7 179f     g.i.7....Npy....
 800bc0c:	d692 6635 f138 ee27 342b 6789 1bf8 a108     ..5f8.'.+4.g....
 800bc1c:	3947 d525 61f3 6997 1fcc 5d7c cfbc 8dd5     G9%..a.i..|]....
 800bc2c:	d79d 3c03 9dd4 c55e 5903 685c db0d 60a9     ...<..^..Y\h...`
 800bc3c:	937c 2900 abd5 f59e dfc6 0f22 6e4d 5bf2     |..)......".Mn.[
 800bc4c:	a6ff e51d d49f 5f58 dc1f e6fc 29be 8008     ......X_.....)..
 800bc5c:	454a 42e5 b34a c273 cf15 e6f1 fcf9 a0e6     JE.BJ.s.........
 800bc6c:	7cd2 e03d 7c55 1484 e55a 337e da23 cf67     .|=.U|..Z.~3#.g.
 800bc7c:	a4f8 14b0 b962 ccd9 f5b6 7f9d 70f9 d048     ....b........pH.
 800bc8c:	b80d 7ec7 a947 e8a0 e60b a6cd 82b3 6a87     ...~G..........j
 800bc9c:	578a ecff ff0c eccc 372e 6fbf 4582 9d68     .W.......7.o.Eh.
 800bcac:	1535 f8ec 47e1 7aef 4f16 398e 8462 94dc     5....G.z.O.9b...
 800bcbc:	e18a 18b7 3a59 4348 707a da69 a02a d5da     ....Y:HCzpi.*...
 800bccc:	d67a 9ae7 8246 3d96 67fb f867 1e1a 01eb     z...F..=.gg.....
 800bcdc:	d893 1b00 5bd3 d88b c7a0 c972 b233 780b     .....[....r.3..x
 800bcec:	a368 664d 191c 8563 b2b7 e4b4 9bc3 04de     h.Mf..c.........
 800bcfc:	5219 7317 d893 54d7 b17f 7ed9 e817 6ae7     .R.s...T...~...j
 800bd0c:	df65 98ac 4f21 b3f9 8917 da25 da68 ba3b     e...!O....%.h.;.
 800bd1c:	842e f3ee af84 5b50 f1bd 85e7 7ae6 d3b8     ......P[.....z..
 800bd2c:	68fa 2149 7b20 30f6 2cf5 71a2 8ff9 f7c9     .hI! {.0.,.q....
 800bd3c:	ce49 3501 4ec0 f6bc d46b 80e2 c78a 473e     I..5.N..k.....>G
 800bd4c:	f240 b68f 73bc c3fe 9688 e1bc d6e0 ecf4     @....s..........
 800bd5c:	3e73 54d4 8efe 9fd0 e317 3ae8 7453 41e4     s>.T.......:St.A
 800bd6c:	d9ea 0e82 cb59 7157 ff2a 4d9f 99eb fe67     ....Y.Wq*..M..g.
 800bd7c:	b380 ad3c 3897 f6a0 c109 ada6 75ef ae81     ..<..8.......u..
 800bd8c:	19c3 c7aa 9eb3 522d 5227 7b33 a137 d0ef     ......-R'R3{7...
 800bd9c:	09c3 f716 0fb1 3713 d194 cbc1 f402 c1b0     .......7........
 800bdac:	3966 5a61 df98 75ac 8487 ce3c f4a1 b1c6     f9aZ...u..<.....
 800bdbc:	975c 6adc 3d4e eea2 5e32 373b 3e7a 648c     \..jN=..2^;7z>.d
 800bdcc:	a685 e7d8 c86a 87a5 d444 6305 efe7 b228     ....j...D..c..(.
 800bddc:	09c5 1303 1b90 7342 4e35 73d9 635e ab8c     ......Bs5N.s^c..
 800bdec:	4761 7a0e 73ee 5c3c e31b af9a 5ec8 4a96     aG.z.s<\.....^.J
 800bdfc:	a635 e51d ebbd 8059 9bc4 bbd8 a60b c120     5.....Y....... .
 800be0c:	e8f4 e908 1f97 072a 84e7 e586 ac6a cd7d     ......*.....j.}.
 800be1c:	0fe6 e73d cecf cde2 e790 b3fe 4c49 6edb     ..=.........IL.n
 800be2c:	3a6d 02bc 55d5 7bda 1a27 0970 8fbb 57d0     m:...U.{'.p....W
 800be3c:	8835 6002 eb32 7a61 2067 6d31 f997 8c98     5..`2.azg 1m....
 800be4c:	3f27 cdd3 0e7a f02d c054 9d5c bde9 a35f     '?..z.-.T.\..._.
 800be5c:	c3e7 ae52 cb35 0fb0 4208 fd9e d033 b9b3     ..R.5....B..3...
 800be6c:	3226 31b5 16b5 ed6d 13d0 f54d cae2 a126     &2.1..m...M...&.
 800be7c:	2efd d76c 1e84 c12e ca34 d514 271c 0b4c     ..l.....4....'L.
 800be8c:	f475 78b3 4173 651f e6bd 1416 cc62 2f43     u..xsA.e....b.C/
 800be9c:	85d3 196c 4e51 8cf1 d7bc 7a03 04d6 c577     ..l.QN.....z..w.
 800beac:	32b8 316d 06bd 9b9b 34ff 74b7 a441 7f79     .2m1.....4.tA.y.
 800bebc:	a239 682c f372 f927 0953 bc8a e024 e984     9.,hr.'.S...$...
 800becc:	7cc8 9a93 deea 6936 ebc1 66fc 3fcd 0c93     .|....6i...f.?..
 800bedc:	ff9c 784a 96cb 624e 8cbb 3eb7 907d 398a     ..Jx..Nb...>}..9
 800beec:	78ae ac47 3d05 897b ccf4 3dad 8c95 b113     .xG..={....=....
 800befc:	048f ed6e 62e6 e807 a7ab 0af2 86f1 e8a4     ..n..b..........
 800bf0c:	d2e5 41e9 5d4c 7fd5 e65d 8aeb af39 3452     ...AL]..]...9.R4
 800bf1c:	c270 940c 9b56 39da cf3d 9f09 8259 f54a     p...V..9=...Y.J.
 800bf2c:	00f4 bda3 6879 9ac0 da7a 8500 eec0 2b7f     ....yh..z......+
 800bf3c:	3768 8ffa b216 5667 901c 5dc5 33db 1f42     h7....gV...].3B.
 800bf4c:	7d2b 014f 6dbf 3373 fb79 9cc6 cd35 1bd0     +}O..ms3y...5...
 800bf5c:	278f 6215 8b24 82e5 21ac a84d 7e84 9f85     .'.b$....!M..~..
 800bf6c:	97f1 c811 7e21 10b4 9b2d 58eb 9af1 1b3f     ....!~..-..X..?.
 800bf7c:	71fb 6287 40fa 93e9 0ec7 a79d 70e9 d569     .q.b.@.......pi.
 800bf8c:	1761 aa92 797e 4548 fabe 6d75 8130 f3e7     a...~yHE..um0...
 800bf9c:	27ad 8c2e 3d0b 637b 26cb 5375 d5c6 79cf     .'...={c.&uS...y
 800bfac:	d1c8 4d6a c2e6 46d3 f17f 28e2 3381 b41b     ..jM...F...(.3..
 800bfbc:	876d 15f6 c537 3521 b46d cd8e b77c 3692     m...7.!5m...|..6
 800bfcc:	0100 37ae c81e c336 20c7 7b9b cdad 55d5     ...7..6.. .{...U
 800bfdc:	b2c1 f37c 4b14 8ac0 6e43 e1dd edbe d19b     ..|..K..Cn......
 800bfec:	9692 85c7 2688 c099 5c5b 9a41 3157 7319     .....&..[\A.W1.s
 800bffc:	c342 45f9 f8cf b5a4 04f5 3d30 765c 4927     B..E......0=\v'I
 800c00c:	b4d6 abcf d3f8 18f4 4cd7 144d f6f6 3a9d     .........LM....:
 800c01c:	3111 79f8 6da0 52e1 fc73 b7cf 962a ddbf     .1.y.m.Rs...*...
 800c02c:	f648 e451 5987 6a6c ef38 4fde 3d95 d3e3     H.Q..Ylj8..O.=..
 800c03c:	e65e 080f 9d59 5ee3 35ee 37cc 3977 e95c     ^...Y..^.5.7w9\.
 800c04c:	737d 44b4 dea6 c790 38db 482f 7511 8b5e     }s.D.....8/H.u^.
 800c05c:	5da8 0de5 79e1 0df1 2ad9 02da 8a64 0f4f     .]...y...*..d.O.
 800c06c:	45dc c04d 70d1 8048 0a66 754d 0267 5f2e     .EM..pH.f.Mug.._
 800c07c:	b480 823b f157 f411 f779 d16e d3d0 0c0b     ..;.W...y.n.....
 800c08c:	e3de 90ea ae3a 34c6 a8c6 ee38 b0e8 4e73     ....:..4..8...sN
 800c09c:	f162 6ee4 507e bb71 cbf3 719e 2ef6 eef3     b..n~Pq....q....
 800c0ac:	eaac fe51 c7bb 7d6e a560 7fb2 0a2e 9846     ..Q...n}`.....F.
 800c0bc:	c49d a09e e6dd 7a69 f729 e8bc 6a2b 960c     ......iz)...+j..
 800c0cc:	0c03 56dc d050 f5ce cb4c 5c47 d476 9446     ...VP...L.G\v.F.
 800c0dc:	ede3 c98f c4e1 de6e 9769 29bf b730 d5f2     ......n.i..)0...
 800c0ec:	caf6 413c 6e9a d4b4 dc55 48aa 4446 97f3     ..<A.n..U..HFD..
 800c0fc:	a44f 7e0d e4ac 1e2b 1f6f 0333 946c 14db     O..~..+.o.3.l...
 800c10c:	a54e e571 361f 2ffa 6199 ba0e 0209 fba4     N.q..6./.a......
 800c11c:	6959 79ef ab8d 9bfc 07a7 6423 3b0b ada7     Yi.y......#d.;..
 800c12c:	bd67 8c6f 35b2 f5bb fe24 3122 c189 4e1a     g.o..5..$."1...N
 800c13c:	aeb4 3563 f33d dd15 9ab1 d5c8 febf 0dfd     ..c5=...........
 800c14c:	9c39 9ef8 e59a 639a 4ad0 c71b f6db f776     9......c.J....v.
 800c15c:	6589 ef51 df67 9094 0a5d 8229 c034 e62e     .eQ.g...].).4...
 800c16c:	d70e a53e fb20 fe0a 3c67 e249 915f e907     ..>. ...g<I._...
 800c17c:	082b 7822 37c6 962d 7664 14c9 39da dc49     +."x.7-.dv...9I.
 800c18c:	fd7d f64d 071c e55c 9e13 7757 1ff3 ee3d     }.M...\...Ww..=.
 800c19c:	019c cbb2 2ab6 fd2b b3d0 aff6 6c49 96d4     .....*+.....Il..
 800c1ac:	e36b 30aa 0afa 15ff 9ac5 5433 bcb3 694e     k..0......3T..Ni
 800c1bc:	a9dd d62e bc03 9eb6 eb50 135a 5cc9 bad0     ........P.Z..\..
 800c1cc:	73cb 3adc 91dd 82f9 624f fcf5 8fc7 ffc9     .s.:....Ob......
 800c1dc:	b8f9 6f43 13f0 cdea 7d7d 8755 66d8 db12     ..Co....}}U..f..
 800c1ec:	bba1 ee5d 959c 7056 2fdd 3f7d e063 d782     ..]...Vp./}?c...
 800c1fc:	031c 8a9b 76f2 d1bb ea6d 17d9 d67c 7225     .....v..m...|.%r
 800c20c:	90f4 6daa 81ff 4bbd 2f3c b3d8 d54f b497     ...m...K</..O...
 800c21c:	31ce 0e3d f0c7 7e27 0f94 9e79 6afa 645e     .1=...'~..y..j^d
 800c22c:	a774 f416 d113 9c57 29ce fbc4 d3a4 879d     t.....W..)......
 800c23c:	cc4c 8ccb f58f af97 4ac7 1305 15e7 45e2     L........J.....E
 800c24c:	23a2 22b3 ebb8 a884 9e98 37e7 d8af 4ab3     .#.".......7...J
 800c25c:	5c75 c999 6179 86aa a2cf a76c 24d4 e073     u\..ya....l..$s.
 800c26c:	f496 fa0c dd8f d156 2169 be40 1140 fba2     ......V.i!@.@...
 800c27c:	eeac a4b9 ce0d f191 37a0 a4ae be60 d090     .........7..`...
 800c28c:	9f6f 0eff 6c74 5b42 8e11 a998 4b2c 9bb8     o...tlB[....,K..
 800c29c:	ec49 7f8d ed4d b4d0 3d70 3b27 0328 2077     I...M...p=';(.w 
 800c2ac:	23a0 682e 346e 364d 3d37 35e6 f3ae 2d88     .#.hn4M67=.5...-
 800c2bc:	c7e8 b78c 5a2c fc6f 4659 f1b0 2528 7833     ....,Zo.YF..(%3x
 800c2cc:	7a4b 9c36 e8c0 4913 7176 a07f 07a6 c031     Kz6....Ivq....1.
 800c2dc:	ee52 e9b4 00a1 e906 b399 0937 64ac b9d3     R.........7..d..
 800c2ec:	f67e 80f4 5bd0 36e3 1270 4cd9 831b 984a     ~....[.6p..L..J.
 800c2fc:	65db 64de 8ee3 ec56 8ae6 b127 86dc 3570     .e.d..V...'...p5
 800c30c:	6356 598c d80e a622 13a9 ddd1 d3ec d8a6     Vc.Y..".........
 800c31c:	c1e1 bf83 bfc9 e8c9 0e7b bc11 b2f3 ca3c     ........{.....<.
 800c32c:	3bba e427 6e35 cf47 0f80 1dcb 47b2 1957     .;'.5nG......GW.
 800c33c:	dd9e c98f 52d1 b3f3 8474 b9a1 d660 0880     .....R..t...`...
 800c34c:	4303 66ba 8488 372e 15fb c48d b7dc ca76     .C.f...7......v.
 800c35c:	8970 ffa3 cd67 561b fbc4 34e4 c1b5 b65f     p...g..V...4.._.
 800c36c:	8069 3d07 4242 7016 25cc 7587 73ab 1775     i..=BB.p.%.u.su.
 800c37c:	ae32 e57a b561 ca3c b1ba 6300 6f06 cf49     2.z.a.<....c.oI.
 800c38c:	1c48 8577 284b 5199 ebee f81a 5e22 763c     H.w.K(.Q...."^<v
 800c39c:	08c6 dd16 334d c6f7 e13f d4d3 f228 b686     ....M3..?...(...
 800c3ac:	76f4 a3d5 2f20 5216 a469 8b63 8914 f37b     .v.. /.Ri.c...{.
 800c3bc:	6a6a 7deb 3d72 5c27 75c1 d09a d9fa f278     jj.}r='\.u....x.
 800c3cc:	e245 ed33 6457 c717 b9e2 701e cf43 c308     E.3.Wd.....pC...
 800c3dc:	f457 7986 3b01 5d27 2a77 3245 276f 000e     W..y.;']w*E2o'..
 800c3ec:	57de 1337 92a4 a439 0c70 2278 98de 1910     .W7...9.p.x"....
 800c3fc:	a573 2b09 590f 2a76 c1bf e82f f3cd def5     s..+.Yv*../.....
 800c40c:	b410 7653 9b2b af82 2010 d761 f56f 7d8a     ..Sv+.... a.o..}
 800c41c:	724c ff79 4c25 c911 59a8 c3a8 59b5 1557     Lry.%L...Y...YW.
 800c42c:	af12 e6fb 8dec 410e dcc9 a713 b23c c495     .......A....<...
 800c43c:	e193 4cba fb75 9e56 d5b6 546b f8ef 7cb9     ...Lu.V...kT...|
 800c44c:	45c8 968e 9141 4bd5 f012 691b f38f 43f3     .E..A..K...i...C
 800c45c:	e82a 3369 1647 cec8 1172 d2b5 9542 3240     *.i3G...r...B.@2
 800c46c:	f417 32ee efce 1dd0 66e9 31bd d5bb 01f3     ...2.....f.1....
 800c47c:	c8f6 0b85 6114 2964 2639 7c9e d897 c7a1     .....ad)9&.|....
 800c48c:	605d 78da 0dc5 bd9d 7b19 3199 8dd5 5237     ]`.x.....{.1..7R
 800c49c:	0d6f 2827 deba 9aac 4b74 19fe 5a9b d576     o.'(....tK...Zv.
 800c4ac:	3b49 02a1 cd4a 0e1f 7111 d923 7ab7 7ae4     I;..J....q#..z.z
 800c4bc:	ba9a c016 1071 3d51 e822 139a e9da 58c1     ....q.Q="......X
 800c4cc:	9a69 8852 e976 f9d8 8d71 9750 d879 7d08     i.R.v...q.P.y..}
 800c4dc:	8785 c79e 1900 6175 f6d1 f33c dd3b 0ebc     ......ua..<.;...
 800c4ec:	2305 11ec ca2d 32ca f1d4 247f 36f3 d9ec     .#..-..2...$.6..
 800c4fc:	2030 bb2f 0dc0 0c65 1f9a acb1 32d9 b5e7     0 /...e......2..
 800c50c:	5cc3 bb36 6695 8999 5ea0 ca3f 8b36 583f     .\6..f...^?.6.?X
 800c51c:	6ea9 1119 1055 179f b3a6 89df 78db e33a     .n..U........x:.
 800c52c:	df49 a395 290a b9eb f278 e40f 475d e61a     I....)..x...]G..
 800c53c:	bd6b d3f7 f4de a1a2 12db f96a ce5e 7de1     k.........j.^..}
 800c54c:	5832 ad87 60ae 6f86 9ec1 f891 db00 cd18     2X...`.o........
 800c55c:	a611 765c a62d 19e6 a514 b8b8 36d1 7162     ..\v-........6bq
 800c56c:	5142 d9cd f479 91dc bc73 dd7b 4d96 00c2     BQ..y...s.{..M..
 800c57c:	5d8e 798e 6d9b e3cd 3e77 91aa e6ec 6c25     .].y.m..w>....%l
 800c58c:	558d 996d 2b03 32f5 5ff3 260d 648a 78cf     .Um..+.2._.&.d.x
 800c59c:	758e 29b1 424c 15f3 e9bd 6f45 621c ebce     .u.)LB....Eo.b..
 800c5ac:	4d16 0732 aeda 2f67 6f12 3748 23f5 5f46     .M2...g/.oH7.#F_
 800c5bc:	0211 13e4 cd64 3cc6 5af3 04d4 0cfa 3ea0     ....d..<.Z.....>
 800c5cc:	ccda 8251 ddcd 8173 5297 56a9 c790 a06f     ..Q...s..R.V..o.
 800c5dc:	729d 0e87 ef90 3d93 bd6d d756 f817 17d1     .r.....=m.V.....
 800c5ec:	a0d6 1d52 c33a dc78 43a1 53aa d172 5cfb     ..R.:.x..C.Sr..\
 800c5fc:	b45d 6e6e 701c 1582 5d4f 56dc 3517 bd7f     ].nn.p..O].V.5..
 800c60c:	7d4a 791b 125a 15f7 4f1a 0092 caf3 0d0e     J}.yZ....O......
 800c61c:	a39d 754b c73d 24e6 cda6 d371 9fd4 3378     ..Ku=..$..q...x3
 800c62c:	1a57 52ed 4685 5593 f212 f789 7084 a289     W..R.F.U.....p..
 800c63c:	9715 7e19 35bb 209c 8ef1 4774 4d86 e539     ...~.5. ..tG.M9.
 800c64c:	2cd8 706b 7e29 f462 6439 9ed1 0fc4 2889     .,kp)~b.9d.....(
 800c65c:	9cef dc5d bc14 69e6 5aeb d304 a65f 6f68     ..]....i.Z.._.ho
 800c66c:	c0d9 b278 06f3 7bc3 f5fb bc0c 4359 5c6a     ..x....{....YCj\
 800c67c:	6451 658c 100e 3bef d132 6b52 7fd3 5935     Qd.e...;2.Rk..5Y
 800c68c:	bfd0 bb89 3ef9 7492 6bad b3d0 ccea 5109     .....>.t.k.....Q
 800c69c:	4330 51e5 2a76 280b de8b 08af 5d74 ae1d     0C.Qv*.(....t]..
 800c6ac:	654d 179f 38e6 185c 4760 f6b2 84bd f950     Me...8\.`G....P.
 800c6bc:	b95f bbc2 4f03 f823 4b16 2eb9 df07 62a2     _....O#..K.....b
 800c6cc:	c67a bedb 3f91 c9ab 3e96 79cb dceb 1278     z....?...>.y..x.
 800c6dc:	f7ff 391b c93f b768 c67f fd12 c6c5 1413     ...9?.h.........
 800c6ec:	6a95 8ca8 dee5 a127 daf6 69ae c94d a88c     .j....'....iM...
 800c6fc:	e29b 1311 bf20 c3e0 1e89 c717 07fa 59d6     .... ..........Y
 800c70c:	b274 1512 f4f3 a660 cf49 eaef 4daa ac2d     t.....`.I....M-.
 800c71c:	70e7 54ee 509a 7557 9f46 04d0 8661 d7b2     .p.T.PWuF...a...
 800c72c:	3608 d575 668f 0d8c 8461 3a82 d068 7221     .6u..f..a..:h.!r
 800c73c:	78a9 6fae 6d46 c3b0 eaa4 f89e 63d2 f717     .x.oFm.......c..
 800c74c:	4ccb 5af4 febf 9b7e 00e3 9f98 dff8 3a2e     .L.Z..~........:
 800c75c:	17a5 28f4 9c8a e37b c87d b4a2 3b86 4579     ...(..{.}....;yE
 800c76c:	7dcc 1114 137e d947 1ce9 aa9b 8fd7 5d73     .}..~.G.......s]
 800c77c:	300b 2fda d3ff 68e1 1fa1 6bcb faf7 048b     .0./...h...k....
 800c78c:	63f4 6f1c 09ef e57e ffc2 20ac b26f a1d3     .c.o..~.... o...
 800c79c:	3186 5d89 dbc3 3b46 f1f7 d436 473a 4eb2     .1.]..F;..6.:G.N
 800c7ac:	c6bd 79de ec77 8dfa 8101 1bdb e2ce a4c7     ...yw...........
 800c7bc:	7db6 e3d5 6fde dd6b e909 b20d 8dfa 46f5     .}...ok........F
 800c7cc:	0432 2471 1afb 278b 988f cff6 ef9e 319b     2.q$...'.......1
 800c7dc:	5fcd f9c6 bca3 e6b2 8b6c c260 beb4 7c1f     ._......l.`....|
 800c7ec:	5b2e 2e06 5f34 ee55 bcb1 b7b1 9054 8415     .[..4_U.....T...
 800c7fc:	5290 a530 e5ea 297b b519 c7f8 1aee db6a     .R0...{)......j.
 800c80c:	af57 6320 e20a f534 0e2a 6f77 36dc e1bf     W. c..4.*.wo.6..
 800c81c:	1f9d 2edd 4b62 5e1b 2459 63a0 eaff 56b4     ....bK.^Y$.c...V
 800c82c:	f37b df1a 2089 a13b ca35 54f4 88cc 63e2     {.... ;.5..T...c
 800c83c:	fc49 7c55 da9a c8f4 d637 2a48 6326 2a0c     I.U|....7.H*&c.*
 800c84c:	28b3 7036 31f6 e13e b2f5 973d a225 eb36     .(6p.1>...=.%.6.
 800c85c:	0f0f 9427 8a35 b20e a4df 4d09 0b32 82c6     ..'.5......M2...
 800c86c:	531e 6a43 c7fa 2df3 7b19 3b0e cf67 eb87     .SCj...-.{.;g...
 800c87c:	567a 12ad b85a 10a4 50af 3e64 a5c7 f66d     zV..Z....Pd>..m.
 800c88c:	af79 2cf6 b25c 33d3 1af0 4d02 f146 0be7     y..,\..3...MF...
 800c89c:	51f8 57d2 ad9e c5f6 d001 ee21 b386 319a     .Q.W......!....1
 800c8ac:	1470 bc01 5982 7658 25c1 a35b a917 fba0     p....YXv.%[.....
 800c8bc:	27b3 3b4c 06ce 5742 b389 6d9e 6319 b725     .'L;..BW...m.c%.
 800c8cc:	f933 e83d 041a 2e48 e61f 65fc 2f42 fb18     3.=...H....eB/..
 800c8dc:	02c6 acb2 d2e1 9e4e 5fcb 5020 3b20 05c1     ......N.._ P ;..
 800c8ec:	b81c 6f74 19ea 48b0 a11c 6c3d b138 0948     ..to...H..=l8.H.
 800c8fc:	33f5 de46 33fd 7b07 511e c635 d79b d500     .3F..3.{.Q5.....
 800c90c:	cbda 64de 6da1 8e7d 12ef 57d3 26aa 2276     ...d.m}....W.&v"
 800c91c:	8699 8eb4 fdee ec6b ed33 c395 52a9 37dd     ......k.3....R.7
 800c92c:	b418 1d08 df7e f632 7df5 7eb3 6976 0f55     ....~.2..}.~viU.
 800c93c:	4e73 c87d 09c3 a15f 3211 9744 e4bc cb02     sN}..._..2D.....
 800c94c:	fa06 dff9 b566 32fc a43f 196c b305 6560     ....f..2?.l...`e
 800c95c:	8244 462c 042b e9b0 0af8 b2fe ec64 5b9b     D.,F+.......d..[
 800c96c:	5f86 71de f9f0 bed0 d4c9 a7cb 09ef 247d     ._.q..........}$
 800c97c:	c6ec 76da 69bd 8a8f 7e77 0774 db3d 37d2     ...v.i..w~t.=..7
 800c98c:	6f45 17b8 e2af 42ff 5e0d 8f8a d5db 8db7     Eo.....B.^......
 800c99c:	54bc 1712 f0dc c42b 60d4 0bf1 22fe c811     .T....+..`..."..
 800c9ac:	4378 979e 1dd1 a08c 383b ea56 9f67 9e17     xC......;8V.g...
 800c9bc:	b517 feed 2ce2 8827 ed31 461f 6abd cc33     .....,'.1..F.j3.
 800c9cc:	3a24 e75d 3ae3 f577 a4aa 35d1 ee72 823d     $:]..:w....5r.=.
 800c9dc:	e4d9 d9b7 05e7 0a38 d2c6 21b1 e715 6635     ......8....!..5f
 800c9ec:	fa91 9674 e965 7f8d ed4f 67e6 cb4b b07c     ..t.e...O..gK.|.
 800c9fc:	e544 0715 e7af f635 8ebc 57e6 cf90 ca39     D.....5....W..9.
 800ca0c:	e442 2cf4 9753 b2e5 3985 fb61 c3b9 754a     B..,S....9a...Ju
 800ca1c:	3cb0 f39d 73b6 9d42 a2f3 8373 4b69 105f     .<...sB...s.iK_.
 800ca2c:	80cc c1cd bbd9 33d8 2ce7 e3a4 f82f 2940     .......3.,../.@)
 800ca3c:	d0d2 bb93 8429 2a7e b985 6623 aac6 c362     ....).~*..#f..b.
 800ca4c:	d66c f624 a931 5310 51d4 8c7e 113b 6fe7     l.$.1..S.Q~.;..o
 800ca5c:	754c f4c4 0763 c0a4 49f7 b15f d611 5490     Lu..c....I_....T
 800ca6c:	4415 f90c f5e1 5fde 5bcb 50cc ce51 2f2f     .D....._.[.PQ.//
 800ca7c:	eb20 992a 08e8 960f 2d79 201f ceaf f626      .*.....y-. ..&.
 800ca8c:	7ba0 95fa 8850 b84f 7df3 1e43 5d63 68f4     .{..P.O..}C.c].h
 800ca9c:	7aa9 512a e879 fb48 9817 bebe cc71 719e     .z*Qy.H.....q..q
 800caac:	1c0f d131 6a23 c7a7 345e b514 2fe4 2f2c     ..1.#j..^4.../,/
 800cabc:	cff2 8e5a 8603 2f13 28c9 86e7 a3c3 b160     ..Z..../.(....`.
 800cacc:	4352 19b7 7396 c9e3 bb5d 66d2 8948 ebf2     RC...s..]..fH...
 800cadc:	3639 9c35 7eb8 7b45 b0e3 cca7 fd50 4145     965..~E{....P.EA
 800caec:	d79c 672e 162a cd74 2261 53ea feaa bd5d     ...g*.t.a".S..].
 800cafc:	802c 34d9 0750 09b3 a3ce 4323 2bd1 60fc     ,..4P.....#C.+.`
 800cb0c:	c179 4efa ecc6 2f2e 1473 ddfd a726 d3d2     y..N.../s...&...
 800cb1c:	5af0 7cf6 9678 63b5 605d 5a0c ea84 c7da     .Z.|x..c]`.Z....
 800cb2c:	7424 5cb7 7abd ccad 3ba3 aa66 430d 780a     $t.\.z...;f..C.x
 800cb3c:	2b62 3c81 45cc 5ad5 396a 31af 2189 c65b     b+.<.E.Zj9.1.![.
 800cb4c:	e9bb 007d e13d 7818 fb9e c69a 84c5 6cab     ..}.=..x.......l
 800cb5c:	c748 738c e7f5 b215 232e 70d9 9be9 3e74     H..s.....#.p..t>
 800cb6c:	25df 839b 2c65 7f67 dc9d cacd a648 0620     .%..e,g.....H. .
 800cb7c:	552e 7a75 1d2c 211b 457d ec5a 2e56 84ce     .Uuz,..!}EZ.V...
 800cb8c:	5631 3784 ebe4 6616 7bac 54e3 543e abb6     1V.7...f.{.T>T..
 800cb9c:	d664 cee2 f8de d121 9c59 9abf 320f d6bd     d.....!.Y....2..
 800cbac:	c69d ea6c 3501 f981 75a7 988f 0a51 ff81     ..l..5...u..Q...
 800cbbc:	1b60 5a61 6bcc 81fc 654d 7e71 c5c1 280e     `.aZ.k..Meq~...(
 800cbcc:	e755 20d5 687b a55d a6d1 8e71 4319 d610     U.. {h]...q..C..
 800cbdc:	6e73 4a6a 902f 9b5d 70a6 a43e df80 4055     snjJ/.]..p>...U@
 800cbec:	7fd7 b284 7c9b ec06 13c8 9957 8895 bc7a     .....|....W...z.
 800cbfc:	3efd ae79 5f63 e590 960c 2104 48a2 e657     .>y.c_.....!.HW.
 800cc0c:	a17c 6947 63c6 4d3f c56d 0393 8725 dc7d     |.Gi.c?Mm...%.}.
 800cc1c:	571c 198f 7498 de45 95ed c959 3b4a 1cfb     .W...tE...Y.J;..
 800cc2c:	c8af 1eaa bf64 8a7a e205 a3c9 3b1f d327     ....d.z......;'.
 800cc3c:	7d42 37b3 12ce 699f 705a 9d57 0984 40d4     B}.7...iZpW....@
 800cc4c:	b416 28e0 ac8f 9bbe 5cb7 ef7a 889e dce5     ...(.....\z.....
 800cc5c:	d847 d893 b121 a793 9885 aab6 e5fb da30     G...!.........0.
 800cc6c:	9ec9 e265 9bc9 edbb 38ab 8cc7 eabb df16     ..e......8......
 800cc7c:	5737 b004 9324 4758 8766 968e 904e 94c5     7W..$.XGf...N...
 800cc8c:	a0eb c464 af74 f5bd 2bb5 16fa 5ef9 f74e     ..d.t....+...^N.
 800cc9c:	325d febb 3d0e 5069 de45 b4bc 5427 e73c     ]2...=iPE...'T<.
 800ccac:	a369 f9b6 f3b3 3c6f 183d bca1 cd9c 140b     i.....o<=.......
 800ccbc:	9e1b 3588 dd9f 5f7b f810 80fe e634 662e     ...5..{_....4..f
 800cccc:	37dc c44e 0a11 673a a917 526f 2873 fb9f     .7N...:g..oRs(..
 800ccdc:	9766 21ac b80f 89a7 7ba3 7682 40d0 bfb6     f..!.....{.v.@..
 800ccec:	25d8 b4c7 ad09 8cab 410b 9776 cbe9 89fe     .%.......Av.....
 800ccfc:	f65f 27e7 a0b1 69cb 6022 a5fb a9e8 c72c     _..'...i"`....,.
 800cd0c:	8f20 b15f f3df cdf7 e913 43ad d2f5 c579      ._........C..y.
 800cd1c:	8d93 c467 6f60 0b06 150d 413e 473c 9414     ..g.`o....>A<G..
 800cd2c:	dbbd 52b3 a423 4209 b66f f48f b17c f3a9     ...R#..Bo...|...
 800cd3c:	50ea 84c1 e7ae 8f66 386f 91d1 ff06 5e77     .P....f.o8....w^
 800cd4c:	8773 23c5 8699 7b58 030a 32e4 2cdf 64bb     s..#..X{...2.,.d
 800cd5c:	0b4c 88a2 19be ab2d 982d c13a b372 ce56     L.....-.-.:.r.V.
 800cd6c:	d194 8cb7 0541 5b69 3769 9d3f 4885 7602     ....A.i[i7?..H.v
 800cd7c:	4040 7790 268b 3694 a44e 614d ab5e 8887     @@.w.&.6N.Ma^...
 800cd8c:	5971 2d08 d1e8 59a2 f65c e342 01e3 4244     qY.-...Y\.B...DB
 800cd9c:	74e8 ae81 0bb4 2dd4 3c43 2866 877a f2a6     .t.....-C<f(z...
 800cdac:	fd14 0f39 ed3f 3fa0 5839 6ff0 f7e8 f0cf     ..9.?..?9X.o....
 800cdbc:	d66f ecbf 77e4 bfac 7951 5198 346e c07b     o....w..Qy.Qn4{.
 800cdcc:	38e8 9f8a 1a29 093e 47de 3ed5 f6a9 e80d     .8..).>..G.>....
 800cddc:	9717 bf47 37c3 bd9e b286 bf3e 37f6 3b9c     ..G..7....>..7.;
 800cdec:	90f7 1506 715f fa86 729e 2597 e881 23bc     ...._q...r.%...#
 800cdfc:	44b3 4b87 0a83 9363 bd1b 162e 7396 7a1e     .D.K..c......s.z
 800ce0c:	c06b 6b33 a3b6 1f71 659d 23c0 0d86 8f64     k.3k..q..e.#..d.
 800ce1c:	d70f 9976 1e0d 01a6 cdf6 b982 cc65 7b6b     ..v.........e.k{
 800ce2c:	7f62 a391 b3a7 47d0 0cd1 1137 bfbc abf1     b......G..7.....
 800ce3c:	e324 5a54 90f7 ea73 3f8d 474d 3739 453c     $.TZ..s..?MG97<E
 800ce4c:	e432 9120 04cf 91cf 70af 38ce 6fb3 eaae     2. ......p.8.o..
 800ce5c:	be84 168a 2da1 8468 80be 7116 0bf6 277e     .....-h....q..~'
 800ce6c:	9fac b556 cfda aaf0 bfda b634 15e7 1ff3     ..V.......4.....
 800ce7c:	7a06 7a35 eae7 a7d9 fbc0 ce17 2dbe e3f6     .z5z.........-..
 800ce8c:	cfd3 7696 67f1 df4c cfd2 7f63 bfa8 4a9d     ...v.gL...c....J
 800ce9c:	ecfd f522 4332 efe2 fb6c 6a69 a299 4900     ..".2C..l.ij...I
 800ceac:	63d1 a0dc 1842 e372 520b 2abb d226 2b64     .c..B.r..R.*&.d+
 800cebc:	c8c3 9d12 78ec 6c93 16ed bcb2 ab47 be7d     .....x.l....G.}.
 800cecc:	27de 52df e2be ff5f 9c4e b8d5 660a 88da     .'.R.._.N....f..
 800cedc:	50a9 5a0f 6fe6 eea3 1845 a5b3 7d66 d025     .P.Z.o..E...f}%.
 800ceec:	7e99 e436 b272 ae50 a90e 22be 8854 a215     .~6.r.P...."T...
 800cefc:	18bf d26a bddb 293f 67a0 a421 09ec 0bcf     ..j...?).g!.....
 800cf0c:	5433 5480 3608 9e45 28e1 8a01 9b12 8852     3T.T.6E..(....R.
 800cf1c:	9997 2c91 9868 4e21 5ba8 75ae 890c 6ff9     ...,h.!N.[.u...o
 800cf2c:	28ca 91db 1579 84ff 5b03 b37b 2cfc be8c     .(..y....[{..,..
 800cf3c:	75cc 7690 efba 2efe 3892 8746 cbb9 536c     .u.v.....8F...lS
 800cf4c:	06fb f681 dbd2 aea8 d5ca d688 7ec9 a269     .............~i.
 800cf5c:	b7b7 fe37 e089 5398 3dc9 032e f863 47cb     ..7....S.=..c..G
 800cf6c:	8879 3bbf 0332 71a5 9ec7 9fee a04b 3866     y..;2..q....K.f8
 800cf7c:	45a1 eed4 2d32 4b46 f63e d998 b865 f3fc     .E..2-FK>...e...
 800cf8c:	af82 b808 fe70 4872 5719 f416 7366 f3ab     ....p.rH.W..fs..
 800cf9c:	b46a 5104 e5a6 c84b 62cd 40a9 c5b5 1b2b     j..Q..K..b.@..+.
 800cfac:	f5cc 9c35 8850 8623 2716 00ee 1dfb deea     ..5.P.#..'......
 800cfbc:	ccbb c5ff 3ddd 301f f5ef 70bc d07a 155c     .....=.0...pz.\.
 800cfcc:	d18e 910d 7fca be4c 3c48 04cb 114b 3357     ......L.H<..K.W3
 800cfdc:	3feb 1497 ddd0 688d cae3 1290 2352 84ea     .?.....h....R#..
 800cfec:	d506 6f6a 7dcf 8b4c 5072 8dfd d727 df73     ..jo.}L.rP..'.s.
 800cffc:	e6c4 9b39 4df6 9a43 14f6 d753 4f5b 7fe2     ..9..MC...S.[O..
 800d00c:	7d60 5f59 f4f1 39a0 48cc b22f fa6f 9ae5     `}Y_...9.H/.o...
 800d01c:	69bd 5474 b730 2c1c 3c85 e8a0 ba32 5120     .itT0..,.<..2. Q
 800d02c:	d167 18d5 a437 b7ca 1e70 82bf b4c4 6b39     g...7...p.....9k
 800d03c:	290a 5c9e d1cc e74d 41ff 28d2 02b2 70c6     .).\..M..A.(...p
 800d04c:	bd3b c499 2ffe 6f1e 730a 7200 d3ac db94     ;..../.o.s.r....
 800d05c:	5f9c 222b dd99 cee5 4762 a9c6 6d77 f138     ._+"....bG..wm8.
 800d06c:	cd34 2b31 4c42 d6f3 9785 0436 a311 7501     4.1+BL....6....u
 800d07c:	9021 b309 cae3 63ed fd6f 226c 1399 da1a     !......co.l"....
 800d08c:	2d31 9b2d 70a6 dbc1 dcdc 7eaa d8cc 4a75     1--..p.....~..uJ
 800d09c:	8200 af87 e510 b8c6 7cdd 5347 78dd 27d0     .........|GS.x.'
 800d0ac:	de37 9e24 179f 7981 6885 73e9 70fe 66ed     7.$....y.h.s.p.f
 800d0bc:	f31c fe24 f93e 4332 51d1 500e bd00 0ab3     ..$.>.2C.Q.P....
 800d0cc:	75a6 5c5a e1a2 eb59 a0c8 ab28 b629 dfd3     .uZ\..Y...(.)...
 800d0dc:	8641 30d4 b2d2 0977 5c40 85a2 1705 1c9d     A..0..w.@\......
 800d0ec:	64f5 b341 63e3 f9e9 e240 6c9d 9544 060c     .dA..c..@..lD...
 800d0fc:	3045 25b3 c72c 9eba 0249 e864 dfdb 4139     E0.%,...I.d...9A
 800d10c:	2ae4 dd1c c718 17e5 e2cf 582b 895f e8ef     .*........+X_...
 800d11c:	8ea7 11cc 27b3 a84c 6369 99bf eab8 98ba     .....'L.ic......
 800d12c:	da5b b0a6 039e ed3f ad70 38b3 f3f8 d8a0     [.....?.p..8....
 800d13c:	badf 6648 1ca8 9144 d83d 19b2 e70a 5d57     ..Hf..D.=.....W]
 800d14c:	1221 93d6 dd05 890e 590b ccb3 8545 6d26     !........Y..E.&m
 800d15c:	a174 6a3d 1b2a 364f 60ae 6b23 0f96 a1dd     t.=j*.O6.`#k....
 800d16c:	232f b757 420c 1c83 9471 b6d3 f377 0d14     /#W..B..q...w...
 800d17c:	916b c91a 534e 3e5c 86cc 2b4b 7182 a0b0     k...NS\>..K+.q..
 800d18c:	7bef 7d8e 7d09 844f 218e 72c8 f968 1753     .{.}.}O..!.rh.S.
 800d19c:	8d33 83bf 0648 7e64 323b 6310 222e b65b     3...H.d~;2.c."[.
 800d1ac:	d1ea 8196 9e80 c7d5 8018 cabe 9dcb 9245     ..............E.
 800d1bc:	d319 84f7 1a1d e910 b49d edac 5613 a52e     .............V..
 800d1cc:	5b86 2a1b f1cf e99f ea11 d90d b241 5aa9     .[.*........A..Z
 800d1dc:	88de bd4d accc 82e7 2e2c e740 a787 d227     ..M.....,.@...'.
 800d1ec:	1b4c 44df 868a 83a8 714c 37f4 b597 5fc0     L..D....Lq.7..._
 800d1fc:	0a59 20a6 311e c950 1e82 4db3 f091 cbd0     Y.. .1P....M....
 800d20c:	2178 fa0b cd8e f9be ce24 a2a6 98d7 0ab6     x!......$.......
 800d21c:	4866 b9c1 ea45 4393 836d 35c4 abc6 ddd7     fH..E..Cm..5....
 800d22c:	209a 4d6f 10d9 6db4 1278 8d80 e7aa 0787     . oM...mx.......
 800d23c:	24f0 d50e a7ca a3e9 cd3c 23db 3bf0 96cb     .$......<..#.;..
 800d24c:	2fee 331f 529f ebb5 8b4e 7a6e 7f4e 015d     ./.3.R..N.nzN.].
 800d25c:	5e0b deeb f121 5a1d 9b10 d061 ffa9 4779     .^..!..Z..a...yG
 800d26c:	9db6 80f4 1add 7a85 95d2 fc77 ef4d fb2a     .......z..w.M.*.
 800d27c:	6f8a fac8 5188 89c3 ba25 c639 76f6 a109     .o...Q..%.9..v..
 800d28c:	121b 9f44 08f6 bddc 3228 23e8 a583 a3ff     ..D.....(2.#....
 800d29c:	db78 0af7 3766 47da 0258 2058 b246 bc73     x...f7.GX.X F.s.
 800d2ac:	dc57 9fad fe5d c469 65b4 8a7e a782 4d95     W...].i..e~....M
 800d2bc:	cc69 b44d e6f2 6d25 968c d70e 6cec 6bd3     i.M...%m.....l.k
 800d2cc:	19ec 5fd9 453c 8dbe e97c 723d 4275 d9ad     ..._<E..|.=ruB..
 800d2dc:	ebd4 b096 83e7 8442 e33d 795f 8a97 4351     ......B.=._y..QC
 800d2ec:	68ff 9e8c 7800 c7b4 da0c bd3f b321 4319     .h...x....?.!..C
 800d2fc:	80ea 17e5 b3bf 4fa2 dcbf e71c afc7 8c20     .......O...... .
 800d30c:	5211 c220 8d7c 270d 090e c41f 6d3d 4738     .R .|..'....=m8G
 800d31c:	f3e8 711e b040 7ab4 73b5 5cb3 b5f7 9d4e     ...q@..z.s.\..N.
 800d32c:	0ef3 4fef f257 c0a4 da46 74dd abe5 a935     ...OW...F..t..5.
 800d33c:	2ba0 6dd3 abf9 6aee 80b4 7ba2 78c4 dac9     .+.m...j...{.x..
 800d34c:	24d6 45a2 d34b 9859 6022 3b53 def4 e06d     .$.EK.Y."`S;..m.
 800d35c:	df3e c89b 55d5 44fd 2ce4 9d44 ac49 0c8f     >....U.D.,D.I...
 800d36c:	5e73 8cbd 129b 7753 201b 8258 4367 9bd1     s^....Sw. X.gC..
 800d37c:	ec42 3eca 3151 b409 0683 612f 40a6 cdbe     B..>Q1..../a.@..
 800d38c:	9f2d fb41 d084 8104 dda2 5ce7 b160 f1c4     -.A........\`...
 800d39c:	c876 7e73 556f 05c3 ff2a f2c9 4790 51b2     v.s~oU..*....G.Q
 800d3ac:	dc6e 3ee3 b3fc 0149 b232 54fc 3016 3ea1     n..>..I.2..T.0.>
 800d3bc:	ebe1 b9b9 a0f6 9f0c ec09 8d9c d418 8ae0     ................
 800d3cc:	21be 857d 8913 d6b9 bd45 d3aa 6ec2 761e     .!}.....E....n.v
 800d3dc:	6012 f146 db15 b18f 28e0 f3c8 970f 36de     .`F......(.....6
 800d3ec:	2ecd b509 2771 37ee a967 9640 efe7 031a     ....q'.7g.@.....
 800d3fc:	0d67 5bd9 fb6d 6a44 e3b6 67ef 0913 0aed     g..[m.Dj...g....
 800d40c:	d227 39f9 9d41 44fa b74c 07b5 1f62 fe7d     '..9A..DL...b.}.
 800d41c:	babf d29a 5365 5433 14b4 92ba af11 0b54     ....eS3T......T.
 800d42c:	90c6 5632 425a 16b6 0126 109c da5b 152b     ..2VZB..&...[.+.
 800d43c:	5f73 3d3f 5da8 e699 0cb4 bbd6 94c4 6623     s_?=.]........#f
 800d44c:	234b 9829 caf3 3718 7d42 d64c ecd0 75d1     K#)....7B}L....u
 800d45c:	ee01 5fa1 aed4 34c1 946c b25b 4be2 28b0     ..._...4l.[..K.(
 800d46c:	3661 0b74 7a36 1f55 6868 6ad1 380b b808     a6t.6zU.hh.j.8..
 800d47c:	0d3c 5ccc 7457 8d2d 78ee 84b8 6ef3 ff26     <..\Wt-..x...n&.
 800d48c:	23da 49e0 e2d0 ed0e 8b1e faed e6b2 5bce     .#.I...........[
 800d49c:	beb2 07c0 130d c37e 1789 02c8 0c70 30cc     ......~.....p..0
 800d4ac:	3aff 43dd 22e7 1757 4174 de38 e786 7c15     .:.C."W.tA8....|
 800d4bc:	2c4e 27b7 dc2c cf8a eb59 79b1 72ef 81ef     N,.',...Y..y.r..
 800d4cc:	bf29 7b20 5e22 2a8d b425 de83 ee5d df72     ). {"^.*%...].r.
 800d4dc:	521c 28c2 6cbe 3ba5 5df3 2462 25db 2dcb     .R.(.l.;.]b$.%.-
 800d4ec:	871d 04c5 f6c4 5091 8829 df27 8366 4325     .......P).'.f.%C
 800d4fc:	ee22 2ba0 6daa 3262 743a 4ea3 4c59 5646     "..+.mb2:t.NYLFV
 800d50c:	07d6 d738 cd6e 305a c9e8 ca9c bdba b06b     ..8.n.Z0......k.
 800d51c:	cc53 73d0 a87c bdec d392 a48a 0375 1279     S..s|.......u.y.
 800d52c:	a0ad f68c 4f58 58cb d9a9 c3d9 229b e755     ....XO.X....."U.
 800d53c:	3db5 b381 068e 7362 372c 1a56 ec54 8710     .=....bs,7V.T...
 800d54c:	2a7e d331 a846 ccbc a67f a4bf d8e0 5bbf     ~*1.F..........[
 800d55c:	6b6c 6af3 b23b 5b05 bcc6 521a 15ba b97f     lk.j;..[...R....
 800d56c:	3e4b ba95 d0ca 195b b651 c934 d798 ce70     K>....[.Q.4...p.
 800d57c:	8f3d 8f76 8795 65da 6168 8ee2 ff33 b930     =.v....eha..3.0.
 800d58c:	27be b960 70d6 4946 4d14 42e1 a8b3 76f3     .'`..pFI.M.B...v
 800d59c:	3052 9507 b728 e568 5e78 2c63 d141 1738     R0..(.h.x^c,A.8.
 800d5ac:	d252 d4ad 6fee 185d 4863 40dd febb 0121     R....o].cH.@..!.
 800d5bc:	d8d9 498f 790c ff98 6e5b 92dd c3fd d098     ...I.y..[n......
 800d5cc:	6542 005a ecce f23e e665 d919 7991 0996     BeZ...>.e....y..
 800d5dc:	8b90 31d4 ccb3 e5f9 7a90 8622 40d9 8c13     ...1.....z"..@..
 800d5ec:	30ed d757 7647 595a bbdc 98ca 2649 a974     .0W.GvZY....I&t.
 800d5fc:	a5bc eedc f5f1 b1ad 3c42 0a2f ba62 758d     ........B</.b..u
 800d60c:	1923 2bb2 e412 fe78 c0c0 7e93 f99a 3cf7     #..+..x....~...<
 800d61c:	47ce 5d90 5f6b a05e b27d 8c65 a02b 3063     .G.]k_^.}.e.+.c0
 800d62c:	0b71 b2f3 fdd0 4df5 9e6c ee61 48ba 4c46     q......Ml.a..HFL
 800d63c:	4415 198d 2ac9 8904 58d7 7bb3 4d2c 8579     .D...*...X.{,My.
 800d64c:	e5be 5c4f eb59 d983 5297 db94 4fcd a453     ..O\Y....R...OS.
 800d65c:	5ecb 5868 89c3 c44f 3522 f4d7 9f1c 6137     .^hX..O."5....7a
 800d66c:	538c f22b 8b76 d7c9 01f3 9caa b5d7 9e2c     .S+.v.........,.
 800d67c:	e8c4 210d 80a2 c93f 69e8 d0a3 bb26 9923     ...!..?..i..&.#.
 800d68c:	1af3 722d 9f4c 2e85 3ef3 91d9 ca59 b985     ..-rL....>..Y...
 800d69c:	646e 7ed7 de9e 0ac8 c7f2 5486 a39c 00e8     nd.~.......T....
 800d6ac:	d359 e831 c29d 71f9 d5a5 46ba baa5 0ba5     Y.1....q...F....
 800d6bc:	31d2 97d3 5325 f1f5 ce78 feaf 7233 3a9a     .1..%S..x...3r.:
 800d6cc:	8262 962c 8853 e666 4805 57dc b89c 4afd     b.,.S.f..H.W...J
 800d6dc:	4993 9b68 bf68 e4fc be32 3404 2c3e 9477     .Ih.h...2..4>,w.
 800d6ec:	de87 cb8d b5d9 18d7 1f20 7971 818d 59d5     ........ .qy...Y
 800d6fc:	960c 8ba0 e2c3 6d0d 3683 8c14 8a88 1cf3     .......m.6......
 800d70c:	61dd 0bed b1af 69a7 372c 3250 d5c4 a7a6     .a.....i,7P2....
 800d71c:	da3e 322d 0e7a cd08 4690 3b4b 0ef9 ba12     >.-2z....FK;....
 800d72c:	90bb 918e 343b 6954 4b99 ff53 bf80 992a     ....;4Ti.KS...*.
 800d73c:	e8fb 3357 547b 9cc5 e757 7ff8 8575 019a     ..W3{T..W...u...
 800d74c:	06f7 0710 d946 fcdd e522 bf36 24fe c81e     ....F...".6..$..
 800d75c:	dcae 3dba 2603 d984 db92 12f8 72ea 7e54     ...=.&.......rT~
 800d76c:	1f85 1752 09f4 2aed 039e 5544 0e24 42dd     ..R....*..DU$..B
 800d77c:	1893 a4fc 6f10 2d90 2cef b5e2 5aca dacb     .....o.-.,...Z..
 800d78c:	5500 71b0 8a25 ebbc 1967 adc8 d641 3171     .U.q%...g...A.q1
 800d79c:	63e7 9197 06c7 8fde 86dc d1ab 48ac ce28     .c...........H(.
 800d7ac:	541b de70 c457 90ce 6aa0 4c28 dccb 7a90     .Tp.W....j(L...z
 800d7bc:	2e75 ea05 b4b7 ccb0 f32d 6227 7544 876b     u.......-.'bDuk.
 800d7cc:	7465 8277 206c deeb 3d3a 7f89 7745 b468     etw.l ..:=..Ewh.
 800d7dc:	e514 d93b 5711 013c 9ac8 8db1 e631 155b     ..;..W<.....1.[.
 800d7ec:	ecd9 2992 9857 803a 3a2b 0592 b30e 3f33     ...)W.:.+:....3?
 800d7fc:	5cdc 4e00 4718 c20e 3527 8f4c 947c 21ab     .\.N.G..'5L.|..!
 800d80c:	b4d3 262c ec83 cd1a f973 0900 de28 f1bd     ..,&....s...(...
 800d81c:	2c3f 90cc 12b1 d7cd c170 bf6f bda3 1c76     ?,......p.o...v.
 800d82c:	93d0 a437 c208 872c c58e c6f2 2e2c a40f     ..7...,.....,...
 800d83c:	b063 5e57 edad 03ec 2172 21c7 aaef d323     c.W^....r!.!..#.
 800d84c:	c191 e3a8 e46d b85d 39ea 571b 8bfb ed80     ....m.]..9.W....
 800d85c:	56eb 6acb 53eb 8e0a 5fc2 45a6 0f2d 191d     .V.j.S..._.E-...
 800d86c:	8e3d 8396 09ca d077 5405 12a9 1bba 08f4     =.....w..T......
 800d87c:	b8c8 be7c 85c2 552e b427 d651 d27e 42e6     ..|....U'.Q.~..B
 800d88c:	df3f fe25 e09b 1bf2 7b7c ad72 2316 729a     ?.%.....|{r..#.r
 800d89c:	7522 df16 3590 fbfc 0b61 1e83 4db4 fc10     "u...5..a....M..
 800d8ac:	fcf2 c72d e0e9 7793 822b 7384 4cc7 fb20     ..-....w+..s.L .
 800d8bc:	d227 f076 d9c5 8054 1884 5c68 c9bd d2a6     '.v...T...h\....
 800d8cc:	f4ad 3b17 77c8 1216 93cf f838 7d6e 32ae     ...;.w....8.n}.2
 800d8dc:	133f 80da 5185 9cd5 d596 02e6 c638 6290     ?....Q......8..b
 800d8ec:	486a 7399 69ec a404 ef4e c255 44e6 8eae     jH.s.i..N.U..D..
 800d8fc:	302b ee1f f5ac 5aca d167 b838 c9e8 37db     +0.....Zg.8....7
 800d90c:	d5c7 ce31 a22d 95b5 cca9 4b86 2d43 8731     ..1.-......KC-1.
 800d91c:	165e 62c6 8478 151c 6360 4bbe 48bc c6bc     ^..bx...`c.K.H..
 800d92c:	14c8 16b2 e034 77d1 83c9 cc0a b784 bbe7     ....4..w........
 800d93c:	8040 797d 8b5e fe28 9ef2 6418 5ca9 a647     @.}y^.(....d.\G.
 800d94c:	f716 8e81 042b 4745 4379 571a f9eb 31fc     ....+.EGyC.W...1
 800d95c:	93ad febd 431c 67f5 738e adde f416 52d9     .....C.g.s.....R
 800d96c:	e8f3 e731 c69a 00a6 413f 3ab2 4632 3ed9     ..1.....?A.:2F.>
 800d97c:	de1b 607b ed9a b3be 59e9 5019 693d 8afb     ..{`.....Y.P=i..
 800d98c:	fbf9 08e4 2d15 2e45 be4d c849 08db 1db3     .....-E.M.I.....
 800d99c:	e6e9 02a6 b3a1 a42f da14 f778 7557 42bf     ....../...x.Wu.B
 800d9ac:	410b 2976 d907 a82a 4cee e062 a219 8548     .Av)..*..Lb...H.
 800d9bc:	160e a169 1cbb 2651 79b4 f015 bdc3 3e7c     ..i...Q&.y....|>
 800d9cc:	2803 e813 11fd 1005 820f 472c fdf7 2cc8     .(........,G...,
 800d9dc:	7f40 7fcf 5813 c82e 02d2 eda0 dfd4 2d07     @....X.........-
 800d9ec:	b344 083a 932b 0cd8 5dd5 f7b6 195a 537d     D.:.+....]..Z.}S
 800d9fc:	c91c cf7a 5b97 509c a716 4421 82eb e5a0     ..z..[.P..!D....
 800da0c:	566f 61ab 9676 ffe6 8771 0a7d 4184 230b     oV.av...q.}..A.#
 800da1c:	5536 160b a1df 8437 99cb d93c 288c 1e03     6U....7...<..(..
 800da2c:	359e 54e8 ca3e ef7b ab4f fb2f 4fc8 0e34     .5.T>.{.O./..O4.
 800da3c:	f856 0960 0845 4e56 37a1 22fe c7f1 be99     V.`.E.VN.7."....
 800da4c:	534d ed14 e763 13f8 a429 8d22 16d3 05b4     MS..c...).".....
 800da5c:	901d d2e5 a306 c16f 06ef a263 c065 694f     ......o...c.e.Oi
 800da6c:	08b4 557d e98b f431 84fb 511a 110d 3ae7     ..}U..1....Q...:
 800da7c:	3b8b 34f4 3815 8a9b 9f00 95f0 ede5 e7af     .;.4.8..........
 800da8c:	8b3a d5e0 9d5b b6f4 6467 55df b87d 34e6     :...[...gd.U}..4
 800da9c:	3c17 70a8 56f9 9972 a716 6521 b588 ca4e     .<.p.Vr...!e..N.
 800daac:	b47d 9f77 f357 5e2f 09f1 160f 731b b6a3     }.w.W./^.....s..
 800dabc:	6257 b45a e68e 6f40 8f8e 97f5 62af cc79     WbZ...@o.....by.
 800dacc:	deab 3a2d 38cc 9774 b6e5 7b1e 5905 a464     ..-:.8t....{.Yd.
 800dadc:	5a6d 7957 1f8e 8f60 d3f2 d3d4 d434 6b45     mZWy..`.....4.Ek
 800daec:	f067 093e 8073 7201 3726 c393 3b72 8e79     g.>.s..r&7..r;y.
 800dafc:	15f1 ec82 6958 a78e 0df9 169e 84f6 113d     ....Xi........=.
 800db0c:	d1e7 e612 b1f8 9852 b6d5 988f 7a1d 873d     ......R......z=.
 800db1c:	ed21 211a 323b 2d5f 82ed 3459 4f2b 9e9c     !..!;2_-..Y4+O..
 800db2c:	b4a6 00fc 7e0b 2d76 e2a7 9f7c aa22 e71d     .....~v-..|."...
 800db3c:	892c 968f eaec 4c26 3cd3 f5d3 a1bf 52ff     ,.....&L.<.....R
 800db4c:	8c5e 0dd1 57c9 fb7c a7a3 1271 a45b 0f4e     ^....W|...q.[.N.
 800db5c:	3aee 8903 6822 db45 72fe ae65 9e39 ce9c     .:.."hE..re.9...
 800db6c:	b986 7688 58f5 a62c cf0a 5b58 1f3d a7be     ...v.X,...X[=...
 800db7c:	d9fa b6f9 92f5 3d5e 7d87 ea03 df7f 31c4     ......^=.}.....1
 800db8c:	39ee 42b2 2e58 7e40 6025 fde2 8efc 10d5     .9.BX.@~%`......
 800db9c:	6bce 3ee8 7ba0 cad6 648e cfe1 a43e 1653     .k.>.{...d..>.S.
 800dbac:	100a d1fe 42c2 39ef 5e3b 6ec0 9efe 640a     .....B.9;^.n...d
 800dbbc:	7317 e99f 05e7 0340 1c02 c939 5d94 05e4     .s....@...9..]..
 800dbcc:	7365 6cbc 2787 f909 bb04 da9e e953 47b3     es.l.'......S..G
 800dbdc:	f78e 6bcb e2d8 9592 7c7f 3fea 0761 3915     ...k.....|.?a..9
 800dbec:	23a6 2803 30c4 7007 5d77 1740 7102 e7d1     .#.(.0.pw]@..q..
 800dbfc:	5e1f 201a 5171 5f10 f35e 003b 1075 88f3     .^. qQ._^.;.u...
 800dc0c:	7fca c9fe 332f 2dcb e372 3a36 8b13 4407     ..../3.-r.6:...D
 800dc1c:	2c1b 58af 9848 e99f 6a45 ea9a 9523 9635     .,.XH...Ej..#.5.
 800dc2c:	0c80 681f abd1 e5f8 adb9 e4da fc16 680b     ...h...........h
 800dc3c:	85a2 4533 aec0 96fb a45a 73d6 7ec8 5695     ..3E....Z..s.~.V
 800dc4c:	eef8 82f2 d69e 0cb7 c817 3fd3 1c6c b18a     ...........?l...
 800dc5c:	b7d4 fab9 e1d7 2a6b 736a b615 708c 6b43     ......k*js...pCk
 800dc6c:	4706 c2fa b906 62f8 c27d b3af 1710 908c     .G.....b}.......
 800dc7c:	cb3a b961 f48e 3a67 4f74 0008 bd80 653e     :.a...g:tO....>e
 800dc8c:	9ef9 12ef d34f 6c9d f957 c446 7c86 1421     ....O..lW.F..|!.
 800dc9c:	7a9b b0c6 2dad e3e0 dff4 ee01 b219 166f     .z...-........o.
 800dcac:	5eb2 ad4c a055 e471 1dc3 ad23 72c3 d4d3     .^L.U.q...#..r..
 800dcbc:	3514 8d42 fb64 37c8 c168 01ef 0472 b5d9     .5B.d..7h...r...
 800dccc:	a429 588f a28e f28f 62c1 df94 fd13 e58a     )..X.....b......
 800dcdc:	01d3 9ef2 62e1 c466 37dc f416 febf 457d     .....bf..7....}E
 800dcec:	2ae8 f79f ce32 eb6b 1975 80b6 c3b3 eb10     .*..2.k.u.......
 800dcfc:	df45 6a95 d74c fb18 1927 98f2 e91d c8b7     E..jL...'.......
 800dd0c:	22be 31af 38ab 4c62 4bbe f450 0de0 53e6     .".1.8bL.KP....S
 800dd1c:	f342 e1cb 2092 dfde 2ca4 7aa0 6476 bd6a     B.... ...,.zvdj.
 800dd2c:	13f9 cdda 5d28 3602 acf7 e477 8bf7 3967     ....(].6..w...g9
 800dd3c:	6a5c babd 8cdc f740 85b4 a8e0 b4c5 1571     \j....@.......q.
 800dd4c:	a4f0 e822 90d7 843a 4962 69f8 fd1c a434     .."...:.bI.i..4.
 800dd5c:	8f40 b8cd 431a 740b 19ab bcac 655a 62c0     @....C.t....Ze.b
 800dd6c:	ce6f 6475 982e ff51 87a6 7ad9 89b6 7e45     o.ud..Q....z..E~
 800dd7c:	bfea ddd5 f735 d3cd 4583 345b 1eff a364     ....5....E[4..d.
 800dd8c:	e896 27ff 23a0 4745 97ec 4b67 9423 ff3d     ...'.#EG..gK#.=.
 800dd9c:	4423 1b9d cdc2 90b3 55cc 90c0 c7bd 5d8a     #D.......U.....]
 800ddac:	f544 5cb1 501e ea45 b7f9 e684 c06b e3e2     D..\.PE.....k...
 800ddbc:	a2d6 234d b41f e395 1b4c 6511 fd42 a639     ..M#....L..eB.9.
 800ddcc:	2454 610b 0713 1e4c 190b 181d fcd3 88e7     T$.a..L.........
 800dddc:	46a8 f948 0d7c fb07 9c49 ad4c ece7 ab78     .FH.|...I.L...x.
 800ddec:	0319 7c10 aeed 3c5c 9bb9 92ef ebcf 1278     ...|..\<......x.
 800ddfc:	23ba b8b4 50e8 2435 7353 b00d efef 2a47     .#...P5$Ss....G*
 800de0c:	f455 9754 a3eb c9bd 50d5 c979 6191 e7a0     U.T......Py..a..
 800de1c:	d3cc 1f06 a9c8 025a 00d1 b7cd 4992 290b     ......Z......I.)
 800de2c:	dbc7 8bcf 1082 ef51 2713 62a1 5a12 1544     ......Q..'.b.ZD.
 800de3c:	cea4 48e2 2596 722e c0a1 7220 175e 9828     ...H.%.r.. r^.(.
 800de4c:	f202 bfea 5558 27b2 0796 4878 cc68 aef9     ....XU.'..xHh...
 800de5c:	4155 3076 5ea2 82f6 b3d1 cb6c 3ba4 c09c     UAv0.^....l..;..
 800de6c:	e168 671a 96c4 3b41 acb0 e236 b8f2 b147     h..g..A;..6...G.
 800de7c:	1dcf 381a d2f7 3781 fa16 28cf 5c3a e39a     ...8...7...(:\..
 800de8c:	fca2 8b28 48e5 7edc b587 e050 cf3d eddf     ..(..H.~..P.=...
 800de9c:	381b f90f 4052 dac7 42e0 d6ea a03d c841     .8..R@...B..=.A.
 800deac:	be35 d2ae 0e7a 91b0 7aaf 8049 73b7 2131     5...z....zI..s1!
 800debc:	3051 0f4e 5806 ee8a 5e43 dbe0 c69c 032c     Q0N..X..C^....,.
 800decc:	490f 1ecd 5d59 bb28 95f9 a84b 8429 8f66     .I..Y](...K.).f.
 800dedc:	1f44 8e4f 3771 ab9f ed55 96c8 f93b 625d     D.O.q7..U...;.]b
 800deec:	01b4 eb47 27cf ee84 d82b 00c7 122f d97d     ..G..'..+.../.}.
 800defc:	52d1 d437 4d90 fcc9 ee9b 6b2f f6db 29bd     .R7..M..../k...)
 800df0c:	44c0 7869 050e eed0 845e 517b 8feb e8c0     .Dix....^.{Q....
 800df1c:	1651 903a 76ee 9d82 69d0 9a7e 5faa 06a7     Q.:..v...i~.._..
 800df2c:	ea6e 83d3 dd0b 9d07 92ec 4b21 0827 eae3     n.........!K'...
 800df3c:	c639 4c78 26ff f972 e467 fc27 f3df e521     9.xL.&r.g.'...!.
 800df4c:	6fbc d093 6c76 a670 3a60 4576 79b8 2824     .o..vlp.`:vE.y$(
 800df5c:	653e 18ed 8720 fd13 dbc5 c6ef af68 6bcc     >e.. .......h..k
 800df6c:	9df6 561d 839d e98b aa17 3153 6981 93f5     ...V......S1.i..
 800df7c:	5e8d bc42 57b5 9ae7 11b9 a4c9 9785 3097     .^B..W.........0
 800df8c:	81c1 71d9 e729 0563 0dc9 7bd2 64bb 58df     ...q).c....{.d.X
 800df9c:	9411 bb35 eea7 8d6b f807 4092 5a9f 3d01     ..5...k....@.Z.=
 800dfac:	6081 adc3 d539 7f72 2a71 cb5b 1fd0 6112     .`..9.r.q*[....a
 800dfbc:	3cf6 2072 ca74 1666 37b3 dffe 2084 3cde     .<r t.f..7... .<
 800dfcc:	8292 f389 fb76 70cc f602 3b8d 1cb8 946d     ....v..p...;..m.
 800dfdc:	3a98 3b63 1a8d fa4f d78a 8059 d324 db2f     .:c;..O...Y.$./.
 800dfec:	5c73 f893 4786 9b3d 8357 ebc5 1935 b540     s\...G=.W...5.@.
 800dffc:	a45a 457c 8f9a 51dc a856 3d52 b03d 40af     Z.|E...QV.R==..@
 800e00c:	624e e518 91bf a851 6009 cd43 d4f1 7425     Nb....Q..`C...%t
 800e01c:	e1c5 74c4 dcf6 11fe 67fa 8e5b 3642 51b5     ...t.....g[.B6.Q
 800e02c:	d987 3248 b6a2 c07c 3d96 a9b3 febd 32ac     ..H2..|..=.....2
 800e03c:	2da1 e4da c1b6 db33 6e13 4fc6 ba0b 7f3d     .-....3..n.O..=.
 800e04c:	c7c2 5d24 e227 2c6e a6fb 4c20 d5d5 8b5e     ..$]'.n,.. L..^.
 800e05c:	88af 9ebc bc99 993d 3ad0 3d6d c076 d9dd     ......=..:m=v...
 800e06c:	33ac 2d2d f399 a6ea 6da8 af5f 936a afb8     .3--.....m_.j...
 800e07c:	b110 20f8 7d08 b687 a18b c9e2 687a 8c9e     ... .}......zh..
 800e08c:	5031 63b2 79b1 858d 397f 2cff 4ea6 e4db     1P.c.y...9.,.N..
 800e09c:	a1b6 71c2 c752 22db e7f4 bb05 113b ae4f     ...qR.."....;.O.
 800e0ac:	6434 a9cd 7f27 83d3 b90e b015 77ab ab83     4d..'........w..
 800e0bc:	1a0a 4dff e7b2 8f15 9f27 ae17 95d5 7450     ...M....'.....Pt
 800e0cc:	882a f661 f66d 0dfd 4eec 92a8 586c 527c     *.a.m....N..lX|R
 800e0dc:	8c4e 5654 79bc 1f2d 5722 2a43 5b65 faa5     N.TV.y-."WC*e[..
 800e0ec:	91c3 fbdb 14e7 6fb4 d8da e1b3 54c4 b4f6     .......o.....T..
 800e0fc:	9e8e 6aad 58f6 f1d0 65e4 1a64 a3c8 d486     ...j.X...ed.....
 800e10c:	b2c1 7cbf 9d2a 181e f968 11cb 4175 6ebf     ...|*...h...uA.n
 800e11c:	d011 5c5e abb6 834c 1915 68a1 eee1 c36a     ..^\..L....h..j.
 800e12c:	9511 d9ca c4e9 f40b 5dec 7489 144c 0839     .........].tL.9.
 800e13c:	3933 af12 ad6f 8980 5431 3886 fec0 c19a     39..o...1T.8....
 800e14c:	38ab eba6 c752 8a0b 9558 db31 b35d c3e7     .8..R...X.1.]...
 800e15c:	7c17 cef9 7ff1 955a d509 df6e 857c abe2     .|....Z...n.|...
 800e16c:	3a93 536c fa0b 632e a31f d4af c778 c64c     .:lS...c....x.L.
 800e17c:	8098 273c cc7f e74c 5902 66a8 ae1f ccbd     ..<'..L..Y.f....
 800e18c:	654c 7a29 f4b6 844d d2ec 27c5 4612 fd90     Le)z..M....'.F..
 800e19c:	66ba 1777 b126 fcdd 4c1d fcee 5590 b81d     .fw.&....L...U..
 800e1ac:	ed6b 868e e7c4 daf8 0e1e 50fc 6521 0785     k..........P!e..
 800e1bc:	547c 57bb bcc3 bc03 d19e 3967 3cfb 7c2d     |T.W......g9.<-|
 800e1cc:	4eea 9bfe a438 abce 9b16 1ca1 0364 38b6     .N..8.......d..8
 800e1dc:	1028 6ef7 f27a ee4e e653 75b5 4b5b a6c2     (..nz.N.S..u[K..
 800e1ec:	1bf0 d58c d192 4f25 7653 b439 9278 4f46     ......%OSv9.x.FO
 800e1fc:	da5a 6888 fc1b 7e6e 3c84 e224 d7c9 2bd8     Z..h..n~.<$....+
 800e20c:	5e6b e7af ad43 9b1b 3d4d d723 8073 7f1f     k^..C...M=#.s...
 800e21c:	47de 5218 6c97 08f7 7988 4771 eb26 8b76     .G.R.l...yqG&.v.
 800e22c:	f864 6fcb 76b3 e4d7 b635 9f43 3148 a23d     d..o.v..5.C.H1=.
 800e23c:	489e ec03 8522 ebd1 d3b4 22ec 11d4 a44e     .H.."......"..N.
 800e24c:	dd2d db2f cf3d b3b5 2f04 a294 c635 e457     -./.=..../..5.W.
 800e25c:	23f2 fc67 7685 7047 ef94 ff2e 515a f400     .#g..vGp....ZQ..
 800e26c:	d9a8 ee21 1f82 9470 5ff7 f48b 1486 c15f     ..!...p.._...._.
 800e27c:	3fce 1e85 31f6 a42e f06e ff80 bf5c b8ab     .?...1..n...\...
 800e28c:	5576 b0ff e866 b8e6 1579 1926 78e7 8f7b     vU..f...y.&..x{.
 800e29c:	3868 8e81 26c1 bbc6 592d 35d0 a3e6 3f4d     h8...&..-Y.5..M?
 800e2ac:	f422 50de 01f9 33f6 b01d 1926 3594 7f2a     "..P...3..&..5*.
 800e2bc:	38c4 4ef1 7892 34b0 c6a1 6d54 11bb f622     .8.N.x.4..Tm..".
 800e2cc:	4624 c8a6 3c86 e827 971a 3d7e af5c 1d05     $F...<'...~=\...
 800e2dc:	fbb8 ceec bffc 7cd7 41c5 3a05 80b3 71c5     .......|.A.:...q
 800e2ec:	0cdf b359 f63a 87b6 2d4c 76e6 a9ac 1eda     ..Y.:...L-.v....
 800e2fc:	2b87 5b55 5a80 1c0b 13dd 7daa 0f06 e27a     .+U[.Z.....}..z.
 800e30c:	eee7 0bb4 0419 913a 6cfb 246b 122f 709f     ......:..lk$/..p
 800e31c:	f536 ecfe 510c 5064 728c e2ff f758 4e86     6....QdP.r..X..N
 800e32c:	98ea 2d1a 3875 5dd4 2edc 44e0 a415 cd5f     ...-u8.]...D.._.
 800e33c:	019a cbca 438a ed25 fc49 1a69 b158 f105     .....C%.I.i.X...
 800e34c:	dc44 8013 e5e9 e3a9 00fc 79f4 9601 9b81     D..........y....
 800e35c:	062b 449d 655d 97c0 640c b4ed 5df2 9d62     +..D]e...d...]b.
 800e36c:	5a36 cdaa 937b d571 278e e6e2 6211 d9b9     6Z..{.q..'...b..
 800e37c:	00d2 32fb 7763 300e 018b f936 60f4 df37     ...2cw.0..6..`7.
 800e38c:	033a 581d f6c7 93a1 9dde e6c8 ba90 88e4     :..X............
 800e39c:	081b eedc 5953 372c 3542 bc9e f9ef 7f60     ....SY,7B5....`.
 800e3ac:	afb5 362f e515 f416 f579 21c8 2312 e8f1     ../6....y..!.#..
 800e3bc:	4d1d 5d88 b495 6fd1 e56b 2eaf 6298 2b1b     .M.]...ok....b.+
 800e3cc:	1219 8b67 0ec3 a557 3323 b486 fc03 5683     ..g...W.#3.....V
 800e3dc:	74f0 d66a 44ec 076c f2d2 8bdd cc73 7e7d     .tj..Dl.....s.}~
 800e3ec:	af35 aa76 beb6 6b20 55d2 eb4e e227 db1b     5.v... k.UN.'...
 800e3fc:	717e 5574 cba9 ca3d 2777 4590 769b 62ec     ~qtU..=.w'.E.v.b
 800e40c:	58b9 d893 a2f3 a65f f26d e7cc 8267 0ce5     .X...._.m...g...
 800e41c:	5fd1 ad6e b49f 7e37 b6b8 dfcc 73c7 0ed7     ._n...7~.....s..
 800e42c:	2091 6f17 5f1b d6dd 9afa b20a 3531 8da2     . .o._......15..
 800e43c:	66da adbd e23d a696 1a0e 4c4b 6e3b b7e0     .f..=.....KL;n..
 800e44c:	dc5f 91fd ce2c 290f 8e9d f016 2a7b 1c58     _...,..)....{*X.
 800e45c:	0c52 b3f1 acc3 e363 d66b d779 c688 956d     R.....c.k.y...m.
 800e46c:	e698 782b 7b3f eb2f 1c49 2a59 3091 690c     ..+x?{/.I.Y*.0.i
 800e47c:	6b24 1397 8de8 9077 7082 7b5f c144 728c     $k....w..p_{D..r
 800e48c:	e78d 6bf2 7c0b 98a6 2276 392e 58cc c6f4     ...k.|..v".9.X..
 800e49c:	b2a7 3082 d0ae 8cc2 5c27 c84d 72ce cbc8     ...0....'\M..r..
 800e4ac:	c6f3 f0e4 c873 29be 3348 eb54 38b3 17ee     ....s..)H3T..8..
 800e4bc:	1270 c4c0 9465 b7b7 3001 8ddf 310b 4175     p...e....0...1uA
 800e4cc:	9bfb 18c6 5305 e76e 1b19 6330 aab0 6bce     .....Sn...0c...k
 800e4dc:	2d11 11a6 303a 5f07 40ef cbf2 95f6 eb9f     .-..:0._.@......
 800e4ec:	0a47 7f59 5f42 9a46 bf69 902f 2ef8 2a13     G.Y.B_F.i./....*
 800e4fc:	6bcf 80b8 d079 3634 99f5 a436 9d5f 03e7     .k..y.46..6._...
 800e50c:	71dd 55ae b51f 0599 3e91 fba1 ebcb 15b6     .q.U.....>......
 800e51c:	339e 198c a38a 179f 3301 44fa 288c 9d31     .3.......3.D.(1.
 800e52c:	60d0 57ee 7cf6 b29e 98c9 1e84 0551 cc21     .`.W.|......Q.!.
 800e53c:	0c69 2f47 ebd1 8a39 cdde 1677 be71 8cbb     i.G/..9...w.q...
 800e54c:	ff3e 67d2 4613 b598 a2cb 3f5d ffd2 4595     >..g.F....]?...E
 800e55c:	937e 5216 7bec 6b13 79f6 0783 5e9d b011     ~..R.{.k.y...^..
 800e56c:	76a6 c84f a1d9 ed47 671e da4c e626 0290     .vO...G..gL.&...
 800e57c:	b199 d1bb 49b4 638c b426 032d be17 ce13     .....I.c&.-.....
 800e58c:	2ff3 1130 cd6c 67a0 e221 41dd a11a 2f6d     ./0.l..g!..A..m/
 800e59c:	e373 5897 1924 ffe8 6cb2 e351 529c 1cc1     s..X$....lQ..R..
 800e5ac:	6957 98e1 68a1 430b f531 9ade 83c6 0c5c     Wi...h.C1.....\.
 800e5bc:	f470 e62d 2638 0dcc c0fe 8240 1cf9 33b7     p.-.8&....@....3
 800e5cc:	f1ad 31e4 7d03 f072 fa8e 867c 57b5 3061     ...1.}r...|..Wa0
 800e5dc:	6613 e82c b8b4 ff9b 12ee 6ccb eb12 06cb     .f,........l....
 800e5ec:	eed9 84df 1731 ad58 198f 4ef6 ed34 6659     ....1.X....N4.Yf
 800e5fc:	5b96 bbd5 47cb 75b6 fad2 36ab bbdf 0f43     .[...G.u...6..C.
 800e60c:	e7ca 1d47 c251 985c b9c3 c14d 0090 9839     ..G.Q.\...M...9.
 800e61c:	a131 57ef f6b6 ebd8 aa33 7511 e045 1198     1..W....3..uE...
 800e62c:	461b 1ab7 73da 8647 cfca ce96 206a d9e8     .F...sG.....j ..
 800e63c:	946b bfc3 2f78 e0cc 4300 a8ca df43 4c09     k...x/...C..C..L
 800e64c:	8c50 3071 b40d 7465 9d2b b7c5 46d9 6658     P.q0..et+....FXf
 800e65c:	5390 a75a 1b01 d7f8 65cc 93d4 0982 7771     .SZ......e....qw
 800e66c:	b8b3 30dc eb8b 0afc 77c0 997a 9379 997d     ...0.....wz.y.}.
 800e67c:	9af9 bb82 9c36 a1d8 4d01 f68c 4d94 3a82     ....6....M...M.:
 800e68c:	d0d4 7e19 5c84 c435 0c8e 2020 b580 ca3b     ...~.\5...  ..;.
 800e69c:	b28f a563 d2d9 4f32 270b 9762 197c 9e31     ..c...2O.'b.|.1.
 800e6ac:	0c31 c7d1 db02 e357 efcf 70c8 208c 0630     1.....W....p. 0.
 800e6bc:	e1f0 fce2 9757 b459 cc8e 9718 2436 d3cb     ....W.Y.....6$..
 800e6cc:	d7b5 77cd 1189 6cea c4e6 d05c 89bf 16c7     ...w...l..\.....
 800e6dc:	6d3a d2fc fd74 e7f9 7601 740d 8faf 219d     :m..t....v.t...!
 800e6ec:	fe0e 024e 20c8 1641 c618 1a7a d75c 1d73     ..N.. A...z.\.s.
 800e6fc:	6403 fb15 263a e2bc 7263 3b2a 9eca 8348     .d..:&..cr*;..H.
 800e70c:	5fca b1e5 0cd2 09f5 1147 4b3e 13e8 8f9a     ._......G.>K....
 800e71c:	12f5 bd77 06c6 d8d8 04d9 e81a 2d6a a88e     ..w.........j-..
 800e72c:	bce1 ef9c a081 4777 73f9 dcf6 754a a355     ......wG.s..JuU.
 800e73c:	e779 9a09 f7ab ed18 146f c7ce d034 e9ce     y.......o...4...
 800e74c:	f186 f411 4006 f6b5 d3bc ca2c cd3b 7f9d     .....@....,.;...
 800e75c:	f64c 91b3 59b3 7d9d a633 071a fccb 7e6e     L....Y.}3.....n~
 800e76c:	eada 0168 0684 a525 3dac 034d 4d56 2b27     ..h...%..=M.VM'+
 800e77c:	4308 aaea fb7e d7b3 2f77 c8fb e3f2 34c2     .C..~...w/.....4
 800e78c:	06d2 2f7b 5ce3 8683 2c13 99f1 ca3e 5bdb     ..{/.\...,..>..[
 800e79c:	1ec0 ffab 904a 5426 fab0 6b15 e346 bf28     ....J.&T...kF.(.
 800e7ac:	3f93 603d 4d8c c461 ce53 660e ceca f767     .?=`.Ma.S..f..g.
 800e7bc:	2d08 d5cc a5db e740 2214 02cc 1382 32d2     .-....@..".....2
 800e7cc:	77e4 75bf f6cd ae70 013b 8c32 c0fc c521     .w.u..p.;.2...!.
 800e7dc:	ffa9 bcf2 f7db 7b78 ec53 2f2e a19c 8639     ......x{S../..9.
 800e7ec:	3bca 5e0e 55be 14ed e22e 1946 25c5 d521     .;.^.U....F..%!.
 800e7fc:	f8af fecb 89f2 a028 2275 4a9d 32fe a644     ......(.u".J.2D.
 800e80c:	1157 7f24 0137 d806 8b01 6f57 06d8 a1eb     W.$.7.....Wo....
 800e81c:	a786 4d39 4b85 597e ed10 e57d 0c49 e2c5     ..9M.K~Y..}.I...
 800e82c:	aa57 ff24 ba30 e064 59a9 fad5 4e8b 9cb1     W.$.0.d..Y...N..
 800e83c:	e5bd 98f9 e65c a6cf cc88 f521 b198 a3bb     ....\.....!.....
 800e84c:	4c81 9ad4 2356 0db4 19be fdfc 4d0b 9d83     .L..V#.......M..
 800e85c:	5bb0 5981 fb3f e1e7 de0b 3c59 2291 e5ea     .[.Y?.....Y<."..
 800e86c:	d5a9 7d2d 0f85 7838 9304 11d8 a833 9f5c     ..-}..8x....3.\.
 800e87c:	0474 fa8d 8a27 a186 e163 eff6 4ff1 6622     t...'...c....O"f
 800e88c:	db44 4714 cfd9 6d74 bb16 7556 3dea 44c3     D..G..tm..Vu.=.D
 800e89c:	5321 597d 0f2d 3b18 e180 7ff4 b794 7db6     !S}Y-..;.......}
 800e8ac:	6c55 e70a aeb6 16f9 1305 feba 244e b1cc     Ul..........N$..
 800e8bc:	6aa6 7fff 33e8 7acf 64fc 70c8 76d9 8c7a     .j...3.z.d.p.vz.
 800e8cc:	4f64 c924 32dc 9af6 ae60 aeb9 cf69 70c8     dO$..2..`...i..p
 800e8dc:	e709 7296 d6f6 fea9 40bc d54c fb18 52fa     ...r.....@L....R
 800e8ec:	d50d 57e7 1ead 5bb5 9ec0 cbfb fccb c940     ...W...[......@.
 800e8fc:	d457 cf98 9534 f2a7 fe5c 7179 0d80 b473     W...4...\.yq..s.
 800e90c:	5830 8066 cb3b 9aac e57e 4d8d 07b7 8bf0     0Xf.;...~..M....
 800e91c:	fd76 debd 1367 00fa cf6b 06c4 0cb9 aea7     v...g...k.......
 800e92c:	5a47 edac 1526 0514 d94c 4f7a 14d3 a31c     GZ..&...L.zO....
 800e93c:	ecbf 6984 58d9 fad3 8d48 6639 38be f9d4     ...i.X..H.9f.8..
 800e94c:	eb47 c654 f324 349b b595 3cf7 1386 d814     G.T.$..4...<....
 800e95c:	87f9 b763 891a 3059 4df6 88c6 e369 6ee5     ..c...Y0.M..i..n
 800e96c:	5425 a88e b684 9c6f 2bcf 2082 529b d3b6     %T....o..+. .R..
 800e97c:	9833 ae1a a1d7 5528 9507 8725 1bae 0096     3.....(U..%.....
 800e98c:	31a6 3bbb 9d34 98bd 4476 b67b feed 9eb4     .1.;4...vD{.....
 800e99c:	579b b427 cb20 5aa6 a841 8881 b3e0 2b03     .W'. ..ZA......+
 800e9ac:	55ae 17e9 ce6f ac2e 41ea de87 d06f 4ecf     .U..o....A..o..N
 800e9bc:	eef6 caf9 057f 9091 c94e d837 6418 a114     ........N.7..d..
 800e9cc:	e9da 7419 d464 33d3 0f42 ec97 67fb 245f     ...td..3B....g_$
 800e9dc:	66de f377 f776 35e8 f8f2 ceba b33e a552     .fw.v..5....>.R.
 800e9ec:	3b45 f8ab 5902 c00c eff6 b073 6e2a f416     E;...Y....s.*n..
 800e9fc:	bff7 dea5 f690 9f68 0130 2a15 d75f d934     ......h.0..*_.4.
 800ea0c:	290c 6d14 459f 8de9 cdbf c2d2 906f bfdf     .).m.E......o...
 800ea1c:	1933 ec52 e2f8 8f61 2433 daf9 a5eb 486a     3.R...a.3$....jH
 800ea2c:	1cc1 4daa f05f fa75 c179 0f4e 3127 180d     ...M_.u.y.N.'1..
 800ea3c:	cfb4 80e2 c10d 162e 1e84 604a 6ae7 0d0d     ..........J`.j..
 800ea4c:	ecf6 c82c aca9 fc53 aca8 8af9 5ac0 360b     ..,...S......Z.6
 800ea5c:	661e 6a23 93da e7d6 97f8 2719 122c 198e     .f#j.......',...
 800ea6c:	7f52 3e46 9fab 2253 b4ca df6d 9fd5 20a9     R.F>..S"..m.... 
 800ea7c:	713b 7bcd a189 e51d cd70 eaee 9f43 9056     ;q.{....p...C.V.
 800ea8c:	623d ecec 3c59 fc19 b181 3056 38e6 fbbb     =b..Y<....V0.8..
 800ea9c:	d10f e7f0 a37c 51aa 326d 7ea6 5d5f 07cf     ....|..Qm2.~_]..
 800eaac:	1060 6c80 805c 0e84 fb4f 1349 9e78 857c     `..l\...O.I.x.|.
 800eabc:	410d 3710 5c45 9708 f66a 3816 9c69 1cf5     .A.7E\..j..8i...
 800eacc:	2530 f71e b74e 7112 eee8 3f07 ca3a 465d     0%..N..q...?:.]F
 800eadc:	5a10 3140 9f7f b203 cc39 0058 ca0e 1b27     .Z@1....9.X...'.
 800eaec:	453b 2be2 763f 421b 651f aaed dfd6 1853     ;E.+?v.B.e....S.
 800eafc:	201d 6bed b5da 2c6c 88a0 21be 665f cc6a     . .k..l,...!_fj.
 800eb0c:	b518 fd7f 3181 f48a 296b 6da7 b987 514d     .....1..k).m..MQ
 800eb1c:	9f10 9c17 adbc f65a 90fe 0960 c532 c2a6     ......Z...`.2...
 800eb2c:	9167 bec1 29b9 75bc 5738 8bc0 97f3 8eef     g....).u8W......
 800eb3c:	fcb9 16d7 0f42 f43a c1f7 49ac 0b98 f329     ....B.:....I..).
 800eb4c:	a11a d4c7 7521 7b8e 50eb 8195 64ae 1c43     ....!u.{.P...dC.
 800eb5c:	2952 aedb 3607 23f5 300a aa23 277d 57e2     R)...6.#.0#.}'.W
 800eb6c:	a602 9cdd 5bfa 665f 457c 345a 45ac bb0b     .....[_f|EZ4.E..
 800eb7c:	540c 3e7f cfe1 19c8 638a 5946 df9c 4e13     .T.>.....cFY...N
 800eb8c:	2ea4 5c79 d05d 1424 f8f9 99e5 dd86 35b5     ..y\].$........5
 800eb9c:	bfb6 c4e1 ae62 8c76 ea95 6a7f e590 b1ed     ....b.v....j....
 800ebac:	c77d 1ae1 4654 f1ee fde6 c242 8218 1760     }...TF....B...`.
 800ebbc:	d409 8d34 2d4d 1a52 5a33 67ea 69d7 7c40     ..4.M-R.3Z.g.i@|
 800ebcc:	7fb2 d5ad ab3f 34c5 4c3b c066 b8b7 e3e8     ....?..4;Lf.....
 800ebdc:	3d3e b758 7ac7 bd4a dacd a05b f8de 321b     >=X..zJ...[....2
 800ebec:	03ca 6ee7 dd0d 3198 cafc 0732 5308 bb48     ...n...1..2..SH.
 800ebfc:	50c4 4179 8ebf bdbc f9a0 768a f636 31fa     .PyA.......v6..1
 800ec0c:	4a7e fdcd 33c0 3d3b 9fb0 876d fdaa e940     ~J...3;=..m...@.
 800ec1c:	e771 2b74 ea13 bae7 c0a8 5717 5dfe c482     q.t+.......W.]..
 800ec2c:	1495 4230 e538 6018 3597 c924 3d04 6fab     ..0B8..`.5$..=.o
 800ec3c:	5e03 5fc5 c8a2 6ce2 3617 d105 9a7e 4ff7     .^._...l.6..~..O
 800ec4c:	903c 47b5 3963 1b5c 61b8 2447 3183 8b65     <..Gc9\..aG$.1e.
 800ec5c:	a0b5 489e 9ee6 d6f8 ffa1 aaff 68fe 444c     ...H.........hLD
 800ec6c:	55ad 0925 0d14 ae1c 7cdd 6f5f 6bfc 33ea     .U%......|_o.k.3
 800ec7c:	e51d 7722 8fc6 ebf3 610b e138 b804 c05f     .."w.....a8..._.
 800ec8c:	1a4c b141 a864 176c 0ec1 6627 c700 b2cf     L.A.d.l...'f....
 800ec9c:	1533 4573 b0e8 f3f5 f7c1 8bb2 7a11 14e3     3.sE.........z..
 800ecac:	97ed e15d 9875 95c0 8801 fff2 57d0 6455     ..].u........WUd
 800ecbc:	5cd1 6ef6 b204 19f4 85fe 8664 ee14 6d5a     .\.n......d...Zm
 800eccc:	a60c a75c 60a9 5fc9 bdfe 97eb 16ed f4c9     ..\..`._........
 800ecdc:	ad2b 0fb1 74d4 0468 10e9 42f8 44df 19bb     +....th....B.D..
 800ecec:	3fdd 0bb0 7344 b4c9 f9ef 1f06 4d9f f9d9     .?..Ds.......M..
 800ecfc:	c378 a089 aa23 6c93 3a7d e7e0 a7fd 55da     x...#..l}:.....U
 800ed0c:	a986 01d5 1056 fd08 e49b 2cf6 5451 5ecc     ....V......,QT.^
 800ed1c:	4b74 e8d2 ce7c 78b3 1f3d 27de a403 2db6     tK..|..x=..'...-
 800ed2c:	0b88 fb8f d365 7692 c1c1 68d0 84b1 08af     ....e..v...h....
 800ed3c:	82ac 318c 8b67 f394 e931 0c2b e59d 0a49     ...1g...1.+...I.
 800ed4c:	6ce6 cec9 8162 c84f eca6 a2fc 58d7 b398     .l..b.O......X..
 800ed5c:	66b3 05c0 57e7 6904 8f85 a372 f1ec 4536     .f...W.i..r...6E
 800ed6c:	9f83 67f7 b3aa 18c8 7d69 65ce 7b6f 7c6f     ...g....i}.eo{o|
 800ed7c:	ee89 c1fa 1443 fb53 d659 f7b2 12ef 810a     ....C.S.Y.......
 800ed8c:	68e5 7621 c80f bfbb 5483 43aa 66aa 39db     .h!v.....T.C.f.9
 800ed9c:	66e1 624d ae58 cacb 03aa 81db 2edd e24c     .fMbX.........L.
 800edac:	dcb3 7b39 6492 718e f976 2ff6 8078 9a7c     ..9{.d.qv../x.|.
 800edbc:	cfb6 84b6 3ad9 8aec 2fc8 c434 2e65 da58     .....:.../4.e.X.
 800edcc:	cfcd 1d50 4f99 7f16 6d5d b56a de37 8459     ..P..O..]mj.7.Y.
 800eddc:	f96a 8a04 dc06 b1d5 a69e dcc3 4585 2433     j............E3$
 800edec:	76e0 f126 eca9 f02c 3f30 0156 4b3c 10c1     .v&...,.0?V.<K..
 800edfc:	25c4 0c57 f5c6 fcef 9648 d216 6796 d31e     .%W.....H....g..
 800ee0c:	8bfb fb76 f7e1 ded4 7779 b204 be3b dda2     ..v.....yw..;...
 800ee1c:	a62e eb10 08f4 a7f5 8e2d 2efa 1420 3b5f     ........-... ._;
 800ee2c:	0903 15c5 0518 f5da 06ee cdf7 848b 858f     ................
 800ee3c:	85ef 76de db6d d70d 7002 c660 f3b4 7588     ...vm....p`....u
 800ee4c:	9f55 16e5 cea9 7422 5cb8 deff 6947 b64e     U....."t.\..GiN.
 800ee5c:	0db4 2dde fb23 55d5 79eb 673e 8abf 4c39     ...-#..U.y>g..9L
 800ee6c:	2bc7 7084 abd6 9b21 eae3 532e db1f e7ae     .+.p..!....S....
 800ee7c:	8043 663c 6876 3c3b e063 dfa8 81b8 4753     C.<fvh;<c.....SG
 800ee8c:	a3e8 2fa5 b936 49ae 806c edad 8cb4 7a79     .../6..Il.....yz
 800ee9c:	5900 46e4 67bb 87cf aca9 9d20 ceef ea95     .Y.F.g.... .....
 800eeac:	d6bc 8e55 8fa8 65bb 043b fd72 6bcd 681a     ..U....e;.r..k.h
 800eebc:	9059 fc8d 6098 698a b647 5bbd 610a 9c1c     Y....`.iG..[.a..
 800eecc:	3c77 489f 368b 8679 38de c396 d1f9 8052     w<.H.6y..8....R.
 800eedc:	afac e735 c4f1 bbe5 18ce 4386 1c47 ff74     ..5........CG.t.
 800eeec:	bf9c 319a e5fc a663 64f1 9b18 2fea f15e     ...1..c..d.../^.
 800eefc:	1ff5 ac75 625d 1a12 ac2e 3ee7 c0ba 3aa4     ..u.]b.....>...:
 800ef0c:	2f5f 0112 c832 5f8e 2eea 1e85 2fc1 7ab6     _/..2.._...../.z
 800ef1c:	79b6 cb86 afbc f947 4c8e effd 8de9 dcc3     .y....G..L......
 800ef2c:	21b6 21d9 d7a9 80b4 fc63 4265 b2db 6098     .!.!....c.eB...`
 800ef3c:	f417 f413 3fea a36d 8ed7 1ccc 317f 0e07     .....?m......1..
 800ef4c:	8ab9 6970 eb3a bd8c 9505 21da 77f5 edec     ..pi:......!.w..
 800ef5c:	19ff ad24 7203 700e ba41 b2d1 7278 8286     ..$..r.pA...xr..
 800ef6c:	bcbc e97c 1613 51f4 3adb 3c56 4d69 23fe     ..|....Q.:V<iM.#
 800ef7c:	08cd f629 df98 09c3 715f 5f41 7cd0 53ac     ..)....._qA_.|.S
 800ef8c:	0e5f 2f89 be52 7fc2 b870 5630 b6d2 73a7     _../R...p.0V...s
 800ef9c:	f5f6 57a1 a5f1 55dc 2c6c 1d19 a6e5 bc70     ...W...Ul,....p.
 800efac:	36fd 05fb efaf 0e23 5827 a29c 0f4f 9f7e     .6....#.'X..O.~.
 800efbc:	b869 4d9f 3324 00a2 8d6f bc7d bb57 f1cf     i..M$3..o.}.W...
 800efcc:	cbe4 0ecc dc2d 02e0 d55d 7580 eed7 6c5d     ....-...]..u..]l
 800efdc:	3d6a 2c17 b00e a1d0 a766 c017 0363 aff9     j=.,....f...c...
 800efec:	ce39 67be 1617 e5e0 2f01 b3ec 1d8c 718a     9..g...../.....q
 800effc:	4d6d c162 cde2 242a 2e63 82e8 2be8 d3ae     mMb...*$c....+..
 800f00c:	d953 f20e c5ab 5a01 bfab cb3f 654c 6897     S......Z..?.Le.h
 800f01c:	0b1f 1073 bb8f ede5 f009 0cd1 5d22 72c3     ..s........."].r
 800f02c:	09d0 a801 977b e235 1c55 a738 5903 c68a     ....{.5.U.8..Y..
 800f03c:	2185 26f5 58eb 84c1 16c9 bbfb 530e 9f6c     .!.&.X.......Sl.
 800f04c:	ac6c 4d48 1517 9962 98ab f572 75c4 d55e     l.HM..b...r..u^.
 800f05c:	d569 af3e 07be d90f 09b6 f4f5 8e60 b1f3     i.>.........`...
 800f06c:	8bc0 43bd e51f c57d fe65 20f4 2da2 ade8     ...C..}.e.. .-..
 800f07c:	aa30 8a3d 015b 8b14 b14d b8bf 0394 f23e     0.=.[...M.....>.
 800f08c:	74da 4762 59e6 d006 837e 21ac a4c2 5cb0     .tbG.Y..~..!...\
 800f09c:	7de7 ea95 43b8 5b47 f5e3 3122 3b93 a111     .}...CG[.."1.;..
 800f0ac:	307f 3366 d775 9adc 76c4 b0ea 5eaa e816     .0f3u....v...^..
 800f0bc:	5c6d 27d0 c034 9da0 fe00 e358 f9ae 1fc9     m\.'4.....X.....
 800f0cc:	14ba 798c a22d cbf8 30dd 289b 889d 27e8     ...y-....0.(...'
 800f0dc:	b065 a43c e82e e84e 314a d76d 1b01 d1b1     e.<...N.J1m.....
 800f0ec:	278a 4a07 1d31 6e3a aae5 6281 a752 bf0a     .'.J1.:n...bR...
 800f0fc:	6b2b b6b6 3fcc 5666 257f b8a9 5a40 6101     +k...?fV.%..@Z.a
 800f10c:	658c e03e b580 acef 1d17 cd99 731f 9021     .e>..........s!.
 800f11c:	fd1f 00da a629 d691 4c6a c6e4 e5ac fca3     ....)...jL......
 800f12c:	220e 8757 7a1c 5d74 c5e9 010f 58e6 7bef     ."W..zt].....X.{
 800f13c:	24e7 68b6 10cb 28fc bebf 816c b345 b2cd     .$.h...(..l.E...
 800f14c:	e93a 0cc5 9575 6929 38df 2895 bb8f 6030     :...u.)i.8.(..0`
 800f15c:	cc1f 77f1 f8cb 28fe 2977 c5b2 eaf9 ef0e     ...w...(w)......
 800f16c:	62fa b2bd a9f2 33d7 8c10 4821 3b90 5e6e     .b.....3..!H.;n^
 800f17c:	a0cb 714e 7c97 8f3f f772 9922 07a7 bc4e     ..Nq.|?.r."...N.
 800f18c:	f549 4cb4 8e21 ebb7 eb21 75a7 6c41 b3ee     I..L!...!..uAl..
 800f19c:	32c0 233e 5661 b1eb f922 0bbb 43b2 7696     .2>#aV.."....C.v
 800f1ac:	f3b8 87e2 4f13 cfd3 218b 1ea5 2327 daa0     .....O...!..'#..
 800f1bc:	9575 fcb5 c3a1 dc6c 05e5 e439 0a69 b4e6     u.....l...9.i...
 800f1cc:	fd1e 87ff d020 aac1 bfe5 1aa7 944f 624f     .... .......O.Ob
 800f1dc:	647d 317f daa4 04a3 43ef 924d b29b 13ad     }d.1.....CM.....
 800f1ec:	d65d 6531 976d b601 f96c cf0e 51f5 53ee     ].1em...l....Q.S
 800f1fc:	37a0 5c22 b602 7b28 00ed ac84 6a45 1b99     .7"\..({....Ej..
 800f20c:	306f 21d1 0b99 89fa cfd8 21be e0bf 7593     o0.!.......!...u
 800f21c:	8198 ad7a 60a9 f885 e34c e47c 43b7 7c50     ..z..`..L.|..CP|
 800f22c:	6714 cc91 ba98 fa27 7d8a 7924 dfd6 63da     .g....'..}$y...c
 800f23c:	4569 358f f92d fb1a 2804 ec6c 01e9 b9a1     iE.5-....(l.....
 800f24c:	cdc9 e649 76bc 2d22 5cf3 8fbe e984 e02b     ..I..v"-.\....+.
 800f25c:	faa2 7b03 d56f 3b25 5432 b46e 29b4 2b74     ...{o.%;2Tn..)t+
 800f26c:	1ebf dc17 b4a3 8043 775d 984f 9ee3 b017     ......C.]wO.....
 800f27c:	805c 0854 8712 efa9 cc8e a534 5131 10de     \.T.......4.1Q..
 800f28c:	5a63 2833 8015 3b3a de58 6913 661e a200     cZ3(..:;X..i.f..
 800f29c:	28a5 9307 809b e05a 6197 f36e cef6 51e3     .(....Z..an....Q
 800f2ac:	767e 66b1 cd79 6688 1b88 947c dd07 2288     ~v.fy..f..|...."
 800f2bc:	f92d 4526 7f94 c2b8 bf73 722e 86b5 047f     -.&E....s..r....
 800f2cc:	7313 5d80 9b2c f38f 8f6d 2e72 5315 feaa     .s.],...m.r..S..
 800f2dc:	9813 d140 c62f 6f42 efbf fa23 e4dd 03ff     ..@./.Bo..#.....
 800f2ec:	3154 11f3                                   T1..

0800f2f0 <SPI_MASTER_0_MOSI>:
 800f2f0:	8500 4802 0000 0000                         ...H....

0800f2f8 <SPI_MASTER_0_MISO>:
 800f2f8:	8500 4802 0001 0000                         ...H....

0800f300 <SPI_MASTER_0_SCLKOUT>:
 800f300:	8500 4802 0002 0000                         ...H....

0800f308 <SPI_MASTER_0_SCLKOUT_Config>:
 800f308:	0088 0000 0001 0000 0001 0000 0000 0000     ................
 800f318:	0000 0000                                   ....

0800f31c <SPI_MASTER_0_Config>:
 800f31c:	888c 1ffe 4d41 0800 f2f0 0800 8878 1ffe     ....AM......x...
 800f32c:	f2f8 0800 8a24 1ffe 0000 0000 0000 0000     ....$...........
	...
 800f344:	f300 0800 f308 0800 0000 0000 0000 0000     ................
	...
 800f39c:	0000 8000 0202 0000 0002 0000               ............

0800f3a8 <group_init_handle0>:
	...

0800f3bc <group_init_handle1>:
	...

0800f3d0 <group_init_handle2>:
	...

0800f3e4 <group_init_handle3>:
	...

0800f3f8 <global_config>:
 800f3f8:	0000 0000 0004 0000 0000 0000 0000 0000     ................
	...

0800f410 <IO_DIO_DIGOUT_PD_TFT>:
 800f410:	8000 4802 0080 0000 0000 0001 0000 0000     ...H............
 800f420:	000c 0000                                   ....

0800f424 <IO_DIO_DIGOUT_CS_TFT>:
 800f424:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 800f434:	0004 0000 0230 0101 0000 0001 0000 0000     ....0...........
 800f444:	0000 0001 0102 0101                         ........

0800f44c <global_iclass_config>:
 800f44c:	0000 0000                                   ....

0800f450 <backgnd_rs_intr_handle>:
 800f450:	0010 0000 003f 0000 0000 0000               ....?.......

0800f45c <backgnd_config>:
 800f45c:	0005 0000 4500 0000 000c 0000               .....E......

0800f468 <npio2_hw>:
 800f468:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 800f478:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 800f488:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 800f498:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 800f4a8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 800f4b8:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 800f4c8:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 800f4d8:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0800f4e8 <two_over_pi>:
 800f4e8:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 800f4f8:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 800f508:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 800f518:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 800f528:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 800f538:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 800f548:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 800f558:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 800f568:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 800f578:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 800f588:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 800f598:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 800f5a8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 800f5b8:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 800f5c8:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 800f5d8:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 800f5e8:	e27b 0060 8c6b 00c0                         {.`.k...

0800f5f0 <init_jk>:
 800f5f0:	0002 0000 0003 0000 0004 0000 0006 0000     ................

0800f600 <PIo2>:
 800f600:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 800f610:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 800f620:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 800f630:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5
 800f640:	0043 0000                                   C...

0800f644 <_global_impure_ptr>:
 800f644:	8968 1ffe 4e49 0046 6e69 0066 414e 004e     h...INF.inf.NAN.
 800f654:	616e 006e 0030 3130 3332 3534 3736 3938     nan.0.0123456789
 800f664:	4241 4443 4645 3000 3231 3433 3635 3837     ABCDEF.012345678
 800f674:	6139 6362 6564 0066 6e49 6966 696e 7974     9abcdef.Infinity
 800f684:	4e00 4e61 0000 0000                         .NaN....

0800f68c <__sf_fake_stdin>:
	...

0800f6ac <__sf_fake_stdout>:
	...

0800f6cc <__sf_fake_stderr>:
	...
 800f6ec:	4f50 4953 0058 002e 0000 0000               POSIX.......

0800f6f8 <__mprec_tens>:
 800f6f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 800f708:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 800f718:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 800f728:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 800f738:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 800f748:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 800f758:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 800f768:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 800f778:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 800f788:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 800f798:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 800f7a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 800f7b8:	9db4 79d9 7843 44ea                         ...yCx.D

0800f7c0 <__mprec_bigtens>:
 800f7c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 800f7d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 800f7e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

0800f7e8 <p05.5277>:
 800f7e8:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
 800f7f8:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....
