   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ff.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.FatFs,"aw",%nobits
  20              	 .align 2
  23              	FatFs:
  24 0000 00000000 	 .space 4
  25              	 .section .bss.Fsid,"aw",%nobits
  26              	 .align 1
  29              	Fsid:
  30 0000 0000     	 .space 2
  31              	 .section .bss.CurrVol,"aw",%nobits
  34              	CurrVol:
  35 0000 00       	 .space 1
  36              	 .section .bss.Files,"aw",%nobits
  37              	 .align 2
  40              	Files:
  41 0000 00000000 	 .space 16
  41      00000000 
  41      00000000 
  41      00000000 
  42              	 .section .rodata.ExCvt,"a",%progbits
  43              	 .align 2
  46              	ExCvt:
  47 0000 43       	 .byte 67
  48 0001 55       	 .byte 85
  49 0002 45       	 .byte 69
  50 0003 41       	 .byte 65
  51 0004 41       	 .byte 65
  52 0005 41       	 .byte 65
  53 0006 41       	 .byte 65
  54 0007 43       	 .byte 67
  55 0008 45       	 .byte 69
  56 0009 45       	 .byte 69
  57 000a 45       	 .byte 69
  58 000b 49       	 .byte 73
  59 000c 49       	 .byte 73
  60 000d 49       	 .byte 73
  61 000e 41       	 .byte 65
  62 000f 41       	 .byte 65
  63 0010 45       	 .byte 69
  64 0011 92       	 .byte -110
  65 0012 92       	 .byte -110
  66 0013 4F       	 .byte 79
  67 0014 4F       	 .byte 79
  68 0015 4F       	 .byte 79
  69 0016 55       	 .byte 85
  70 0017 55       	 .byte 85
  71 0018 59       	 .byte 89
  72 0019 4F       	 .byte 79
  73 001a 55       	 .byte 85
  74 001b 4F       	 .byte 79
  75 001c 9C       	 .byte -100
  76 001d 4F       	 .byte 79
  77 001e 9E       	 .byte -98
  78 001f 9F       	 .byte -97
  79 0020 41       	 .byte 65
  80 0021 49       	 .byte 73
  81 0022 4F       	 .byte 79
  82 0023 55       	 .byte 85
  83 0024 A5       	 .byte -91
  84 0025 A5       	 .byte -91
  85 0026 A6       	 .byte -90
  86 0027 A7       	 .byte -89
  87 0028 A8       	 .byte -88
  88 0029 A9       	 .byte -87
  89 002a AA       	 .byte -86
  90 002b AB       	 .byte -85
  91 002c AC       	 .byte -84
  92 002d AD       	 .byte -83
  93 002e AE       	 .byte -82
  94 002f AF       	 .byte -81
  95 0030 B0       	 .byte -80
  96 0031 B1       	 .byte -79
  97 0032 B2       	 .byte -78
  98 0033 B3       	 .byte -77
  99 0034 B4       	 .byte -76
 100 0035 41       	 .byte 65
 101 0036 41       	 .byte 65
 102 0037 41       	 .byte 65
 103 0038 B8       	 .byte -72
 104 0039 B9       	 .byte -71
 105 003a BA       	 .byte -70
 106 003b BB       	 .byte -69
 107 003c BC       	 .byte -68
 108 003d BD       	 .byte -67
 109 003e BE       	 .byte -66
 110 003f BF       	 .byte -65
 111 0040 C0       	 .byte -64
 112 0041 C1       	 .byte -63
 113 0042 C2       	 .byte -62
 114 0043 C3       	 .byte -61
 115 0044 C4       	 .byte -60
 116 0045 C5       	 .byte -59
 117 0046 41       	 .byte 65
 118 0047 41       	 .byte 65
 119 0048 C8       	 .byte -56
 120 0049 C9       	 .byte -55
 121 004a CA       	 .byte -54
 122 004b CB       	 .byte -53
 123 004c CC       	 .byte -52
 124 004d CD       	 .byte -51
 125 004e CE       	 .byte -50
 126 004f CF       	 .byte -49
 127 0050 D1       	 .byte -47
 128 0051 D1       	 .byte -47
 129 0052 45       	 .byte 69
 130 0053 45       	 .byte 69
 131 0054 45       	 .byte 69
 132 0055 49       	 .byte 73
 133 0056 49       	 .byte 73
 134 0057 49       	 .byte 73
 135 0058 49       	 .byte 73
 136 0059 D9       	 .byte -39
 137 005a DA       	 .byte -38
 138 005b DB       	 .byte -37
 139 005c DC       	 .byte -36
 140 005d DD       	 .byte -35
 141 005e 49       	 .byte 73
 142 005f DF       	 .byte -33
 143 0060 4F       	 .byte 79
 144 0061 E1       	 .byte -31
 145 0062 4F       	 .byte 79
 146 0063 4F       	 .byte 79
 147 0064 4F       	 .byte 79
 148 0065 4F       	 .byte 79
 149 0066 E6       	 .byte -26
 150 0067 E8       	 .byte -24
 151 0068 E8       	 .byte -24
 152 0069 55       	 .byte 85
 153 006a 55       	 .byte 85
 154 006b 55       	 .byte 85
 155 006c 59       	 .byte 89
 156 006d 59       	 .byte 89
 157 006e EE       	 .byte -18
 158 006f EF       	 .byte -17
 159 0070 F0       	 .byte -16
 160 0071 F1       	 .byte -15
 161 0072 F2       	 .byte -14
 162 0073 F3       	 .byte -13
 163 0074 F4       	 .byte -12
 164 0075 F5       	 .byte -11
 165 0076 F6       	 .byte -10
 166 0077 F7       	 .byte -9
 167 0078 F8       	 .byte -8
 168 0079 F9       	 .byte -7
 169 007a FA       	 .byte -6
 170 007b FB       	 .byte -5
 171 007c FC       	 .byte -4
 172 007d FD       	 .byte -3
 173 007e FE       	 .byte -2
 174 007f FF       	 .byte -1
 175              	 .section .text.ld_word,"ax",%progbits
 176              	 .align 2
 177              	 .thumb
 178              	 .thumb_func
 180              	ld_word:
 181              	.LFB0:
 182              	 .file 1 "../Dave/Generated/FATFS/ff_Src/ff.c"
   1:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------------------------------------------/
   2:../Dave/Generated/FATFS/ff_Src/ff.c **** /  FatFs - Generic FAT Filesystem Module  R0.13c                              /
   3:../Dave/Generated/FATFS/ff_Src/ff.c **** /-----------------------------------------------------------------------------/
   4:../Dave/Generated/FATFS/ff_Src/ff.c **** /
   5:../Dave/Generated/FATFS/ff_Src/ff.c **** / Copyright (C) 2018, ChaN, all right reserved.
   6:../Dave/Generated/FATFS/ff_Src/ff.c **** /
   7:../Dave/Generated/FATFS/ff_Src/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:../Dave/Generated/FATFS/ff_Src/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:../Dave/Generated/FATFS/ff_Src/ff.c **** / that the following condition is met:
  10:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  11:../Dave/Generated/FATFS/ff_Src/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:../Dave/Generated/FATFS/ff_Src/ff.c **** /    this condition and the following disclaimer.
  13:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  14:../Dave/Generated/FATFS/ff_Src/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:../Dave/Generated/FATFS/ff_Src/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:../Dave/Generated/FATFS/ff_Src/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:../Dave/Generated/FATFS/ff_Src/ff.c **** / by use of this software.
  18:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  19:../Dave/Generated/FATFS/ff_Src/ff.c **** /----------------------------------------------------------------------------*/
  20:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  21:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  22:../Dave/Generated/FATFS/ff_Src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  23:../Dave/Generated/FATFS/ff_Src/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  24:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  25:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  26:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
  27:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  28:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Definitions
  29:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  30:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
  31:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  32:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_DEFINED != 86604	/* Revision ID */
  33:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong include file (ff.h).
  34:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
  35:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  36:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  37:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Limits and boundaries */
  38:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
  39:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
  40:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but right for real DOS/Windows
  41:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but right for real DOS/Window
  42:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
  43:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
  44:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  45:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  46:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Character code support macros */
  47:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsUpper(c)		((c) >= 'A' && (c) <= 'Z')
  48:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsLower(c)		((c) >= 'a' && (c) <= 'z')
  49:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsDigit(c)		((c) >= '0' && (c) <= '9')
  50:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogate(c)	((c) >= 0xD800 && (c) <= 0xDFFF)
  51:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogateH(c)	((c) >= 0xD800 && (c) <= 0xDBFF)
  52:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <= 0xDFFF)
  53:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  54:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  55:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Additional file access control and file status flags for internal use */
  56:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
  57:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
  58:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
  59:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  60:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  61:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Additional file attribute bits for internal use */
  62:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_VOL		0x08	/* Volume label */
  63:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
  64:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
  65:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  66:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  67:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Name status flags in fn[11] */
  68:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
  69:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
  70:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
  71:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LAST		0x04	/* Last segment */
  72:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
  73:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
  74:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
  75:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
  76:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_NONAME	0x80	/* Not followed */
  77:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  78:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  79:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT directory entry types */
  80:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_BITMAP	0x81	/* Allocation bitmap */
  81:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_UPCASE	0x82	/* Up-case table */
  82:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_VLABEL	0x83	/* Volume label */
  83:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_FILEDIR	0x85	/* File and directory */
  84:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_STREAM	0xC0	/* Stream extension */
  85:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_FILENAME	0xC1	/* Name extension */
  86:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  87:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  88:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
  89:../Dave/Generated/FATFS/ff_Src/ff.c **** / because the C structure is not binary compatible between different platforms */
  90:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  91:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
  92:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
  93:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
  94:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
  95:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
  96:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
  97:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT [entry] (WORD) */
  98:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
  99:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 100:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 101:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerTrk		24		/* Number of sectors per track for int13h [sector] (WORD) */
 102:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 103:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 104:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 105:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 106:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_NTres			37		/* WindowsNT error flag (BYTE) */
 107:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 108:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 109:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 110:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_FilSysType		54		/* Filesystem type string (8-byte) */
 111:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 112:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 113:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 114:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 115:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 116:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSVer32			42		/* FAT32: Filesystem version (WORD) */
 117:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 118:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 119:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 120:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 121:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 122:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 123:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 124:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 125:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_FilSysType32		82		/* FAT32: Filesystem type string (8-byte) */
 126:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 127:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 128:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 129:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 130:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 131:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 132:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 133:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 134:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 135:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 136:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 137:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSVerEx			104		/* exFAT: Filesystem version (WORD) */
 138:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (WORD) */
 139:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 140:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 141:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 142:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 143:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 144:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 145:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 146:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 147:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_Name			0		/* Short file name (11-byte) */
 148:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_Attr			11		/* Attribute (BYTE) */
 149:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_NTres			12		/* Lower case flag (BYTE) */
 150:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 151:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_CrtTime			14		/* Created time (DWORD) */
 152:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 153:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 154:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_ModTime			22		/* Modified time (DWORD) */
 155:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 156:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FileSize		28		/* File size (DWORD) */
 157:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 158:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 159:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Type			12		/* LFN: Entry type (BYTE) */
 160:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 161:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 162:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 163:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 164:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 165:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 166:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 167:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 168:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 169:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 170:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 171:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 172:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 173:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 174:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 175:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 176:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 177:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_GenFlags		33		/* exFAT: General secondary flags (BYTE) */
 178:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 179:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 180:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 181:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 182:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 183:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 184:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SZDIRE				32		/* Size of a directory entry */
 185:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 186:../Dave/Generated/FATFS/ff_Src/ff.c **** #define RDDEM				0x05	/* Replacement of the character collides with DDEM */
 187:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 188:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 189:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 190:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 191:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 192:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 193:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 194:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 195:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SZ_PTE				16		/* MBR: Size of a partition table entry */
 196:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 197:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 198:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 199:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 200:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 201:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 202:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 203:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 204:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 205:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 206:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 207:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 208:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Post process on fatal error in the file operations */
 209:../Dave/Generated/FATFS/ff_Src/ff.c **** #define ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 210:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 211:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 212:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Re-entrancy related */
 213:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
 214:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1
 215:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 216:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 217:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 218:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 219:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_FF(fs, res)	return res
 220:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 221:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 222:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 223:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Definitions of volume - physical location conversion */
 224:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MULTI_PARTITION
 225:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 226:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 227:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 228:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
 229:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 230:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 231:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 232:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 233:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Definitions of sector size */
 234:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MA
 235:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong sector size configuration
 236:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 237:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS == FF_MIN_SS
 238:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed sector size */
 239:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 240:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SS(fs)	((fs)->ssize)	/* Variable sector size */
 241:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 242:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 243:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 244:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Timestamp */
 245:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_NORTC == 1
 246:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NOR
 247:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Invalid FF_FS_NORTC settings
 248:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 249:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR - 1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_
 250:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 251:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GET_FATTIME()	get_fattime()
 252:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 253:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 254:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 255:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File lock controls */
 256:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 257:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_READONLY
 258:../Dave/Generated/FATFS/ff_Src/ff.c **** #error FF_FS_LOCK must be 0 at read-only configuration
 259:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 260:../Dave/Generated/FATFS/ff_Src/ff.c **** typedef struct {
 261:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 263:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 265:../Dave/Generated/FATFS/ff_Src/ff.c **** } FILESEM;
 266:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 267:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 268:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 269:../Dave/Generated/FATFS/ff_Src/ff.c **** /* SBCS up-case tables (\x80-\xFF) */
 270:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 271:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 272:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 273:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 274:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 275:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 276:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 277:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 278:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 279:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 280:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 281:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 282:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 283:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 284:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 285:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 286:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 287:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 288:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 289:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 290:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 291:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 292:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 293:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 294:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 295:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 296:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 297:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 298:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 299:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 300:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 301:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 302:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F
 303:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 304:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 305:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 306:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 307:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 308:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 309:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 310:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41
 311:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 312:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 313:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 314:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 315:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 316:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 317:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 318:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F
 319:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 320:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 321:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 322:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 323:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 324:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 325:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 326:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F
 327:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 328:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 329:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 330:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 331:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 332:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 333:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 334:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F
 335:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 336:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 337:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 338:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 339:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 340:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 341:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 342:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F
 343:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 344:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 345:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 346:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 347:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 348:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 349:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 350:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F
 351:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 352:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 353:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 354:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 355:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 356:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 357:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 358:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 359:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 360:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 361:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 362:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 363:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 364:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 365:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 366:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F
 367:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 368:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 369:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 370:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 371:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 372:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 373:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 374:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 375:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 376:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 377:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 378:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 379:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 380:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 381:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 382:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 383:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 384:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 385:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 386:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 387:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 388:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 389:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 390:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 391:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 392:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 393:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 394:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 395:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 396:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 397:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 398:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 399:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 400:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 401:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 402:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 403:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 404:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 405:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 406:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 407:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 408:../Dave/Generated/FATFS/ff_Src/ff.c **** /* DBCS code range |----- 1st byte -----|  |----------- 2nd byte -----------| */
 409:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00}
 410:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0x80, 0xFE, 0x00, 0x00}
 411:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 0x5A, 0x61, 0x7A, 0x81, 0xFE}
 412:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 0x00, 0x00}
 413:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 414:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 415:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Macros for table definitions */
 416:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MERGE_2STR(a, b) a ## b
 417:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
 418:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 419:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 420:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 421:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 422:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
 423:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 424:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Work Area
 425:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 426:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
 427:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 428:../Dave/Generated/FATFS/ff_Src/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 429:../Dave/Generated/FATFS/ff_Src/ff.c **** /  not compliance with C standard. */
 430:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 431:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 432:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File/Volume controls           */
 433:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 434:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 435:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES < 1 || FF_VOLUMES > 10
 436:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong FF_VOLUMES setting
 437:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 438:../Dave/Generated/FATFS/ff_Src/ff.c **** static FATFS* FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
 439:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD Fsid;					/* Filesystem mount ID */
 440:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 441:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
 442:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE CurrVol;				/* Current drive */
 443:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 444:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 445:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 446:../Dave/Generated/FATFS/ff_Src/ff.c **** static FILESEM Files[FF_FS_LOCK];	/* Open object lock semaphores */
 447:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 448:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 449:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID
 450:../Dave/Generated/FATFS/ff_Src/ff.c **** #ifdef FF_VOLUME_STRS
 451:../Dave/Generated/FATFS/ff_Src/ff.c **** static const char* const VolumeStr[FF_VOLUMES] = {FF_VOLUME_STRS};	/* Pre-defined volume ID */
 452:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 453:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 454:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 455:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 456:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 457:../Dave/Generated/FATFS/ff_Src/ff.c **** /* LFN/Directory working buffer   */
 458:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 459:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 460:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 0		/* Non-LFN configuration */
 461:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 462:../Dave/Generated/FATFS/ff_Src/ff.c **** #error LFN must be enabled when enable exFAT
 463:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 464:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF
 465:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)
 466:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 467:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 468:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 469:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* LFN configurations */
 470:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
 471:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_MAX_LFN
 472:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 473:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
 474:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
 475:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 476:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
 477:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_LFN_UNICODE
 478:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 479:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* FAT: Offset of LFN characters 
 480:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)	/* exFAT: Size of directory entry block scratchpad b
 481:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 482:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1		/* LFN enabled with static working buffer */
 483:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 484:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 485:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 486:../Dave/Generated/FATFS/ff_Src/ff.c **** static WCHAR LfnBuf[FF_MAX_LFN + 1];		/* LFN working buffer */
 487:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF
 488:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)
 489:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 490:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 491:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 492:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 493:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 494:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working buffer
 495:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 496:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 497:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 498:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1];	/* LFN working buffer */
 499:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 500:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 501:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 502:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 503:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 504:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 505:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 506:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer and directory entry block scratchp
 507:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAV
 508:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 509:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 510:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer */
 511:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH
 512:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 513:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 514:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	{ if (!work) ff_memfree(buf); return res; }
 515:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_MALLOC	0x8000	/* Must be >=FF_MAX_SS */
 516:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 517:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 518:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_USE_LFN
 519:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 520:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN == 1 */
 521:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN == 0 */
 522:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 523:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 524:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 525:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 526:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Code conversion tables         */
 527:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 528:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 529:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Run-time code page configuration */
 530:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE CodePage
 531:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD CodePage;	/* Current code page */
 532:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE *ExCvt, *DbcTbl;	/* Pointer to current SBCS up-case table and DBCS code range tab
 533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 534:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct437[] = TBL_CT437;
 535:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct720[] = TBL_CT720;
 536:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct737[] = TBL_CT737;
 537:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct771[] = TBL_CT771;
 538:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct775[] = TBL_CT775;
 539:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct850[] = TBL_CT850;
 540:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct852[] = TBL_CT852;
 541:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct855[] = TBL_CT855;
 542:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct857[] = TBL_CT857;
 543:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct860[] = TBL_CT860;
 544:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct861[] = TBL_CT861;
 545:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct862[] = TBL_CT862;
 546:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct863[] = TBL_CT863;
 547:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct864[] = TBL_CT864;
 548:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct865[] = TBL_CT865;
 549:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct866[] = TBL_CT866;
 550:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct869[] = TBL_CT869;
 551:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc932[] = TBL_DC932;
 552:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc936[] = TBL_DC936;
 553:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc949[] = TBL_DC949;
 554:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc950[] = TBL_DC950;
 555:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 556:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900	/* Static code page configuration (SBCS) */
 557:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE FF_CODE_PAGE
 558:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
 559:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 560:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* Static code page configuration (DBCS) */
 561:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE FF_CODE_PAGE
 562:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_CODE_PAGE);
 563:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 564:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 565:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 566:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 567:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 568:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 569:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
 570:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 571:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Functions
 572:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 573:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
 574:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 575:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 576:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 577:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 578:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 579:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 580:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 581:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 183              	 .loc 1 581 0
 184              	 .cfi_startproc
 185              	 
 186              	 
 187              	 
 188 0000 80B4     	 push {r7}
 189              	.LCFI0:
 190              	 .cfi_def_cfa_offset 4
 191              	 .cfi_offset 7,-4
 192 0002 85B0     	 sub sp,sp,#20
 193              	.LCFI1:
 194              	 .cfi_def_cfa_offset 24
 195 0004 00AF     	 add r7,sp,#0
 196              	.LCFI2:
 197              	 .cfi_def_cfa_register 7
 198 0006 7860     	 str r0,[r7,#4]
 582:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD rv;
 583:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 584:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[1];
 199              	 .loc 1 584 0
 200 0008 7B68     	 ldr r3,[r7,#4]
 201 000a 0133     	 adds r3,r3,#1
 202 000c 1B78     	 ldrb r3,[r3]
 203 000e FB81     	 strh r3,[r7,#14]
 585:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 204              	 .loc 1 585 0
 205 0010 FB89     	 ldrh r3,[r7,#14]
 206 0012 1B02     	 lsls r3,r3,#8
 207 0014 9AB2     	 uxth r2,r3
 208 0016 7B68     	 ldr r3,[r7,#4]
 209 0018 1B78     	 ldrb r3,[r3]
 210 001a 9BB2     	 uxth r3,r3
 211 001c 1343     	 orrs r3,r3,r2
 212 001e 9BB2     	 uxth r3,r3
 213 0020 FB81     	 strh r3,[r7,#14]
 586:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 214              	 .loc 1 586 0
 215 0022 FB89     	 ldrh r3,[r7,#14]
 587:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 216              	 .loc 1 587 0
 217 0024 1846     	 mov r0,r3
 218 0026 1437     	 adds r7,r7,#20
 219              	.LCFI3:
 220              	 .cfi_def_cfa_offset 4
 221 0028 BD46     	 mov sp,r7
 222              	.LCFI4:
 223              	 .cfi_def_cfa_register 13
 224              	 
 225 002a 5DF8047B 	 ldr r7,[sp],#4
 226              	.LCFI5:
 227              	 .cfi_restore 7
 228              	 .cfi_def_cfa_offset 0
 229 002e 7047     	 bx lr
 230              	 .cfi_endproc
 231              	.LFE0:
 233              	 .section .text.ld_dword,"ax",%progbits
 234              	 .align 2
 235              	 .thumb
 236              	 .thumb_func
 238              	ld_dword:
 239              	.LFB1:
 588:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 589:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 590:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 240              	 .loc 1 590 0
 241              	 .cfi_startproc
 242              	 
 243              	 
 244              	 
 245 0000 80B4     	 push {r7}
 246              	.LCFI6:
 247              	 .cfi_def_cfa_offset 4
 248              	 .cfi_offset 7,-4
 249 0002 85B0     	 sub sp,sp,#20
 250              	.LCFI7:
 251              	 .cfi_def_cfa_offset 24
 252 0004 00AF     	 add r7,sp,#0
 253              	.LCFI8:
 254              	 .cfi_def_cfa_register 7
 255 0006 7860     	 str r0,[r7,#4]
 591:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD rv;
 592:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 593:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[3];
 256              	 .loc 1 593 0
 257 0008 7B68     	 ldr r3,[r7,#4]
 258 000a 0333     	 adds r3,r3,#3
 259 000c 1B78     	 ldrb r3,[r3]
 260 000e FB60     	 str r3,[r7,#12]
 594:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[2];
 261              	 .loc 1 594 0
 262 0010 FB68     	 ldr r3,[r7,#12]
 263 0012 1B02     	 lsls r3,r3,#8
 264 0014 7A68     	 ldr r2,[r7,#4]
 265 0016 0232     	 adds r2,r2,#2
 266 0018 1278     	 ldrb r2,[r2]
 267 001a 1343     	 orrs r3,r3,r2
 268 001c FB60     	 str r3,[r7,#12]
 595:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[1];
 269              	 .loc 1 595 0
 270 001e FB68     	 ldr r3,[r7,#12]
 271 0020 1B02     	 lsls r3,r3,#8
 272 0022 7A68     	 ldr r2,[r7,#4]
 273 0024 0132     	 adds r2,r2,#1
 274 0026 1278     	 ldrb r2,[r2]
 275 0028 1343     	 orrs r3,r3,r2
 276 002a FB60     	 str r3,[r7,#12]
 596:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 277              	 .loc 1 596 0
 278 002c FB68     	 ldr r3,[r7,#12]
 279 002e 1B02     	 lsls r3,r3,#8
 280 0030 7A68     	 ldr r2,[r7,#4]
 281 0032 1278     	 ldrb r2,[r2]
 282 0034 1343     	 orrs r3,r3,r2
 283 0036 FB60     	 str r3,[r7,#12]
 597:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 284              	 .loc 1 597 0
 285 0038 FB68     	 ldr r3,[r7,#12]
 598:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 286              	 .loc 1 598 0
 287 003a 1846     	 mov r0,r3
 288 003c 1437     	 adds r7,r7,#20
 289              	.LCFI9:
 290              	 .cfi_def_cfa_offset 4
 291 003e BD46     	 mov sp,r7
 292              	.LCFI10:
 293              	 .cfi_def_cfa_register 13
 294              	 
 295 0040 5DF8047B 	 ldr r7,[sp],#4
 296              	.LCFI11:
 297              	 .cfi_restore 7
 298              	 .cfi_def_cfa_offset 0
 299 0044 7047     	 bx lr
 300              	 .cfi_endproc
 301              	.LFE1:
 303 0046 00BF     	 .section .text.st_word,"ax",%progbits
 304              	 .align 2
 305              	 .thumb
 306              	 .thumb_func
 308              	st_word:
 309              	.LFB2:
 599:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 600:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 601:../Dave/Generated/FATFS/ff_Src/ff.c **** static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 602:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 603:../Dave/Generated/FATFS/ff_Src/ff.c **** 	QWORD rv;
 604:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 605:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[7];
 606:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[6];
 607:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[5];
 608:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[4];
 609:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[3];
 610:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[2];
 611:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[1];
 612:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 613:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 614:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 615:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 616:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 617:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
 618:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 619:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 310              	 .loc 1 619 0
 311              	 .cfi_startproc
 312              	 
 313              	 
 314              	 
 315 0000 80B4     	 push {r7}
 316              	.LCFI12:
 317              	 .cfi_def_cfa_offset 4
 318              	 .cfi_offset 7,-4
 319 0002 83B0     	 sub sp,sp,#12
 320              	.LCFI13:
 321              	 .cfi_def_cfa_offset 16
 322 0004 00AF     	 add r7,sp,#0
 323              	.LCFI14:
 324              	 .cfi_def_cfa_register 7
 325 0006 7860     	 str r0,[r7,#4]
 326 0008 0B46     	 mov r3,r1
 327 000a 7B80     	 strh r3,[r7,#2]
 620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 328              	 .loc 1 620 0
 329 000c 7B68     	 ldr r3,[r7,#4]
 330 000e 5A1C     	 adds r2,r3,#1
 331 0010 7A60     	 str r2,[r7,#4]
 332 0012 7A88     	 ldrh r2,[r7,#2]
 333 0014 D2B2     	 uxtb r2,r2
 334 0016 1A70     	 strb r2,[r3]
 335 0018 7B88     	 ldrh r3,[r7,#2]
 336 001a 1B0A     	 lsrs r3,r3,#8
 337 001c 7B80     	 strh r3,[r7,#2]
 621:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 338              	 .loc 1 621 0
 339 001e 7B68     	 ldr r3,[r7,#4]
 340 0020 5A1C     	 adds r2,r3,#1
 341 0022 7A60     	 str r2,[r7,#4]
 342 0024 7A88     	 ldrh r2,[r7,#2]
 343 0026 D2B2     	 uxtb r2,r2
 344 0028 1A70     	 strb r2,[r3]
 622:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 345              	 .loc 1 622 0
 346 002a 0C37     	 adds r7,r7,#12
 347              	.LCFI15:
 348              	 .cfi_def_cfa_offset 4
 349 002c BD46     	 mov sp,r7
 350              	.LCFI16:
 351              	 .cfi_def_cfa_register 13
 352              	 
 353 002e 5DF8047B 	 ldr r7,[sp],#4
 354              	.LCFI17:
 355              	 .cfi_restore 7
 356              	 .cfi_def_cfa_offset 0
 357 0032 7047     	 bx lr
 358              	 .cfi_endproc
 359              	.LFE2:
 361              	 .section .text.st_dword,"ax",%progbits
 362              	 .align 2
 363              	 .thumb
 364              	 .thumb_func
 366              	st_dword:
 367              	.LFB3:
 623:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 624:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 625:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 368              	 .loc 1 625 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	 
 373 0000 80B4     	 push {r7}
 374              	.LCFI18:
 375              	 .cfi_def_cfa_offset 4
 376              	 .cfi_offset 7,-4
 377 0002 83B0     	 sub sp,sp,#12
 378              	.LCFI19:
 379              	 .cfi_def_cfa_offset 16
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI20:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
 384 0008 3960     	 str r1,[r7]
 626:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 385              	 .loc 1 626 0
 386 000a 7B68     	 ldr r3,[r7,#4]
 387 000c 5A1C     	 adds r2,r3,#1
 388 000e 7A60     	 str r2,[r7,#4]
 389 0010 3A68     	 ldr r2,[r7]
 390 0012 D2B2     	 uxtb r2,r2
 391 0014 1A70     	 strb r2,[r3]
 392 0016 3B68     	 ldr r3,[r7]
 393 0018 1B0A     	 lsrs r3,r3,#8
 394 001a 3B60     	 str r3,[r7]
 627:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 395              	 .loc 1 627 0
 396 001c 7B68     	 ldr r3,[r7,#4]
 397 001e 5A1C     	 adds r2,r3,#1
 398 0020 7A60     	 str r2,[r7,#4]
 399 0022 3A68     	 ldr r2,[r7]
 400 0024 D2B2     	 uxtb r2,r2
 401 0026 1A70     	 strb r2,[r3]
 402 0028 3B68     	 ldr r3,[r7]
 403 002a 1B0A     	 lsrs r3,r3,#8
 404 002c 3B60     	 str r3,[r7]
 628:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 405              	 .loc 1 628 0
 406 002e 7B68     	 ldr r3,[r7,#4]
 407 0030 5A1C     	 adds r2,r3,#1
 408 0032 7A60     	 str r2,[r7,#4]
 409 0034 3A68     	 ldr r2,[r7]
 410 0036 D2B2     	 uxtb r2,r2
 411 0038 1A70     	 strb r2,[r3]
 412 003a 3B68     	 ldr r3,[r7]
 413 003c 1B0A     	 lsrs r3,r3,#8
 414 003e 3B60     	 str r3,[r7]
 629:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 415              	 .loc 1 629 0
 416 0040 7B68     	 ldr r3,[r7,#4]
 417 0042 5A1C     	 adds r2,r3,#1
 418 0044 7A60     	 str r2,[r7,#4]
 419 0046 3A68     	 ldr r2,[r7]
 420 0048 D2B2     	 uxtb r2,r2
 421 004a 1A70     	 strb r2,[r3]
 630:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 422              	 .loc 1 630 0
 423 004c 0C37     	 adds r7,r7,#12
 424              	.LCFI21:
 425              	 .cfi_def_cfa_offset 4
 426 004e BD46     	 mov sp,r7
 427              	.LCFI22:
 428              	 .cfi_def_cfa_register 13
 429              	 
 430 0050 5DF8047B 	 ldr r7,[sp],#4
 431              	.LCFI23:
 432              	 .cfi_restore 7
 433              	 .cfi_def_cfa_offset 0
 434 0054 7047     	 bx lr
 435              	 .cfi_endproc
 436              	.LFE3:
 438 0056 00BF     	 .section .text.mem_cpy,"ax",%progbits
 439              	 .align 2
 440              	 .thumb
 441              	 .thumb_func
 443              	mem_cpy:
 444              	.LFB4:
 631:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 632:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 633:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 634:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 635:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 636:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 637:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 638:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 639:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 640:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 641:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 642:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 643:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 644:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 645:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
 646:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 647:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 648:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 649:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 650:../Dave/Generated/FATFS/ff_Src/ff.c **** /* String functions                                                      */
 651:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 652:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 653:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Copy memory to memory */
 654:../Dave/Generated/FATFS/ff_Src/ff.c **** static void mem_cpy (void* dst, const void* src, UINT cnt)
 655:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 445              	 .loc 1 655 0
 446              	 .cfi_startproc
 447              	 
 448              	 
 449              	 
 450 0000 80B4     	 push {r7}
 451              	.LCFI24:
 452              	 .cfi_def_cfa_offset 4
 453              	 .cfi_offset 7,-4
 454 0002 87B0     	 sub sp,sp,#28
 455              	.LCFI25:
 456              	 .cfi_def_cfa_offset 32
 457 0004 00AF     	 add r7,sp,#0
 458              	.LCFI26:
 459              	 .cfi_def_cfa_register 7
 460 0006 F860     	 str r0,[r7,#12]
 461 0008 B960     	 str r1,[r7,#8]
 462 000a 7A60     	 str r2,[r7,#4]
 656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 463              	 .loc 1 656 0
 464 000c FB68     	 ldr r3,[r7,#12]
 465 000e 7B61     	 str r3,[r7,#20]
 657:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 466              	 .loc 1 657 0
 467 0010 BB68     	 ldr r3,[r7,#8]
 468 0012 3B61     	 str r3,[r7,#16]
 658:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 659:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (cnt != 0) {
 469              	 .loc 1 659 0
 470 0014 7B68     	 ldr r3,[r7,#4]
 471 0016 002B     	 cmp r3,#0
 472 0018 0DD0     	 beq .L7
 473              	.L9:
 660:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
 661:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*d++ = *s++;
 474              	 .loc 1 661 0 discriminator 1
 475 001a 7B69     	 ldr r3,[r7,#20]
 476 001c 5A1C     	 adds r2,r3,#1
 477 001e 7A61     	 str r2,[r7,#20]
 478 0020 3A69     	 ldr r2,[r7,#16]
 479 0022 511C     	 adds r1,r2,#1
 480 0024 3961     	 str r1,[r7,#16]
 481 0026 1278     	 ldrb r2,[r2]
 482 0028 1A70     	 strb r2,[r3]
 662:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (--cnt);
 483              	 .loc 1 662 0 discriminator 1
 484 002a 7B68     	 ldr r3,[r7,#4]
 485 002c 013B     	 subs r3,r3,#1
 486 002e 7B60     	 str r3,[r7,#4]
 487 0030 7B68     	 ldr r3,[r7,#4]
 488 0032 002B     	 cmp r3,#0
 489 0034 F1D1     	 bne .L9
 490              	.L7:
 663:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 664:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 491              	 .loc 1 664 0
 492 0036 1C37     	 adds r7,r7,#28
 493              	.LCFI27:
 494              	 .cfi_def_cfa_offset 4
 495 0038 BD46     	 mov sp,r7
 496              	.LCFI28:
 497              	 .cfi_def_cfa_register 13
 498              	 
 499 003a 5DF8047B 	 ldr r7,[sp],#4
 500              	.LCFI29:
 501              	 .cfi_restore 7
 502              	 .cfi_def_cfa_offset 0
 503 003e 7047     	 bx lr
 504              	 .cfi_endproc
 505              	.LFE4:
 507              	 .section .text.mem_set,"ax",%progbits
 508              	 .align 2
 509              	 .thumb
 510              	 .thumb_func
 512              	mem_set:
 513              	.LFB5:
 665:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 666:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 667:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill memory block */
 668:../Dave/Generated/FATFS/ff_Src/ff.c **** static void mem_set (void* dst, int val, UINT cnt)
 669:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 514              	 .loc 1 669 0
 515              	 .cfi_startproc
 516              	 
 517              	 
 518              	 
 519 0000 80B4     	 push {r7}
 520              	.LCFI30:
 521              	 .cfi_def_cfa_offset 4
 522              	 .cfi_offset 7,-4
 523 0002 87B0     	 sub sp,sp,#28
 524              	.LCFI31:
 525              	 .cfi_def_cfa_offset 32
 526 0004 00AF     	 add r7,sp,#0
 527              	.LCFI32:
 528              	 .cfi_def_cfa_register 7
 529 0006 F860     	 str r0,[r7,#12]
 530 0008 B960     	 str r1,[r7,#8]
 531 000a 7A60     	 str r2,[r7,#4]
 670:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 532              	 .loc 1 670 0
 533 000c FB68     	 ldr r3,[r7,#12]
 534 000e 7B61     	 str r3,[r7,#20]
 535              	.L11:
 671:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 672:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
 673:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*d++ = (BYTE)val;
 536              	 .loc 1 673 0 discriminator 1
 537 0010 7B69     	 ldr r3,[r7,#20]
 538 0012 5A1C     	 adds r2,r3,#1
 539 0014 7A61     	 str r2,[r7,#20]
 540 0016 BA68     	 ldr r2,[r7,#8]
 541 0018 D2B2     	 uxtb r2,r2
 542 001a 1A70     	 strb r2,[r3]
 674:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--cnt);
 543              	 .loc 1 674 0 discriminator 1
 544 001c 7B68     	 ldr r3,[r7,#4]
 545 001e 013B     	 subs r3,r3,#1
 546 0020 7B60     	 str r3,[r7,#4]
 547 0022 7B68     	 ldr r3,[r7,#4]
 548 0024 002B     	 cmp r3,#0
 549 0026 F3D1     	 bne .L11
 675:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 550              	 .loc 1 675 0
 551 0028 1C37     	 adds r7,r7,#28
 552              	.LCFI33:
 553              	 .cfi_def_cfa_offset 4
 554 002a BD46     	 mov sp,r7
 555              	.LCFI34:
 556              	 .cfi_def_cfa_register 13
 557              	 
 558 002c 5DF8047B 	 ldr r7,[sp],#4
 559              	.LCFI35:
 560              	 .cfi_restore 7
 561              	 .cfi_def_cfa_offset 0
 562 0030 7047     	 bx lr
 563              	 .cfi_endproc
 564              	.LFE5:
 566 0032 00BF     	 .section .text.mem_cmp,"ax",%progbits
 567              	 .align 2
 568              	 .thumb
 569              	 .thumb_func
 571              	mem_cmp:
 572              	.LFB6:
 676:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 677:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 678:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Compare memory block */
 679:../Dave/Generated/FATFS/ff_Src/ff.c **** static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
 680:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 573              	 .loc 1 680 0
 574              	 .cfi_startproc
 575              	 
 576              	 
 577              	 
 578 0000 80B4     	 push {r7}
 579              	.LCFI36:
 580              	 .cfi_def_cfa_offset 4
 581              	 .cfi_offset 7,-4
 582 0002 89B0     	 sub sp,sp,#36
 583              	.LCFI37:
 584              	 .cfi_def_cfa_offset 40
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI38:
 587              	 .cfi_def_cfa_register 7
 588 0006 F860     	 str r0,[r7,#12]
 589 0008 B960     	 str r1,[r7,#8]
 590 000a 7A60     	 str r2,[r7,#4]
 681:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 591              	 .loc 1 681 0
 592 000c FB68     	 ldr r3,[r7,#12]
 593 000e FB61     	 str r3,[r7,#28]
 594 0010 BB68     	 ldr r3,[r7,#8]
 595 0012 BB61     	 str r3,[r7,#24]
 682:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int r = 0;
 596              	 .loc 1 682 0
 597 0014 0023     	 movs r3,#0
 598 0016 7B61     	 str r3,[r7,#20]
 599              	.L14:
 683:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 684:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
 685:../Dave/Generated/FATFS/ff_Src/ff.c **** 		r = *d++ - *s++;
 600              	 .loc 1 685 0 discriminator 2
 601 0018 FB69     	 ldr r3,[r7,#28]
 602 001a 5A1C     	 adds r2,r3,#1
 603 001c FA61     	 str r2,[r7,#28]
 604 001e 1B78     	 ldrb r3,[r3]
 605 0020 1946     	 mov r1,r3
 606 0022 BB69     	 ldr r3,[r7,#24]
 607 0024 5A1C     	 adds r2,r3,#1
 608 0026 BA61     	 str r2,[r7,#24]
 609 0028 1B78     	 ldrb r3,[r3]
 610 002a CB1A     	 subs r3,r1,r3
 611 002c 7B61     	 str r3,[r7,#20]
 686:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--cnt && r == 0);
 612              	 .loc 1 686 0 discriminator 2
 613 002e 7B68     	 ldr r3,[r7,#4]
 614 0030 013B     	 subs r3,r3,#1
 615 0032 7B60     	 str r3,[r7,#4]
 616 0034 7B68     	 ldr r3,[r7,#4]
 617 0036 002B     	 cmp r3,#0
 618 0038 02D0     	 beq .L13
 619              	 .loc 1 686 0 is_stmt 0 discriminator 1
 620 003a 7B69     	 ldr r3,[r7,#20]
 621 003c 002B     	 cmp r3,#0
 622 003e EBD0     	 beq .L14
 623              	.L13:
 687:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 688:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return r;
 624              	 .loc 1 688 0 is_stmt 1
 625 0040 7B69     	 ldr r3,[r7,#20]
 689:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 626              	 .loc 1 689 0
 627 0042 1846     	 mov r0,r3
 628 0044 2437     	 adds r7,r7,#36
 629              	.LCFI39:
 630              	 .cfi_def_cfa_offset 4
 631 0046 BD46     	 mov sp,r7
 632              	.LCFI40:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 0048 5DF8047B 	 ldr r7,[sp],#4
 636              	.LCFI41:
 637              	 .cfi_restore 7
 638              	 .cfi_def_cfa_offset 0
 639 004c 7047     	 bx lr
 640              	 .cfi_endproc
 641              	.LFE6:
 643 004e 00BF     	 .section .text.chk_chr,"ax",%progbits
 644              	 .align 2
 645              	 .thumb
 646              	 .thumb_func
 648              	chk_chr:
 649              	.LFB7:
 690:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 691:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 692:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check if chr is contained in the string */
 693:../Dave/Generated/FATFS/ff_Src/ff.c **** static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
 694:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 650              	 .loc 1 694 0
 651              	 .cfi_startproc
 652              	 
 653              	 
 654              	 
 655 0000 80B4     	 push {r7}
 656              	.LCFI42:
 657              	 .cfi_def_cfa_offset 4
 658              	 .cfi_offset 7,-4
 659 0002 83B0     	 sub sp,sp,#12
 660              	.LCFI43:
 661              	 .cfi_def_cfa_offset 16
 662 0004 00AF     	 add r7,sp,#0
 663              	.LCFI44:
 664              	 .cfi_def_cfa_register 7
 665 0006 7860     	 str r0,[r7,#4]
 666 0008 3960     	 str r1,[r7]
 695:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*str && *str != chr) str++;
 667              	 .loc 1 695 0
 668 000a 02E0     	 b .L17
 669              	.L19:
 670              	 .loc 1 695 0 is_stmt 0 discriminator 3
 671 000c 7B68     	 ldr r3,[r7,#4]
 672 000e 0133     	 adds r3,r3,#1
 673 0010 7B60     	 str r3,[r7,#4]
 674              	.L17:
 675              	 .loc 1 695 0 discriminator 1
 676 0012 7B68     	 ldr r3,[r7,#4]
 677 0014 1B78     	 ldrb r3,[r3]
 678 0016 002B     	 cmp r3,#0
 679 0018 05D0     	 beq .L18
 680              	 .loc 1 695 0 discriminator 2
 681 001a 7B68     	 ldr r3,[r7,#4]
 682 001c 1B78     	 ldrb r3,[r3]
 683 001e 1A46     	 mov r2,r3
 684 0020 3B68     	 ldr r3,[r7]
 685 0022 9A42     	 cmp r2,r3
 686 0024 F2D1     	 bne .L19
 687              	.L18:
 696:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return *str;
 688              	 .loc 1 696 0 is_stmt 1
 689 0026 7B68     	 ldr r3,[r7,#4]
 690 0028 1B78     	 ldrb r3,[r3]
 697:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 691              	 .loc 1 697 0
 692 002a 1846     	 mov r0,r3
 693 002c 0C37     	 adds r7,r7,#12
 694              	.LCFI45:
 695              	 .cfi_def_cfa_offset 4
 696 002e BD46     	 mov sp,r7
 697              	.LCFI46:
 698              	 .cfi_def_cfa_register 13
 699              	 
 700 0030 5DF8047B 	 ldr r7,[sp],#4
 701              	.LCFI47:
 702              	 .cfi_restore 7
 703              	 .cfi_def_cfa_offset 0
 704 0034 7047     	 bx lr
 705              	 .cfi_endproc
 706              	.LFE7:
 708 0036 00BF     	 .section .text.dbc_1st,"ax",%progbits
 709              	 .align 2
 710              	 .thumb
 711              	 .thumb_func
 713              	dbc_1st:
 714              	.LFB8:
 698:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 699:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 700:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Test if the character is DBC 1st byte */
 701:../Dave/Generated/FATFS/ff_Src/ff.c **** static int dbc_1st (BYTE c)
 702:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 715              	 .loc 1 702 0
 716              	 .cfi_startproc
 717              	 
 718              	 
 719              	 
 720 0000 80B4     	 push {r7}
 721              	.LCFI48:
 722              	 .cfi_def_cfa_offset 4
 723              	 .cfi_offset 7,-4
 724 0002 83B0     	 sub sp,sp,#12
 725              	.LCFI49:
 726              	 .cfi_def_cfa_offset 16
 727 0004 00AF     	 add r7,sp,#0
 728              	.LCFI50:
 729              	 .cfi_def_cfa_register 7
 730 0006 0346     	 mov r3,r0
 731 0008 FB71     	 strb r3,[r7,#7]
 703:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 704:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (DbcTbl && c >= DbcTbl[0]) {
 705:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 706:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 707:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 708:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 709:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= DbcTbl[0]) {
 710:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[1]) return 1;
 711:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 712:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 713:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* SBCS fixed code page */
 714:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c != 0) return 0;	/* Always false */
 732              	 .loc 1 714 0
 733 000a FB79     	 ldrb r3,[r7,#7]
 734 000c 002B     	 cmp r3,#0
 735 000e 01D0     	 beq .L22
 736              	 .loc 1 714 0 is_stmt 0 discriminator 1
 737 0010 0023     	 movs r3,#0
 738 0012 00E0     	 b .L23
 739              	.L22:
 715:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
 740              	 .loc 1 716 0 is_stmt 1
 741 0014 0023     	 movs r3,#0
 742              	.L23:
 717:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 743              	 .loc 1 717 0
 744 0016 1846     	 mov r0,r3
 745 0018 0C37     	 adds r7,r7,#12
 746              	.LCFI51:
 747              	 .cfi_def_cfa_offset 4
 748 001a BD46     	 mov sp,r7
 749              	.LCFI52:
 750              	 .cfi_def_cfa_register 13
 751              	 
 752 001c 5DF8047B 	 ldr r7,[sp],#4
 753              	.LCFI53:
 754              	 .cfi_restore 7
 755              	 .cfi_def_cfa_offset 0
 756 0020 7047     	 bx lr
 757              	 .cfi_endproc
 758              	.LFE8:
 760 0022 00BF     	 .section .text.dbc_2nd,"ax",%progbits
 761              	 .align 2
 762              	 .thumb
 763              	 .thumb_func
 765              	dbc_2nd:
 766              	.LFB9:
 718:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 719:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 720:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Test if the character is DBC 2nd byte */
 721:../Dave/Generated/FATFS/ff_Src/ff.c **** static int dbc_2nd (BYTE c)
 722:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 767              	 .loc 1 722 0
 768              	 .cfi_startproc
 769              	 
 770              	 
 771              	 
 772 0000 80B4     	 push {r7}
 773              	.LCFI54:
 774              	 .cfi_def_cfa_offset 4
 775              	 .cfi_offset 7,-4
 776 0002 83B0     	 sub sp,sp,#12
 777              	.LCFI55:
 778              	 .cfi_def_cfa_offset 16
 779 0004 00AF     	 add r7,sp,#0
 780              	.LCFI56:
 781              	 .cfi_def_cfa_register 7
 782 0006 0346     	 mov r3,r0
 783 0008 FB71     	 strb r3,[r7,#7]
 723:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 724:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (DbcTbl && c >= DbcTbl[4]) {
 725:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 726:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 727:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 728:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 729:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 730:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= DbcTbl[4]) {
 731:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[5]) return 1;
 732:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 733:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 734:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 735:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* SBCS fixed code page */
 736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c != 0) return 0;	/* Always false */
 784              	 .loc 1 736 0
 785 000a FB79     	 ldrb r3,[r7,#7]
 786 000c 002B     	 cmp r3,#0
 787 000e 01D0     	 beq .L25
 788              	 .loc 1 736 0 is_stmt 0 discriminator 1
 789 0010 0023     	 movs r3,#0
 790 0012 00E0     	 b .L26
 791              	.L25:
 737:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 738:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
 792              	 .loc 1 738 0 is_stmt 1
 793 0014 0023     	 movs r3,#0
 794              	.L26:
 739:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 795              	 .loc 1 739 0
 796 0016 1846     	 mov r0,r3
 797 0018 0C37     	 adds r7,r7,#12
 798              	.LCFI57:
 799              	 .cfi_def_cfa_offset 4
 800 001a BD46     	 mov sp,r7
 801              	.LCFI58:
 802              	 .cfi_def_cfa_register 13
 803              	 
 804 001c 5DF8047B 	 ldr r7,[sp],#4
 805              	.LCFI59:
 806              	 .cfi_restore 7
 807              	 .cfi_def_cfa_offset 0
 808 0020 7047     	 bx lr
 809              	 .cfi_endproc
 810              	.LFE9:
 812 0022 00BF     	 .section .text.chk_lock,"ax",%progbits
 813              	 .align 2
 814              	 .thumb
 815              	 .thumb_func
 817              	chk_lock:
 818              	.LFB10:
 740:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 741:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 742:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
 743:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 744:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get a character from TCHAR string in defined API encodeing */
 745:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit
 746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
 747:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 748:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 749:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD uc;
 750:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *p = *str;
 751:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 752:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
 753:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 754:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 755:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = *p++;	/* Get a unit */
 756:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogate(uc)) {	/* Surrogate? */
 757:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = *p++;		/* Get low surrogate */
 758:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!IsSurrogateH(uc) || !IsSurrogateL(wc)) return 0xFFFFFFFF;	/* Wrong surrogate? */
 759:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = uc << 16 | wc;
 760:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 761:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 762:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
 763:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
 764:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nf;
 765:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 766:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = (BYTE)*p++;	/* Get a unit */
 767:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc & 0x80) {	/* Multiple byte code? */
 768:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 769:../Dave/Generated/FATFS/ff_Src/ff.c **** 			uc &= 0x1F; nf = 1;
 770:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
 771:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 772:../Dave/Generated/FATFS/ff_Src/ff.c **** 				uc &= 0x0F; nf = 2;
 773:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
 774:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 775:../Dave/Generated/FATFS/ff_Src/ff.c **** 					uc &= 0x07; nf = 3;
 776:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* Wrong sequence */
 777:../Dave/Generated/FATFS/ff_Src/ff.c **** 					return 0xFFFFFFFF;
 778:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
 779:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
 780:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 781:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Get trailing bytes */
 782:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b = (BYTE)*p++;
 783:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 784:../Dave/Generated/FATFS/ff_Src/ff.c **** 			uc = uc << 6 | (b & 0x3F);
 785:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (--nf != 0);
 786:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 787:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a
 788:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 789:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 790:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
 791:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = (TCHAR)*p++;	/* Get a unit */
 792:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 793:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a 
 794:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 795:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* ANSI/OEM input */
 796:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
 797:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 798:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 799:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (BYTE)*p++;			/* Get a byte */
 800:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 801:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 802:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 803:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (wc << 8) + b;		/* Make a DBC */
 804:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 805:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc != 0) {
 806:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 807:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 808:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 809:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = wc;
 810:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 811:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 812:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*str = p;	/* Next read pointer */
 813:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return uc;
 814:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 815:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 816:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 817:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Output a TCHAR string in defined API encoding */
 818:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encod
 819:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD chr,	/* UTF-16 encoded character (Double encoding unit char if >=0x10000) */
 820:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buf,	/* Output buffer */
 821:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT szb	/* Size of the buffer */
 822:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 823:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 824:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 825:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs, wc;
 826:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 827:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = (WCHAR)(chr >> 16);
 828:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (WCHAR)chr;
 829:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs == 0) {	/* Single encoding unit? */
 830:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 1 || IsSurrogate(wc)) return 0;	/* Buffer overflow or wrong code? */
 831:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf = wc;
 832:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 1;
 833:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 834:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogateL(wc)) return 0;	/* Buffer overflow or wrong surro
 835:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = hs;
 836:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = wc;
 837:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 2;
 838:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 839:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 output */
 840:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD hc;
 841:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 842:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x80) {	/* Single byte code? */
 843:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 1) return 0;	/* Buffer overflow? */
 844:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf = (TCHAR)chr;
 845:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 1;
 846:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 847:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x800) {	/* 2-byte sequence? */
 848:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 2) return 0;	/* Buffer overflow? */
 849:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 850:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 851:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 2;
 852:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 853:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x10000) {	/* 3-byte sequence? */
 854:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
 855:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
 856:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 857:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 858:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 3;
 859:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 860:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* 4-byte sequence */
 861:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 4) return 0;	/* Buffer overflow? */
 862:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 863:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 864:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 865:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (hc | chr) + 0x10000;
 866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
 867:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
 868:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 869:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 870:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 4;
 871:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 872:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 output */
 873:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD hc;
 874:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 875:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 1) return 0;	/* Buffer overflow? */
 876:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr >= 0x10000) {	/* Out of BMP? */
 877:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 878:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 879:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 880:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (hc | chr) + 0x10000;
 881:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 882:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)chr;
 883:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;
 884:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 885:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* ANSI/OEM output */
 886:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 887:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 888:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = ff_uni2oem(chr, CODEPAGE);
 889:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 890:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 2) return 0;
 891:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 892:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 893:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 2;
 894:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 895:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 896:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 897:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;
 898:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 899:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 900:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
 901:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 902:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 903:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
 904:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 905:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Request/Release grant to access the volume                            */
 906:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 907:../Dave/Generated/FATFS/ff_Src/ff.c **** static int lock_fs (		/* 1:Ok, 0:timeout */
 908:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs		/* Filesystem object */
 909:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 910:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 911:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return ff_req_grant(fs->sobj);
 912:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 913:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 914:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 915:../Dave/Generated/FATFS/ff_Src/ff.c **** static void unlock_fs (
 916:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
 917:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res		/* Result code to be returned */
 918:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 919:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 920:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ff_rel_grant(fs->sobj);
 922:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 923:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 924:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 925:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 926:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 927:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 928:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 929:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 930:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 931:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File lock control functions                                           */
 932:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 933:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 934:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT chk_lock (	/* Check if the file can be accessed */
 935:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 936:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
 937:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 938:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 819              	 .loc 1 938 0
 820              	 .cfi_startproc
 821              	 
 822              	 
 823              	 
 824 0000 80B4     	 push {r7}
 825              	.LCFI60:
 826              	 .cfi_def_cfa_offset 4
 827              	 .cfi_offset 7,-4
 828 0002 85B0     	 sub sp,sp,#20
 829              	.LCFI61:
 830              	 .cfi_def_cfa_offset 24
 831 0004 00AF     	 add r7,sp,#0
 832              	.LCFI62:
 833              	 .cfi_def_cfa_register 7
 834 0006 7860     	 str r0,[r7,#4]
 835 0008 3960     	 str r1,[r7]
 939:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, be;
 940:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Search open object table for the object */
 942:../Dave/Generated/FATFS/ff_Src/ff.c **** 	be = 0;
 836              	 .loc 1 942 0
 837 000a 0023     	 movs r3,#0
 838 000c BB60     	 str r3,[r7,#8]
 943:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 839              	 .loc 1 943 0
 840 000e 0023     	 movs r3,#0
 841 0010 FB60     	 str r3,[r7,#12]
 842 0012 28E0     	 b .L28
 843              	.L32:
 944:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 844              	 .loc 1 944 0
 845 0014 264A     	 ldr r2,.L40
 846 0016 FB68     	 ldr r3,[r7,#12]
 847 0018 1B01     	 lsls r3,r3,#4
 848 001a 1344     	 add r3,r3,r2
 849 001c 1B68     	 ldr r3,[r3]
 850 001e 002B     	 cmp r3,#0
 851 0020 1CD0     	 beq .L29
 945:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 852              	 .loc 1 945 0
 853 0022 234A     	 ldr r2,.L40
 854 0024 FB68     	 ldr r3,[r7,#12]
 855 0026 1B01     	 lsls r3,r3,#4
 856 0028 1344     	 add r3,r3,r2
 857 002a 1A68     	 ldr r2,[r3]
 858 002c 7B68     	 ldr r3,[r7,#4]
 859 002e 1B68     	 ldr r3,[r3]
 860 0030 9A42     	 cmp r2,r3
 861 0032 15D1     	 bne .L30
 946:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 862              	 .loc 1 946 0 discriminator 1
 863 0034 1E4A     	 ldr r2,.L40
 864 0036 FB68     	 ldr r3,[r7,#12]
 865 0038 1B01     	 lsls r3,r3,#4
 866 003a 1344     	 add r3,r3,r2
 867 003c 5A68     	 ldr r2,[r3,#4]
 868 003e 7B68     	 ldr r3,[r7,#4]
 869 0040 9B68     	 ldr r3,[r3,#8]
 945:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 870              	 .loc 1 945 0 discriminator 1
 871 0042 9A42     	 cmp r2,r3
 872 0044 0CD1     	 bne .L30
 947:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 873              	 .loc 1 947 0
 874 0046 1A4A     	 ldr r2,.L40
 875 0048 FB68     	 ldr r3,[r7,#12]
 876 004a 1B01     	 lsls r3,r3,#4
 877 004c 1344     	 add r3,r3,r2
 878 004e 0833     	 adds r3,r3,#8
 879 0050 1A68     	 ldr r2,[r3]
 880 0052 7B68     	 ldr r3,[r7,#4]
 881 0054 5B69     	 ldr r3,[r3,#20]
 946:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 882              	 .loc 1 946 0
 883 0056 9A42     	 cmp r2,r3
 884 0058 02D1     	 bne .L30
 885              	 .loc 1 947 0
 886 005a 07E0     	 b .L31
 887              	.L29:
 948:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {			/* Blank entry */
 949:../Dave/Generated/FATFS/ff_Src/ff.c **** 			be = 1;
 888              	 .loc 1 949 0
 889 005c 0123     	 movs r3,#1
 890 005e BB60     	 str r3,[r7,#8]
 891              	.L30:
 943:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 892              	 .loc 1 943 0 discriminator 2
 893 0060 FB68     	 ldr r3,[r7,#12]
 894 0062 0133     	 adds r3,r3,#1
 895 0064 FB60     	 str r3,[r7,#12]
 896              	.L28:
 943:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 897              	 .loc 1 943 0 is_stmt 0 discriminator 1
 898 0066 FB68     	 ldr r3,[r7,#12]
 899 0068 002B     	 cmp r3,#0
 900 006a D3D0     	 beq .L32
 901              	.L31:
 950:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 951:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 952:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 902              	 .loc 1 952 0 is_stmt 1
 903 006c FB68     	 ldr r3,[r7,#12]
 904 006e 012B     	 cmp r3,#1
 905 0070 09D1     	 bne .L33
 953:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new obje
 906              	 .loc 1 953 0
 907 0072 BB68     	 ldr r3,[r7,#8]
 908 0074 002B     	 cmp r3,#0
 909 0076 04D1     	 bne .L34
 910              	 .loc 1 953 0 is_stmt 0 discriminator 1
 911 0078 3B68     	 ldr r3,[r7]
 912 007a 022B     	 cmp r3,#2
 913 007c 01D0     	 beq .L34
 914              	 .loc 1 953 0 discriminator 3
 915 007e 1223     	 movs r3,#18
 916 0080 10E0     	 b .L36
 917              	.L34:
 918              	 .loc 1 953 0 discriminator 4
 919 0082 0023     	 movs r3,#0
 920 0084 0EE0     	 b .L36
 921              	.L33:
 954:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 955:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 956:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* The object was opened. Reject any open against writing file and all write mode open */
 957:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 922              	 .loc 1 957 0 is_stmt 1
 923 0086 3B68     	 ldr r3,[r7]
 924 0088 002B     	 cmp r3,#0
 925 008a 08D1     	 bne .L37
 926              	 .loc 1 957 0 is_stmt 0 discriminator 2
 927 008c 084A     	 ldr r2,.L40
 928 008e FB68     	 ldr r3,[r7,#12]
 929 0090 1B01     	 lsls r3,r3,#4
 930 0092 1344     	 add r3,r3,r2
 931 0094 0833     	 adds r3,r3,#8
 932 0096 9B88     	 ldrh r3,[r3,#4]
 933 0098 B3F5807F 	 cmp r3,#256
 934 009c 01D1     	 bne .L38
 935              	.L37:
 936              	 .loc 1 957 0 discriminator 3
 937 009e 1023     	 movs r3,#16
 938 00a0 00E0     	 b .L36
 939              	.L38:
 940              	 .loc 1 957 0 discriminator 4
 941 00a2 0023     	 movs r3,#0
 942              	.L36:
 958:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 943              	 .loc 1 958 0 is_stmt 1
 944 00a4 1846     	 mov r0,r3
 945 00a6 1437     	 adds r7,r7,#20
 946              	.LCFI63:
 947              	 .cfi_def_cfa_offset 4
 948 00a8 BD46     	 mov sp,r7
 949              	.LCFI64:
 950              	 .cfi_def_cfa_register 13
 951              	 
 952 00aa 5DF8047B 	 ldr r7,[sp],#4
 953              	.LCFI65:
 954              	 .cfi_restore 7
 955              	 .cfi_def_cfa_offset 0
 956 00ae 7047     	 bx lr
 957              	.L41:
 958              	 .align 2
 959              	.L40:
 960 00b0 00000000 	 .word Files
 961              	 .cfi_endproc
 962              	.LFE10:
 964              	 .section .text.enq_lock,"ax",%progbits
 965              	 .align 2
 966              	 .thumb
 967              	 .thumb_func
 969              	enq_lock:
 970              	.LFB11:
 959:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 960:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 961:../Dave/Generated/FATFS/ff_Src/ff.c **** static int enq_lock (void)	/* Check if an entry is available for a new object */
 962:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 971              	 .loc 1 962 0
 972              	 .cfi_startproc
 973              	 
 974              	 
 975              	 
 976 0000 80B4     	 push {r7}
 977              	.LCFI66:
 978              	 .cfi_def_cfa_offset 4
 979              	 .cfi_offset 7,-4
 980 0002 83B0     	 sub sp,sp,#12
 981              	.LCFI67:
 982              	 .cfi_def_cfa_offset 16
 983 0004 00AF     	 add r7,sp,#0
 984              	.LCFI68:
 985              	 .cfi_def_cfa_register 7
 963:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
 964:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 986              	 .loc 1 965 0
 987 0006 0023     	 movs r3,#0
 988 0008 7B60     	 str r3,[r7,#4]
 989 000a 02E0     	 b .L43
 990              	.L45:
 991              	 .loc 1 965 0 is_stmt 0 discriminator 4
 992 000c 7B68     	 ldr r3,[r7,#4]
 993 000e 0133     	 adds r3,r3,#1
 994 0010 7B60     	 str r3,[r7,#4]
 995              	.L43:
 996              	 .loc 1 965 0 discriminator 1
 997 0012 7B68     	 ldr r3,[r7,#4]
 998 0014 002B     	 cmp r3,#0
 999 0016 06D1     	 bne .L44
 1000              	 .loc 1 965 0 discriminator 3
 1001 0018 094A     	 ldr r2,.L47
 1002 001a 7B68     	 ldr r3,[r7,#4]
 1003 001c 1B01     	 lsls r3,r3,#4
 1004 001e 1344     	 add r3,r3,r2
 1005 0020 1B68     	 ldr r3,[r3]
 1006 0022 002B     	 cmp r3,#0
 1007 0024 F2D1     	 bne .L45
 1008              	.L44:
 966:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (i == FF_FS_LOCK) ? 0 : 1;
 1009              	 .loc 1 966 0 is_stmt 1
 1010 0026 7B68     	 ldr r3,[r7,#4]
 1011 0028 012B     	 cmp r3,#1
 1012 002a 14BF     	 ite ne
 1013 002c 0123     	 movne r3,#1
 1014 002e 0023     	 moveq r3,#0
 1015 0030 DBB2     	 uxtb r3,r3
 967:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1016              	 .loc 1 967 0
 1017 0032 1846     	 mov r0,r3
 1018 0034 0C37     	 adds r7,r7,#12
 1019              	.LCFI69:
 1020              	 .cfi_def_cfa_offset 4
 1021 0036 BD46     	 mov sp,r7
 1022              	.LCFI70:
 1023              	 .cfi_def_cfa_register 13
 1024              	 
 1025 0038 5DF8047B 	 ldr r7,[sp],#4
 1026              	.LCFI71:
 1027              	 .cfi_restore 7
 1028              	 .cfi_def_cfa_offset 0
 1029 003c 7047     	 bx lr
 1030              	.L48:
 1031 003e 00BF     	 .align 2
 1032              	.L47:
 1033 0040 00000000 	 .word Files
 1034              	 .cfi_endproc
 1035              	.LFE11:
 1037              	 .section .text.inc_lock,"ax",%progbits
 1038              	 .align 2
 1039              	 .thumb
 1040              	 .thumb_func
 1042              	inc_lock:
 1043              	.LFB12:
 968:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 969:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 970:../Dave/Generated/FATFS/ff_Src/ff.c **** static UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 971:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 972:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 973:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 974:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1044              	 .loc 1 974 0
 1045              	 .cfi_startproc
 1046              	 
 1047              	 
 1048              	 
 1049 0000 80B4     	 push {r7}
 1050              	.LCFI72:
 1051              	 .cfi_def_cfa_offset 4
 1052              	 .cfi_offset 7,-4
 1053 0002 85B0     	 sub sp,sp,#20
 1054              	.LCFI73:
 1055              	 .cfi_def_cfa_offset 24
 1056 0004 00AF     	 add r7,sp,#0
 1057              	.LCFI74:
 1058              	 .cfi_def_cfa_register 7
 1059 0006 7860     	 str r0,[r7,#4]
 1060 0008 3960     	 str r1,[r7]
 975:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
 976:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 977:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 978:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 1061              	 .loc 1 978 0
 1062 000a 0023     	 movs r3,#0
 1063 000c FB60     	 str r3,[r7,#12]
 1064 000e 1FE0     	 b .L50
 1065              	.L53:
 979:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1066              	 .loc 1 979 0
 1067 0010 404A     	 ldr r2,.L63
 1068 0012 FB68     	 ldr r3,[r7,#12]
 1069 0014 1B01     	 lsls r3,r3,#4
 1070 0016 1344     	 add r3,r3,r2
 1071 0018 1A68     	 ldr r2,[r3]
 1072 001a 7B68     	 ldr r3,[r7,#4]
 1073 001c 1B68     	 ldr r3,[r3]
 1074 001e 9A42     	 cmp r2,r3
 1075 0020 13D1     	 bne .L51
 980:../Dave/Generated/FATFS/ff_Src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 1076              	 .loc 1 980 0 discriminator 1
 1077 0022 3C4A     	 ldr r2,.L63
 1078 0024 FB68     	 ldr r3,[r7,#12]
 1079 0026 1B01     	 lsls r3,r3,#4
 1080 0028 1344     	 add r3,r3,r2
 1081 002a 5A68     	 ldr r2,[r3,#4]
 1082 002c 7B68     	 ldr r3,[r7,#4]
 1083 002e 9B68     	 ldr r3,[r3,#8]
 979:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1084              	 .loc 1 979 0 discriminator 1
 1085 0030 9A42     	 cmp r2,r3
 1086 0032 0AD1     	 bne .L51
 981:../Dave/Generated/FATFS/ff_Src/ff.c **** 			Files[i].ofs == dp->dptr) break;
 1087              	 .loc 1 981 0
 1088 0034 374A     	 ldr r2,.L63
 1089 0036 FB68     	 ldr r3,[r7,#12]
 1090 0038 1B01     	 lsls r3,r3,#4
 1091 003a 1344     	 add r3,r3,r2
 1092 003c 0833     	 adds r3,r3,#8
 1093 003e 1A68     	 ldr r2,[r3]
 1094 0040 7B68     	 ldr r3,[r7,#4]
 1095 0042 5B69     	 ldr r3,[r3,#20]
 980:../Dave/Generated/FATFS/ff_Src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 1096              	 .loc 1 980 0
 1097 0044 9A42     	 cmp r2,r3
 1098 0046 00D1     	 bne .L51
 1099              	 .loc 1 981 0
 1100 0048 05E0     	 b .L52
 1101              	.L51:
 978:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1102              	 .loc 1 978 0 discriminator 2
 1103 004a FB68     	 ldr r3,[r7,#12]
 1104 004c 0133     	 adds r3,r3,#1
 1105 004e FB60     	 str r3,[r7,#12]
 1106              	.L50:
 978:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1107              	 .loc 1 978 0 is_stmt 0 discriminator 1
 1108 0050 FB68     	 ldr r3,[r7,#12]
 1109 0052 002B     	 cmp r3,#0
 1110 0054 DCD0     	 beq .L53
 1111              	.L52:
 982:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 983:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 984:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == FF_FS_LOCK) {				/* Not opened. Register it as new. */
 1112              	 .loc 1 984 0 is_stmt 1
 1113 0056 FB68     	 ldr r3,[r7,#12]
 1114 0058 012B     	 cmp r3,#1
 1115 005a 31D1     	 bne .L54
 985:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 1116              	 .loc 1 985 0
 1117 005c 0023     	 movs r3,#0
 1118 005e FB60     	 str r3,[r7,#12]
 1119 0060 02E0     	 b .L55
 1120              	.L57:
 1121              	 .loc 1 985 0 is_stmt 0 discriminator 4
 1122 0062 FB68     	 ldr r3,[r7,#12]
 1123 0064 0133     	 adds r3,r3,#1
 1124 0066 FB60     	 str r3,[r7,#12]
 1125              	.L55:
 1126              	 .loc 1 985 0 discriminator 1
 1127 0068 FB68     	 ldr r3,[r7,#12]
 1128 006a 002B     	 cmp r3,#0
 1129 006c 06D1     	 bne .L56
 1130              	 .loc 1 985 0 discriminator 3
 1131 006e 294A     	 ldr r2,.L63
 1132 0070 FB68     	 ldr r3,[r7,#12]
 1133 0072 1B01     	 lsls r3,r3,#4
 1134 0074 1344     	 add r3,r3,r2
 1135 0076 1B68     	 ldr r3,[r3]
 1136 0078 002B     	 cmp r3,#0
 1137 007a F2D1     	 bne .L57
 1138              	.L56:
 986:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 1139              	 .loc 1 986 0 is_stmt 1
 1140 007c FB68     	 ldr r3,[r7,#12]
 1141 007e 012B     	 cmp r3,#1
 1142 0080 01D1     	 bne .L58
 1143              	 .loc 1 986 0 is_stmt 0 discriminator 1
 1144 0082 0023     	 movs r3,#0
 1145 0084 3FE0     	 b .L59
 1146              	.L58:
 987:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].fs = dp->obj.fs;
 1147              	 .loc 1 987 0 is_stmt 1
 1148 0086 7B68     	 ldr r3,[r7,#4]
 1149 0088 1A68     	 ldr r2,[r3]
 1150 008a 2249     	 ldr r1,.L63
 1151 008c FB68     	 ldr r3,[r7,#12]
 1152 008e 1B01     	 lsls r3,r3,#4
 1153 0090 0B44     	 add r3,r3,r1
 1154 0092 1A60     	 str r2,[r3]
 988:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 1155              	 .loc 1 988 0
 1156 0094 7B68     	 ldr r3,[r7,#4]
 1157 0096 9A68     	 ldr r2,[r3,#8]
 1158 0098 1E49     	 ldr r1,.L63
 1159 009a FB68     	 ldr r3,[r7,#12]
 1160 009c 1B01     	 lsls r3,r3,#4
 1161 009e 0B44     	 add r3,r3,r1
 1162 00a0 5A60     	 str r2,[r3,#4]
 989:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ofs = dp->dptr;
 1163              	 .loc 1 989 0
 1164 00a2 7B68     	 ldr r3,[r7,#4]
 1165 00a4 5A69     	 ldr r2,[r3,#20]
 1166 00a6 1B49     	 ldr r1,.L63
 1167 00a8 FB68     	 ldr r3,[r7,#12]
 1168 00aa 1B01     	 lsls r3,r3,#4
 1169 00ac 0B44     	 add r3,r3,r1
 1170 00ae 0833     	 adds r3,r3,#8
 1171 00b0 1A60     	 str r2,[r3]
 990:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ctr = 0;
 1172              	 .loc 1 990 0
 1173 00b2 184A     	 ldr r2,.L63
 1174 00b4 FB68     	 ldr r3,[r7,#12]
 1175 00b6 1B01     	 lsls r3,r3,#4
 1176 00b8 1344     	 add r3,r3,r2
 1177 00ba 0833     	 adds r3,r3,#8
 1178 00bc 0022     	 movs r2,#0
 1179 00be 9A80     	 strh r2,[r3,#4]
 1180              	.L54:
 991:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 992:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 993:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 1181              	 .loc 1 993 0
 1182 00c0 3B68     	 ldr r3,[r7]
 1183 00c2 002B     	 cmp r3,#0
 1184 00c4 09DD     	 ble .L60
 1185              	 .loc 1 993 0 is_stmt 0 discriminator 1
 1186 00c6 134A     	 ldr r2,.L63
 1187 00c8 FB68     	 ldr r3,[r7,#12]
 1188 00ca 1B01     	 lsls r3,r3,#4
 1189 00cc 1344     	 add r3,r3,r2
 1190 00ce 0833     	 adds r3,r3,#8
 1191 00d0 9B88     	 ldrh r3,[r3,#4]
 1192 00d2 002B     	 cmp r3,#0
 1193 00d4 01D0     	 beq .L60
 1194              	 .loc 1 993 0 discriminator 2
 1195 00d6 0023     	 movs r3,#0
 1196 00d8 15E0     	 b .L59
 1197              	.L60:
 994:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 995:../Dave/Generated/FATFS/ff_Src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 1198              	 .loc 1 995 0 is_stmt 1
 1199 00da 3B68     	 ldr r3,[r7]
 1200 00dc 002B     	 cmp r3,#0
 1201 00de 08D1     	 bne .L61
 1202              	 .loc 1 995 0 is_stmt 0 discriminator 1
 1203 00e0 0C4A     	 ldr r2,.L63
 1204 00e2 FB68     	 ldr r3,[r7,#12]
 1205 00e4 1B01     	 lsls r3,r3,#4
 1206 00e6 1344     	 add r3,r3,r2
 1207 00e8 0833     	 adds r3,r3,#8
 1208 00ea 9B88     	 ldrh r3,[r3,#4]
 1209 00ec 0133     	 adds r3,r3,#1
 1210 00ee 9AB2     	 uxth r2,r3
 1211 00f0 01E0     	 b .L62
 1212              	.L61:
 1213              	 .loc 1 995 0 discriminator 2
 1214 00f2 4FF48072 	 mov r2,#256
 1215              	.L62:
 1216              	 .loc 1 995 0 discriminator 4
 1217 00f6 0749     	 ldr r1,.L63
 1218 00f8 FB68     	 ldr r3,[r7,#12]
 1219 00fa 1B01     	 lsls r3,r3,#4
 1220 00fc 0B44     	 add r3,r3,r1
 1221 00fe 0833     	 adds r3,r3,#8
 1222 0100 9A80     	 strh r2,[r3,#4]
 996:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return i + 1;	/* Index number origin from 1 */
 1223              	 .loc 1 997 0 is_stmt 1 discriminator 4
 1224 0102 FB68     	 ldr r3,[r7,#12]
 1225 0104 0133     	 adds r3,r3,#1
 1226              	.L59:
 998:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1227              	 .loc 1 998 0
 1228 0106 1846     	 mov r0,r3
 1229 0108 1437     	 adds r7,r7,#20
 1230              	.LCFI75:
 1231              	 .cfi_def_cfa_offset 4
 1232 010a BD46     	 mov sp,r7
 1233              	.LCFI76:
 1234              	 .cfi_def_cfa_register 13
 1235              	 
 1236 010c 5DF8047B 	 ldr r7,[sp],#4
 1237              	.LCFI77:
 1238              	 .cfi_restore 7
 1239              	 .cfi_def_cfa_offset 0
 1240 0110 7047     	 bx lr
 1241              	.L64:
 1242 0112 00BF     	 .align 2
 1243              	.L63:
 1244 0114 00000000 	 .word Files
 1245              	 .cfi_endproc
 1246              	.LFE12:
 1248              	 .section .text.dec_lock,"ax",%progbits
 1249              	 .align 2
 1250              	 .thumb
 1251              	 .thumb_func
 1253              	dec_lock:
 1254              	.LFB13:
 999:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1000:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1001:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dec_lock (	/* Decrement object open counter */
1002:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i			/* Semaphore index (1..) */
1003:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1004:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1255              	 .loc 1 1004 0
 1256              	 .cfi_startproc
 1257              	 
 1258              	 
 1259              	 
 1260 0000 80B4     	 push {r7}
 1261              	.LCFI78:
 1262              	 .cfi_def_cfa_offset 4
 1263              	 .cfi_offset 7,-4
 1264 0002 85B0     	 sub sp,sp,#20
 1265              	.LCFI79:
 1266              	 .cfi_def_cfa_offset 24
 1267 0004 00AF     	 add r7,sp,#0
 1268              	.LCFI80:
 1269              	 .cfi_def_cfa_register 7
 1270 0006 7860     	 str r0,[r7,#4]
1005:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD n;
1006:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1007:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1008:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1009:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 1271              	 .loc 1 1009 0
 1272 0008 7B68     	 ldr r3,[r7,#4]
 1273 000a 013B     	 subs r3,r3,#1
 1274 000c 7B60     	 str r3,[r7,#4]
 1275 000e 7B68     	 ldr r3,[r7,#4]
 1276 0010 002B     	 cmp r3,#0
 1277 0012 25D1     	 bne .L66
1010:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n = Files[i].ctr;
 1278              	 .loc 1 1010 0
 1279 0014 174A     	 ldr r2,.L72
 1280 0016 7B68     	 ldr r3,[r7,#4]
 1281 0018 1B01     	 lsls r3,r3,#4
 1282 001a 1344     	 add r3,r3,r2
 1283 001c 0833     	 adds r3,r3,#8
 1284 001e 9B88     	 ldrh r3,[r3,#4]
 1285 0020 FB81     	 strh r3,[r7,#14]
1011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 1286              	 .loc 1 1011 0
 1287 0022 FB89     	 ldrh r3,[r7,#14]
 1288 0024 B3F5807F 	 cmp r3,#256
 1289 0028 01D1     	 bne .L67
 1290              	 .loc 1 1011 0 is_stmt 0 discriminator 1
 1291 002a 0023     	 movs r3,#0
 1292 002c FB81     	 strh r3,[r7,#14]
 1293              	.L67:
1012:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 1294              	 .loc 1 1012 0 is_stmt 1
 1295 002e FB89     	 ldrh r3,[r7,#14]
 1296 0030 002B     	 cmp r3,#0
 1297 0032 02D0     	 beq .L68
 1298              	 .loc 1 1012 0 is_stmt 0 discriminator 1
 1299 0034 FB89     	 ldrh r3,[r7,#14]
 1300 0036 013B     	 subs r3,r3,#1
 1301 0038 FB81     	 strh r3,[r7,#14]
 1302              	.L68:
1013:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ctr = n;
 1303              	 .loc 1 1013 0 is_stmt 1
 1304 003a 0E4A     	 ldr r2,.L72
 1305 003c 7B68     	 ldr r3,[r7,#4]
 1306 003e 1B01     	 lsls r3,r3,#4
 1307 0040 1344     	 add r3,r3,r2
 1308 0042 0833     	 adds r3,r3,#8
 1309 0044 FA89     	 ldrh r2,[r7,#14]
 1310 0046 9A80     	 strh r2,[r3,#4]
1014:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 1311              	 .loc 1 1014 0
 1312 0048 FB89     	 ldrh r3,[r7,#14]
 1313 004a 002B     	 cmp r3,#0
 1314 004c 05D1     	 bne .L69
 1315              	 .loc 1 1014 0 is_stmt 0 discriminator 1
 1316 004e 094A     	 ldr r2,.L72
 1317 0050 7B68     	 ldr r3,[r7,#4]
 1318 0052 1B01     	 lsls r3,r3,#4
 1319 0054 1344     	 add r3,r3,r2
 1320 0056 0022     	 movs r2,#0
 1321 0058 1A60     	 str r2,[r3]
 1322              	.L69:
1015:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = FR_OK;
 1323              	 .loc 1 1015 0 is_stmt 1
 1324 005a 0023     	 movs r3,#0
 1325 005c 7B73     	 strb r3,[r7,#13]
 1326 005e 01E0     	 b .L70
 1327              	.L66:
1016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1017:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 1328              	 .loc 1 1017 0
 1329 0060 0223     	 movs r3,#2
 1330 0062 7B73     	 strb r3,[r7,#13]
 1331              	.L70:
1018:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1019:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1332              	 .loc 1 1019 0
 1333 0064 7B7B     	 ldrb r3,[r7,#13]
1020:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1334              	 .loc 1 1020 0
 1335 0066 1846     	 mov r0,r3
 1336 0068 1437     	 adds r7,r7,#20
 1337              	.LCFI81:
 1338              	 .cfi_def_cfa_offset 4
 1339 006a BD46     	 mov sp,r7
 1340              	.LCFI82:
 1341              	 .cfi_def_cfa_register 13
 1342              	 
 1343 006c 5DF8047B 	 ldr r7,[sp],#4
 1344              	.LCFI83:
 1345              	 .cfi_restore 7
 1346              	 .cfi_def_cfa_offset 0
 1347 0070 7047     	 bx lr
 1348              	.L73:
 1349 0072 00BF     	 .align 2
 1350              	.L72:
 1351 0074 00000000 	 .word Files
 1352              	 .cfi_endproc
 1353              	.LFE13:
 1355              	 .section .text.clear_lock,"ax",%progbits
 1356              	 .align 2
 1357              	 .thumb
 1358              	 .thumb_func
 1360              	clear_lock:
 1361              	.LFB14:
1021:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1022:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1023:../Dave/Generated/FATFS/ff_Src/ff.c **** static void clear_lock (	/* Clear lock entries of the volume */
1024:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs
1025:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1026:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1362              	 .loc 1 1026 0
 1363              	 .cfi_startproc
 1364              	 
 1365              	 
 1366              	 
 1367 0000 80B4     	 push {r7}
 1368              	.LCFI84:
 1369              	 .cfi_def_cfa_offset 4
 1370              	 .cfi_offset 7,-4
 1371 0002 85B0     	 sub sp,sp,#20
 1372              	.LCFI85:
 1373              	 .cfi_def_cfa_offset 24
 1374 0004 00AF     	 add r7,sp,#0
 1375              	.LCFI86:
 1376              	 .cfi_def_cfa_register 7
 1377 0006 7860     	 str r0,[r7,#4]
1027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1028:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1029:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 1378              	 .loc 1 1029 0
 1379 0008 0023     	 movs r3,#0
 1380 000a FB60     	 str r3,[r7,#12]
 1381 000c 10E0     	 b .L75
 1382              	.L77:
1030:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1383              	 .loc 1 1030 0
 1384 000e 0C4A     	 ldr r2,.L78
 1385 0010 FB68     	 ldr r3,[r7,#12]
 1386 0012 1B01     	 lsls r3,r3,#4
 1387 0014 1344     	 add r3,r3,r2
 1388 0016 1A68     	 ldr r2,[r3]
 1389 0018 7B68     	 ldr r3,[r7,#4]
 1390 001a 9A42     	 cmp r2,r3
 1391 001c 05D1     	 bne .L76
 1392              	 .loc 1 1030 0 is_stmt 0 discriminator 1
 1393 001e 084A     	 ldr r2,.L78
 1394 0020 FB68     	 ldr r3,[r7,#12]
 1395 0022 1B01     	 lsls r3,r3,#4
 1396 0024 1344     	 add r3,r3,r2
 1397 0026 0022     	 movs r2,#0
 1398 0028 1A60     	 str r2,[r3]
 1399              	.L76:
1029:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1400              	 .loc 1 1029 0 is_stmt 1 discriminator 2
 1401 002a FB68     	 ldr r3,[r7,#12]
 1402 002c 0133     	 adds r3,r3,#1
 1403 002e FB60     	 str r3,[r7,#12]
 1404              	.L75:
1029:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1405              	 .loc 1 1029 0 is_stmt 0 discriminator 1
 1406 0030 FB68     	 ldr r3,[r7,#12]
 1407 0032 002B     	 cmp r3,#0
 1408 0034 EBD0     	 beq .L77
1031:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1032:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1409              	 .loc 1 1032 0 is_stmt 1
 1410 0036 1437     	 adds r7,r7,#20
 1411              	.LCFI87:
 1412              	 .cfi_def_cfa_offset 4
 1413 0038 BD46     	 mov sp,r7
 1414              	.LCFI88:
 1415              	 .cfi_def_cfa_register 13
 1416              	 
 1417 003a 5DF8047B 	 ldr r7,[sp],#4
 1418              	.LCFI89:
 1419              	 .cfi_restore 7
 1420              	 .cfi_def_cfa_offset 0
 1421 003e 7047     	 bx lr
 1422              	.L79:
 1423              	 .align 2
 1424              	.L78:
 1425 0040 00000000 	 .word Files
 1426              	 .cfi_endproc
 1427              	.LFE14:
 1429              	 .section .text.sync_window,"ax",%progbits
 1430              	 .align 2
 1431              	 .thumb
 1432              	 .thumb_func
 1434              	sync_window:
 1435              	.LFB15:
1033:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1034:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_LOCK != 0 */
1035:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1036:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1037:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1038:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1039:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Move/Flush disk access window in the filesystem object                */
1040:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1041:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1042:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
1043:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs			/* Filesystem object */
1044:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1045:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1436              	 .loc 1 1045 0
 1437              	 .cfi_startproc
 1438              	 
 1439              	 
 1440 0000 80B5     	 push {r7,lr}
 1441              	.LCFI90:
 1442              	 .cfi_def_cfa_offset 8
 1443              	 .cfi_offset 7,-8
 1444              	 .cfi_offset 14,-4
 1445 0002 84B0     	 sub sp,sp,#16
 1446              	.LCFI91:
 1447              	 .cfi_def_cfa_offset 24
 1448 0004 00AF     	 add r7,sp,#0
 1449              	.LCFI92:
 1450              	 .cfi_def_cfa_register 7
 1451 0006 7860     	 str r0,[r7,#4]
1046:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 1452              	 .loc 1 1046 0
 1453 0008 0023     	 movs r3,#0
 1454 000a FB73     	 strb r3,[r7,#15]
1047:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1048:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1049:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->wflag) {	/* Is the disk access window dirty */
 1455              	 .loc 1 1049 0
 1456 000c 7B68     	 ldr r3,[r7,#4]
 1457 000e DB78     	 ldrb r3,[r3,#3]
 1458 0010 002B     	 cmp r3,#0
 1459 0012 30D0     	 beq .L81
1050:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 1460              	 .loc 1 1050 0
 1461 0014 7B68     	 ldr r3,[r7,#4]
 1462 0016 5978     	 ldrb r1,[r3,#1]
 1463 0018 7B68     	 ldr r3,[r7,#4]
 1464 001a 03F13402 	 add r2,r3,#52
 1465 001e 7B68     	 ldr r3,[r7,#4]
 1466 0020 1B6B     	 ldr r3,[r3,#48]
 1467 0022 0846     	 mov r0,r1
 1468 0024 1146     	 mov r1,r2
 1469 0026 1A46     	 mov r2,r3
 1470 0028 0123     	 movs r3,#1
 1471 002a FFF7FEFF 	 bl disk_write
 1472 002e 0346     	 mov r3,r0
 1473 0030 002B     	 cmp r3,#0
 1474 0032 1ED1     	 bne .L82
1051:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1475              	 .loc 1 1051 0
 1476 0034 7B68     	 ldr r3,[r7,#4]
 1477 0036 0022     	 movs r2,#0
 1478 0038 DA70     	 strb r2,[r3,#3]
1052:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 1479              	 .loc 1 1052 0
 1480 003a 7B68     	 ldr r3,[r7,#4]
 1481 003c 1A6B     	 ldr r2,[r3,#48]
 1482 003e 7B68     	 ldr r3,[r7,#4]
 1483 0040 5B6A     	 ldr r3,[r3,#36]
 1484 0042 D21A     	 subs r2,r2,r3
 1485 0044 7B68     	 ldr r3,[r7,#4]
 1486 0046 DB69     	 ldr r3,[r3,#28]
 1487 0048 9A42     	 cmp r2,r3
 1488 004a 14D2     	 bcs .L81
1053:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1489              	 .loc 1 1053 0
 1490 004c 7B68     	 ldr r3,[r7,#4]
 1491 004e 9B78     	 ldrb r3,[r3,#2]
 1492 0050 022B     	 cmp r3,#2
 1493 0052 10D1     	 bne .L81
 1494              	 .loc 1 1053 0 is_stmt 0 discriminator 1
 1495 0054 7B68     	 ldr r3,[r7,#4]
 1496 0056 5878     	 ldrb r0,[r3,#1]
 1497 0058 7B68     	 ldr r3,[r7,#4]
 1498 005a 03F13401 	 add r1,r3,#52
 1499 005e 7B68     	 ldr r3,[r7,#4]
 1500 0060 1A6B     	 ldr r2,[r3,#48]
 1501 0062 7B68     	 ldr r3,[r7,#4]
 1502 0064 DB69     	 ldr r3,[r3,#28]
 1503 0066 1344     	 add r3,r3,r2
 1504 0068 1A46     	 mov r2,r3
 1505 006a 0123     	 movs r3,#1
 1506 006c FFF7FEFF 	 bl disk_write
 1507 0070 01E0     	 b .L81
 1508              	.L82:
1054:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1055:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1056:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_DISK_ERR;
 1509              	 .loc 1 1056 0 is_stmt 1
 1510 0072 0123     	 movs r3,#1
 1511 0074 FB73     	 strb r3,[r7,#15]
 1512              	.L81:
1057:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1058:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1059:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1513              	 .loc 1 1059 0
 1514 0076 FB7B     	 ldrb r3,[r7,#15]
1060:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1515              	 .loc 1 1060 0
 1516 0078 1846     	 mov r0,r3
 1517 007a 1037     	 adds r7,r7,#16
 1518              	.LCFI93:
 1519              	 .cfi_def_cfa_offset 8
 1520 007c BD46     	 mov sp,r7
 1521              	.LCFI94:
 1522              	 .cfi_def_cfa_register 13
 1523              	 
 1524 007e 80BD     	 pop {r7,pc}
 1525              	 .cfi_endproc
 1526              	.LFE15:
 1528              	 .section .text.move_window,"ax",%progbits
 1529              	 .align 2
 1530              	 .thumb
 1531              	 .thumb_func
 1533              	move_window:
 1534              	.LFB16:
1061:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1062:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1063:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1064:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
1065:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Filesystem object */
1066:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
1067:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1068:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1535              	 .loc 1 1068 0
 1536              	 .cfi_startproc
 1537              	 
 1538              	 
 1539 0000 80B5     	 push {r7,lr}
 1540              	.LCFI95:
 1541              	 .cfi_def_cfa_offset 8
 1542              	 .cfi_offset 7,-8
 1543              	 .cfi_offset 14,-4
 1544 0002 84B0     	 sub sp,sp,#16
 1545              	.LCFI96:
 1546              	 .cfi_def_cfa_offset 24
 1547 0004 00AF     	 add r7,sp,#0
 1548              	.LCFI97:
 1549              	 .cfi_def_cfa_register 7
 1550 0006 7860     	 str r0,[r7,#4]
 1551 0008 3960     	 str r1,[r7]
1069:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 1552              	 .loc 1 1069 0
 1553 000a 0023     	 movs r3,#0
 1554 000c FB73     	 strb r3,[r7,#15]
1070:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1071:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1072:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 1555              	 .loc 1 1072 0
 1556 000e 7B68     	 ldr r3,[r7,#4]
 1557 0010 1A6B     	 ldr r2,[r3,#48]
 1558 0012 3B68     	 ldr r3,[r7]
 1559 0014 9A42     	 cmp r2,r3
 1560 0016 1CD0     	 beq .L86
1073:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1074:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 1561              	 .loc 1 1074 0
 1562 0018 7868     	 ldr r0,[r7,#4]
 1563 001a FFF7FEFF 	 bl sync_window
 1564 001e 0346     	 mov r3,r0
 1565 0020 FB73     	 strb r3,[r7,#15]
1075:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1076:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 1566              	 .loc 1 1076 0
 1567 0022 FB7B     	 ldrb r3,[r7,#15]
 1568 0024 002B     	 cmp r3,#0
 1569 0026 14D1     	 bne .L86
1077:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 1570              	 .loc 1 1077 0
 1571 0028 7B68     	 ldr r3,[r7,#4]
 1572 002a 5A78     	 ldrb r2,[r3,#1]
 1573 002c 7B68     	 ldr r3,[r7,#4]
 1574 002e 3433     	 adds r3,r3,#52
 1575 0030 1046     	 mov r0,r2
 1576 0032 1946     	 mov r1,r3
 1577 0034 3A68     	 ldr r2,[r7]
 1578 0036 0123     	 movs r3,#1
 1579 0038 FFF7FEFF 	 bl disk_read
 1580 003c 0346     	 mov r3,r0
 1581 003e 002B     	 cmp r3,#0
 1582 0040 04D0     	 beq .L87
1078:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 1583              	 .loc 1 1078 0
 1584 0042 4FF0FF33 	 mov r3,#-1
 1585 0046 3B60     	 str r3,[r7]
1079:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_DISK_ERR;
 1586              	 .loc 1 1079 0
 1587 0048 0123     	 movs r3,#1
 1588 004a FB73     	 strb r3,[r7,#15]
 1589              	.L87:
1080:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1081:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->winsect = sector;
 1590              	 .loc 1 1081 0
 1591 004c 7B68     	 ldr r3,[r7,#4]
 1592 004e 3A68     	 ldr r2,[r7]
 1593 0050 1A63     	 str r2,[r3,#48]
 1594              	.L86:
1082:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1083:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1084:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1595              	 .loc 1 1084 0
 1596 0052 FB7B     	 ldrb r3,[r7,#15]
1085:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1597              	 .loc 1 1085 0
 1598 0054 1846     	 mov r0,r3
 1599 0056 1037     	 adds r7,r7,#16
 1600              	.LCFI98:
 1601              	 .cfi_def_cfa_offset 8
 1602 0058 BD46     	 mov sp,r7
 1603              	.LCFI99:
 1604              	 .cfi_def_cfa_register 13
 1605              	 
 1606 005a 80BD     	 pop {r7,pc}
 1607              	 .cfi_endproc
 1608              	.LFE16:
 1610              	 .section .text.sync_fs,"ax",%progbits
 1611              	 .align 2
 1612              	 .thumb
 1613              	 .thumb_func
 1615              	sync_fs:
 1616              	.LFB17:
1086:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1087:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1088:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1089:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1090:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1091:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1092:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Synchronize filesystem and data on the storage                        */
1093:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1094:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1095:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
1096:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs		/* Filesystem object */
1097:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1098:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1617              	 .loc 1 1098 0
 1618              	 .cfi_startproc
 1619              	 
 1620              	 
 1621 0000 80B5     	 push {r7,lr}
 1622              	.LCFI100:
 1623              	 .cfi_def_cfa_offset 8
 1624              	 .cfi_offset 7,-8
 1625              	 .cfi_offset 14,-4
 1626 0002 84B0     	 sub sp,sp,#16
 1627              	.LCFI101:
 1628              	 .cfi_def_cfa_offset 24
 1629 0004 00AF     	 add r7,sp,#0
 1630              	.LCFI102:
 1631              	 .cfi_def_cfa_register 7
 1632 0006 7860     	 str r0,[r7,#4]
1099:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1100:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1101:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1102:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = sync_window(fs);
 1633              	 .loc 1 1102 0
 1634 0008 7868     	 ldr r0,[r7,#4]
 1635 000a FFF7FEFF 	 bl sync_window
 1636 000e 0346     	 mov r3,r0
 1637 0010 FB73     	 strb r3,[r7,#15]
1103:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 1638              	 .loc 1 1103 0
 1639 0012 FB7B     	 ldrb r3,[r7,#15]
 1640 0014 002B     	 cmp r3,#0
 1641 0016 57D1     	 bne .L90
1104:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 1642              	 .loc 1 1104 0
 1643 0018 7B68     	 ldr r3,[r7,#4]
 1644 001a 1B78     	 ldrb r3,[r3]
 1645 001c 032B     	 cmp r3,#3
 1646 001e 47D1     	 bne .L91
 1647              	 .loc 1 1104 0 is_stmt 0 discriminator 1
 1648 0020 7B68     	 ldr r3,[r7,#4]
 1649 0022 1B79     	 ldrb r3,[r3,#4]
 1650 0024 012B     	 cmp r3,#1
 1651 0026 43D1     	 bne .L91
1105:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Create FSInfo structure */
1106:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(fs->win, 0, sizeof fs->win);
 1652              	 .loc 1 1106 0 is_stmt 1
 1653 0028 7B68     	 ldr r3,[r7,#4]
 1654 002a 3433     	 adds r3,r3,#52
 1655 002c 1846     	 mov r0,r3
 1656 002e 0021     	 movs r1,#0
 1657 0030 4FF40072 	 mov r2,#512
 1658 0034 FFF7FEFF 	 bl mem_set
1107:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 1659              	 .loc 1 1107 0
 1660 0038 7B68     	 ldr r3,[r7,#4]
 1661 003a 03F23223 	 addw r3,r3,#562
 1662 003e 1846     	 mov r0,r3
 1663 0040 4AF65521 	 movw r1,#43605
 1664 0044 FFF7FEFF 	 bl st_word
1108:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 1665              	 .loc 1 1108 0
 1666 0048 7B68     	 ldr r3,[r7,#4]
 1667 004a 3433     	 adds r3,r3,#52
 1668 004c 1846     	 mov r0,r3
 1669 004e 2149     	 ldr r1,.L93
 1670 0050 FFF7FEFF 	 bl st_dword
1109:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 1671              	 .loc 1 1109 0
 1672 0054 7B68     	 ldr r3,[r7,#4]
 1673 0056 03F50673 	 add r3,r3,#536
 1674 005a 1846     	 mov r0,r3
 1675 005c 1E49     	 ldr r1,.L93+4
 1676 005e FFF7FEFF 	 bl st_dword
1110:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 1677              	 .loc 1 1110 0
 1678 0062 7B68     	 ldr r3,[r7,#4]
 1679 0064 03F50772 	 add r2,r3,#540
 1680 0068 7B68     	 ldr r3,[r7,#4]
 1681 006a 1B69     	 ldr r3,[r3,#16]
 1682 006c 1046     	 mov r0,r2
 1683 006e 1946     	 mov r1,r3
 1684 0070 FFF7FEFF 	 bl st_dword
1111:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 1685              	 .loc 1 1111 0
 1686 0074 7B68     	 ldr r3,[r7,#4]
 1687 0076 03F50872 	 add r2,r3,#544
 1688 007a 7B68     	 ldr r3,[r7,#4]
 1689 007c DB68     	 ldr r3,[r3,#12]
 1690 007e 1046     	 mov r0,r2
 1691 0080 1946     	 mov r1,r3
 1692 0082 FFF7FEFF 	 bl st_dword
1112:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Write it into the FSInfo sector */
1113:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->winsect = fs->volbase + 1;
 1693              	 .loc 1 1113 0
 1694 0086 7B68     	 ldr r3,[r7,#4]
 1695 0088 1B6A     	 ldr r3,[r3,#32]
 1696 008a 5A1C     	 adds r2,r3,#1
 1697 008c 7B68     	 ldr r3,[r7,#4]
 1698 008e 1A63     	 str r2,[r3,#48]
1114:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 1699              	 .loc 1 1114 0
 1700 0090 7B68     	 ldr r3,[r7,#4]
 1701 0092 5978     	 ldrb r1,[r3,#1]
 1702 0094 7B68     	 ldr r3,[r7,#4]
 1703 0096 03F13402 	 add r2,r3,#52
 1704 009a 7B68     	 ldr r3,[r7,#4]
 1705 009c 1B6B     	 ldr r3,[r3,#48]
 1706 009e 0846     	 mov r0,r1
 1707 00a0 1146     	 mov r1,r2
 1708 00a2 1A46     	 mov r2,r3
 1709 00a4 0123     	 movs r3,#1
 1710 00a6 FFF7FEFF 	 bl disk_write
1115:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag = 0;
 1711              	 .loc 1 1115 0
 1712 00aa 7B68     	 ldr r3,[r7,#4]
 1713 00ac 0022     	 movs r2,#0
 1714 00ae 1A71     	 strb r2,[r3,#4]
 1715              	.L91:
1116:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1117:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Make sure that no pending write process in the lower layer */
1118:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 1716              	 .loc 1 1118 0
 1717 00b0 7B68     	 ldr r3,[r7,#4]
 1718 00b2 5B78     	 ldrb r3,[r3,#1]
 1719 00b4 1846     	 mov r0,r3
 1720 00b6 0021     	 movs r1,#0
 1721 00b8 0022     	 movs r2,#0
 1722 00ba FFF7FEFF 	 bl disk_ioctl
 1723 00be 0346     	 mov r3,r0
 1724 00c0 002B     	 cmp r3,#0
 1725 00c2 01D0     	 beq .L90
 1726              	 .loc 1 1118 0 is_stmt 0 discriminator 1
 1727 00c4 0123     	 movs r3,#1
 1728 00c6 FB73     	 strb r3,[r7,#15]
 1729              	.L90:
1119:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1120:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1121:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1730              	 .loc 1 1121 0 is_stmt 1
 1731 00c8 FB7B     	 ldrb r3,[r7,#15]
1122:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1732              	 .loc 1 1122 0
 1733 00ca 1846     	 mov r0,r3
 1734 00cc 1037     	 adds r7,r7,#16
 1735              	.LCFI103:
 1736              	 .cfi_def_cfa_offset 8
 1737 00ce BD46     	 mov sp,r7
 1738              	.LCFI104:
 1739              	 .cfi_def_cfa_register 13
 1740              	 
 1741 00d0 80BD     	 pop {r7,pc}
 1742              	.L94:
 1743 00d2 00BF     	 .align 2
 1744              	.L93:
 1745 00d4 52526141 	 .word 1096897106
 1746 00d8 72724161 	 .word 1631679090
 1747              	 .cfi_endproc
 1748              	.LFE17:
 1750              	 .section .text.clst2sect,"ax",%progbits
 1751              	 .align 2
 1752              	 .thumb
 1753              	 .thumb_func
 1755              	clst2sect:
 1756              	.LFB18:
1123:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1124:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1125:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1126:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1127:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1128:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1129:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get physical sector number from cluster number                        */
1130:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1131:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1132:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
1133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
1134:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
1135:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1136:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1757              	 .loc 1 1136 0
 1758              	 .cfi_startproc
 1759              	 
 1760              	 
 1761              	 
 1762 0000 80B4     	 push {r7}
 1763              	.LCFI105:
 1764              	 .cfi_def_cfa_offset 4
 1765              	 .cfi_offset 7,-4
 1766 0002 83B0     	 sub sp,sp,#12
 1767              	.LCFI106:
 1768              	 .cfi_def_cfa_offset 16
 1769 0004 00AF     	 add r7,sp,#0
 1770              	.LCFI107:
 1771              	 .cfi_def_cfa_register 7
 1772 0006 7860     	 str r0,[r7,#4]
 1773 0008 3960     	 str r1,[r7]
1137:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;		/* Cluster number is origin from 2 */
 1774              	 .loc 1 1137 0
 1775 000a 3B68     	 ldr r3,[r7]
 1776 000c 023B     	 subs r3,r3,#2
 1777 000e 3B60     	 str r3,[r7]
1138:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 1778              	 .loc 1 1138 0
 1779 0010 7B68     	 ldr r3,[r7,#4]
 1780 0012 9B69     	 ldr r3,[r3,#24]
 1781 0014 9A1E     	 subs r2,r3,#2
 1782 0016 3B68     	 ldr r3,[r7]
 1783 0018 9A42     	 cmp r2,r3
 1784 001a 01D8     	 bhi .L96
 1785              	 .loc 1 1138 0 is_stmt 0 discriminator 1
 1786 001c 0023     	 movs r3,#0
 1787 001e 08E0     	 b .L97
 1788              	.L96:
1139:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 1789              	 .loc 1 1139 0 is_stmt 1
 1790 0020 7B68     	 ldr r3,[r7,#4]
 1791 0022 DA6A     	 ldr r2,[r3,#44]
 1792 0024 7B68     	 ldr r3,[r7,#4]
 1793 0026 5B89     	 ldrh r3,[r3,#10]
 1794 0028 1946     	 mov r1,r3
 1795 002a 3B68     	 ldr r3,[r7]
 1796 002c 03FB01F3 	 mul r3,r3,r1
 1797 0030 1344     	 add r3,r3,r2
 1798              	.L97:
1140:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1799              	 .loc 1 1140 0
 1800 0032 1846     	 mov r0,r3
 1801 0034 0C37     	 adds r7,r7,#12
 1802              	.LCFI108:
 1803              	 .cfi_def_cfa_offset 4
 1804 0036 BD46     	 mov sp,r7
 1805              	.LCFI109:
 1806              	 .cfi_def_cfa_register 13
 1807              	 
 1808 0038 5DF8047B 	 ldr r7,[sp],#4
 1809              	.LCFI110:
 1810              	 .cfi_restore 7
 1811              	 .cfi_def_cfa_offset 0
 1812 003c 7047     	 bx lr
 1813              	 .cfi_endproc
 1814              	.LFE18:
 1816 003e 00BF     	 .section .text.get_fat,"ax",%progbits
 1817              	 .align 2
 1818              	 .thumb
 1819              	 .thumb_func
 1821              	get_fat:
 1822              	.LFB19:
1141:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1142:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1143:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1144:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1145:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1146:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT access - Read value of a FAT entry                                */
1147:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1148:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1149:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1150:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,	/* Corresponding object */
1151:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Cluster number to get the value */
1152:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1153:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1823              	 .loc 1 1153 0
 1824              	 .cfi_startproc
 1825              	 
 1826              	 
 1827 0000 80B5     	 push {r7,lr}
 1828              	.LCFI111:
 1829              	 .cfi_def_cfa_offset 8
 1830              	 .cfi_offset 7,-8
 1831              	 .cfi_offset 14,-4
 1832 0002 86B0     	 sub sp,sp,#24
 1833              	.LCFI112:
 1834              	 .cfi_def_cfa_offset 32
 1835 0004 00AF     	 add r7,sp,#0
 1836              	.LCFI113:
 1837              	 .cfi_def_cfa_register 7
 1838 0006 7860     	 str r0,[r7,#4]
 1839 0008 3960     	 str r1,[r7]
1154:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wc, bc;
1155:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val;
1156:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 1840              	 .loc 1 1156 0
 1841 000a 7B68     	 ldr r3,[r7,#4]
 1842 000c 1B68     	 ldr r3,[r3]
 1843 000e 3B61     	 str r3,[r7,#16]
1157:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1158:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1159:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 1844              	 .loc 1 1159 0
 1845 0010 3B68     	 ldr r3,[r7]
 1846 0012 012B     	 cmp r3,#1
 1847 0014 04D9     	 bls .L99
 1848              	 .loc 1 1159 0 is_stmt 0 discriminator 1
 1849 0016 3B69     	 ldr r3,[r7,#16]
 1850 0018 9A69     	 ldr r2,[r3,#24]
 1851 001a 3B68     	 ldr r3,[r7]
 1852 001c 9A42     	 cmp r2,r3
 1853 001e 02D8     	 bhi .L100
 1854              	.L99:
1160:../Dave/Generated/FATFS/ff_Src/ff.c **** 		val = 1;	/* Internal error */
 1855              	 .loc 1 1160 0 is_stmt 1
 1856 0020 0123     	 movs r3,#1
 1857 0022 7B61     	 str r3,[r7,#20]
 1858 0024 88E0     	 b .L101
 1859              	.L100:
1161:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1162:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1163:../Dave/Generated/FATFS/ff_Src/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 1860              	 .loc 1 1163 0
 1861 0026 4FF0FF33 	 mov r3,#-1
 1862 002a 7B61     	 str r3,[r7,#20]
1164:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1165:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (fs->fs_type) {
 1863              	 .loc 1 1165 0
 1864 002c 3B69     	 ldr r3,[r7,#16]
 1865 002e 1B78     	 ldrb r3,[r3]
 1866 0030 022B     	 cmp r3,#2
 1867 0032 47D0     	 beq .L103
 1868 0034 032B     	 cmp r3,#3
 1869 0036 60D0     	 beq .L104
 1870 0038 012B     	 cmp r3,#1
 1871 003a 7BD1     	 bne .L113
1166:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT12 :
1167:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1872              	 .loc 1 1167 0
 1873 003c 3B68     	 ldr r3,[r7]
 1874 003e FB60     	 str r3,[r7,#12]
 1875 0040 FB68     	 ldr r3,[r7,#12]
 1876 0042 5B08     	 lsrs r3,r3,#1
 1877 0044 FA68     	 ldr r2,[r7,#12]
 1878 0046 1344     	 add r3,r3,r2
 1879 0048 FB60     	 str r3,[r7,#12]
1168:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1880              	 .loc 1 1168 0
 1881 004a 3B69     	 ldr r3,[r7,#16]
 1882 004c 5A6A     	 ldr r2,[r3,#36]
 1883 004e FB68     	 ldr r3,[r7,#12]
 1884 0050 5B0A     	 lsrs r3,r3,#9
 1885 0052 1344     	 add r3,r3,r2
 1886 0054 3869     	 ldr r0,[r7,#16]
 1887 0056 1946     	 mov r1,r3
 1888 0058 FFF7FEFF 	 bl move_window
 1889 005c 0346     	 mov r3,r0
 1890 005e 002B     	 cmp r3,#0
 1891 0060 00D0     	 beq .L106
 1892 0062 69E0     	 b .L101
 1893              	.L106:
1169:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 1894              	 .loc 1 1169 0
 1895 0064 FB68     	 ldr r3,[r7,#12]
 1896 0066 5A1C     	 adds r2,r3,#1
 1897 0068 FA60     	 str r2,[r7,#12]
 1898 006a C3F30803 	 ubfx r3,r3,#0,#9
 1899 006e 3A69     	 ldr r2,[r7,#16]
 1900 0070 1344     	 add r3,r3,r2
 1901 0072 93F83430 	 ldrb r3,[r3,#52]
 1902 0076 BB60     	 str r3,[r7,#8]
1170:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1903              	 .loc 1 1170 0
 1904 0078 3B69     	 ldr r3,[r7,#16]
 1905 007a 5A6A     	 ldr r2,[r3,#36]
 1906 007c FB68     	 ldr r3,[r7,#12]
 1907 007e 5B0A     	 lsrs r3,r3,#9
 1908 0080 1344     	 add r3,r3,r2
 1909 0082 3869     	 ldr r0,[r7,#16]
 1910 0084 1946     	 mov r1,r3
 1911 0086 FFF7FEFF 	 bl move_window
 1912 008a 0346     	 mov r3,r0
 1913 008c 002B     	 cmp r3,#0
 1914 008e 00D0     	 beq .L107
 1915 0090 52E0     	 b .L101
 1916              	.L107:
1171:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 1917              	 .loc 1 1171 0
 1918 0092 FB68     	 ldr r3,[r7,#12]
 1919 0094 C3F30803 	 ubfx r3,r3,#0,#9
 1920 0098 3A69     	 ldr r2,[r7,#16]
 1921 009a 1344     	 add r3,r3,r2
 1922 009c 93F83430 	 ldrb r3,[r3,#52]
 1923 00a0 1B02     	 lsls r3,r3,#8
 1924 00a2 1A46     	 mov r2,r3
 1925 00a4 BB68     	 ldr r3,[r7,#8]
 1926 00a6 1343     	 orrs r3,r3,r2
 1927 00a8 BB60     	 str r3,[r7,#8]
1172:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 1928              	 .loc 1 1172 0
 1929 00aa 3B68     	 ldr r3,[r7]
 1930 00ac 03F00103 	 and r3,r3,#1
 1931 00b0 002B     	 cmp r3,#0
 1932 00b2 02D0     	 beq .L108
 1933              	 .loc 1 1172 0 is_stmt 0 discriminator 1
 1934 00b4 BB68     	 ldr r3,[r7,#8]
 1935 00b6 1B09     	 lsrs r3,r3,#4
 1936 00b8 02E0     	 b .L109
 1937              	.L108:
 1938              	 .loc 1 1172 0 discriminator 2
 1939 00ba BB68     	 ldr r3,[r7,#8]
 1940 00bc C3F30B03 	 ubfx r3,r3,#0,#12
 1941              	.L109:
 1942              	 .loc 1 1172 0 discriminator 4
 1943 00c0 7B61     	 str r3,[r7,#20]
1173:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 1944              	 .loc 1 1173 0 is_stmt 1 discriminator 4
 1945 00c2 39E0     	 b .L101
 1946              	.L103:
1174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1175:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT16 :
1176:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 1947              	 .loc 1 1176 0
 1948 00c4 3B69     	 ldr r3,[r7,#16]
 1949 00c6 5A6A     	 ldr r2,[r3,#36]
 1950 00c8 3B68     	 ldr r3,[r7]
 1951 00ca 1B0A     	 lsrs r3,r3,#8
 1952 00cc 1344     	 add r3,r3,r2
 1953 00ce 3869     	 ldr r0,[r7,#16]
 1954 00d0 1946     	 mov r1,r3
 1955 00d2 FFF7FEFF 	 bl move_window
 1956 00d6 0346     	 mov r3,r0
 1957 00d8 002B     	 cmp r3,#0
 1958 00da 00D0     	 beq .L110
 1959 00dc 2CE0     	 b .L101
 1960              	.L110:
1177:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 1961              	 .loc 1 1177 0
 1962 00de 3B68     	 ldr r3,[r7]
 1963 00e0 5B00     	 lsls r3,r3,#1
 1964 00e2 03F4FF73 	 and r3,r3,#510
 1965 00e6 3033     	 adds r3,r3,#48
 1966 00e8 3A69     	 ldr r2,[r7,#16]
 1967 00ea 1344     	 add r3,r3,r2
 1968 00ec 0433     	 adds r3,r3,#4
 1969 00ee 1846     	 mov r0,r3
 1970 00f0 FFF7FEFF 	 bl ld_word
 1971 00f4 0346     	 mov r3,r0
 1972 00f6 7B61     	 str r3,[r7,#20]
1178:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 1973              	 .loc 1 1178 0
 1974 00f8 1EE0     	 b .L101
 1975              	.L104:
1179:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1180:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT32 :
1181:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 1976              	 .loc 1 1181 0
 1977 00fa 3B69     	 ldr r3,[r7,#16]
 1978 00fc 5A6A     	 ldr r2,[r3,#36]
 1979 00fe 3B68     	 ldr r3,[r7]
 1980 0100 DB09     	 lsrs r3,r3,#7
 1981 0102 1344     	 add r3,r3,r2
 1982 0104 3869     	 ldr r0,[r7,#16]
 1983 0106 1946     	 mov r1,r3
 1984 0108 FFF7FEFF 	 bl move_window
 1985 010c 0346     	 mov r3,r0
 1986 010e 002B     	 cmp r3,#0
 1987 0110 00D0     	 beq .L111
 1988 0112 11E0     	 b .L101
 1989              	.L111:
1182:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 1990              	 .loc 1 1182 0
 1991 0114 3B68     	 ldr r3,[r7]
 1992 0116 9B00     	 lsls r3,r3,#2
 1993 0118 03F4FE73 	 and r3,r3,#508
 1994 011c 3033     	 adds r3,r3,#48
 1995 011e 3A69     	 ldr r2,[r7,#16]
 1996 0120 1344     	 add r3,r3,r2
 1997 0122 0433     	 adds r3,r3,#4
 1998 0124 1846     	 mov r0,r3
 1999 0126 FFF7FEFF 	 bl ld_dword
 2000 012a 0346     	 mov r3,r0
 2001 012c 23F07043 	 bic r3,r3,#-268435456
 2002 0130 7B61     	 str r3,[r7,#20]
1183:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2003              	 .loc 1 1183 0
 2004 0132 01E0     	 b .L101
 2005              	.L113:
1184:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1185:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_EXFAT :
1186:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must 
1187:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1188:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1189:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1190:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1191:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1192:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1193:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1194:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1195:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = clst + 1; 	/* Generate the value */
1196:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1197:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1198:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1199:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1200:../Dave/Generated/FATFS/ff_Src/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1201:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
1202:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1203:../Dave/Generated/FATFS/ff_Src/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1204:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
1205:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1206:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1207:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1208:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* go to default */
1209:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1210:../Dave/Generated/FATFS/ff_Src/ff.c **** 		default:
1211:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = 1;	/* Internal error */
 2006              	 .loc 1 1211 0
 2007 0134 0123     	 movs r3,#1
 2008 0136 7B61     	 str r3,[r7,#20]
 2009              	.L101:
1212:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1213:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1214:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1215:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return val;
 2010              	 .loc 1 1215 0
 2011 0138 7B69     	 ldr r3,[r7,#20]
1216:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2012              	 .loc 1 1216 0
 2013 013a 1846     	 mov r0,r3
 2014 013c 1837     	 adds r7,r7,#24
 2015              	.LCFI114:
 2016              	 .cfi_def_cfa_offset 8
 2017 013e BD46     	 mov sp,r7
 2018              	.LCFI115:
 2019              	 .cfi_def_cfa_register 13
 2020              	 
 2021 0140 80BD     	 pop {r7,pc}
 2022              	 .cfi_endproc
 2023              	.LFE19:
 2025 0142 00BF     	 .section .text.put_fat,"ax",%progbits
 2026              	 .align 2
 2027              	 .thumb
 2028              	 .thumb_func
 2030              	put_fat:
 2031              	.LFB20:
1217:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1218:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1219:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1220:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1221:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1222:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1223:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT access - Change value of a FAT entry                              */
1224:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1225:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1226:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1227:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Corresponding filesystem object */
1228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1229:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val		/* New value to be set to the entry */
1230:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1231:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2032              	 .loc 1 1231 0
 2033              	 .cfi_startproc
 2034              	 
 2035              	 
 2036 0000 90B5     	 push {r4,r7,lr}
 2037              	.LCFI116:
 2038              	 .cfi_def_cfa_offset 12
 2039              	 .cfi_offset 4,-12
 2040              	 .cfi_offset 7,-8
 2041              	 .cfi_offset 14,-4
 2042 0002 89B0     	 sub sp,sp,#36
 2043              	.LCFI117:
 2044              	 .cfi_def_cfa_offset 48
 2045 0004 00AF     	 add r7,sp,#0
 2046              	.LCFI118:
 2047              	 .cfi_def_cfa_register 7
 2048 0006 F860     	 str r0,[r7,#12]
 2049 0008 B960     	 str r1,[r7,#8]
 2050 000a 7A60     	 str r2,[r7,#4]
1232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT bc;
1233:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *p;
1234:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_INT_ERR;
 2051              	 .loc 1 1234 0
 2052 000c 0223     	 movs r3,#2
 2053 000e FB77     	 strb r3,[r7,#31]
1235:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1236:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1237:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 2054              	 .loc 1 1237 0
 2055 0010 BB68     	 ldr r3,[r7,#8]
 2056 0012 012B     	 cmp r3,#1
 2057 0014 40F2D280 	 bls .L115
 2058              	 .loc 1 1237 0 is_stmt 0 discriminator 1
 2059 0018 FB68     	 ldr r3,[r7,#12]
 2060 001a 9A69     	 ldr r2,[r3,#24]
 2061 001c BB68     	 ldr r3,[r7,#8]
 2062 001e 9A42     	 cmp r2,r3
 2063 0020 40F2CC80 	 bls .L115
1238:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (fs->fs_type) {
 2064              	 .loc 1 1238 0 is_stmt 1
 2065 0024 FB68     	 ldr r3,[r7,#12]
 2066 0026 1B78     	 ldrb r3,[r3]
 2067 0028 022B     	 cmp r3,#2
 2068 002a 74D0     	 beq .L116
 2069 002c 032B     	 cmp r3,#3
 2070 002e 00F09380 	 beq .L117
 2071 0032 012B     	 cmp r3,#1
 2072 0034 40F0C280 	 bne .L115
1239:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT12 :
1240:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 2073              	 .loc 1 1240 0
 2074 0038 BB68     	 ldr r3,[r7,#8]
 2075 003a BB61     	 str r3,[r7,#24]
 2076 003c BB69     	 ldr r3,[r7,#24]
 2077 003e 5B08     	 lsrs r3,r3,#1
 2078 0040 BA69     	 ldr r2,[r7,#24]
 2079 0042 1344     	 add r3,r3,r2
 2080 0044 BB61     	 str r3,[r7,#24]
1241:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2081              	 .loc 1 1241 0
 2082 0046 FB68     	 ldr r3,[r7,#12]
 2083 0048 5A6A     	 ldr r2,[r3,#36]
 2084 004a BB69     	 ldr r3,[r7,#24]
 2085 004c 5B0A     	 lsrs r3,r3,#9
 2086 004e 1344     	 add r3,r3,r2
 2087 0050 F868     	 ldr r0,[r7,#12]
 2088 0052 1946     	 mov r1,r3
 2089 0054 FFF7FEFF 	 bl move_window
 2090 0058 0346     	 mov r3,r0
 2091 005a FB77     	 strb r3,[r7,#31]
1242:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2092              	 .loc 1 1242 0
 2093 005c FB7F     	 ldrb r3,[r7,#31]
 2094 005e 002B     	 cmp r3,#0
 2095 0060 00D0     	 beq .L119
 2096 0062 ABE0     	 b .L115
 2097              	.L119:
1243:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2098              	 .loc 1 1243 0
 2099 0064 BB69     	 ldr r3,[r7,#24]
 2100 0066 5A1C     	 adds r2,r3,#1
 2101 0068 BA61     	 str r2,[r7,#24]
 2102 006a C3F30803 	 ubfx r3,r3,#0,#9
 2103 006e 3033     	 adds r3,r3,#48
 2104 0070 FA68     	 ldr r2,[r7,#12]
 2105 0072 1344     	 add r3,r3,r2
 2106 0074 0433     	 adds r3,r3,#4
 2107 0076 7B61     	 str r3,[r7,#20]
1244:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 2108              	 .loc 1 1244 0
 2109 0078 BB68     	 ldr r3,[r7,#8]
 2110 007a 03F00103 	 and r3,r3,#1
 2111 007e 002B     	 cmp r3,#0
 2112 0080 0DD0     	 beq .L120
 2113              	 .loc 1 1244 0 is_stmt 0 discriminator 1
 2114 0082 7B69     	 ldr r3,[r7,#20]
 2115 0084 1B78     	 ldrb r3,[r3]
 2116 0086 DBB2     	 uxtb r3,r3
 2117 0088 03F00F03 	 and r3,r3,#15
 2118 008c DAB2     	 uxtb r2,r3
 2119 008e 7B68     	 ldr r3,[r7,#4]
 2120 0090 DBB2     	 uxtb r3,r3
 2121 0092 1B01     	 lsls r3,r3,#4
 2122 0094 DBB2     	 uxtb r3,r3
 2123 0096 1343     	 orrs r3,r3,r2
 2124 0098 DBB2     	 uxtb r3,r3
 2125 009a DBB2     	 uxtb r3,r3
 2126 009c 01E0     	 b .L121
 2127              	.L120:
 2128              	 .loc 1 1244 0 discriminator 2
 2129 009e 7B68     	 ldr r3,[r7,#4]
 2130 00a0 DBB2     	 uxtb r3,r3
 2131              	.L121:
 2132              	 .loc 1 1244 0 discriminator 4
 2133 00a2 7A69     	 ldr r2,[r7,#20]
 2134 00a4 1370     	 strb r3,[r2]
1245:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2135              	 .loc 1 1245 0 is_stmt 1 discriminator 4
 2136 00a6 FB68     	 ldr r3,[r7,#12]
 2137 00a8 0122     	 movs r2,#1
 2138 00aa DA70     	 strb r2,[r3,#3]
1246:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2139              	 .loc 1 1246 0 discriminator 4
 2140 00ac FB68     	 ldr r3,[r7,#12]
 2141 00ae 5A6A     	 ldr r2,[r3,#36]
 2142 00b0 BB69     	 ldr r3,[r7,#24]
 2143 00b2 5B0A     	 lsrs r3,r3,#9
 2144 00b4 1344     	 add r3,r3,r2
 2145 00b6 F868     	 ldr r0,[r7,#12]
 2146 00b8 1946     	 mov r1,r3
 2147 00ba FFF7FEFF 	 bl move_window
 2148 00be 0346     	 mov r3,r0
 2149 00c0 FB77     	 strb r3,[r7,#31]
1247:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2150              	 .loc 1 1247 0 discriminator 4
 2151 00c2 FB7F     	 ldrb r3,[r7,#31]
 2152 00c4 002B     	 cmp r3,#0
 2153 00c6 00D0     	 beq .L122
 2154              	 .loc 1 1247 0 is_stmt 0
 2155 00c8 78E0     	 b .L115
 2156              	.L122:
1248:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = fs->win + bc % SS(fs);
 2157              	 .loc 1 1248 0 is_stmt 1
 2158 00ca BB69     	 ldr r3,[r7,#24]
 2159 00cc C3F30803 	 ubfx r3,r3,#0,#9
 2160 00d0 3033     	 adds r3,r3,#48
 2161 00d2 FA68     	 ldr r2,[r7,#12]
 2162 00d4 1344     	 add r3,r3,r2
 2163 00d6 0433     	 adds r3,r3,#4
 2164 00d8 7B61     	 str r3,[r7,#20]
1249:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte 
 2165              	 .loc 1 1249 0
 2166 00da BB68     	 ldr r3,[r7,#8]
 2167 00dc 03F00103 	 and r3,r3,#1
 2168 00e0 002B     	 cmp r3,#0
 2169 00e2 03D0     	 beq .L123
 2170              	 .loc 1 1249 0 is_stmt 0 discriminator 1
 2171 00e4 7B68     	 ldr r3,[r7,#4]
 2172 00e6 1B09     	 lsrs r3,r3,#4
 2173 00e8 DBB2     	 uxtb r3,r3
 2174 00ea 0EE0     	 b .L124
 2175              	.L123:
 2176              	 .loc 1 1249 0 discriminator 2
 2177 00ec 7B69     	 ldr r3,[r7,#20]
 2178 00ee 1B78     	 ldrb r3,[r3]
 2179 00f0 DBB2     	 uxtb r3,r3
 2180 00f2 23F00F03 	 bic r3,r3,#15
 2181 00f6 DAB2     	 uxtb r2,r3
 2182 00f8 7B68     	 ldr r3,[r7,#4]
 2183 00fa 1B0A     	 lsrs r3,r3,#8
 2184 00fc DBB2     	 uxtb r3,r3
 2185 00fe 03F00F03 	 and r3,r3,#15
 2186 0102 DBB2     	 uxtb r3,r3
 2187 0104 1343     	 orrs r3,r3,r2
 2188 0106 DBB2     	 uxtb r3,r3
 2189 0108 DBB2     	 uxtb r3,r3
 2190              	.L124:
 2191              	 .loc 1 1249 0 discriminator 4
 2192 010a 7A69     	 ldr r2,[r7,#20]
 2193 010c 1370     	 strb r3,[r2]
1250:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2194              	 .loc 1 1250 0 is_stmt 1 discriminator 4
 2195 010e FB68     	 ldr r3,[r7,#12]
 2196 0110 0122     	 movs r2,#1
 2197 0112 DA70     	 strb r2,[r3,#3]
1251:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2198              	 .loc 1 1251 0 discriminator 4
 2199 0114 52E0     	 b .L115
 2200              	.L116:
1252:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1253:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT16 :
1254:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 2201              	 .loc 1 1254 0
 2202 0116 FB68     	 ldr r3,[r7,#12]
 2203 0118 5A6A     	 ldr r2,[r3,#36]
 2204 011a BB68     	 ldr r3,[r7,#8]
 2205 011c 1B0A     	 lsrs r3,r3,#8
 2206 011e 1344     	 add r3,r3,r2
 2207 0120 F868     	 ldr r0,[r7,#12]
 2208 0122 1946     	 mov r1,r3
 2209 0124 FFF7FEFF 	 bl move_window
 2210 0128 0346     	 mov r3,r0
 2211 012a FB77     	 strb r3,[r7,#31]
1255:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2212              	 .loc 1 1255 0
 2213 012c FB7F     	 ldrb r3,[r7,#31]
 2214 012e 002B     	 cmp r3,#0
 2215 0130 00D0     	 beq .L125
 2216 0132 43E0     	 b .L115
 2217              	.L125:
1256:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 2218              	 .loc 1 1256 0
 2219 0134 BB68     	 ldr r3,[r7,#8]
 2220 0136 5B00     	 lsls r3,r3,#1
 2221 0138 03F4FF73 	 and r3,r3,#510
 2222 013c 3033     	 adds r3,r3,#48
 2223 013e FA68     	 ldr r2,[r7,#12]
 2224 0140 1344     	 add r3,r3,r2
 2225 0142 1A1D     	 adds r2,r3,#4
 2226 0144 7B68     	 ldr r3,[r7,#4]
 2227 0146 9BB2     	 uxth r3,r3
 2228 0148 1046     	 mov r0,r2
 2229 014a 1946     	 mov r1,r3
 2230 014c FFF7FEFF 	 bl st_word
1257:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2231              	 .loc 1 1257 0
 2232 0150 FB68     	 ldr r3,[r7,#12]
 2233 0152 0122     	 movs r2,#1
 2234 0154 DA70     	 strb r2,[r3,#3]
1258:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2235              	 .loc 1 1258 0
 2236 0156 31E0     	 b .L115
 2237              	.L117:
1259:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1260:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT32 :
1261:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_EXFAT :
1263:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1264:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 2238              	 .loc 1 1264 0
 2239 0158 FB68     	 ldr r3,[r7,#12]
 2240 015a 5A6A     	 ldr r2,[r3,#36]
 2241 015c BB68     	 ldr r3,[r7,#8]
 2242 015e DB09     	 lsrs r3,r3,#7
 2243 0160 1344     	 add r3,r3,r2
 2244 0162 F868     	 ldr r0,[r7,#12]
 2245 0164 1946     	 mov r1,r3
 2246 0166 FFF7FEFF 	 bl move_window
 2247 016a 0346     	 mov r3,r0
 2248 016c FB77     	 strb r3,[r7,#31]
1265:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2249              	 .loc 1 1265 0
 2250 016e FB7F     	 ldrb r3,[r7,#31]
 2251 0170 002B     	 cmp r3,#0
 2252 0172 00D0     	 beq .L126
 2253 0174 22E0     	 b .L115
 2254              	.L126:
1266:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1267:../Dave/Generated/FATFS/ff_Src/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 2255              	 .loc 1 1267 0
 2256 0176 7B68     	 ldr r3,[r7,#4]
 2257 0178 23F07044 	 bic r4,r3,#-268435456
 2258 017c BB68     	 ldr r3,[r7,#8]
 2259 017e 9B00     	 lsls r3,r3,#2
 2260 0180 03F4FE73 	 and r3,r3,#508
 2261 0184 3033     	 adds r3,r3,#48
 2262 0186 FA68     	 ldr r2,[r7,#12]
 2263 0188 1344     	 add r3,r3,r2
 2264 018a 0433     	 adds r3,r3,#4
 2265 018c 1846     	 mov r0,r3
 2266 018e FFF7FEFF 	 bl ld_dword
 2267 0192 0346     	 mov r3,r0
 2268 0194 03F07043 	 and r3,r3,#-268435456
 2269 0198 2343     	 orrs r3,r3,r4
 2270 019a 7B60     	 str r3,[r7,#4]
1268:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1269:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
 2271              	 .loc 1 1269 0
 2272 019c BB68     	 ldr r3,[r7,#8]
 2273 019e 9B00     	 lsls r3,r3,#2
 2274 01a0 03F4FE73 	 and r3,r3,#508
 2275 01a4 3033     	 adds r3,r3,#48
 2276 01a6 FA68     	 ldr r2,[r7,#12]
 2277 01a8 1344     	 add r3,r3,r2
 2278 01aa 0433     	 adds r3,r3,#4
 2279 01ac 1846     	 mov r0,r3
 2280 01ae 7968     	 ldr r1,[r7,#4]
 2281 01b0 FFF7FEFF 	 bl st_dword
1270:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2282              	 .loc 1 1270 0
 2283 01b4 FB68     	 ldr r3,[r7,#12]
 2284 01b6 0122     	 movs r2,#1
 2285 01b8 DA70     	 strb r2,[r3,#3]
1271:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2286              	 .loc 1 1271 0
 2287 01ba 00BF     	 nop
 2288              	.L115:
1272:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1273:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1274:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 2289              	 .loc 1 1274 0
 2290 01bc FB7F     	 ldrb r3,[r7,#31]
1275:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2291              	 .loc 1 1275 0
 2292 01be 1846     	 mov r0,r3
 2293 01c0 2437     	 adds r7,r7,#36
 2294              	.LCFI119:
 2295              	 .cfi_def_cfa_offset 12
 2296 01c2 BD46     	 mov sp,r7
 2297              	.LCFI120:
 2298              	 .cfi_def_cfa_register 13
 2299              	 
 2300 01c4 90BD     	 pop {r4,r7,pc}
 2301              	 .cfi_endproc
 2302              	.LFE20:
 2304 01c6 00BF     	 .section .text.remove_chain,"ax",%progbits
 2305              	 .align 2
 2306              	 .thumb
 2307              	 .thumb_func
 2309              	remove_chain:
 2310              	.LFB21:
1276:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1277:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
1278:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1279:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1280:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1281:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1282:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
1283:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1284:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1285:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1286:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1287:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------*/
1288:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find a contiguous free cluster block */
1289:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------*/
1290:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1291:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1292:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Filesystem object */
1293:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1294:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1295:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1296:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1297:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bm, bv;
1298:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1299:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val, scl, ctr;
1300:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1301:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1302:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1303:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1304:../Dave/Generated/FATFS/ff_Src/ff.c **** 	scl = val = clst; ctr = 0;
1305:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1306:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
1307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1308:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1309:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
1310:../Dave/Generated/FATFS/ff_Src/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1311:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1312:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1313:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1314:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (bv == 0) {	/* Is it a free cluster? */
1315:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1316:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
1317:../Dave/Generated/FATFS/ff_Src/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1318:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1319:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1320:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (bm != 0);
1321:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bm = 1;
1322:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (++i < SS(fs));
1323:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1324:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1325:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1326:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1327:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
1328:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Set/Clear a block of allocation bitmap */
1329:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
1330:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1331:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT change_bitmap (
1332:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Filesystem object */
1333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1334:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1336:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1337:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1338:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bm;
1339:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1340:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sect;
1341:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1342:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1343:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1344:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
1345:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
1346:../Dave/Generated/FATFS/ff_Src/ff.c **** 	bm = 1 << (clst % 8);					/* Bit mask in the byte */
1347:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1348:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1349:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1350:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
1351:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1352:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1353:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
1354:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1355:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1356:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bm = 1;
1357:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1358:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
1359:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1360:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1361:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1362:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1363:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1364:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill the first fragment of the FAT chain    */
1365:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1366:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1367:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT fill_first_frag (
1368:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj	/* Pointer to the corresponding object */
1369:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1370:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1371:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1372:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, n;
1373:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1374:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1375:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1376:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1377:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1378:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
1379:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1380:../Dave/Generated/FATFS/ff_Src/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1381:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1382:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
1383:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1384:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1385:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1386:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1387:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill the last fragment of the FAT chain     */
1388:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1389:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1390:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT fill_last_frag (
1391:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,	/* Pointer to the corresponding object */
1392:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD lcl,		/* Last cluster of the fragment */
1393:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD term		/* Value to set the last FAT entry */
1394:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1395:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1396:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1397:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1398:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1399:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1400:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1401:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
1402:../Dave/Generated/FATFS/ff_Src/ff.c **** 		obj->n_frag--;
1403:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1404:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
1405:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1406:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1407:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
1408:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1409:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1410:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1411:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1412:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1413:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1414:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1415:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1416:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1417:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1418:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1419:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
1420:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1421:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2311              	 .loc 1 1421 0
 2312              	 .cfi_startproc
 2313              	 
 2314              	 
 2315 0000 80B5     	 push {r7,lr}
 2316              	.LCFI121:
 2317              	 .cfi_def_cfa_offset 8
 2318              	 .cfi_offset 7,-8
 2319              	 .cfi_offset 14,-4
 2320 0002 88B0     	 sub sp,sp,#32
 2321              	.LCFI122:
 2322              	 .cfi_def_cfa_offset 40
 2323 0004 00AF     	 add r7,sp,#0
 2324              	.LCFI123:
 2325              	 .cfi_def_cfa_register 7
 2326 0006 F860     	 str r0,[r7,#12]
 2327 0008 B960     	 str r1,[r7,#8]
 2328 000a 7A60     	 str r2,[r7,#4]
1422:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 2329              	 .loc 1 1422 0
 2330 000c 0023     	 movs r3,#0
 2331 000e FB77     	 strb r3,[r7,#31]
1423:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD nxt;
1424:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 2332              	 .loc 1 1424 0
 2333 0010 FB68     	 ldr r3,[r7,#12]
 2334 0012 1B68     	 ldr r3,[r3]
 2335 0014 BB61     	 str r3,[r7,#24]
1425:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1426:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD scl = clst, ecl = clst;
1427:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1428:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
1429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD rt[2];
1430:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1431:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1432:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 2336              	 .loc 1 1432 0
 2337 0016 BB68     	 ldr r3,[r7,#8]
 2338 0018 012B     	 cmp r3,#1
 2339 001a 04D9     	 bls .L129
 2340              	 .loc 1 1432 0 is_stmt 0 discriminator 2
 2341 001c BB69     	 ldr r3,[r7,#24]
 2342 001e 9A69     	 ldr r2,[r3,#24]
 2343 0020 BB68     	 ldr r3,[r7,#8]
 2344 0022 9A42     	 cmp r2,r3
 2345 0024 01D8     	 bhi .L130
 2346              	.L129:
 2347              	 .loc 1 1432 0 discriminator 3
 2348 0026 0223     	 movs r3,#2
 2349 0028 4AE0     	 b .L131
 2350              	.L130:
1433:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1434:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1435:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 2351              	 .loc 1 1435 0 is_stmt 1
 2352 002a 7B68     	 ldr r3,[r7,#4]
 2353 002c 002B     	 cmp r3,#0
 2354 002e 0CD0     	 beq .L132
1436:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 2355              	 .loc 1 1436 0
 2356 0030 B869     	 ldr r0,[r7,#24]
 2357 0032 7968     	 ldr r1,[r7,#4]
 2358 0034 4FF0FF32 	 mov r2,#-1
 2359 0038 FFF7FEFF 	 bl put_fat
 2360 003c 0346     	 mov r3,r0
 2361 003e FB77     	 strb r3,[r7,#31]
1437:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
 2362              	 .loc 1 1437 0
 2363 0040 FB7F     	 ldrb r3,[r7,#31]
 2364 0042 002B     	 cmp r3,#0
 2365 0044 01D0     	 beq .L132
 2366              	 .loc 1 1437 0 is_stmt 0 discriminator 1
 2367 0046 FB7F     	 ldrb r3,[r7,#31]
 2368 0048 3AE0     	 b .L131
 2369              	.L132:
1438:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1439:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1440:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Remove the chain */
1441:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
1442:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
 2370              	 .loc 1 1442 0 is_stmt 1
 2371 004a F868     	 ldr r0,[r7,#12]
 2372 004c B968     	 ldr r1,[r7,#8]
 2373 004e FFF7FEFF 	 bl get_fat
 2374 0052 7861     	 str r0,[r7,#20]
1443:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 2375              	 .loc 1 1443 0
 2376 0054 7B69     	 ldr r3,[r7,#20]
 2377 0056 002B     	 cmp r3,#0
 2378 0058 00D1     	 bne .L133
 2379 005a 30E0     	 b .L134
 2380              	.L133:
1444:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2381              	 .loc 1 1444 0
 2382 005c 7B69     	 ldr r3,[r7,#20]
 2383 005e 012B     	 cmp r3,#1
 2384 0060 01D1     	 bne .L135
 2385              	 .loc 1 1444 0 is_stmt 0 discriminator 1
 2386 0062 0223     	 movs r3,#2
 2387 0064 2CE0     	 b .L131
 2388              	.L135:
1445:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2389              	 .loc 1 1445 0 is_stmt 1
 2390 0066 7B69     	 ldr r3,[r7,#20]
 2391 0068 B3F1FF3F 	 cmp r3,#-1
 2392 006c 01D1     	 bne .L136
 2393              	 .loc 1 1445 0 is_stmt 0 discriminator 1
 2394 006e 0123     	 movs r3,#1
 2395 0070 26E0     	 b .L131
 2396              	.L136:
1446:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1447:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 2397              	 .loc 1 1447 0 is_stmt 1
 2398 0072 B869     	 ldr r0,[r7,#24]
 2399 0074 B968     	 ldr r1,[r7,#8]
 2400 0076 0022     	 movs r2,#0
 2401 0078 FFF7FEFF 	 bl put_fat
 2402 007c 0346     	 mov r3,r0
 2403 007e FB77     	 strb r3,[r7,#31]
1448:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
 2404              	 .loc 1 1448 0
 2405 0080 FB7F     	 ldrb r3,[r7,#31]
 2406 0082 002B     	 cmp r3,#0
 2407 0084 01D0     	 beq .L137
 2408              	 .loc 1 1448 0 is_stmt 0 discriminator 1
 2409 0086 FB7F     	 ldrb r3,[r7,#31]
 2410 0088 1AE0     	 b .L131
 2411              	.L137:
1449:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1450:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 2412              	 .loc 1 1450 0 is_stmt 1
 2413 008a BB69     	 ldr r3,[r7,#24]
 2414 008c 1A69     	 ldr r2,[r3,#16]
 2415 008e BB69     	 ldr r3,[r7,#24]
 2416 0090 9B69     	 ldr r3,[r3,#24]
 2417 0092 023B     	 subs r3,r3,#2
 2418 0094 9A42     	 cmp r2,r3
 2419 0096 0BD2     	 bcs .L138
1451:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->free_clst++;
 2420              	 .loc 1 1451 0
 2421 0098 BB69     	 ldr r3,[r7,#24]
 2422 009a 1B69     	 ldr r3,[r3,#16]
 2423 009c 5A1C     	 adds r2,r3,#1
 2424 009e BB69     	 ldr r3,[r7,#24]
 2425 00a0 1A61     	 str r2,[r3,#16]
1452:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag |= 1;
 2426              	 .loc 1 1452 0
 2427 00a2 BB69     	 ldr r3,[r7,#24]
 2428 00a4 1B79     	 ldrb r3,[r3,#4]
 2429 00a6 43F00103 	 orr r3,r3,#1
 2430 00aa DAB2     	 uxtb r2,r3
 2431 00ac BB69     	 ldr r3,[r7,#24]
 2432 00ae 1A71     	 strb r2,[r3,#4]
 2433              	.L138:
1453:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1454:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1455:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1456:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ecl = nxt;
1457:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* End of contiguous cluster block */
1458:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1459:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1460:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1461:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
1462:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1463:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1464:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
1465:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rt[0] = clst2sect(fs, scl);					/* Start of data area freed */
1466:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area freed */
1467:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed
1468:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			scl = ecl = nxt;
1470:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1471:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1472:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clst = nxt;					/* Next cluster */
 2434              	 .loc 1 1472 0
 2435 00b0 7B69     	 ldr r3,[r7,#20]
 2436 00b2 BB60     	 str r3,[r7,#8]
1473:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 2437              	 .loc 1 1473 0
 2438 00b4 BB69     	 ldr r3,[r7,#24]
 2439 00b6 9A69     	 ldr r2,[r3,#24]
 2440 00b8 BB68     	 ldr r3,[r7,#8]
 2441 00ba 9A42     	 cmp r2,r3
 2442 00bc C5D8     	 bhi .L132
 2443              	.L134:
1474:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1475:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1476:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Some post processes for chain status */
1477:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1478:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pclst == 0) {	/* Has the entire chain been removed? */
1479:../Dave/Generated/FATFS/ff_Src/ff.c **** 			obj->stat = 0;		/* Change the chain status 'initial' */
1480:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1481:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1482:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1483:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (clst != pclst) {
1484:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nxt = get_fat(obj, clst);
1485:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt < 2) return FR_INT_ERR;
1486:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1487:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt != clst + 1) break;	/* Not contiguous? */
1488:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst++;
1489:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1490:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == pclst) {	/* Has the chain got contiguous again? */
1491:../Dave/Generated/FATFS/ff_Src/ff.c **** 					obj->stat = 2;		/* Change the chain status 'contiguous' */
1492:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1493:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
1494:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the 
1495:../Dave/Generated/FATFS/ff_Src/ff.c **** 					obj->stat = 2;	/* Change the chain status 'contiguous' */
1496:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1497:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1498:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1499:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1500:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1501:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 2444              	 .loc 1 1501 0
 2445 00be 0023     	 movs r3,#0
 2446              	.L131:
1502:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2447              	 .loc 1 1502 0
 2448 00c0 1846     	 mov r0,r3
 2449 00c2 2037     	 adds r7,r7,#32
 2450              	.LCFI124:
 2451              	 .cfi_def_cfa_offset 8
 2452 00c4 BD46     	 mov sp,r7
 2453              	.LCFI125:
 2454              	 .cfi_def_cfa_register 13
 2455              	 
 2456 00c6 80BD     	 pop {r7,pc}
 2457              	 .cfi_endproc
 2458              	.LFE21:
 2460              	 .section .text.create_chain,"ax",%progbits
 2461              	 .align 2
 2462              	 .thumb
 2463              	 .thumb_func
 2465              	create_chain:
 2466              	.LFB22:
1503:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1504:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1505:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1506:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1507:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1508:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1509:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1510:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1511:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New 
1512:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1513:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1514:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1515:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2467              	 .loc 1 1515 0
 2468              	 .cfi_startproc
 2469              	 
 2470              	 
 2471 0000 80B5     	 push {r7,lr}
 2472              	.LCFI126:
 2473              	 .cfi_def_cfa_offset 8
 2474              	 .cfi_offset 7,-8
 2475              	 .cfi_offset 14,-4
 2476 0002 88B0     	 sub sp,sp,#32
 2477              	.LCFI127:
 2478              	 .cfi_def_cfa_offset 40
 2479 0004 00AF     	 add r7,sp,#0
 2480              	.LCFI128:
 2481              	 .cfi_def_cfa_register 7
 2482 0006 7860     	 str r0,[r7,#4]
 2483 0008 3960     	 str r1,[r7]
1516:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cs, ncl, scl;
1517:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1518:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 2484              	 .loc 1 1518 0
 2485 000a 7B68     	 ldr r3,[r7,#4]
 2486 000c 1B68     	 ldr r3,[r3]
 2487 000e 3B61     	 str r3,[r7,#16]
1519:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1520:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1521:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0) {	/* Create a new chain */
 2488              	 .loc 1 1521 0
 2489 0010 3B68     	 ldr r3,[r7]
 2490 0012 002B     	 cmp r3,#0
 2491 0014 0DD1     	 bne .L140
1522:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
 2492              	 .loc 1 1522 0
 2493 0016 3B69     	 ldr r3,[r7,#16]
 2494 0018 DB68     	 ldr r3,[r3,#12]
 2495 001a BB61     	 str r3,[r7,#24]
1523:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2496              	 .loc 1 1523 0
 2497 001c BB69     	 ldr r3,[r7,#24]
 2498 001e 002B     	 cmp r3,#0
 2499 0020 04D0     	 beq .L141
 2500              	 .loc 1 1523 0 is_stmt 0 discriminator 2
 2501 0022 3B69     	 ldr r3,[r7,#16]
 2502 0024 9A69     	 ldr r2,[r3,#24]
 2503 0026 BB69     	 ldr r3,[r7,#24]
 2504 0028 9A42     	 cmp r2,r3
 2505 002a 1BD8     	 bhi .L143
 2506              	.L141:
 2507              	 .loc 1 1523 0 discriminator 3
 2508 002c 0123     	 movs r3,#1
 2509 002e BB61     	 str r3,[r7,#24]
 2510 0030 18E0     	 b .L143
 2511              	.L140:
1524:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1525:../Dave/Generated/FATFS/ff_Src/ff.c **** 	else {				/* Stretch a chain */
1526:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
 2512              	 .loc 1 1526 0 is_stmt 1
 2513 0032 7868     	 ldr r0,[r7,#4]
 2514 0034 3968     	 ldr r1,[r7]
 2515 0036 FFF7FEFF 	 bl get_fat
 2516 003a F860     	 str r0,[r7,#12]
1527:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs < 2) return 1;				/* Test for insanity */
 2517              	 .loc 1 1527 0
 2518 003c FB68     	 ldr r3,[r7,#12]
 2519 003e 012B     	 cmp r3,#1
 2520 0040 01D8     	 bhi .L144
 2521              	 .loc 1 1527 0 is_stmt 0 discriminator 1
 2522 0042 0123     	 movs r3,#1
 2523 0044 AAE0     	 b .L145
 2524              	.L144:
1528:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2525              	 .loc 1 1528 0 is_stmt 1
 2526 0046 FB68     	 ldr r3,[r7,#12]
 2527 0048 B3F1FF3F 	 cmp r3,#-1
 2528 004c 01D1     	 bne .L146
 2529              	 .loc 1 1528 0 is_stmt 0 discriminator 1
 2530 004e FB68     	 ldr r3,[r7,#12]
 2531 0050 A4E0     	 b .L145
 2532              	.L146:
1529:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2533              	 .loc 1 1529 0 is_stmt 1
 2534 0052 3B69     	 ldr r3,[r7,#16]
 2535 0054 9A69     	 ldr r2,[r3,#24]
 2536 0056 FB68     	 ldr r3,[r7,#12]
 2537 0058 9A42     	 cmp r2,r3
 2538 005a 01D9     	 bls .L147
 2539              	 .loc 1 1529 0 is_stmt 0 discriminator 1
 2540 005c FB68     	 ldr r3,[r7,#12]
 2541 005e 9DE0     	 b .L145
 2542              	.L147:
1530:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = clst;							/* Cluster to start to find */
 2543              	 .loc 1 1530 0 is_stmt 1
 2544 0060 3B68     	 ldr r3,[r7]
 2545 0062 BB61     	 str r3,[r7,#24]
 2546              	.L143:
1531:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1532:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->free_clst == 0) return 0;		/* No free cluster */
 2547              	 .loc 1 1532 0
 2548 0064 3B69     	 ldr r3,[r7,#16]
 2549 0066 1B69     	 ldr r3,[r3,#16]
 2550 0068 002B     	 cmp r3,#0
 2551 006a 01D1     	 bne .L148
 2552              	 .loc 1 1532 0 is_stmt 0 discriminator 1
 2553 006c 0023     	 movs r3,#0
 2554 006e 95E0     	 b .L145
 2555              	.L148:
1533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1534:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1535:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1536:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1537:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1538:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1539:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_INT_ERR) return 1;
1540:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1541:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1542:../Dave/Generated/FATFS/ff_Src/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1543:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {									/* It is a stretched chain */
1544:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1545:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1546:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1547:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1548:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1549:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1550:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1551:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1552:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {				/* New fragment */
1553:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1554:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1555:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1556:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1557:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1558:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
1559:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1560:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
1561:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = 0;
 2556              	 .loc 1 1561 0 is_stmt 1
 2557 0070 0023     	 movs r3,#0
 2558 0072 FB61     	 str r3,[r7,#28]
1562:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == clst) {						/* Stretching an existing chain? */
 2559              	 .loc 1 1562 0
 2560 0074 BA69     	 ldr r2,[r7,#24]
 2561 0076 3B68     	 ldr r3,[r7]
 2562 0078 9A42     	 cmp r2,r3
 2563 007a 29D1     	 bne .L149
1563:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = scl + 1;						/* Test if next cluster is free */
 2564              	 .loc 1 1563 0
 2565 007c BB69     	 ldr r3,[r7,#24]
 2566 007e 0133     	 adds r3,r3,#1
 2567 0080 FB61     	 str r3,[r7,#28]
1564:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl >= fs->n_fatent) ncl = 2;
 2568              	 .loc 1 1564 0
 2569 0082 3B69     	 ldr r3,[r7,#16]
 2570 0084 9A69     	 ldr r2,[r3,#24]
 2571 0086 FB69     	 ldr r3,[r7,#28]
 2572 0088 9A42     	 cmp r2,r3
 2573 008a 01D8     	 bhi .L150
 2574              	 .loc 1 1564 0 is_stmt 0 discriminator 1
 2575 008c 0223     	 movs r3,#2
 2576 008e FB61     	 str r3,[r7,#28]
 2577              	.L150:
1565:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2578              	 .loc 1 1565 0 is_stmt 1
 2579 0090 7868     	 ldr r0,[r7,#4]
 2580 0092 F969     	 ldr r1,[r7,#28]
 2581 0094 FFF7FEFF 	 bl get_fat
 2582 0098 F860     	 str r0,[r7,#12]
1566:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2583              	 .loc 1 1566 0
 2584 009a FB68     	 ldr r3,[r7,#12]
 2585 009c 012B     	 cmp r3,#1
 2586 009e 03D0     	 beq .L151
 2587              	 .loc 1 1566 0 is_stmt 0 discriminator 2
 2588 00a0 FB68     	 ldr r3,[r7,#12]
 2589 00a2 B3F1FF3F 	 cmp r3,#-1
 2590 00a6 01D1     	 bne .L152
 2591              	.L151:
 2592              	 .loc 1 1566 0 discriminator 3
 2593 00a8 FB68     	 ldr r3,[r7,#12]
 2594 00aa 77E0     	 b .L145
 2595              	.L152:
1567:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cs != 0) {						/* Not free? */
 2596              	 .loc 1 1567 0 is_stmt 1
 2597 00ac FB68     	 ldr r3,[r7,#12]
 2598 00ae 002B     	 cmp r3,#0
 2599 00b0 0ED0     	 beq .L149
1568:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 2600              	 .loc 1 1568 0
 2601 00b2 3B69     	 ldr r3,[r7,#16]
 2602 00b4 DB68     	 ldr r3,[r3,#12]
 2603 00b6 FB60     	 str r3,[r7,#12]
1569:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 2604              	 .loc 1 1569 0
 2605 00b8 FB68     	 ldr r3,[r7,#12]
 2606 00ba 012B     	 cmp r3,#1
 2607 00bc 06D9     	 bls .L153
 2608              	 .loc 1 1569 0 is_stmt 0 discriminator 1
 2609 00be 3B69     	 ldr r3,[r7,#16]
 2610 00c0 9A69     	 ldr r2,[r3,#24]
 2611 00c2 FB68     	 ldr r3,[r7,#12]
 2612 00c4 9A42     	 cmp r2,r3
 2613 00c6 01D9     	 bls .L153
 2614              	 .loc 1 1569 0 discriminator 2
 2615 00c8 FB68     	 ldr r3,[r7,#12]
 2616 00ca BB61     	 str r3,[r7,#24]
 2617              	.L153:
1570:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ncl = 0;
 2618              	 .loc 1 1570 0 is_stmt 1
 2619 00cc 0023     	 movs r3,#0
 2620 00ce FB61     	 str r3,[r7,#28]
 2621              	.L149:
1571:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1572:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1573:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 2622              	 .loc 1 1573 0
 2623 00d0 FB69     	 ldr r3,[r7,#28]
 2624 00d2 002B     	 cmp r3,#0
 2625 00d4 2AD1     	 bne .L154
1574:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = scl;	/* Start cluster */
 2626              	 .loc 1 1574 0
 2627 00d6 BB69     	 ldr r3,[r7,#24]
 2628 00d8 FB61     	 str r3,[r7,#28]
 2629              	.L160:
1575:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (;;) {
1576:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ncl++;							/* Next cluster */
 2630              	 .loc 1 1576 0
 2631 00da FB69     	 ldr r3,[r7,#28]
 2632 00dc 0133     	 adds r3,r3,#1
 2633 00de FB61     	 str r3,[r7,#28]
1577:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2634              	 .loc 1 1577 0
 2635 00e0 3B69     	 ldr r3,[r7,#16]
 2636 00e2 9A69     	 ldr r2,[r3,#24]
 2637 00e4 FB69     	 ldr r3,[r7,#28]
 2638 00e6 9A42     	 cmp r2,r3
 2639 00e8 07D8     	 bhi .L155
1578:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ncl = 2;
 2640              	 .loc 1 1578 0
 2641 00ea 0223     	 movs r3,#2
 2642 00ec FB61     	 str r3,[r7,#28]
1579:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ncl > scl) return 0;	/* No free cluster found? */
 2643              	 .loc 1 1579 0
 2644 00ee FA69     	 ldr r2,[r7,#28]
 2645 00f0 BB69     	 ldr r3,[r7,#24]
 2646 00f2 9A42     	 cmp r2,r3
 2647 00f4 01D9     	 bls .L155
 2648              	 .loc 1 1579 0 is_stmt 0 discriminator 1
 2649 00f6 0023     	 movs r3,#0
 2650 00f8 50E0     	 b .L145
 2651              	.L155:
1580:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1581:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cs = get_fat(obj, ncl);			/* Get the cluster status */
 2652              	 .loc 1 1581 0 is_stmt 1
 2653 00fa 7868     	 ldr r0,[r7,#4]
 2654 00fc F969     	 ldr r1,[r7,#28]
 2655 00fe FFF7FEFF 	 bl get_fat
 2656 0102 F860     	 str r0,[r7,#12]
1582:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs == 0) break;				/* Found a free cluster? */
 2657              	 .loc 1 1582 0
 2658 0104 FB68     	 ldr r3,[r7,#12]
 2659 0106 002B     	 cmp r3,#0
 2660 0108 00D1     	 bne .L156
 2661 010a 0FE0     	 b .L154
 2662              	.L156:
1583:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2663              	 .loc 1 1583 0
 2664 010c FB68     	 ldr r3,[r7,#12]
 2665 010e 012B     	 cmp r3,#1
 2666 0110 03D0     	 beq .L157
 2667              	 .loc 1 1583 0 is_stmt 0 discriminator 2
 2668 0112 FB68     	 ldr r3,[r7,#12]
 2669 0114 B3F1FF3F 	 cmp r3,#-1
 2670 0118 01D1     	 bne .L158
 2671              	.L157:
 2672              	 .loc 1 1583 0 discriminator 3
 2673 011a FB68     	 ldr r3,[r7,#12]
 2674 011c 3EE0     	 b .L145
 2675              	.L158:
1584:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2676              	 .loc 1 1584 0 is_stmt 1
 2677 011e FA69     	 ldr r2,[r7,#28]
 2678 0120 BB69     	 ldr r3,[r7,#24]
 2679 0122 9A42     	 cmp r2,r3
 2680 0124 01D1     	 bne .L159
 2681              	 .loc 1 1584 0 is_stmt 0 discriminator 1
 2682 0126 0023     	 movs r3,#0
 2683 0128 38E0     	 b .L145
 2684              	.L159:
1585:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
 2685              	 .loc 1 1585 0 is_stmt 1
 2686 012a D6E7     	 b .L160
 2687              	.L154:
1586:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1587:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 2688              	 .loc 1 1587 0
 2689 012c 3869     	 ldr r0,[r7,#16]
 2690 012e F969     	 ldr r1,[r7,#28]
 2691 0130 4FF0FF32 	 mov r2,#-1
 2692 0134 FFF7FEFF 	 bl put_fat
 2693 0138 0346     	 mov r3,r0
 2694 013a FB75     	 strb r3,[r7,#23]
1588:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && clst != 0) {
 2695              	 .loc 1 1588 0
 2696 013c FB7D     	 ldrb r3,[r7,#23]
 2697 013e 002B     	 cmp r3,#0
 2698 0140 09D1     	 bne .L161
 2699              	 .loc 1 1588 0 is_stmt 0 discriminator 1
 2700 0142 3B68     	 ldr r3,[r7]
 2701 0144 002B     	 cmp r3,#0
 2702 0146 06D0     	 beq .L161
1589:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 2703              	 .loc 1 1589 0 is_stmt 1
 2704 0148 3869     	 ldr r0,[r7,#16]
 2705 014a 3968     	 ldr r1,[r7]
 2706 014c FA69     	 ldr r2,[r7,#28]
 2707 014e FFF7FEFF 	 bl put_fat
 2708 0152 0346     	 mov r3,r0
 2709 0154 FB75     	 strb r3,[r7,#23]
 2710              	.L161:
1590:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1591:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1592:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1593:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 2711              	 .loc 1 1593 0
 2712 0156 FB7D     	 ldrb r3,[r7,#23]
 2713 0158 002B     	 cmp r3,#0
 2714 015a 16D1     	 bne .L162
1594:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = ncl;
 2715              	 .loc 1 1594 0
 2716 015c 3B69     	 ldr r3,[r7,#16]
 2717 015e FA69     	 ldr r2,[r7,#28]
 2718 0160 DA60     	 str r2,[r3,#12]
1595:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 2719              	 .loc 1 1595 0
 2720 0162 3B69     	 ldr r3,[r7,#16]
 2721 0164 1A69     	 ldr r2,[r3,#16]
 2722 0166 3B69     	 ldr r3,[r7,#16]
 2723 0168 9B69     	 ldr r3,[r3,#24]
 2724 016a 023B     	 subs r3,r3,#2
 2725 016c 9A42     	 cmp r2,r3
 2726 016e 04D8     	 bhi .L163
 2727              	 .loc 1 1595 0 is_stmt 0 discriminator 1
 2728 0170 3B69     	 ldr r3,[r7,#16]
 2729 0172 1B69     	 ldr r3,[r3,#16]
 2730 0174 5A1E     	 subs r2,r3,#1
 2731 0176 3B69     	 ldr r3,[r7,#16]
 2732 0178 1A61     	 str r2,[r3,#16]
 2733              	.L163:
1596:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsi_flag |= 1;
 2734              	 .loc 1 1596 0 is_stmt 1
 2735 017a 3B69     	 ldr r3,[r7,#16]
 2736 017c 1B79     	 ldrb r3,[r3,#4]
 2737 017e 43F00103 	 orr r3,r3,#1
 2738 0182 DAB2     	 uxtb r2,r3
 2739 0184 3B69     	 ldr r3,[r7,#16]
 2740 0186 1A71     	 strb r2,[r3,#4]
 2741 0188 07E0     	 b .L164
 2742              	.L162:
1597:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1598:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 2743              	 .loc 1 1598 0
 2744 018a FB7D     	 ldrb r3,[r7,#23]
 2745 018c 012B     	 cmp r3,#1
 2746 018e 02D1     	 bne .L165
 2747              	 .loc 1 1598 0 is_stmt 0 discriminator 1
 2748 0190 4FF0FF33 	 mov r3,#-1
 2749 0194 00E0     	 b .L166
 2750              	.L165:
 2751              	 .loc 1 1598 0 discriminator 2
 2752 0196 0123     	 movs r3,#1
 2753              	.L166:
 2754              	 .loc 1 1598 0 discriminator 4
 2755 0198 FB61     	 str r3,[r7,#28]
 2756              	.L164:
1599:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1600:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1601:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return ncl;		/* Return new cluster number or error status */
 2757              	 .loc 1 1601 0 is_stmt 1
 2758 019a FB69     	 ldr r3,[r7,#28]
 2759              	.L145:
1602:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2760              	 .loc 1 1602 0
 2761 019c 1846     	 mov r0,r3
 2762 019e 2037     	 adds r7,r7,#32
 2763              	.LCFI129:
 2764              	 .cfi_def_cfa_offset 8
 2765 01a0 BD46     	 mov sp,r7
 2766              	.LCFI130:
 2767              	 .cfi_def_cfa_register 13
 2768              	 
 2769 01a2 80BD     	 pop {r7,pc}
 2770              	 .cfi_endproc
 2771              	.LFE22:
 2773              	 .section .text.dir_clear,"ax",%progbits
 2774              	 .align 2
 2775              	 .thumb
 2776              	 .thumb_func
 2778              	dir_clear:
 2779              	.LFB23:
1603:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1604:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
1605:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1606:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1607:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1608:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1609:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
1610:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1611:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1612:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1613:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1614:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1615:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1616:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1617:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1618:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1619:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, ncl, *tbl;
1620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = fp->obj.fs;
1621:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1622:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1623:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1624:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1625:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1626:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1627:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1628:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1629:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1630:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1631:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1632:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1633:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1634:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_FASTSEEK */
1635:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1636:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1637:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1638:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1639:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1640:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Fill a cluster with zeros                        */
1641:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1642:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1643:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1644:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
1645:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs,		/* Filesystem object */
1646:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Directory table to clear */
1647:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1648:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2780              	 .loc 1 1648 0
 2781              	 .cfi_startproc
 2782              	 
 2783              	 
 2784 0000 80B5     	 push {r7,lr}
 2785              	.LCFI131:
 2786              	 .cfi_def_cfa_offset 8
 2787              	 .cfi_offset 7,-8
 2788              	 .cfi_offset 14,-4
 2789 0002 86B0     	 sub sp,sp,#24
 2790              	.LCFI132:
 2791              	 .cfi_def_cfa_offset 32
 2792 0004 00AF     	 add r7,sp,#0
 2793              	.LCFI133:
 2794              	 .cfi_def_cfa_register 7
 2795 0006 7860     	 str r0,[r7,#4]
 2796 0008 3960     	 str r1,[r7]
1649:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sect;
1650:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n, szb;
1651:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *ibuf;
1652:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1653:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1654:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 2797              	 .loc 1 1654 0
 2798 000a 7868     	 ldr r0,[r7,#4]
 2799 000c FFF7FEFF 	 bl sync_window
 2800 0010 0346     	 mov r3,r0
 2801 0012 002B     	 cmp r3,#0
 2802 0014 01D0     	 beq .L168
 2803              	 .loc 1 1654 0 is_stmt 0 discriminator 1
 2804 0016 0123     	 movs r3,#1
 2805 0018 38E0     	 b .L169
 2806              	.L168:
1655:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 2807              	 .loc 1 1655 0 is_stmt 1
 2808 001a 7868     	 ldr r0,[r7,#4]
 2809 001c 3968     	 ldr r1,[r7]
 2810 001e FFF7FEFF 	 bl clst2sect
 2811 0022 3861     	 str r0,[r7,#16]
1656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->winsect = sect;				/* Set window to top of the cluster */
 2812              	 .loc 1 1656 0
 2813 0024 7B68     	 ldr r3,[r7,#4]
 2814 0026 3A69     	 ldr r2,[r7,#16]
 2815 0028 1A63     	 str r2,[r3,#48]
1657:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 2816              	 .loc 1 1657 0
 2817 002a 7B68     	 ldr r3,[r7,#4]
 2818 002c 3433     	 adds r3,r3,#52
 2819 002e 1846     	 mov r0,r3
 2820 0030 0021     	 movs r1,#0
 2821 0032 4FF40072 	 mov r2,#512
 2822 0036 FFF7FEFF 	 bl mem_set
1658:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
1659:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Allocate a temporary buffer */
1660:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; 
1661:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb > SS(fs)) {		/* Buffer allocated? */
1662:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(ibuf, 0, szb);
1663:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb /= SS(fs);		/* Bytes -> Sectors */
1664:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1665:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ff_memfree(ibuf);
1666:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
1667:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1668:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
1669:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 2823              	 .loc 1 1669 0
 2824 003a 7B68     	 ldr r3,[r7,#4]
 2825 003c 3433     	 adds r3,r3,#52
 2826 003e FB60     	 str r3,[r7,#12]
 2827 0040 0123     	 movs r3,#1
 2828 0042 BB60     	 str r3,[r7,#8]
1670:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
 2829              	 .loc 1 1670 0
 2830 0044 0023     	 movs r3,#0
 2831 0046 7B61     	 str r3,[r7,#20]
 2832 0048 03E0     	 b .L170
 2833              	.L172:
 2834              	 .loc 1 1670 0 is_stmt 0 discriminator 4
 2835 004a 7A69     	 ldr r2,[r7,#20]
 2836 004c BB68     	 ldr r3,[r7,#8]
 2837 004e 1344     	 add r3,r3,r2
 2838 0050 7B61     	 str r3,[r7,#20]
 2839              	.L170:
 2840              	 .loc 1 1670 0 discriminator 1
 2841 0052 7B68     	 ldr r3,[r7,#4]
 2842 0054 5B89     	 ldrh r3,[r3,#10]
 2843 0056 1A46     	 mov r2,r3
 2844 0058 7B69     	 ldr r3,[r7,#20]
 2845 005a 9A42     	 cmp r2,r3
 2846 005c 0DD9     	 bls .L171
 2847              	 .loc 1 1670 0 discriminator 3
 2848 005e 7B68     	 ldr r3,[r7,#4]
 2849 0060 5978     	 ldrb r1,[r3,#1]
 2850 0062 3A69     	 ldr r2,[r7,#16]
 2851 0064 7B69     	 ldr r3,[r7,#20]
 2852 0066 1344     	 add r3,r3,r2
 2853 0068 0846     	 mov r0,r1
 2854 006a F968     	 ldr r1,[r7,#12]
 2855 006c 1A46     	 mov r2,r3
 2856 006e BB68     	 ldr r3,[r7,#8]
 2857 0070 FFF7FEFF 	 bl disk_write
 2858 0074 0346     	 mov r3,r0
 2859 0076 002B     	 cmp r3,#0
 2860 0078 E7D0     	 beq .L172
 2861              	.L171:
1671:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1672:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 2862              	 .loc 1 1672 0 is_stmt 1
 2863 007a 7B68     	 ldr r3,[r7,#4]
 2864 007c 5B89     	 ldrh r3,[r3,#10]
 2865 007e 1A46     	 mov r2,r3
 2866 0080 7B69     	 ldr r3,[r7,#20]
 2867 0082 9A42     	 cmp r2,r3
 2868 0084 14BF     	 ite ne
 2869 0086 0123     	 movne r3,#1
 2870 0088 0023     	 moveq r3,#0
 2871 008a DBB2     	 uxtb r3,r3
 2872              	.L169:
1673:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2873              	 .loc 1 1673 0
 2874 008c 1846     	 mov r0,r3
 2875 008e 1837     	 adds r7,r7,#24
 2876              	.LCFI134:
 2877              	 .cfi_def_cfa_offset 8
 2878 0090 BD46     	 mov sp,r7
 2879              	.LCFI135:
 2880              	 .cfi_def_cfa_register 13
 2881              	 
 2882 0092 80BD     	 pop {r7,pc}
 2883              	 .cfi_endproc
 2884              	.LFE23:
 2886              	 .section .text.dir_sdi,"ax",%progbits
 2887              	 .align 2
 2888              	 .thumb
 2889              	 .thumb_func
 2891              	dir_sdi:
 2892              	.LFB24:
1674:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1675:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1676:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1677:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1678:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1679:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1680:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Set directory index                              */
1681:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1682:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1683:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1684:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1685:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs		/* Offset of directory table */
1686:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1687:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2893              	 .loc 1 1687 0
 2894              	 .cfi_startproc
 2895              	 
 2896              	 
 2897 0000 80B5     	 push {r7,lr}
 2898              	.LCFI136:
 2899              	 .cfi_def_cfa_offset 8
 2900              	 .cfi_offset 7,-8
 2901              	 .cfi_offset 14,-4
 2902 0002 86B0     	 sub sp,sp,#24
 2903              	.LCFI137:
 2904              	 .cfi_def_cfa_offset 32
 2905 0004 00AF     	 add r7,sp,#0
 2906              	.LCFI138:
 2907              	 .cfi_def_cfa_register 7
 2908 0006 7860     	 str r0,[r7,#4]
 2909 0008 3960     	 str r1,[r7]
1688:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD csz, clst;
1689:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 2910              	 .loc 1 1689 0
 2911 000a 7B68     	 ldr r3,[r7,#4]
 2912 000c 1B68     	 ldr r3,[r3]
 2913 000e 3B61     	 str r3,[r7,#16]
1690:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1691:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1692:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIR
 2914              	 .loc 1 1692 0
 2915 0010 3B68     	 ldr r3,[r7]
 2916 0012 B3F5001F 	 cmp r3,#2097152
 2917 0016 04D2     	 bcs .L174
 2918              	 .loc 1 1692 0 is_stmt 0 discriminator 1
 2919 0018 3B68     	 ldr r3,[r7]
 2920 001a 03F01F03 	 and r3,r3,#31
 2921 001e 002B     	 cmp r3,#0
 2922 0020 01D0     	 beq .L175
 2923              	.L174:
1693:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_INT_ERR;
 2924              	 .loc 1 1693 0 is_stmt 1
 2925 0022 0223     	 movs r3,#2
 2926 0024 63E0     	 b .L176
 2927              	.L175:
1694:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1695:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
 2928              	 .loc 1 1695 0
 2929 0026 7B68     	 ldr r3,[r7,#4]
 2930 0028 3A68     	 ldr r2,[r7]
 2931 002a 5A61     	 str r2,[r3,#20]
1696:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2932              	 .loc 1 1696 0
 2933 002c 7B68     	 ldr r3,[r7,#4]
 2934 002e 9B68     	 ldr r3,[r3,#8]
 2935 0030 7B61     	 str r3,[r7,#20]
1697:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2936              	 .loc 1 1697 0
 2937 0032 7B69     	 ldr r3,[r7,#20]
 2938 0034 002B     	 cmp r3,#0
 2939 0036 06D1     	 bne .L177
 2940              	 .loc 1 1697 0 is_stmt 0 discriminator 1
 2941 0038 3B69     	 ldr r3,[r7,#16]
 2942 003a 1B78     	 ldrb r3,[r3]
 2943 003c 022B     	 cmp r3,#2
 2944 003e 02D9     	 bls .L177
1698:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clst = fs->dirbase;
 2945              	 .loc 1 1698 0 is_stmt 1
 2946 0040 3B69     	 ldr r3,[r7,#16]
 2947 0042 9B6A     	 ldr r3,[r3,#40]
 2948 0044 7B61     	 str r3,[r7,#20]
 2949              	.L177:
1699:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1700:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1701:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1702:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 2950              	 .loc 1 1702 0
 2951 0046 7B69     	 ldr r3,[r7,#20]
 2952 0048 002B     	 cmp r3,#0
 2953 004a 0CD1     	 bne .L178
1703:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 2954              	 .loc 1 1703 0
 2955 004c 3B68     	 ldr r3,[r7]
 2956 004e 5B09     	 lsrs r3,r3,#5
 2957 0050 3A69     	 ldr r2,[r7,#16]
 2958 0052 1289     	 ldrh r2,[r2,#8]
 2959 0054 9342     	 cmp r3,r2
 2960 0056 01D3     	 bcc .L179
 2961              	 .loc 1 1703 0 is_stmt 0 discriminator 1
 2962 0058 0223     	 movs r3,#2
 2963 005a 48E0     	 b .L176
 2964              	.L179:
1704:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect = fs->dirbase;
 2965              	 .loc 1 1704 0 is_stmt 1
 2966 005c 3B69     	 ldr r3,[r7,#16]
 2967 005e 9A6A     	 ldr r2,[r3,#40]
 2968 0060 7B68     	 ldr r3,[r7,#4]
 2969 0062 DA61     	 str r2,[r3,#28]
 2970 0064 29E0     	 b .L180
 2971              	.L178:
1705:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1706:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
1707:../Dave/Generated/FATFS/ff_Src/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 2972              	 .loc 1 1707 0
 2973 0066 3B69     	 ldr r3,[r7,#16]
 2974 0068 5B89     	 ldrh r3,[r3,#10]
 2975 006a 5B02     	 lsls r3,r3,#9
 2976 006c FB60     	 str r3,[r7,#12]
1708:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2977              	 .loc 1 1708 0
 2978 006e 19E0     	 b .L181
 2979              	.L185:
1709:../Dave/Generated/FATFS/ff_Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2980              	 .loc 1 1709 0
 2981 0070 7B68     	 ldr r3,[r7,#4]
 2982 0072 1846     	 mov r0,r3
 2983 0074 7969     	 ldr r1,[r7,#20]
 2984 0076 FFF7FEFF 	 bl get_fat
 2985 007a 7861     	 str r0,[r7,#20]
1710:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2986              	 .loc 1 1710 0
 2987 007c 7B69     	 ldr r3,[r7,#20]
 2988 007e B3F1FF3F 	 cmp r3,#-1
 2989 0082 01D1     	 bne .L182
 2990              	 .loc 1 1710 0 is_stmt 0 discriminator 1
 2991 0084 0123     	 movs r3,#1
 2992 0086 32E0     	 b .L176
 2993              	.L182:
1711:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2994              	 .loc 1 1711 0 is_stmt 1
 2995 0088 7B69     	 ldr r3,[r7,#20]
 2996 008a 012B     	 cmp r3,#1
 2997 008c 04D9     	 bls .L183
 2998              	 .loc 1 1711 0 is_stmt 0 discriminator 2
 2999 008e 3B69     	 ldr r3,[r7,#16]
 3000 0090 9A69     	 ldr r2,[r3,#24]
 3001 0092 7B69     	 ldr r3,[r7,#20]
 3002 0094 9A42     	 cmp r2,r3
 3003 0096 01D8     	 bhi .L184
 3004              	.L183:
 3005              	 .loc 1 1711 0 discriminator 3
 3006 0098 0223     	 movs r3,#2
 3007 009a 28E0     	 b .L176
 3008              	.L184:
1712:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs -= csz;
 3009              	 .loc 1 1712 0 is_stmt 1
 3010 009c 3A68     	 ldr r2,[r7]
 3011 009e FB68     	 ldr r3,[r7,#12]
 3012 00a0 D31A     	 subs r3,r2,r3
 3013 00a2 3B60     	 str r3,[r7]
 3014              	.L181:
1708:../Dave/Generated/FATFS/ff_Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 3015              	 .loc 1 1708 0
 3016 00a4 3A68     	 ldr r2,[r7]
 3017 00a6 FB68     	 ldr r3,[r7,#12]
 3018 00a8 9A42     	 cmp r2,r3
 3019 00aa E1D2     	 bcs .L185
1713:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1714:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect = clst2sect(fs, clst);
 3020              	 .loc 1 1714 0
 3021 00ac 3869     	 ldr r0,[r7,#16]
 3022 00ae 7969     	 ldr r1,[r7,#20]
 3023 00b0 FFF7FEFF 	 bl clst2sect
 3024 00b4 0246     	 mov r2,r0
 3025 00b6 7B68     	 ldr r3,[r7,#4]
 3026 00b8 DA61     	 str r2,[r3,#28]
 3027              	.L180:
1715:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->clust = clst;					/* Current cluster# */
 3028              	 .loc 1 1716 0
 3029 00ba 7B68     	 ldr r3,[r7,#4]
 3030 00bc 7A69     	 ldr r2,[r7,#20]
 3031 00be 9A61     	 str r2,[r3,#24]
1717:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return FR_INT_ERR;
 3032              	 .loc 1 1717 0
 3033 00c0 7B68     	 ldr r3,[r7,#4]
 3034 00c2 DB69     	 ldr r3,[r3,#28]
 3035 00c4 002B     	 cmp r3,#0
 3036 00c6 01D1     	 bne .L186
 3037              	 .loc 1 1717 0 is_stmt 0 discriminator 1
 3038 00c8 0223     	 movs r3,#2
 3039 00ca 10E0     	 b .L176
 3040              	.L186:
1718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 3041              	 .loc 1 1718 0 is_stmt 1
 3042 00cc 7B68     	 ldr r3,[r7,#4]
 3043 00ce DA69     	 ldr r2,[r3,#28]
 3044 00d0 3B68     	 ldr r3,[r7]
 3045 00d2 5B0A     	 lsrs r3,r3,#9
 3046 00d4 1A44     	 add r2,r2,r3
 3047 00d6 7B68     	 ldr r3,[r7,#4]
 3048 00d8 DA61     	 str r2,[r3,#28]
1719:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 3049              	 .loc 1 1719 0
 3050 00da 3B68     	 ldr r3,[r7]
 3051 00dc C3F30803 	 ubfx r3,r3,#0,#9
 3052 00e0 3033     	 adds r3,r3,#48
 3053 00e2 3A69     	 ldr r2,[r7,#16]
 3054 00e4 1344     	 add r3,r3,r2
 3055 00e6 1A1D     	 adds r2,r3,#4
 3056 00e8 7B68     	 ldr r3,[r7,#4]
 3057 00ea 1A62     	 str r2,[r3,#32]
1720:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1721:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 3058              	 .loc 1 1721 0
 3059 00ec 0023     	 movs r3,#0
 3060              	.L176:
1722:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3061              	 .loc 1 1722 0
 3062 00ee 1846     	 mov r0,r3
 3063 00f0 1837     	 adds r7,r7,#24
 3064              	.LCFI139:
 3065              	 .cfi_def_cfa_offset 8
 3066 00f2 BD46     	 mov sp,r7
 3067              	.LCFI140:
 3068              	 .cfi_def_cfa_register 13
 3069              	 
 3070 00f4 80BD     	 pop {r7,pc}
 3071              	 .cfi_endproc
 3072              	.LFE24:
 3074 00f6 00BF     	 .section .text.dir_next,"ax",%progbits
 3075              	 .align 2
 3076              	 .thumb
 3077              	 .thumb_func
 3079              	dir_next:
 3080              	.LFB25:
1723:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1724:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1725:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1726:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1727:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1728:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Move directory table index next                  */
1729:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1730:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1731:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stret
1732:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1733:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
1734:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1735:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3081              	 .loc 1 1735 0
 3082              	 .cfi_startproc
 3083              	 
 3084              	 
 3085 0000 80B5     	 push {r7,lr}
 3086              	.LCFI141:
 3087              	 .cfi_def_cfa_offset 8
 3088              	 .cfi_offset 7,-8
 3089              	 .cfi_offset 14,-4
 3090 0002 86B0     	 sub sp,sp,#24
 3091              	.LCFI142:
 3092              	 .cfi_def_cfa_offset 32
 3093 0004 00AF     	 add r7,sp,#0
 3094              	.LCFI143:
 3095              	 .cfi_def_cfa_register 7
 3096 0006 7860     	 str r0,[r7,#4]
 3097 0008 3960     	 str r1,[r7]
1736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs, clst;
1737:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3098              	 .loc 1 1737 0
 3099 000a 7B68     	 ldr r3,[r7,#4]
 3100 000c 1B68     	 ldr r3,[r3]
 3101 000e 3B61     	 str r3,[r7,#16]
1738:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1739:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1740:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
 3102              	 .loc 1 1740 0
 3103 0010 7B68     	 ldr r3,[r7,#4]
 3104 0012 5B69     	 ldr r3,[r3,#20]
 3105 0014 2033     	 adds r3,r3,#32
 3106 0016 FB60     	 str r3,[r7,#12]
1741:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 3107              	 .loc 1 1741 0
 3108 0018 FB68     	 ldr r3,[r7,#12]
 3109 001a B3F5001F 	 cmp r3,#2097152
 3110 001e 02D3     	 bcc .L188
 3111              	 .loc 1 1741 0 is_stmt 0 discriminator 1
 3112 0020 7B68     	 ldr r3,[r7,#4]
 3113 0022 0022     	 movs r2,#0
 3114 0024 DA61     	 str r2,[r3,#28]
 3115              	.L188:
1742:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3116              	 .loc 1 1742 0 is_stmt 1
 3117 0026 7B68     	 ldr r3,[r7,#4]
 3118 0028 DB69     	 ldr r3,[r3,#28]
 3119 002a 002B     	 cmp r3,#0
 3120 002c 01D1     	 bne .L189
 3121              	 .loc 1 1742 0 is_stmt 0 discriminator 1
 3122 002e 0423     	 movs r3,#4
 3123 0030 78E0     	 b .L190
 3124              	.L189:
1743:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1744:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 3125              	 .loc 1 1744 0 is_stmt 1
 3126 0032 FB68     	 ldr r3,[r7,#12]
 3127 0034 C3F30803 	 ubfx r3,r3,#0,#9
 3128 0038 002B     	 cmp r3,#0
 3129 003a 66D1     	 bne .L191
1745:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect++;				/* Next sector */
 3130              	 .loc 1 1745 0
 3131 003c 7B68     	 ldr r3,[r7,#4]
 3132 003e DB69     	 ldr r3,[r3,#28]
 3133 0040 5A1C     	 adds r2,r3,#1
 3134 0042 7B68     	 ldr r3,[r7,#4]
 3135 0044 DA61     	 str r2,[r3,#28]
1746:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1747:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->clust == 0) {	/* Static table */
 3136              	 .loc 1 1747 0
 3137 0046 7B68     	 ldr r3,[r7,#4]
 3138 0048 9B69     	 ldr r3,[r3,#24]
 3139 004a 002B     	 cmp r3,#0
 3140 004c 0AD1     	 bne .L192
1748:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3141              	 .loc 1 1748 0
 3142 004e FB68     	 ldr r3,[r7,#12]
 3143 0050 5B09     	 lsrs r3,r3,#5
 3144 0052 3A69     	 ldr r2,[r7,#16]
 3145 0054 1289     	 ldrh r2,[r2,#8]
 3146 0056 9342     	 cmp r3,r2
 3147 0058 57D3     	 bcc .L191
1749:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3148              	 .loc 1 1749 0
 3149 005a 7B68     	 ldr r3,[r7,#4]
 3150 005c 0022     	 movs r2,#0
 3151 005e DA61     	 str r2,[r3,#28]
 3152 0060 0423     	 movs r3,#4
 3153 0062 5FE0     	 b .L190
 3154              	.L192:
1750:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1751:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1752:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {					/* Dynamic table */
1753:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 3155              	 .loc 1 1753 0
 3156 0064 FB68     	 ldr r3,[r7,#12]
 3157 0066 5B0A     	 lsrs r3,r3,#9
 3158 0068 3A69     	 ldr r2,[r7,#16]
 3159 006a 5289     	 ldrh r2,[r2,#10]
 3160 006c 013A     	 subs r2,r2,#1
 3161 006e 1340     	 ands r3,r3,r2
 3162 0070 002B     	 cmp r3,#0
 3163 0072 4AD1     	 bne .L191
1754:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3164              	 .loc 1 1754 0
 3165 0074 7A68     	 ldr r2,[r7,#4]
 3166 0076 7B68     	 ldr r3,[r7,#4]
 3167 0078 9B69     	 ldr r3,[r3,#24]
 3168 007a 1046     	 mov r0,r2
 3169 007c 1946     	 mov r1,r3
 3170 007e FFF7FEFF 	 bl get_fat
 3171 0082 7861     	 str r0,[r7,#20]
1755:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 3172              	 .loc 1 1755 0
 3173 0084 7B69     	 ldr r3,[r7,#20]
 3174 0086 012B     	 cmp r3,#1
 3175 0088 01D8     	 bhi .L193
 3176              	 .loc 1 1755 0 is_stmt 0 discriminator 1
 3177 008a 0223     	 movs r3,#2
 3178 008c 4AE0     	 b .L190
 3179              	.L193:
1756:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3180              	 .loc 1 1756 0 is_stmt 1
 3181 008e 7B69     	 ldr r3,[r7,#20]
 3182 0090 B3F1FF3F 	 cmp r3,#-1
 3183 0094 01D1     	 bne .L194
 3184              	 .loc 1 1756 0 is_stmt 0 discriminator 1
 3185 0096 0123     	 movs r3,#1
 3186 0098 44E0     	 b .L190
 3187              	.L194:
1757:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3188              	 .loc 1 1757 0 is_stmt 1
 3189 009a 3B69     	 ldr r3,[r7,#16]
 3190 009c 9A69     	 ldr r2,[r3,#24]
 3191 009e 7B69     	 ldr r3,[r7,#20]
 3192 00a0 9A42     	 cmp r2,r3
 3193 00a2 28D8     	 bhi .L195
1758:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1759:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
 3194              	 .loc 1 1759 0
 3195 00a4 3B68     	 ldr r3,[r7]
 3196 00a6 002B     	 cmp r3,#0
 3197 00a8 04D1     	 bne .L196
1760:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3198              	 .loc 1 1760 0
 3199 00aa 7B68     	 ldr r3,[r7,#4]
 3200 00ac 0022     	 movs r2,#0
 3201 00ae DA61     	 str r2,[r3,#28]
 3202 00b0 0423     	 movs r3,#4
 3203 00b2 37E0     	 b .L190
 3204              	.L196:
1761:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
1762:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 3205              	 .loc 1 1762 0
 3206 00b4 7A68     	 ldr r2,[r7,#4]
 3207 00b6 7B68     	 ldr r3,[r7,#4]
 3208 00b8 9B69     	 ldr r3,[r3,#24]
 3209 00ba 1046     	 mov r0,r2
 3210 00bc 1946     	 mov r1,r3
 3211 00be FFF7FEFF 	 bl create_chain
 3212 00c2 7861     	 str r0,[r7,#20]
1763:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3213              	 .loc 1 1763 0
 3214 00c4 7B69     	 ldr r3,[r7,#20]
 3215 00c6 002B     	 cmp r3,#0
 3216 00c8 01D1     	 bne .L197
 3217              	 .loc 1 1763 0 is_stmt 0 discriminator 1
 3218 00ca 0723     	 movs r3,#7
 3219 00cc 2AE0     	 b .L190
 3220              	.L197:
1764:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3221              	 .loc 1 1764 0 is_stmt 1
 3222 00ce 7B69     	 ldr r3,[r7,#20]
 3223 00d0 012B     	 cmp r3,#1
 3224 00d2 01D1     	 bne .L198
 3225              	 .loc 1 1764 0 is_stmt 0 discriminator 1
 3226 00d4 0223     	 movs r3,#2
 3227 00d6 25E0     	 b .L190
 3228              	.L198:
1765:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3229              	 .loc 1 1765 0 is_stmt 1
 3230 00d8 7B69     	 ldr r3,[r7,#20]
 3231 00da B3F1FF3F 	 cmp r3,#-1
 3232 00de 01D1     	 bne .L199
 3233              	 .loc 1 1765 0 is_stmt 0 discriminator 1
 3234 00e0 0123     	 movs r3,#1
 3235 00e2 1FE0     	 b .L190
 3236              	.L199:
1766:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3237              	 .loc 1 1766 0 is_stmt 1
 3238 00e4 3869     	 ldr r0,[r7,#16]
 3239 00e6 7969     	 ldr r1,[r7,#20]
 3240 00e8 FFF7FEFF 	 bl dir_clear
 3241 00ec 0346     	 mov r3,r0
 3242 00ee 002B     	 cmp r3,#0
 3243 00f0 01D0     	 beq .L195
 3244              	 .loc 1 1766 0 is_stmt 0 discriminator 1
 3245 00f2 0123     	 movs r3,#1
 3246 00f4 16E0     	 b .L190
 3247              	.L195:
1767:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1768:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
1769:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1770:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1771:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1772:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1773:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
 3248              	 .loc 1 1773 0 is_stmt 1
 3249 00f6 7B68     	 ldr r3,[r7,#4]
 3250 00f8 7A69     	 ldr r2,[r7,#20]
 3251 00fa 9A61     	 str r2,[r3,#24]
1774:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->sect = clst2sect(fs, clst);
 3252              	 .loc 1 1774 0
 3253 00fc 3869     	 ldr r0,[r7,#16]
 3254 00fe 7969     	 ldr r1,[r7,#20]
 3255 0100 FFF7FEFF 	 bl clst2sect
 3256 0104 0246     	 mov r2,r0
 3257 0106 7B68     	 ldr r3,[r7,#4]
 3258 0108 DA61     	 str r2,[r3,#28]
 3259              	.L191:
1775:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1776:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1777:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1778:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dptr = ofs;						/* Current entry */
 3260              	 .loc 1 1778 0
 3261 010a 7B68     	 ldr r3,[r7,#4]
 3262 010c FA68     	 ldr r2,[r7,#12]
 3263 010e 5A61     	 str r2,[r3,#20]
1779:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3264              	 .loc 1 1779 0
 3265 0110 FB68     	 ldr r3,[r7,#12]
 3266 0112 C3F30803 	 ubfx r3,r3,#0,#9
 3267 0116 3033     	 adds r3,r3,#48
 3268 0118 3A69     	 ldr r2,[r7,#16]
 3269 011a 1344     	 add r3,r3,r2
 3270 011c 1A1D     	 adds r2,r3,#4
 3271 011e 7B68     	 ldr r3,[r7,#4]
 3272 0120 1A62     	 str r2,[r3,#32]
1780:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1781:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 3273              	 .loc 1 1781 0
 3274 0122 0023     	 movs r3,#0
 3275              	.L190:
1782:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3276              	 .loc 1 1782 0
 3277 0124 1846     	 mov r0,r3
 3278 0126 1837     	 adds r7,r7,#24
 3279              	.LCFI144:
 3280              	 .cfi_def_cfa_offset 8
 3281 0128 BD46     	 mov sp,r7
 3282              	.LCFI145:
 3283              	 .cfi_def_cfa_register 13
 3284              	 
 3285 012a 80BD     	 pop {r7,pc}
 3286              	 .cfi_endproc
 3287              	.LFE25:
 3289              	 .section .text.dir_alloc,"ax",%progbits
 3290              	 .align 2
 3291              	 .thumb
 3292              	 .thumb_func
 3294              	dir_alloc:
 3295              	.LFB26:
1783:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1784:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1785:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1786:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1787:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1788:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1789:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1790:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1791:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1792:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1793:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1794:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nent				/* Number of contiguous entries to allocate */
1795:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1796:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3296              	 .loc 1 1796 0
 3297              	 .cfi_startproc
 3298              	 
 3299              	 
 3300 0000 80B5     	 push {r7,lr}
 3301              	.LCFI146:
 3302              	 .cfi_def_cfa_offset 8
 3303              	 .cfi_offset 7,-8
 3304              	 .cfi_offset 14,-4
 3305 0002 86B0     	 sub sp,sp,#24
 3306              	.LCFI147:
 3307              	 .cfi_def_cfa_offset 32
 3308 0004 00AF     	 add r7,sp,#0
 3309              	.LCFI148:
 3310              	 .cfi_def_cfa_register 7
 3311 0006 7860     	 str r0,[r7,#4]
 3312 0008 3960     	 str r1,[r7]
1797:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1798:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n;
1799:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3313              	 .loc 1 1799 0
 3314 000a 7B68     	 ldr r3,[r7,#4]
 3315 000c 1B68     	 ldr r3,[r3]
 3316 000e FB60     	 str r3,[r7,#12]
1800:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1801:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1802:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, 0);
 3317              	 .loc 1 1802 0
 3318 0010 7868     	 ldr r0,[r7,#4]
 3319 0012 0021     	 movs r1,#0
 3320 0014 FFF7FEFF 	 bl dir_sdi
 3321 0018 0346     	 mov r3,r0
 3322 001a FB75     	 strb r3,[r7,#23]
1803:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 3323              	 .loc 1 1803 0
 3324 001c FB7D     	 ldrb r3,[r7,#23]
 3325 001e 002B     	 cmp r3,#0
 3326 0020 2BD1     	 bne .L201
1804:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n = 0;
 3327              	 .loc 1 1804 0
 3328 0022 0023     	 movs r3,#0
 3329 0024 3B61     	 str r3,[r7,#16]
 3330              	.L207:
1805:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1806:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, dp->sect);
 3331              	 .loc 1 1806 0
 3332 0026 7B68     	 ldr r3,[r7,#4]
 3333 0028 DB69     	 ldr r3,[r3,#28]
 3334 002a F868     	 ldr r0,[r7,#12]
 3335 002c 1946     	 mov r1,r3
 3336 002e FFF7FEFF 	 bl move_window
 3337 0032 0346     	 mov r3,r0
 3338 0034 FB75     	 strb r3,[r7,#23]
1807:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 3339              	 .loc 1 1807 0
 3340 0036 FB7D     	 ldrb r3,[r7,#23]
 3341 0038 002B     	 cmp r3,#0
 3342 003a 00D0     	 beq .L202
 3343 003c 1DE0     	 b .L201
 3344              	.L202:
1808:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1809:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1810:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
1811:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 3345              	 .loc 1 1811 0
 3346 003e 7B68     	 ldr r3,[r7,#4]
 3347 0040 1B6A     	 ldr r3,[r3,#32]
 3348 0042 1B78     	 ldrb r3,[r3]
 3349 0044 E52B     	 cmp r3,#229
 3350 0046 04D0     	 beq .L203
 3351              	 .loc 1 1811 0 is_stmt 0 discriminator 1
 3352 0048 7B68     	 ldr r3,[r7,#4]
 3353 004a 1B6A     	 ldr r3,[r3,#32]
 3354 004c 1B78     	 ldrb r3,[r3]
 3355 004e 002B     	 cmp r3,#0
 3356 0050 08D1     	 bne .L204
 3357              	.L203:
1812:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1813:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 3358              	 .loc 1 1813 0 is_stmt 1
 3359 0052 3B69     	 ldr r3,[r7,#16]
 3360 0054 0133     	 adds r3,r3,#1
 3361 0056 3B61     	 str r3,[r7,#16]
 3362 0058 3A69     	 ldr r2,[r7,#16]
 3363 005a 3B68     	 ldr r3,[r7]
 3364 005c 9A42     	 cmp r2,r3
 3365 005e 00D1     	 bne .L205
 3366 0060 0BE0     	 b .L201
 3367              	.L205:
 3368 0062 01E0     	 b .L206
 3369              	.L204:
1814:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
1815:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
 3370              	 .loc 1 1815 0
 3371 0064 0023     	 movs r3,#0
 3372 0066 3B61     	 str r3,[r7,#16]
 3373              	.L206:
1816:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1817:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_next(dp, 1);
 3374              	 .loc 1 1817 0
 3375 0068 7868     	 ldr r0,[r7,#4]
 3376 006a 0121     	 movs r1,#1
 3377 006c FFF7FEFF 	 bl dir_next
 3378 0070 0346     	 mov r3,r0
 3379 0072 FB75     	 strb r3,[r7,#23]
1818:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3380              	 .loc 1 1818 0
 3381 0074 FB7D     	 ldrb r3,[r7,#23]
 3382 0076 002B     	 cmp r3,#0
 3383 0078 D5D0     	 beq .L207
 3384              	.L201:
1819:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1820:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1821:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 3385              	 .loc 1 1821 0
 3386 007a FB7D     	 ldrb r3,[r7,#23]
 3387 007c 042B     	 cmp r3,#4
 3388 007e 01D1     	 bne .L208
 3389              	 .loc 1 1821 0 is_stmt 0 discriminator 1
 3390 0080 0723     	 movs r3,#7
 3391 0082 FB75     	 strb r3,[r7,#23]
 3392              	.L208:
1822:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3393              	 .loc 1 1822 0 is_stmt 1
 3394 0084 FB7D     	 ldrb r3,[r7,#23]
1823:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3395              	 .loc 1 1823 0
 3396 0086 1846     	 mov r0,r3
 3397 0088 1837     	 adds r7,r7,#24
 3398              	.LCFI149:
 3399              	 .cfi_def_cfa_offset 8
 3400 008a BD46     	 mov sp,r7
 3401              	.LCFI150:
 3402              	 .cfi_def_cfa_register 13
 3403              	 
 3404 008c 80BD     	 pop {r7,pc}
 3405              	 .cfi_endproc
 3406              	.LFE26:
 3408 008e 00BF     	 .section .text.ld_clust,"ax",%progbits
 3409              	 .align 2
 3410              	 .thumb
 3411              	 .thumb_func
 3413              	ld_clust:
 3414              	.LFB27:
1824:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1825:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1826:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1827:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1829:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1830:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1831:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1832:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1833:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1834:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1835:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Pointer to the fs object */
1836:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Pointer to the key entry */
1837:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1838:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3415              	 .loc 1 1838 0
 3416              	 .cfi_startproc
 3417              	 
 3418              	 
 3419 0000 80B5     	 push {r7,lr}
 3420              	.LCFI151:
 3421              	 .cfi_def_cfa_offset 8
 3422              	 .cfi_offset 7,-8
 3423              	 .cfi_offset 14,-4
 3424 0002 84B0     	 sub sp,sp,#16
 3425              	.LCFI152:
 3426              	 .cfi_def_cfa_offset 24
 3427 0004 00AF     	 add r7,sp,#0
 3428              	.LCFI153:
 3429              	 .cfi_def_cfa_register 7
 3430 0006 7860     	 str r0,[r7,#4]
 3431 0008 3960     	 str r1,[r7]
1839:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl;
1840:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1841:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 3432              	 .loc 1 1841 0
 3433 000a 3B68     	 ldr r3,[r7]
 3434 000c 1A33     	 adds r3,r3,#26
 3435 000e 1846     	 mov r0,r3
 3436 0010 FFF7FEFF 	 bl ld_word
 3437 0014 0346     	 mov r3,r0
 3438 0016 FB60     	 str r3,[r7,#12]
1842:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3439              	 .loc 1 1842 0
 3440 0018 7B68     	 ldr r3,[r7,#4]
 3441 001a 1B78     	 ldrb r3,[r3]
 3442 001c 032B     	 cmp r3,#3
 3443 001e 09D1     	 bne .L211
1843:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 3444              	 .loc 1 1843 0
 3445 0020 3B68     	 ldr r3,[r7]
 3446 0022 1433     	 adds r3,r3,#20
 3447 0024 1846     	 mov r0,r3
 3448 0026 FFF7FEFF 	 bl ld_word
 3449 002a 0346     	 mov r3,r0
 3450 002c 1B04     	 lsls r3,r3,#16
 3451 002e FA68     	 ldr r2,[r7,#12]
 3452 0030 1343     	 orrs r3,r3,r2
 3453 0032 FB60     	 str r3,[r7,#12]
 3454              	.L211:
1844:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1845:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1846:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return cl;
 3455              	 .loc 1 1846 0
 3456 0034 FB68     	 ldr r3,[r7,#12]
1847:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3457              	 .loc 1 1847 0
 3458 0036 1846     	 mov r0,r3
 3459 0038 1037     	 adds r7,r7,#16
 3460              	.LCFI154:
 3461              	 .cfi_def_cfa_offset 8
 3462 003a BD46     	 mov sp,r7
 3463              	.LCFI155:
 3464              	 .cfi_def_cfa_register 13
 3465              	 
 3466 003c 80BD     	 pop {r7,pc}
 3467              	 .cfi_endproc
 3468              	.LFE27:
 3470 003e 00BF     	 .section .text.st_clust,"ax",%progbits
 3471              	 .align 2
 3472              	 .thumb
 3473              	 .thumb_func
 3475              	st_clust:
 3476              	.LFB28:
1848:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1849:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1850:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1851:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_clust (
1852:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1853:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1854:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl	/* Value to be set */
1855:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1856:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3477              	 .loc 1 1856 0
 3478              	 .cfi_startproc
 3479              	 
 3480              	 
 3481 0000 80B5     	 push {r7,lr}
 3482              	.LCFI156:
 3483              	 .cfi_def_cfa_offset 8
 3484              	 .cfi_offset 7,-8
 3485              	 .cfi_offset 14,-4
 3486 0002 84B0     	 sub sp,sp,#16
 3487              	.LCFI157:
 3488              	 .cfi_def_cfa_offset 24
 3489 0004 00AF     	 add r7,sp,#0
 3490              	.LCFI158:
 3491              	 .cfi_def_cfa_register 7
 3492 0006 F860     	 str r0,[r7,#12]
 3493 0008 B960     	 str r1,[r7,#8]
 3494 000a 7A60     	 str r2,[r7,#4]
1857:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 3495              	 .loc 1 1857 0
 3496 000c BB68     	 ldr r3,[r7,#8]
 3497 000e 03F11A02 	 add r2,r3,#26
 3498 0012 7B68     	 ldr r3,[r7,#4]
 3499 0014 9BB2     	 uxth r3,r3
 3500 0016 1046     	 mov r0,r2
 3501 0018 1946     	 mov r1,r3
 3502 001a FFF7FEFF 	 bl st_word
1858:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3503              	 .loc 1 1858 0
 3504 001e FB68     	 ldr r3,[r7,#12]
 3505 0020 1B78     	 ldrb r3,[r3]
 3506 0022 032B     	 cmp r3,#3
 3507 0024 09D1     	 bne .L213
1859:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 3508              	 .loc 1 1859 0
 3509 0026 BB68     	 ldr r3,[r7,#8]
 3510 0028 03F11402 	 add r2,r3,#20
 3511 002c 7B68     	 ldr r3,[r7,#4]
 3512 002e 1B0C     	 lsrs r3,r3,#16
 3513 0030 9BB2     	 uxth r3,r3
 3514 0032 1046     	 mov r0,r2
 3515 0034 1946     	 mov r1,r3
 3516 0036 FFF7FEFF 	 bl st_word
 3517              	.L213:
1860:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1861:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3518              	 .loc 1 1861 0
 3519 003a 1037     	 adds r7,r7,#16
 3520              	.LCFI159:
 3521              	 .cfi_def_cfa_offset 8
 3522 003c BD46     	 mov sp,r7
 3523              	.LCFI160:
 3524              	 .cfi_def_cfa_register 13
 3525              	 
 3526 003e 80BD     	 pop {r7,pc}
 3527              	 .cfi_endproc
 3528              	.LFE28:
 3530              	 .section .text.dir_read,"ax",%progbits
 3531              	 .align 2
 3532              	 .thumb
 3533              	 .thumb_func
 3535              	dir_read:
 3536              	.LFB29:
1862:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1863:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1864:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1865:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1866:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
1867:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------*/
1868:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1869:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------*/
1870:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1871:../Dave/Generated/FATFS/ff_Src/ff.c **** static int cmp_lfn (		/* 1:matched, 0:not matched */
1872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1873:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1874:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1875:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1876:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1877:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, uc;
1878:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1879:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1880:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1881:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1882:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1883:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1884:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1885:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1886:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0) {
1887:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1888:../Dave/Generated/FATFS/ff_Src/ff.c **** 				return 0;					/* Not matched */
1889:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1890:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = uc;
1891:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1892:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1893:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1894:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1895:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1896:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1897:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1898:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;		/* The part of LFN matched */
1899:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1900:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1901:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1902:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
1903:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------*/
1904:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1905:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------*/
1906:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1907:../Dave/Generated/FATFS/ff_Src/ff.c **** static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1908:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1909:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1910:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1911:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1912:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1913:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, uc;
1914:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1915:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1916:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1917:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1918:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1919:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1920:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1922:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0) {
1923:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1924:../Dave/Generated/FATFS/ff_Src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1925:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1926:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1927:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1928:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1929:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1930:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not termin
1931:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1932:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfnbuf[i] = 0;
1933:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1934:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1935:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;		/* The part of LFN is valid */
1936:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1937:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1938:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1939:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1940:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1941:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------*/
1942:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1943:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------*/
1944:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1945:../Dave/Generated/FATFS/ff_Src/ff.c **** static void put_lfn (
1946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1947:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1948:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1949:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1950:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1951:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1952:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1953:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
1954:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1955:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1956:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1957:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1958:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Type] = 0;
1959:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
1960:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1961:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1962:../Dave/Generated/FATFS/ff_Src/ff.c **** 	s = wc = 0;
1963:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
1964:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1965:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1966:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1967:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (++s < 13);
1968:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1969:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1970:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1971:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1972:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1973:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
1974:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1975:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1976:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1977:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && !FF_FS_READONLY
1978:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1979:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
1980:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1981:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1982:../Dave/Generated/FATFS/ff_Src/ff.c **** static void gen_numname (
1983:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1984:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1985:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1986:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT seq			/* Sequence number */
1987:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1988:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1989:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ns[8], c;
1990:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, j;
1991:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
1992:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sr;
1993:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1994:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1995:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dst, src, 11);
1996:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
1998:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sr = seq;
1999:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (*lfn) {	/* Create a CRC as hash value */
2000:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = *lfn++;
2001:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; i < 16; i++) {
2002:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sr = (sr << 1) + (wc & 1);
2003:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc >>= 1;
2004:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
2005:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2006:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2007:../Dave/Generated/FATFS/ff_Src/ff.c **** 		seq = (UINT)sr;
2008:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2009:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2010:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* itoa (hexdecimal) */
2011:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = 7;
2012:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2013:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (BYTE)((seq % 16) + '0');
2014:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c > '9') c += 7;
2015:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ns[i--] = c;
2016:../Dave/Generated/FATFS/ff_Src/ff.c **** 		seq /= 16;
2017:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (seq);
2018:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ns[i] = '~';
2019:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2020:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Append the number to the SFN body */
2021:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
2022:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(dst[j])) {
2023:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (j == i - 1) break;
2024:../Dave/Generated/FATFS/ff_Src/ff.c **** 			j++;
2025:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2026:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2028:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
2029:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (j < 8);
2030:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2031:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
2032:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2033:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2034:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2035:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2036:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2037:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
2038:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2039:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2040:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE sum_sfn (
2041:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
2042:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2043:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2044:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sum = 0;
2045:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n = 11;
2046:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2047:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2048:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
2049:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--n);
2050:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2051:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2052:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2053:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
2054:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2055:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2056:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2057:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2058:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2059:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Checksum                                                       */
2060:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2061:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2062:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD xdir_sum (	/* Get checksum of the directoly entry block */
2063:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
2064:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2065:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2066:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, szblk;
2067:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD sum;
2068:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2069:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2070:../Dave/Generated/FATFS/ff_Src/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
2071:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
2072:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
2073:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i++;
2074:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2075:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
2076:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2077:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2078:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2079:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2080:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2081:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2082:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2083:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
2084:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* name	/* File name to be calculated */
2085:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2086:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2087:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR chr;
2088:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD sum = 0;
2089:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2090:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2091:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while ((chr = *name++) != 0) {
2092:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
2093:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
2094:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
2095:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2096:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2097:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2098:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2099:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2100:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
2101:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD xsum32 (	/* Returns 32-bit checksum */
2102:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE  dat,			/* Byte to be calculated (byte-by-byte processing) */
2103:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sum			/* Previous sum value */
2104:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2105:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2106:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
2107:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2108:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2109:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2110:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2111:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2112:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2113:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------*/
2114:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Get object information from a directory block */
2115:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------*/
2116:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2117:../Dave/Generated/FATFS/ff_Src/ff.c **** static void get_xfileinfo (
2118:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
2119:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
2120:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2121:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2122:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, hs;
2123:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT di, si, nc;
2124:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2125:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get file name from the entry block */
2126:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = SZDIRE * 2;	/* 1st C1 entry */
2127:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nc = 0; hs = 0; di = 0;
2128:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < dirb[XDIR_NumName]) {
2129:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
2130:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
2131:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
2132:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2133:../Dave/Generated/FATFS/ff_Src/ff.c **** 			hs = wc; continue;	/* Get low surrogate */
2134:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2135:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding
2136:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
2137:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di += wc;
2138:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = 0;
2139:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2140:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) di = 0;					/* Broken surrogate pair? */
2141:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
2142:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[di] = 0;						/* Terminate the name */
2143:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->altname[0] = 0;					/* exFAT does not support SFN */
2144:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2145:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
2146:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
2147:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
2148:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
2149:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2150:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2151:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2152:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2153:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2154:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------*/
2155:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Get a directry entry block */
2156:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------*/
2157:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2158:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
2159:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
2160:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2161:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2162:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2163:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, sz_ent;
2164:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
2165:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2166:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2167:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load file-directory entry */
2168:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2169:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2170:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
2171:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
2172:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
2173:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
2174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2175:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load stream-extension entry */
2176:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_next(dp, 0);
2177:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2178:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2179:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2180:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2181:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
2182:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
2183:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2184:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2185:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load file-name entries */
2186:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = 2 * SZDIRE;	/* Name offset to load */
2187:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2188:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);
2189:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2190:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2191:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2192:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2193:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
2194:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2195:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2196:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2197:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Sanity check (do it for only accessible object) */
2198:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i <= MAXDIRB(FF_MAX_LFN)) {
2199:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2200:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2201:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
2202:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2203:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2204:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2205:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------------------*/
2206:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Initialize object allocation info with loaded entry block */
2207:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------------------*/
2208:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2209:../Dave/Generated/FATFS/ff_Src/ff.c **** static void init_alloc_info (
2210:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
2211:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj	/* Object allocation information to be initialized */
2212:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2213:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2214:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
2215:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
2217:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->n_frag = 0;										/* No last fragment info */
2218:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2219:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2220:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2221:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2222:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY || FF_FS_RPATH != 0
2223:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------*/
2224:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Load the object's directory entry block */
2225:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------*/
2226:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2227:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT load_obj_xdir (
2228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2229:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const FFOBJID* obj	/* Object with its containing directory information */
2230:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2231:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2233:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2234:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Open object containing directory */
2235:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.fs = obj->fs;
2236:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.sclust = obj->c_scl;
2237:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2238:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2239:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.n_frag = 0;
2240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2241:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2242:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2243:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
2244:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2245:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2246:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
2247:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2248:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2249:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2250:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2251:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
2252:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
2253:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Store the directory entry block */
2254:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
2255:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2256:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT store_xdir (
2257:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2258:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2259:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2260:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2261:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nent;
2262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2263:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create set sum */
2265:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2266:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2267:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2268:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Store the direcotry entry block to the directory */
2269:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2270:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (res == FR_OK) {
2271:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2272:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
2273:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2274:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs->wflag = 1;
2275:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (--nent == 0) break;
2276:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dirb += SZDIRE;
2277:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);
2278:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2279:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2280:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2281:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2282:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2283:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2284:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-------------------------------------------*/
2285:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Create a new directory enrty block */
2286:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-------------------------------------------*/
2287:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2288:../Dave/Generated/FATFS/ff_Src/ff.c **** static void create_xdir (
2289:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2290:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn	/* Pointer to the object name */
2291:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2292:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2293:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
2294:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE nc1, nlen;
2295:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
2296:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2297:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2298:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create file-directory and stream-extension entry */
2299:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2300:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
2301:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
2302:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2303:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create file-name entries */
2304:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = SZDIRE * 2;	/* Top of file_name entries */
2305:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nlen = nc1 = 0; wc = 1;
2306:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
2308:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Fill name field */
2309:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
2310:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(dirb + i, wc); 		/* Store it */
2311:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i += 2;
2312:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (i % SZDIRE != 0);
2313:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc1++;
2314:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (lfn[nlen]);	/* Fill next entry if any char follows */
2315:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2316:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[XDIR_NumName] = nlen;		/* Set name length */
2317:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
2318:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2319:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2320:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2321:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
2322:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
2323:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2324:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2325:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2326:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
2327:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2328:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read an object from the directory                                     */
2329:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2330:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2331:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_READ_FILE(dp) dir_read(dp, 0)
2332:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_READ_LABEL(dp) dir_read(dp, 1)
2333:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2334:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_read (
2335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2336:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2337:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2338:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3537              	 .loc 1 2338 0
 3538              	 .cfi_startproc
 3539              	 
 3540              	 
 3541 0000 80B5     	 push {r7,lr}
 3542              	.LCFI161:
 3543              	 .cfi_def_cfa_offset 8
 3544              	 .cfi_offset 7,-8
 3545              	 .cfi_offset 14,-4
 3546 0002 86B0     	 sub sp,sp,#24
 3547              	.LCFI162:
 3548              	 .cfi_def_cfa_offset 32
 3549 0004 00AF     	 add r7,sp,#0
 3550              	.LCFI163:
 3551              	 .cfi_def_cfa_register 7
 3552 0006 7860     	 str r0,[r7,#4]
 3553 0008 3960     	 str r1,[r7]
2339:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_NO_FILE;
 3554              	 .loc 1 2339 0
 3555 000a 0423     	 movs r3,#4
 3556 000c FB75     	 strb r3,[r7,#23]
2340:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3557              	 .loc 1 2340 0
 3558 000e 7B68     	 ldr r3,[r7,#4]
 3559 0010 1B68     	 ldr r3,[r3]
 3560 0012 3B61     	 str r3,[r7,#16]
2341:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE attr, b;
2342:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2343:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2344:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2345:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2346:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (dp->sect) {
 3561              	 .loc 1 2346 0
 3562 0014 3FE0     	 b .L216
 3563              	.L221:
2347:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3564              	 .loc 1 2347 0
 3565 0016 7B68     	 ldr r3,[r7,#4]
 3566 0018 DB69     	 ldr r3,[r3,#28]
 3567 001a 3869     	 ldr r0,[r7,#16]
 3568 001c 1946     	 mov r1,r3
 3569 001e FFF7FEFF 	 bl move_window
 3570 0022 0346     	 mov r3,r0
 3571 0024 FB75     	 strb r3,[r7,#23]
2348:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 3572              	 .loc 1 2348 0
 3573 0026 FB7D     	 ldrb r3,[r7,#23]
 3574 0028 002B     	 cmp r3,#0
 3575 002a 00D0     	 beq .L217
 3576 002c 37E0     	 b .L218
 3577              	.L217:
2349:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
 3578              	 .loc 1 2349 0
 3579 002e 7B68     	 ldr r3,[r7,#4]
 3580 0030 1B6A     	 ldr r3,[r3,#32]
 3581 0032 1B78     	 ldrb r3,[r3]
 3582 0034 FB73     	 strb r3,[r7,#15]
2350:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b == 0) {
 3583              	 .loc 1 2350 0
 3584 0036 FB7B     	 ldrb r3,[r7,#15]
 3585 0038 002B     	 cmp r3,#0
 3586 003a 02D1     	 bne .L219
2351:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3587              	 .loc 1 2351 0
 3588 003c 0423     	 movs r3,#4
 3589 003e FB75     	 strb r3,[r7,#23]
 3590 0040 2DE0     	 b .L218
 3591              	.L219:
2352:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2353:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2354:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2355:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_USE_LABEL && vol) {
2356:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (b == ET_VLABEL) break;	/* Volume label entry? */
2357:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2358:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
2359:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2360:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2361:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
2362:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2363:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2364:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
2365:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2366:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2367:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else
2368:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2369:../Dave/Generated/FATFS/ff_Src/ff.c **** 		{	/* On the FAT/FAT32 volume */
2370:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 3592              	 .loc 1 2370 0
 3593 0042 7B68     	 ldr r3,[r7,#4]
 3594 0044 1B6A     	 ldr r3,[r3,#32]
 3595 0046 0B33     	 adds r3,r3,#11
 3596 0048 1B78     	 ldrb r3,[r3]
 3597 004a 03F03F03 	 and r3,r3,#63
 3598 004e BB73     	 strb r3,[r7,#14]
 3599 0050 7B68     	 ldr r3,[r7,#4]
 3600 0052 BA7B     	 ldrb r2,[r7,#14]
 3601 0054 9A71     	 strb r2,[r3,#6]
2371:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2372:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without val
2373:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ord = 0xFF;
2374:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2375:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (attr == AM_LFN) {			/* An LFN entry is found */
2376:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (b & LLEF) {			/* Is it start of an LFN sequence? */
2377:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2378:../Dave/Generated/FATFS/ff_Src/ff.c **** 						b &= (BYTE)~LLEF; ord = b;
2379:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = dp->dptr;
2380:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2381:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Check LFN validity and capture it */
2382:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2383:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* An SFN entry is found */
2384:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2385:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2386:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2387:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
2388:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2389:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2390:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* Non LFN configuration */
2391:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is
 3602              	 .loc 1 2391 0
 3603 0056 FB7B     	 ldrb r3,[r7,#15]
 3604 0058 E52B     	 cmp r3,#229
 3605 005a 12D0     	 beq .L220
 3606              	 .loc 1 2391 0 is_stmt 0 discriminator 1
 3607 005c FB7B     	 ldrb r3,[r7,#15]
 3608 005e 2E2B     	 cmp r3,#46
 3609 0060 0FD0     	 beq .L220
 3610              	 .loc 1 2391 0 discriminator 2
 3611 0062 BB7B     	 ldrb r3,[r7,#14]
 3612 0064 0F2B     	 cmp r3,#15
 3613 0066 0CD0     	 beq .L220
 3614              	 .loc 1 2391 0 discriminator 3
 3615 0068 BB7B     	 ldrb r3,[r7,#14]
 3616 006a 23F02003 	 bic r3,r3,#32
 3617 006e 082B     	 cmp r3,#8
 3618 0070 0CBF     	 ite eq
 3619 0072 0123     	 moveq r3,#1
 3620 0074 0023     	 movne r3,#0
 3621 0076 DBB2     	 uxtb r3,r3
 3622 0078 1A46     	 mov r2,r3
 3623 007a 3B68     	 ldr r3,[r7]
 3624 007c 9A42     	 cmp r2,r3
 3625 007e 00D1     	 bne .L220
2392:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
 3626              	 .loc 1 2392 0 is_stmt 1
 3627 0080 0DE0     	 b .L218
 3628              	.L220:
2393:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2394:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2395:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2396:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
 3629              	 .loc 1 2396 0
 3630 0082 7868     	 ldr r0,[r7,#4]
 3631 0084 0021     	 movs r1,#0
 3632 0086 FFF7FEFF 	 bl dir_next
 3633 008a 0346     	 mov r3,r0
 3634 008c FB75     	 strb r3,[r7,#23]
2397:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 3635              	 .loc 1 2397 0
 3636 008e FB7D     	 ldrb r3,[r7,#23]
 3637 0090 002B     	 cmp r3,#0
 3638 0092 00D0     	 beq .L216
 3639 0094 03E0     	 b .L218
 3640              	.L216:
2346:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3641              	 .loc 1 2346 0
 3642 0096 7B68     	 ldr r3,[r7,#4]
 3643 0098 DB69     	 ldr r3,[r3,#28]
 3644 009a 002B     	 cmp r3,#0
 3645 009c BBD1     	 bne .L221
 3646              	.L218:
2398:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2399:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2400:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 3647              	 .loc 1 2400 0
 3648 009e FB7D     	 ldrb r3,[r7,#23]
 3649 00a0 002B     	 cmp r3,#0
 3650 00a2 02D0     	 beq .L222
 3651              	 .loc 1 2400 0 is_stmt 0 discriminator 1
 3652 00a4 7B68     	 ldr r3,[r7,#4]
 3653 00a6 0022     	 movs r2,#0
 3654 00a8 DA61     	 str r2,[r3,#28]
 3655              	.L222:
2401:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3656              	 .loc 1 2401 0 is_stmt 1
 3657 00aa FB7D     	 ldrb r3,[r7,#23]
2402:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3658              	 .loc 1 2402 0
 3659 00ac 1846     	 mov r0,r3
 3660 00ae 1837     	 adds r7,r7,#24
 3661              	.LCFI164:
 3662              	 .cfi_def_cfa_offset 8
 3663 00b0 BD46     	 mov sp,r7
 3664              	.LCFI165:
 3665              	 .cfi_def_cfa_register 13
 3666              	 
 3667 00b2 80BD     	 pop {r7,pc}
 3668              	 .cfi_endproc
 3669              	.LFE29:
 3671              	 .section .text.dir_find,"ax",%progbits
 3672              	 .align 2
 3673              	 .thumb
 3674              	 .thumb_func
 3676              	dir_find:
 3677              	.LFB30:
2403:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2404:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL || FF_FS_RPATH >= 2 */
2405:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2406:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2407:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2408:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2409:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Find an object in the directory                  */
2410:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2411:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2412:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2413:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Pointer to the directory object with the file name */
2414:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2415:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3678              	 .loc 1 2415 0
 3679              	 .cfi_startproc
 3680              	 
 3681              	 
 3682 0000 80B5     	 push {r7,lr}
 3683              	.LCFI166:
 3684              	 .cfi_def_cfa_offset 8
 3685              	 .cfi_offset 7,-8
 3686              	 .cfi_offset 14,-4
 3687 0002 86B0     	 sub sp,sp,#24
 3688              	.LCFI167:
 3689              	 .cfi_def_cfa_offset 32
 3690 0004 00AF     	 add r7,sp,#0
 3691              	.LCFI168:
 3692              	 .cfi_def_cfa_register 7
 3693 0006 7860     	 str r0,[r7,#4]
2416:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2417:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3694              	 .loc 1 2417 0
 3695 0008 7B68     	 ldr r3,[r7,#4]
 3696 000a 1B68     	 ldr r3,[r3]
 3697 000c 3B61     	 str r3,[r7,#16]
2418:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE c;
2419:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2420:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE a, ord, sum;
2421:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2422:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2423:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
 3698              	 .loc 1 2423 0
 3699 000e 7868     	 ldr r0,[r7,#4]
 3700 0010 0021     	 movs r1,#0
 3701 0012 FFF7FEFF 	 bl dir_sdi
 3702 0016 0346     	 mov r3,r0
 3703 0018 FB75     	 strb r3,[r7,#23]
2424:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
 3704              	 .loc 1 2424 0
 3705 001a FB7D     	 ldrb r3,[r7,#23]
 3706 001c 002B     	 cmp r3,#0
 3707 001e 01D0     	 beq .L225
 3708              	 .loc 1 2424 0 is_stmt 0 discriminator 1
 3709 0020 FB7D     	 ldrb r3,[r7,#23]
 3710 0022 3DE0     	 b .L226
 3711              	.L225:
2425:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2426:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2427:../Dave/Generated/FATFS/ff_Src/ff.c **** 		BYTE nc;
2428:../Dave/Generated/FATFS/ff_Src/ff.c **** 		UINT di, ni;
2429:../Dave/Generated/FATFS/ff_Src/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2430:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2431:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
2432:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_LFN < 255
2433:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object
2434:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2435:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2436:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2437:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2438:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2439:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2440:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2441:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2442:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return res;
2443:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2444:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2445:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* On the FAT/FAT32 volume */
2446:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2447:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2448:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2449:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2450:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3712              	 .loc 1 2450 0 is_stmt 1
 3713 0024 7B68     	 ldr r3,[r7,#4]
 3714 0026 DB69     	 ldr r3,[r3,#28]
 3715 0028 3869     	 ldr r0,[r7,#16]
 3716 002a 1946     	 mov r1,r3
 3717 002c FFF7FEFF 	 bl move_window
 3718 0030 0346     	 mov r3,r0
 3719 0032 FB75     	 strb r3,[r7,#23]
2451:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 3720              	 .loc 1 2451 0
 3721 0034 FB7D     	 ldrb r3,[r7,#23]
 3722 0036 002B     	 cmp r3,#0
 3723 0038 00D0     	 beq .L227
 3724 003a 30E0     	 b .L228
 3725              	.L227:
2452:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = dp->dir[DIR_Name];
 3726              	 .loc 1 2452 0
 3727 003c 7B68     	 ldr r3,[r7,#4]
 3728 003e 1B6A     	 ldr r3,[r3,#32]
 3729 0040 1B78     	 ldrb r3,[r3]
 3730 0042 FB73     	 strb r3,[r7,#15]
2453:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3731              	 .loc 1 2453 0
 3732 0044 FB7B     	 ldrb r3,[r7,#15]
 3733 0046 002B     	 cmp r3,#0
 3734 0048 02D1     	 bne .L229
 3735              	 .loc 1 2453 0 is_stmt 0 discriminator 1
 3736 004a 0423     	 movs r3,#4
 3737 004c FB75     	 strb r3,[r7,#23]
 3738 004e 26E0     	 b .L228
 3739              	.L229:
2454:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2455:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2456:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2457:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2458:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2459:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2460:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2461:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2462:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2463:../Dave/Generated/FATFS/ff_Src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2464:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2465:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2466:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2467:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2468:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {					/* An SFN entry is found */
2470:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2471:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2472:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2473:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2474:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2475:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* Non LFN configuration */
2476:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 3740              	 .loc 1 2476 0 is_stmt 1
 3741 0050 7B68     	 ldr r3,[r7,#4]
 3742 0052 1B6A     	 ldr r3,[r3,#32]
 3743 0054 0B33     	 adds r3,r3,#11
 3744 0056 1B78     	 ldrb r3,[r3]
 3745 0058 03F03F03 	 and r3,r3,#63
 3746 005c DAB2     	 uxtb r2,r3
 3747 005e 7B68     	 ldr r3,[r7,#4]
 3748 0060 9A71     	 strb r2,[r3,#6]
2477:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 3749              	 .loc 1 2477 0
 3750 0062 7B68     	 ldr r3,[r7,#4]
 3751 0064 1B6A     	 ldr r3,[r3,#32]
 3752 0066 0B33     	 adds r3,r3,#11
 3753 0068 1B78     	 ldrb r3,[r3]
 3754 006a 03F00803 	 and r3,r3,#8
 3755 006e 002B     	 cmp r3,#0
 3756 0070 0CD1     	 bne .L230
 3757              	 .loc 1 2477 0 is_stmt 0 discriminator 1
 3758 0072 7B68     	 ldr r3,[r7,#4]
 3759 0074 1A6A     	 ldr r2,[r3,#32]
 3760 0076 7B68     	 ldr r3,[r7,#4]
 3761 0078 2433     	 adds r3,r3,#36
 3762 007a 1046     	 mov r0,r2
 3763 007c 1946     	 mov r1,r3
 3764 007e 0B22     	 movs r2,#11
 3765 0080 FFF7FEFF 	 bl mem_cmp
 3766 0084 0346     	 mov r3,r0
 3767 0086 002B     	 cmp r3,#0
 3768 0088 00D1     	 bne .L230
 3769              	 .loc 1 2477 0
 3770 008a 08E0     	 b .L228
 3771              	.L230:
2478:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2479:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
 3772              	 .loc 1 2479 0 is_stmt 1
 3773 008c 7868     	 ldr r0,[r7,#4]
 3774 008e 0021     	 movs r1,#0
 3775 0090 FFF7FEFF 	 bl dir_next
 3776 0094 0346     	 mov r3,r0
 3777 0096 FB75     	 strb r3,[r7,#23]
2480:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (res == FR_OK);
 3778              	 .loc 1 2480 0
 3779 0098 FB7D     	 ldrb r3,[r7,#23]
 3780 009a 002B     	 cmp r3,#0
 3781 009c C2D0     	 beq .L225
 3782              	.L228:
2481:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2482:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3783              	 .loc 1 2482 0
 3784 009e FB7D     	 ldrb r3,[r7,#23]
 3785              	.L226:
2483:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3786              	 .loc 1 2483 0
 3787 00a0 1846     	 mov r0,r3
 3788 00a2 1837     	 adds r7,r7,#24
 3789              	.LCFI169:
 3790              	 .cfi_def_cfa_offset 8
 3791 00a4 BD46     	 mov sp,r7
 3792              	.LCFI170:
 3793              	 .cfi_def_cfa_register 13
 3794              	 
 3795 00a6 80BD     	 pop {r7,pc}
 3796              	 .cfi_endproc
 3797              	.LFE30:
 3799              	 .section .text.dir_register,"ax",%progbits
 3800              	 .align 2
 3801              	 .thumb
 3802              	 .thumb_func
 3804              	dir_register:
 3805              	.LFB31:
2484:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2485:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2486:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2487:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2488:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
2489:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2490:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Register an object to the directory                                   */
2491:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2492:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2493:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision
2494:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp						/* Target directory with object name to be created */
2495:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2496:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3806              	 .loc 1 2496 0
 3807              	 .cfi_startproc
 3808              	 
 3809              	 
 3810 0000 80B5     	 push {r7,lr}
 3811              	.LCFI171:
 3812              	 .cfi_def_cfa_offset 8
 3813              	 .cfi_offset 7,-8
 3814              	 .cfi_offset 14,-4
 3815 0002 84B0     	 sub sp,sp,#16
 3816              	.LCFI172:
 3817              	 .cfi_def_cfa_offset 24
 3818 0004 00AF     	 add r7,sp,#0
 3819              	.LCFI173:
 3820              	 .cfi_def_cfa_register 7
 3821 0006 7860     	 str r0,[r7,#4]
2497:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2498:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3822              	 .loc 1 2498 0
 3823 0008 7B68     	 ldr r3,[r7,#4]
 3824 000a 1B68     	 ldr r3,[r3]
 3825 000c BB60     	 str r3,[r7,#8]
2499:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2500:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n, nlen, nent;
2501:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sn[12], sum;
2502:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2503:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2504:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2505:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2506:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2507:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2508:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2509:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2510:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate directory entries */
2511:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2512:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
2513:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2514:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
2515:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->obj.stat &= ~4;
2516:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
2517:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
2518:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if n
2519:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
2520:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
2521:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DIR dj;
2522:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2523:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
2524:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
2525:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size 
2526:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
2527:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2528:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2529:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);				/* Store the object status */
2530:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
2531:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2532:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2534:../Dave/Generated/FATFS/ff_Src/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2535:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
2536:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2537:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2538:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* On the FAT/FAT32 volume */
2539:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2540:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2541:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2542:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 1; n < 100; n++) {
2543:../Dave/Generated/FATFS/ff_Src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2544:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2545:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
2546:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2547:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2548:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2549:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2550:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2551:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2552:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create an SFN with/without LFNs. */
2553:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2554:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
2555:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2556:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2557:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
2558:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2559:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {					/* Store LFN entries in bottom first */
2560:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, dp->sect);
2561:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
2562:../Dave/Generated/FATFS/ff_Src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2563:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
2564:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2565:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (res == FR_OK && --nent);
2566:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2567:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2568:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2569:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Non LFN configuration */
2570:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 3826              	 .loc 1 2570 0
 3827 000e 7868     	 ldr r0,[r7,#4]
 3828 0010 0121     	 movs r1,#1
 3829 0012 FFF7FEFF 	 bl dir_alloc
 3830 0016 0346     	 mov r3,r0
 3831 0018 FB73     	 strb r3,[r7,#15]
2571:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2572:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2573:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2574:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Set SFN entry */
2575:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 3832              	 .loc 1 2575 0
 3833 001a FB7B     	 ldrb r3,[r7,#15]
 3834 001c 002B     	 cmp r3,#0
 3835 001e 1DD1     	 bne .L232
2576:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3836              	 .loc 1 2576 0
 3837 0020 7B68     	 ldr r3,[r7,#4]
 3838 0022 DB69     	 ldr r3,[r3,#28]
 3839 0024 B868     	 ldr r0,[r7,#8]
 3840 0026 1946     	 mov r1,r3
 3841 0028 FFF7FEFF 	 bl move_window
 3842 002c 0346     	 mov r3,r0
 3843 002e FB73     	 strb r3,[r7,#15]
2577:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 3844              	 .loc 1 2577 0
 3845 0030 FB7B     	 ldrb r3,[r7,#15]
 3846 0032 002B     	 cmp r3,#0
 3847 0034 12D1     	 bne .L232
2578:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3848              	 .loc 1 2578 0
 3849 0036 7B68     	 ldr r3,[r7,#4]
 3850 0038 1B6A     	 ldr r3,[r3,#32]
 3851 003a 1846     	 mov r0,r3
 3852 003c 0021     	 movs r1,#0
 3853 003e 2022     	 movs r2,#32
 3854 0040 FFF7FEFF 	 bl mem_set
2579:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3855              	 .loc 1 2579 0
 3856 0044 7B68     	 ldr r3,[r7,#4]
 3857 0046 1A6A     	 ldr r2,[r3,#32]
 3858 0048 7B68     	 ldr r3,[r7,#4]
 3859 004a 2433     	 adds r3,r3,#36
 3860 004c 1046     	 mov r0,r2
 3861 004e 1946     	 mov r1,r3
 3862 0050 0B22     	 movs r2,#11
 3863 0052 FFF7FEFF 	 bl mem_cpy
2580:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2581:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2582:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2583:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 3864              	 .loc 1 2583 0
 3865 0056 BB68     	 ldr r3,[r7,#8]
 3866 0058 0122     	 movs r2,#1
 3867 005a DA70     	 strb r2,[r3,#3]
 3868              	.L232:
2584:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2585:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2586:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2587:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3869              	 .loc 1 2587 0
 3870 005c FB7B     	 ldrb r3,[r7,#15]
2588:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3871              	 .loc 1 2588 0
 3872 005e 1846     	 mov r0,r3
 3873 0060 1037     	 adds r7,r7,#16
 3874              	.LCFI174:
 3875              	 .cfi_def_cfa_offset 8
 3876 0062 BD46     	 mov sp,r7
 3877              	.LCFI175:
 3878              	 .cfi_def_cfa_register 13
 3879              	 
 3880 0064 80BD     	 pop {r7,pc}
 3881              	 .cfi_endproc
 3882              	.LFE31:
 3884 0066 00BF     	 .section .text.dir_remove,"ax",%progbits
 3885              	 .align 2
 3886              	 .thumb
 3887              	 .thumb_func
 3889              	dir_remove:
 3890              	.LFB32:
2589:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2590:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
2591:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2592:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2593:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2594:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
2595:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2596:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Remove an object from the directory                                   */
2597:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2598:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2599:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2600:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Directory object pointing the entry to be removed */
2601:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2602:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3891              	 .loc 1 2602 0
 3892              	 .cfi_startproc
 3893              	 
 3894              	 
 3895 0000 80B5     	 push {r7,lr}
 3896              	.LCFI176:
 3897              	 .cfi_def_cfa_offset 8
 3898              	 .cfi_offset 7,-8
 3899              	 .cfi_offset 14,-4
 3900 0002 84B0     	 sub sp,sp,#16
 3901              	.LCFI177:
 3902              	 .cfi_def_cfa_offset 24
 3903 0004 00AF     	 add r7,sp,#0
 3904              	.LCFI178:
 3905              	 .cfi_def_cfa_register 7
 3906 0006 7860     	 str r0,[r7,#4]
2603:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2604:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3907              	 .loc 1 2604 0
 3908 0008 7B68     	 ldr r3,[r7,#4]
 3909 000a 1B68     	 ldr r3,[r3]
 3910 000c FB60     	 str r3,[r7,#12]
2605:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2606:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD last = dp->dptr;
2607:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2608:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2609:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
2610:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
2611:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, dp->sect);
2612:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
2613:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2614:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
2615:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {									/* On the FAT/FAT32 volume */
2616:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
2617:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2618:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
2619:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2620:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2621:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (res == FR_OK);
2622:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2623:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2624:../Dave/Generated/FATFS/ff_Src/ff.c **** #else			/* Non LFN configuration */
2625:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2626:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(fs, dp->sect);
 3911              	 .loc 1 2626 0
 3912 000e 7B68     	 ldr r3,[r7,#4]
 3913 0010 DB69     	 ldr r3,[r3,#28]
 3914 0012 F868     	 ldr r0,[r7,#12]
 3915 0014 1946     	 mov r1,r3
 3916 0016 FFF7FEFF 	 bl move_window
 3917 001a 0346     	 mov r3,r0
 3918 001c FB72     	 strb r3,[r7,#11]
2627:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 3919              	 .loc 1 2627 0
 3920 001e FB7A     	 ldrb r3,[r7,#11]
 3921 0020 002B     	 cmp r3,#0
 3922 0022 06D1     	 bne .L235
2628:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 3923              	 .loc 1 2628 0
 3924 0024 7B68     	 ldr r3,[r7,#4]
 3925 0026 1B6A     	 ldr r3,[r3,#32]
 3926 0028 E522     	 movs r2,#229
 3927 002a 1A70     	 strb r2,[r3]
2629:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->wflag = 1;
 3928              	 .loc 1 2629 0
 3929 002c FB68     	 ldr r3,[r7,#12]
 3930 002e 0122     	 movs r2,#1
 3931 0030 DA70     	 strb r2,[r3,#3]
 3932              	.L235:
2630:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2631:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2632:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2633:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3933              	 .loc 1 2633 0
 3934 0032 FB7A     	 ldrb r3,[r7,#11]
2634:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3935              	 .loc 1 2634 0
 3936 0034 1846     	 mov r0,r3
 3937 0036 1037     	 adds r7,r7,#16
 3938              	.LCFI179:
 3939              	 .cfi_def_cfa_offset 8
 3940 0038 BD46     	 mov sp,r7
 3941              	.LCFI180:
 3942              	 .cfi_def_cfa_register 13
 3943              	 
 3944 003a 80BD     	 pop {r7,pc}
 3945              	 .cfi_endproc
 3946              	.LFE32:
 3948              	 .section .text.get_fileinfo,"ax",%progbits
 3949              	 .align 2
 3950              	 .thumb
 3951              	 .thumb_func
 3953              	get_fileinfo:
 3954              	.LFB33:
2635:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2636:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 */
2637:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2638:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2639:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2640:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2641:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2642:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get file information from directory entry                             */
2643:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2644:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2645:../Dave/Generated/FATFS/ff_Src/ff.c **** static void get_fileinfo (
2646:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2647:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to the file information to be filled */
2648:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2649:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3955              	 .loc 1 2649 0
 3956              	 .cfi_startproc
 3957              	 
 3958              	 
 3959 0000 80B5     	 push {r7,lr}
 3960              	.LCFI181:
 3961              	 .cfi_def_cfa_offset 8
 3962              	 .cfi_offset 7,-8
 3963              	 .cfi_offset 14,-4
 3964 0002 86B0     	 sub sp,sp,#24
 3965              	.LCFI182:
 3966              	 .cfi_def_cfa_offset 32
 3967 0004 00AF     	 add r7,sp,#0
 3968              	.LCFI183:
 3969              	 .cfi_def_cfa_register 7
 3970 0006 7860     	 str r0,[r7,#4]
 3971 0008 3960     	 str r1,[r7]
2650:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT si, di;
2651:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2652:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE lcf;
2653:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, hs;
2654:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
2655:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
2656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c;
2657:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2658:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2659:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2660:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[0] = 0;			/* Invaidate file info */
 3972              	 .loc 1 2660 0
 3973 000a 3B68     	 ldr r3,[r7]
 3974 000c 0022     	 movs r2,#0
 3975 000e 5A72     	 strb r2,[r3,#9]
2661:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 3976              	 .loc 1 2661 0
 3977 0010 7B68     	 ldr r3,[r7,#4]
 3978 0012 DB69     	 ldr r3,[r3,#28]
 3979 0014 002B     	 cmp r3,#0
 3980 0016 00D1     	 bne .L238
 3981 0018 51E0     	 b .L237
 3982              	.L238:
2662:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2663:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2664:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2665:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2666:../Dave/Generated/FATFS/ff_Src/ff.c **** 		get_xfileinfo(fs->dirbuf, fno);
2667:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return;
2668:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
2669:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2670:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
2671:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2672:../Dave/Generated/FATFS/ff_Src/ff.c **** 			si = di = hs = 0;
2673:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (fs->lfnbuf[si] != 0) {
2674:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
2675:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2676:../Dave/Generated/FATFS/ff_Src/ff.c **** 					hs = wc; continue;		/* Get low surrogate */
2677:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2678:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or 
2679:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
2680:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di += wc;
2681:../Dave/Generated/FATFS/ff_Src/ff.c **** 				hs = 0;
2682:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2683:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (hs != 0) di = 0;	/* Broken surrogate pair? */
2684:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
2685:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2686:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2687:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2688:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = di = 0;
2689:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (si < 11) {		/* Get SFN from SFN entry */
2690:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = dp->dir[si++];			/* Get a char */
2691:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == ' ') continue;	/* Skip padding spaces */
2692:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
2693:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
2694:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
2695:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed *
2696:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = wc << 8 | dp->dir[si++];
2697:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2698:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
2699:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
2700:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
2701:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
2702:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di += wc;
2703:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* ANSI/OEM output */
2704:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
2705:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2706:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2707:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
2708:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2709:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
2710:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
2711:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fno->fname[di++] = '?';
2712:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2713:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] wi
2714:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = (WCHAR)fno->altname[si];
2715:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc == '.') lcf = NS_EXT;
2716:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
2717:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fno->fname[di] = (TCHAR)wc;
2718:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2719:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2720:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->fname[di] = 0;	/* Terminate the LFN */
2721:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
2722:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2723:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2724:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Non-LFN configuration */
2725:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = di = 0;
 3983              	 .loc 1 2725 0
 3984 001a 0023     	 movs r3,#0
 3985 001c 3B61     	 str r3,[r7,#16]
 3986 001e 3B69     	 ldr r3,[r7,#16]
 3987 0020 7B61     	 str r3,[r7,#20]
2726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (si < 11) {		/* Copy name body and extension */
 3988              	 .loc 1 2726 0
 3989 0022 21E0     	 b .L240
 3990              	.L244:
2727:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (TCHAR)dp->dir[si++];
 3991              	 .loc 1 2727 0
 3992 0024 7B68     	 ldr r3,[r7,#4]
 3993 0026 1A6A     	 ldr r2,[r3,#32]
 3994 0028 7B69     	 ldr r3,[r7,#20]
 3995 002a 591C     	 adds r1,r3,#1
 3996 002c 7961     	 str r1,[r7,#20]
 3997 002e 1344     	 add r3,r3,r2
 3998 0030 1B78     	 ldrb r3,[r3]
 3999 0032 FB73     	 strb r3,[r7,#15]
2728:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == ' ') continue;		/* Skip padding spaces */
 4000              	 .loc 1 2728 0
 4001 0034 FB7B     	 ldrb r3,[r7,#15]
 4002 0036 202B     	 cmp r3,#32
 4003 0038 00D1     	 bne .L241
 4004              	 .loc 1 2728 0 is_stmt 0 discriminator 1
 4005 003a 15E0     	 b .L240
 4006              	.L241:
2729:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 4007              	 .loc 1 2729 0 is_stmt 1
 4008 003c FB7B     	 ldrb r3,[r7,#15]
 4009 003e 052B     	 cmp r3,#5
 4010 0040 01D1     	 bne .L242
 4011              	 .loc 1 2729 0 is_stmt 0 discriminator 1
 4012 0042 E523     	 movs r3,#229
 4013 0044 FB73     	 strb r3,[r7,#15]
 4014              	.L242:
2730:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 4015              	 .loc 1 2730 0 is_stmt 1
 4016 0046 7B69     	 ldr r3,[r7,#20]
 4017 0048 092B     	 cmp r3,#9
 4018 004a 06D1     	 bne .L243
 4019              	 .loc 1 2730 0 is_stmt 0 discriminator 1
 4020 004c 3B69     	 ldr r3,[r7,#16]
 4021 004e 5A1C     	 adds r2,r3,#1
 4022 0050 3A61     	 str r2,[r7,#16]
 4023 0052 3A68     	 ldr r2,[r7]
 4024 0054 1344     	 add r3,r3,r2
 4025 0056 2E22     	 movs r2,#46
 4026 0058 5A72     	 strb r2,[r3,#9]
 4027              	.L243:
2731:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->fname[di++] = c;
 4028              	 .loc 1 2731 0 is_stmt 1
 4029 005a 3B69     	 ldr r3,[r7,#16]
 4030 005c 5A1C     	 adds r2,r3,#1
 4031 005e 3A61     	 str r2,[r7,#16]
 4032 0060 3A68     	 ldr r2,[r7]
 4033 0062 1344     	 add r3,r3,r2
 4034 0064 FA7B     	 ldrb r2,[r7,#15]
 4035 0066 5A72     	 strb r2,[r3,#9]
 4036              	.L240:
2726:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (TCHAR)dp->dir[si++];
 4037              	 .loc 1 2726 0
 4038 0068 7B69     	 ldr r3,[r7,#20]
 4039 006a 0A2B     	 cmp r3,#10
 4040 006c DAD9     	 bls .L244
2732:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2733:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[di] = 0;
 4041              	 .loc 1 2733 0
 4042 006e 3A68     	 ldr r2,[r7]
 4043 0070 3B69     	 ldr r3,[r7,#16]
 4044 0072 1344     	 add r3,r3,r2
 4045 0074 0833     	 adds r3,r3,#8
 4046 0076 0022     	 movs r2,#0
 4047 0078 5A70     	 strb r2,[r3,#1]
2734:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2735:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 4048              	 .loc 1 2736 0
 4049 007a 7B68     	 ldr r3,[r7,#4]
 4050 007c 1B6A     	 ldr r3,[r3,#32]
 4051 007e DA7A     	 ldrb r2,[r3,#11]
 4052 0080 3B68     	 ldr r3,[r7]
 4053 0082 1A72     	 strb r2,[r3,#8]
2737:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 4054              	 .loc 1 2737 0
 4055 0084 7B68     	 ldr r3,[r7,#4]
 4056 0086 1B6A     	 ldr r3,[r3,#32]
 4057 0088 1C33     	 adds r3,r3,#28
 4058 008a 1846     	 mov r0,r3
 4059 008c FFF7FEFF 	 bl ld_dword
 4060 0090 0246     	 mov r2,r0
 4061 0092 3B68     	 ldr r3,[r7]
 4062 0094 1A60     	 str r2,[r3]
2738:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 4063              	 .loc 1 2738 0
 4064 0096 7B68     	 ldr r3,[r7,#4]
 4065 0098 1B6A     	 ldr r3,[r3,#32]
 4066 009a 1633     	 adds r3,r3,#22
 4067 009c 1846     	 mov r0,r3
 4068 009e FFF7FEFF 	 bl ld_word
 4069 00a2 0346     	 mov r3,r0
 4070 00a4 1A46     	 mov r2,r3
 4071 00a6 3B68     	 ldr r3,[r7]
 4072 00a8 DA80     	 strh r2,[r3,#6]
2739:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 4073              	 .loc 1 2739 0
 4074 00aa 7B68     	 ldr r3,[r7,#4]
 4075 00ac 1B6A     	 ldr r3,[r3,#32]
 4076 00ae 1833     	 adds r3,r3,#24
 4077 00b0 1846     	 mov r0,r3
 4078 00b2 FFF7FEFF 	 bl ld_word
 4079 00b6 0346     	 mov r3,r0
 4080 00b8 1A46     	 mov r2,r3
 4081 00ba 3B68     	 ldr r3,[r7]
 4082 00bc 9A80     	 strh r2,[r3,#4]
 4083              	.L237:
2740:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4084              	 .loc 1 2740 0
 4085 00be 1837     	 adds r7,r7,#24
 4086              	.LCFI184:
 4087              	 .cfi_def_cfa_offset 8
 4088 00c0 BD46     	 mov sp,r7
 4089              	.LCFI185:
 4090              	 .cfi_def_cfa_register 13
 4091              	 
 4092 00c2 80BD     	 pop {r7,pc}
 4093              	 .cfi_endproc
 4094              	.LFE33:
 4096              	 .section .rodata
 4097              	 .align 2
 4098              	.LC0:
 4099 0000 222A2B2C 	 .ascii "\"*+,:;<=>?[]|\177\000"
 4099      3A3B3C3D 
 4099      3E3F5B5D 
 4099      7C7F00
 4100              	 .section .text.create_name,"ax",%progbits
 4101              	 .align 2
 4102              	 .thumb
 4103              	 .thumb_func
 4105              	create_name:
 4106              	.LFB34:
2741:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2742:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2743:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2744:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2745:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2746:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FIND && FF_FS_MINIMIZE <= 1
2747:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2748:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Pattern matching                                                      */
2749:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2750:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2751:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD get_achar (	/* Get a character and advances ptr */
2752:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** ptr		/* Pointer to pointer to the ANSI/OEM or Unicode string */
2753:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2754:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2755:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD chr;
2756:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2757:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2758:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unicode input */
2759:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = tchar2uni(ptr);
2760:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong UTF encoding is recognized as end of the string */
2761:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = ff_wtoupper(chr);
2762:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2763:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input */
2764:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (BYTE)*(*ptr)++;				/* Get a byte */
2765:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsLower(chr)) chr -= 0x20;		/* To upper ASCII char */
2766:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2767:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2768:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
2769:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2770:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2771:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
2772:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
2773:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
2774:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2775:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2776:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2777:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2778:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return chr;
2779:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2780:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2781:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2782:../Dave/Generated/FATFS/ff_Src/ff.c **** static int pattern_matching (	/* 0:not matched, 1:matched */
2783:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2784:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2785:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2786:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int inf				/* Infinite search (* specified) */
2787:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2788:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2789:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *pp, *np;
2790:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD pc, nc;
2791:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nm, nx;
2792:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2793:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2794:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2795:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2796:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2797:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*pat == 0 && inf) return 1;	/* (short circuit) */
2798:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2799:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2800:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2801:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
2802:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2803:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nm = nx = 0;
2804:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {				/* Analyze the wildcard block */
2805:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2806:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (*pp == '?' || *pp == '*');
2807:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2808:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2809:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2810:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2811:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2812:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2813:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2814:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2815:../Dave/Generated/FATFS/ff_Src/ff.c **** 		get_achar(&nam);			/* nam++ */
2816:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2817:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2818:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
2819:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2820:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2821:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
2822:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2823:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2824:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2825:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2826:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Pick a top segment and create the object name in directory form       */
2827:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2829:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2830:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,					/* Pointer to the directory object */
2831:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
2832:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2833:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4107              	 .loc 1 2833 0
 4108              	 .cfi_startproc
 4109              	 
 4110              	 
 4111 0000 80B5     	 push {r7,lr}
 4112              	.LCFI186:
 4113              	 .cfi_def_cfa_offset 8
 4114              	 .cfi_offset 7,-8
 4115              	 .cfi_offset 14,-4
 4116 0002 8AB0     	 sub sp,sp,#40
 4117              	.LCFI187:
 4118              	 .cfi_def_cfa_offset 48
 4119 0004 00AF     	 add r7,sp,#0
 4120              	.LCFI188:
 4121              	 .cfi_def_cfa_register 7
 4122 0006 7860     	 str r0,[r7,#4]
 4123 0008 3960     	 str r1,[r7]
2834:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2835:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b, cf;
2836:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, *lfn;
2837:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD uc;
2838:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, ni, si, di;
2839:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *p;
2840:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2841:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2842:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create LFN into LFN working buffer */
2843:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2844:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2845:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = tchar2uni(&p);			/* Get a character */
2846:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
2847:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
2848:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (WCHAR)uc;
2849:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is fou
2850:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characte
2851:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2852:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfn[di++] = wc;					/* Store the Unicode character */
2853:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2854:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
2855:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*path = p;							/* Return pointer to the next segment */
2856:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2857:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2858:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
2859:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2860:../Dave/Generated/FATFS/ff_Src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2861:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfn[di] = 0;
2862:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
2863:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2864:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2865:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2866:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
2867:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2868:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2869:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2870:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = lfn[di - 1];
2871:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != ' ' && wc != '.') break;
2872:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di--;
2873:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2874:../Dave/Generated/FATFS/ff_Src/ff.c **** 	lfn[di] = 0;							/* LFN is created into the working buffer */
2875:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
2876:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2877:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create SFN in directory form */
2878:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
2879:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
2880:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
2881:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2882:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(dp->fn, ' ', 11);
2883:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = b = 0; ni = 8;
2884:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2885:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = lfn[si++];					/* Get an LFN character */
2886:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) break;				/* Break on end of the LFN */
2887:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
2888:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cf |= NS_LOSS | NS_LFN;
2889:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
2890:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2891:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2892:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i >= ni || si == di) {		/* End of field? */
2893:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ni == 11) {				/* Name extension overflow? */
2894:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cf |= NS_LOSS | NS_LFN;
2895:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
2896:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2897:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
2898:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si > di) break;						/* No name extension? */
2899:../Dave/Generated/FATFS/ff_Src/ff.c **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
2900:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
2901:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2902:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2903:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
2904:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
2905:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2906:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ExCvt) {	/* At SBCS */
2907:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2908:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2909:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* At DBCS */
2910:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2911:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2912:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900	/* SBCS cfg */
2913:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2914:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2915:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* DBCS cfg */
2916:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2917:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2918:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2919:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2920:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc >= 0x100) {				/* Is this a DBC? */
2921:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= ni - 1) {			/* Field overflow? */
2922:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cf |= NS_LOSS | NS_LFN;
2923:../Dave/Generated/FATFS/ff_Src/ff.c **** 				i = ni; continue;		/* Next field */
2924:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2925:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
2926:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* SBC */
2927:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
2928:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2929:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2930:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsUpper(wc)) {		/* ASCII upper case? */
2931:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b |= 2;
2932:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2933:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(wc)) {		/* ASCII lower case? */
2934:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b |= 1; wc -= 0x20;
2935:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2936:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2937:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2938:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[i++] = (BYTE)wc;
2939:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2940:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2942:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2943:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
2944:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
2945:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
2946:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
2947:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
2948:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2949:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2950:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
2951:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2952:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
2953:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2954:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2955:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* FF_USE_LFN : Non-LFN configuration */
2956:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE c, d, *sfn;
2957:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT ni, si, i;
2958:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *p;
2959:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2960:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create file name in directory form */
2961:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = *path; sfn = dp->fn;
 4124              	 .loc 1 2961 0
 4125 000a 3B68     	 ldr r3,[r7]
 4126 000c 1B68     	 ldr r3,[r3]
 4127 000e 7B61     	 str r3,[r7,#20]
 4128 0010 7B68     	 ldr r3,[r7,#4]
 4129 0012 2433     	 adds r3,r3,#36
 4130 0014 3B61     	 str r3,[r7,#16]
2962:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(sfn, ' ', 11);
 4131              	 .loc 1 2962 0
 4132 0016 3869     	 ldr r0,[r7,#16]
 4133 0018 2021     	 movs r1,#32
 4134 001a 0B22     	 movs r2,#11
 4135 001c FFF7FEFF 	 bl mem_set
2963:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = i = 0; ni = 8;
 4136              	 .loc 1 2963 0
 4137 0020 0023     	 movs r3,#0
 4138 0022 BB61     	 str r3,[r7,#24]
 4139 0024 BB69     	 ldr r3,[r7,#24]
 4140 0026 FB61     	 str r3,[r7,#28]
 4141 0028 0823     	 movs r3,#8
 4142 002a 3B62     	 str r3,[r7,#32]
2964:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
2965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 4143              	 .loc 1 2965 0
 4144 002c 7A69     	 ldr r2,[r7,#20]
 4145 002e FB69     	 ldr r3,[r7,#28]
 4146 0030 1344     	 add r3,r3,r2
 4147 0032 1B78     	 ldrb r3,[r3]
 4148 0034 2E2B     	 cmp r3,#46
 4149 0036 36D1     	 bne .L246
 4150              	.L248:
2966:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
2967:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = (BYTE)p[si++];
 4151              	 .loc 1 2967 0
 4152 0038 FB69     	 ldr r3,[r7,#28]
 4153 003a 5A1C     	 adds r2,r3,#1
 4154 003c FA61     	 str r2,[r7,#28]
 4155 003e 7A69     	 ldr r2,[r7,#20]
 4156 0040 1344     	 add r3,r3,r2
 4157 0042 1B78     	 ldrb r3,[r3]
 4158 0044 87F82730 	 strb r3,[r7,#39]
2968:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c != '.' || si >= 3) break;
 4159              	 .loc 1 2968 0
 4160 0048 97F82730 	 ldrb r3,[r7,#39]
 4161 004c 2E2B     	 cmp r3,#46
 4162 004e 0BD1     	 bne .L247
 4163              	 .loc 1 2968 0 is_stmt 0 discriminator 1
 4164 0050 FB69     	 ldr r3,[r7,#28]
 4165 0052 022B     	 cmp r3,#2
 4166 0054 08D8     	 bhi .L247
2969:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
 4167              	 .loc 1 2969 0 is_stmt 1
 4168 0056 BB69     	 ldr r3,[r7,#24]
 4169 0058 5A1C     	 adds r2,r3,#1
 4170 005a BA61     	 str r2,[r7,#24]
 4171 005c 3A69     	 ldr r2,[r7,#16]
 4172 005e 1344     	 add r3,r3,r2
 4173 0060 97F82720 	 ldrb r2,[r7,#39]
 4174 0064 1A70     	 strb r2,[r3]
2970:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 4175              	 .loc 1 2970 0
 4176 0066 E7E7     	 b .L248
 4177              	.L247:
2971:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 4178              	 .loc 1 2971 0
 4179 0068 97F82730 	 ldrb r3,[r7,#39]
 4180 006c 2F2B     	 cmp r3,#47
 4181 006e 09D0     	 beq .L249
 4182              	 .loc 1 2971 0 is_stmt 0 discriminator 1
 4183 0070 97F82730 	 ldrb r3,[r7,#39]
 4184 0074 5C2B     	 cmp r3,#92
 4185 0076 05D0     	 beq .L249
 4186              	 .loc 1 2971 0 discriminator 2
 4187 0078 97F82730 	 ldrb r3,[r7,#39]
 4188 007c 202B     	 cmp r3,#32
 4189 007e 01D9     	 bls .L249
 4190              	 .loc 1 2971 0 discriminator 3
 4191 0080 0623     	 movs r3,#6
 4192 0082 C3E0     	 b .L250
 4193              	.L249:
2972:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
 4194              	 .loc 1 2972 0 is_stmt 1
 4195 0084 7A69     	 ldr r2,[r7,#20]
 4196 0086 FB69     	 ldr r3,[r7,#28]
 4197 0088 1A44     	 add r2,r2,r3
 4198 008a 3B68     	 ldr r3,[r7]
 4199 008c 1A60     	 str r2,[r3]
2973:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
 4200              	 .loc 1 2973 0
 4201 008e 3B69     	 ldr r3,[r7,#16]
 4202 0090 0B33     	 adds r3,r3,#11
 4203 0092 97F82720 	 ldrb r2,[r7,#39]
 4204 0096 202A     	 cmp r2,#32
 4205 0098 01D8     	 bhi .L251
 4206              	 .loc 1 2973 0 is_stmt 0 discriminator 1
 4207 009a 2422     	 movs r2,#36
 4208 009c 00E0     	 b .L252
 4209              	.L251:
 4210              	 .loc 1 2973 0 discriminator 2
 4211 009e 2022     	 movs r2,#32
 4212              	.L252:
 4213              	 .loc 1 2973 0 discriminator 4
 4214 00a0 1A70     	 strb r2,[r3]
2974:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
 4215              	 .loc 1 2974 0 is_stmt 1 discriminator 4
 4216 00a2 0023     	 movs r3,#0
 4217 00a4 B2E0     	 b .L250
 4218              	.L246:
2975:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2976:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2977:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2978:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (BYTE)p[si++];				/* Get a byte */
 4219              	 .loc 1 2978 0
 4220 00a6 FB69     	 ldr r3,[r7,#28]
 4221 00a8 5A1C     	 adds r2,r3,#1
 4222 00aa FA61     	 str r2,[r7,#28]
 4223 00ac 7A69     	 ldr r2,[r7,#20]
 4224 00ae 1344     	 add r3,r3,r2
 4225 00b0 1B78     	 ldrb r3,[r3]
 4226 00b2 87F82730 	 strb r3,[r7,#39]
2979:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 4227              	 .loc 1 2979 0
 4228 00b6 97F82730 	 ldrb r3,[r7,#39]
 4229 00ba 202B     	 cmp r3,#32
 4230 00bc 00D8     	 bhi .L253
 4231 00be 89E0     	 b .L254
 4232              	.L253:
2980:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 4233              	 .loc 1 2980 0
 4234 00c0 97F82730 	 ldrb r3,[r7,#39]
 4235 00c4 2F2B     	 cmp r3,#47
 4236 00c6 03D0     	 beq .L255
 4237              	 .loc 1 2980 0 is_stmt 0 discriminator 1
 4238 00c8 97F82730 	 ldrb r3,[r7,#39]
 4239 00cc 5C2B     	 cmp r3,#92
 4240 00ce 10D1     	 bne .L256
 4241              	.L255:
2981:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 4242              	 .loc 1 2981 0 is_stmt 1
 4243 00d0 02E0     	 b .L257
 4244              	.L258:
 4245              	 .loc 1 2981 0 is_stmt 0 discriminator 4
 4246 00d2 FB69     	 ldr r3,[r7,#28]
 4247 00d4 0133     	 adds r3,r3,#1
 4248 00d6 FB61     	 str r3,[r7,#28]
 4249              	.L257:
 4250              	 .loc 1 2981 0 discriminator 1
 4251 00d8 7A69     	 ldr r2,[r7,#20]
 4252 00da FB69     	 ldr r3,[r7,#28]
 4253 00dc 1344     	 add r3,r3,r2
 4254 00de 1B78     	 ldrb r3,[r3]
 4255 00e0 2F2B     	 cmp r3,#47
 4256 00e2 F6D0     	 beq .L258
 4257              	 .loc 1 2981 0 discriminator 3
 4258 00e4 7A69     	 ldr r2,[r7,#20]
 4259 00e6 FB69     	 ldr r3,[r7,#28]
 4260 00e8 1344     	 add r3,r3,r2
 4261 00ea 1B78     	 ldrb r3,[r3]
 4262 00ec 5C2B     	 cmp r3,#92
 4263 00ee F0D0     	 beq .L258
2982:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 4264              	 .loc 1 2982 0 is_stmt 1
 4265 00f0 70E0     	 b .L254
 4266              	.L256:
2983:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2984:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 4267              	 .loc 1 2984 0
 4268 00f2 97F82730 	 ldrb r3,[r7,#39]
 4269 00f6 2E2B     	 cmp r3,#46
 4270 00f8 03D0     	 beq .L259
 4271              	 .loc 1 2984 0 is_stmt 0 discriminator 1
 4272 00fa BA69     	 ldr r2,[r7,#24]
 4273 00fc 3B6A     	 ldr r3,[r7,#32]
 4274 00fe 9A42     	 cmp r2,r3
 4275 0100 0DD3     	 bcc .L260
 4276              	.L259:
2985:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 4277              	 .loc 1 2985 0 is_stmt 1
 4278 0102 3B6A     	 ldr r3,[r7,#32]
 4279 0104 0B2B     	 cmp r3,#11
 4280 0106 03D0     	 beq .L261
 4281              	 .loc 1 2985 0 is_stmt 0 discriminator 2
 4282 0108 97F82730 	 ldrb r3,[r7,#39]
 4283 010c 2E2B     	 cmp r3,#46
 4284 010e 01D0     	 beq .L262
 4285              	.L261:
 4286              	 .loc 1 2985 0 discriminator 3
 4287 0110 0623     	 movs r3,#6
 4288 0112 7BE0     	 b .L250
 4289              	.L262:
2986:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = 8; ni = 11;				/* Enter file extension field */
 4290              	 .loc 1 2986 0 is_stmt 1
 4291 0114 0823     	 movs r3,#8
 4292 0116 BB61     	 str r3,[r7,#24]
 4293 0118 0B23     	 movs r3,#11
 4294 011a 3B62     	 str r3,[r7,#32]
2987:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 4295              	 .loc 1 2987 0
 4296 011c 59E0     	 b .L263
 4297              	.L260:
2988:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2989:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2990:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
2991:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
2992:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2993:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
2994:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= 0x80) {				/* Is SBC extended character? */
 4298              	 .loc 1 2994 0
 4299 011e 97F82730 	 ldrb r3,[r7,#39]
 4300 0122 5BB2     	 sxtb r3,r3
 4301 0124 002B     	 cmp r3,#0
 4302 0126 07DA     	 bge .L264
2995:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 4303              	 .loc 1 2995 0
 4304 0128 97F82730 	 ldrb r3,[r7,#39]
 4305 012c 03F07F03 	 and r3,r3,#127
 4306 0130 384A     	 ldr r2,.L274
 4307 0132 D35C     	 ldrb r3,[r2,r3]
 4308 0134 87F82730 	 strb r3,[r7,#39]
 4309              	.L264:
2996:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2997:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2998:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 4310              	 .loc 1 2998 0
 4311 0138 97F82730 	 ldrb r3,[r7,#39]
 4312 013c 1846     	 mov r0,r3
 4313 013e FFF7FEFF 	 bl dbc_1st
 4314 0142 0346     	 mov r3,r0
 4315 0144 002B     	 cmp r3,#0
 4316 0146 24D0     	 beq .L265
2999:../Dave/Generated/FATFS/ff_Src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 4317              	 .loc 1 2999 0
 4318 0148 FB69     	 ldr r3,[r7,#28]
 4319 014a 5A1C     	 adds r2,r3,#1
 4320 014c FA61     	 str r2,[r7,#28]
 4321 014e 7A69     	 ldr r2,[r7,#20]
 4322 0150 1344     	 add r3,r3,r2
 4323 0152 1B78     	 ldrb r3,[r3]
 4324 0154 FB73     	 strb r3,[r7,#15]
3000:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 4325              	 .loc 1 3000 0
 4326 0156 FB7B     	 ldrb r3,[r7,#15]
 4327 0158 1846     	 mov r0,r3
 4328 015a FFF7FEFF 	 bl dbc_2nd
 4329 015e 0346     	 mov r3,r0
 4330 0160 002B     	 cmp r3,#0
 4331 0162 04D0     	 beq .L266
 4332              	 .loc 1 3000 0 is_stmt 0 discriminator 2
 4333 0164 3B6A     	 ldr r3,[r7,#32]
 4334 0166 5A1E     	 subs r2,r3,#1
 4335 0168 BB69     	 ldr r3,[r7,#24]
 4336 016a 9A42     	 cmp r2,r3
 4337 016c 01D8     	 bhi .L267
 4338              	.L266:
 4339              	 .loc 1 3000 0 discriminator 3
 4340 016e 0623     	 movs r3,#6
 4341 0170 4CE0     	 b .L250
 4342              	.L267:
3001:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
 4343              	 .loc 1 3001 0 is_stmt 1
 4344 0172 BB69     	 ldr r3,[r7,#24]
 4345 0174 5A1C     	 adds r2,r3,#1
 4346 0176 BA61     	 str r2,[r7,#24]
 4347 0178 3A69     	 ldr r2,[r7,#16]
 4348 017a 1344     	 add r3,r3,r2
 4349 017c 97F82720 	 ldrb r2,[r7,#39]
 4350 0180 1A70     	 strb r2,[r3]
3002:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = d;
 4351              	 .loc 1 3002 0
 4352 0182 BB69     	 ldr r3,[r7,#24]
 4353 0184 5A1C     	 adds r2,r3,#1
 4354 0186 BA61     	 str r2,[r7,#24]
 4355 0188 3A69     	 ldr r2,[r7,#16]
 4356 018a 1344     	 add r3,r3,r2
 4357 018c FA7B     	 ldrb r2,[r7,#15]
 4358 018e 1A70     	 strb r2,[r3]
 4359 0190 1FE0     	 b .L263
 4360              	.L265:
3003:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* SBC */
3004:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 4361              	 .loc 1 3004 0
 4362 0192 97F82730 	 ldrb r3,[r7,#39]
 4363 0196 2048     	 ldr r0,.L274+4
 4364 0198 1946     	 mov r1,r3
 4365 019a FFF7FEFF 	 bl chk_chr
 4366 019e 0346     	 mov r3,r0
 4367 01a0 002B     	 cmp r3,#0
 4368 01a2 01D0     	 beq .L268
 4369              	 .loc 1 3004 0 is_stmt 0 discriminator 1
 4370 01a4 0623     	 movs r3,#6
 4371 01a6 31E0     	 b .L250
 4372              	.L268:
3005:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 4373              	 .loc 1 3005 0 is_stmt 1
 4374 01a8 97F82730 	 ldrb r3,[r7,#39]
 4375 01ac 602B     	 cmp r3,#96
 4376 01ae 08D9     	 bls .L269
 4377              	 .loc 1 3005 0 is_stmt 0 discriminator 1
 4378 01b0 97F82730 	 ldrb r3,[r7,#39]
 4379 01b4 7A2B     	 cmp r3,#122
 4380 01b6 04D8     	 bhi .L269
 4381              	 .loc 1 3005 0 discriminator 2
 4382 01b8 97F82730 	 ldrb r3,[r7,#39]
 4383 01bc 203B     	 subs r3,r3,#32
 4384 01be 87F82730 	 strb r3,[r7,#39]
 4385              	.L269:
3006:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
 4386              	 .loc 1 3006 0 is_stmt 1
 4387 01c2 BB69     	 ldr r3,[r7,#24]
 4388 01c4 5A1C     	 adds r2,r3,#1
 4389 01c6 BA61     	 str r2,[r7,#24]
 4390 01c8 3A69     	 ldr r2,[r7,#16]
 4391 01ca 1344     	 add r3,r3,r2
 4392 01cc 97F82720 	 ldrb r2,[r7,#39]
 4393 01d0 1A70     	 strb r2,[r3]
 4394              	.L263:
3007:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3008:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 4395              	 .loc 1 3008 0
 4396 01d2 68E7     	 b .L246
 4397              	.L254:
3009:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
 4398              	 .loc 1 3009 0
 4399 01d4 7A69     	 ldr r2,[r7,#20]
 4400 01d6 FB69     	 ldr r3,[r7,#28]
 4401 01d8 1A44     	 add r2,r2,r3
 4402 01da 3B68     	 ldr r3,[r7]
 4403 01dc 1A60     	 str r2,[r3]
3010:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 4404              	 .loc 1 3010 0
 4405 01de BB69     	 ldr r3,[r7,#24]
 4406 01e0 002B     	 cmp r3,#0
 4407 01e2 01D1     	 bne .L270
 4408              	 .loc 1 3010 0 is_stmt 0 discriminator 1
 4409 01e4 0623     	 movs r3,#6
 4410 01e6 11E0     	 b .L250
 4411              	.L270:
3011:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3012:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
 4412              	 .loc 1 3012 0 is_stmt 1
 4413 01e8 3B69     	 ldr r3,[r7,#16]
 4414 01ea 1B78     	 ldrb r3,[r3]
 4415 01ec E52B     	 cmp r3,#229
 4416 01ee 02D1     	 bne .L271
 4417              	 .loc 1 3012 0 is_stmt 0 discriminator 1
 4418 01f0 3B69     	 ldr r3,[r7,#16]
 4419 01f2 0522     	 movs r2,#5
 4420 01f4 1A70     	 strb r2,[r3]
 4421              	.L271:
3013:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 4422              	 .loc 1 3013 0 is_stmt 1
 4423 01f6 3B69     	 ldr r3,[r7,#16]
 4424 01f8 0B33     	 adds r3,r3,#11
 4425 01fa 97F82720 	 ldrb r2,[r7,#39]
 4426 01fe 202A     	 cmp r2,#32
 4427 0200 01D8     	 bhi .L272
 4428              	 .loc 1 3013 0 is_stmt 0 discriminator 1
 4429 0202 0422     	 movs r2,#4
 4430 0204 00E0     	 b .L273
 4431              	.L272:
 4432              	 .loc 1 3013 0 discriminator 2
 4433 0206 0022     	 movs r2,#0
 4434              	.L273:
 4435              	 .loc 1 3013 0 discriminator 4
 4436 0208 1A70     	 strb r2,[r3]
3014:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3015:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 4437              	 .loc 1 3015 0 is_stmt 1 discriminator 4
 4438 020a 0023     	 movs r3,#0
 4439              	.L250:
3016:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_LFN */
3017:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4440              	 .loc 1 3017 0
 4441 020c 1846     	 mov r0,r3
 4442 020e 2837     	 adds r7,r7,#40
 4443              	.LCFI189:
 4444              	 .cfi_def_cfa_offset 8
 4445 0210 BD46     	 mov sp,r7
 4446              	.LCFI190:
 4447              	 .cfi_def_cfa_register 13
 4448              	 
 4449 0212 80BD     	 pop {r7,pc}
 4450              	.L275:
 4451              	 .align 2
 4452              	.L274:
 4453 0214 00000000 	 .word ExCvt
 4454 0218 00000000 	 .word .LC0
 4455              	 .cfi_endproc
 4456              	.LFE34:
 4458              	 .section .text.follow_path,"ax",%progbits
 4459              	 .align 2
 4460              	 .thumb
 4461              	 .thumb_func
 4463              	follow_path:
 4464              	.LFB35:
3018:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3019:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3020:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3021:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3022:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3023:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Follow a file path                                                    */
3024:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3025:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3026:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
3027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,					/* Directory object to return last directory and found object */
3028:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path			/* Full-path string to find a file or directory */
3029:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3030:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4465              	 .loc 1 3030 0
 4466              	 .cfi_startproc
 4467              	 
 4468              	 
 4469 0000 80B5     	 push {r7,lr}
 4470              	.LCFI191:
 4471              	 .cfi_def_cfa_offset 8
 4472              	 .cfi_offset 7,-8
 4473              	 .cfi_offset 14,-4
 4474 0002 86B0     	 sub sp,sp,#24
 4475              	.LCFI192:
 4476              	 .cfi_def_cfa_offset 32
 4477 0004 00AF     	 add r7,sp,#0
 4478              	.LCFI193:
 4479              	 .cfi_def_cfa_register 7
 4480 0006 7860     	 str r0,[r7,#4]
 4481 0008 3960     	 str r1,[r7]
3031:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3032:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ns;
3033:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 4482              	 .loc 1 3033 0
 4483 000a 7B68     	 ldr r3,[r7,#4]
 4484 000c 1B68     	 ldr r3,[r3]
 4485 000e 3B61     	 str r3,[r7,#16]
3034:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3035:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3036:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3037:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 4486              	 .loc 1 3037 0
 4487 0010 3B68     	 ldr r3,[r7]
 4488 0012 1B78     	 ldrb r3,[r3]
 4489 0014 2F2B     	 cmp r3,#47
 4490 0016 08D0     	 beq .L277
 4491              	 .loc 1 3037 0 is_stmt 0 discriminator 1
 4492 0018 3B68     	 ldr r3,[r7]
 4493 001a 1B78     	 ldrb r3,[r3]
 4494 001c 5C2B     	 cmp r3,#92
 4495 001e 04D0     	 beq .L277
3038:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 4496              	 .loc 1 3038 0 is_stmt 1
 4497 0020 3B69     	 ldr r3,[r7,#16]
 4498 0022 5A69     	 ldr r2,[r3,#20]
 4499 0024 7B68     	 ldr r3,[r7,#4]
 4500 0026 9A60     	 str r2,[r3,#8]
 4501 0028 0EE0     	 b .L278
 4502              	.L277:
3039:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
3040:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3041:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{										/* With heading separator */
3042:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 4503              	 .loc 1 3042 0
 4504 002a 02E0     	 b .L279
 4505              	.L280:
 4506              	 .loc 1 3042 0 is_stmt 0 discriminator 4
 4507 002c 3B68     	 ldr r3,[r7]
 4508 002e 0133     	 adds r3,r3,#1
 4509 0030 3B60     	 str r3,[r7]
 4510              	.L279:
 4511              	 .loc 1 3042 0 discriminator 1
 4512 0032 3B68     	 ldr r3,[r7]
 4513 0034 1B78     	 ldrb r3,[r3]
 4514 0036 2F2B     	 cmp r3,#47
 4515 0038 F8D0     	 beq .L280
 4516              	 .loc 1 3042 0 discriminator 3
 4517 003a 3B68     	 ldr r3,[r7]
 4518 003c 1B78     	 ldrb r3,[r3]
 4519 003e 5C2B     	 cmp r3,#92
 4520 0040 F4D0     	 beq .L280
3043:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.sclust = 0;					/* Start from root directory */
 4521              	 .loc 1 3043 0 is_stmt 1
 4522 0042 7B68     	 ldr r3,[r7,#4]
 4523 0044 0022     	 movs r2,#0
 4524 0046 9A60     	 str r2,[r3,#8]
 4525              	.L278:
3044:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3045:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3046:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
3047:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
3049:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DIR dj;
3050:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3051:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_scl = fs->cdc_scl;
3052:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_size = fs->cdc_size;
3053:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_ofs = fs->cdc_ofs;
3054:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = load_obj_xdir(&dj, &dp->obj);
3055:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
3056:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
3057:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3058:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3059:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3060:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3061:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3062:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 4526              	 .loc 1 3062 0
 4527 0048 3B68     	 ldr r3,[r7]
 4528 004a 1B78     	 ldrb r3,[r3]
 4529 004c 1F2B     	 cmp r3,#31
 4530 004e 0AD8     	 bhi .L281
3063:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 4531              	 .loc 1 3063 0
 4532 0050 7B68     	 ldr r3,[r7,#4]
 4533 0052 8022     	 movs r2,#128
 4534 0054 83F82F20 	 strb r2,[r3,#47]
3064:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(dp, 0);
 4535              	 .loc 1 3064 0
 4536 0058 7868     	 ldr r0,[r7,#4]
 4537 005a 0021     	 movs r1,#0
 4538 005c FFF7FEFF 	 bl dir_sdi
 4539 0060 0346     	 mov r3,r0
 4540 0062 FB75     	 strb r3,[r7,#23]
 4541 0064 53E0     	 b .L282
 4542              	.L281:
3065:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3066:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {								/* Follow path */
3067:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
3068:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 4543              	 .loc 1 3068 0
 4544 0066 3B46     	 mov r3,r7
 4545 0068 7868     	 ldr r0,[r7,#4]
 4546 006a 1946     	 mov r1,r3
 4547 006c FFF7FEFF 	 bl create_name
 4548 0070 0346     	 mov r3,r0
 4549 0072 FB75     	 strb r3,[r7,#23]
3069:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 4550              	 .loc 1 3069 0
 4551 0074 FB7D     	 ldrb r3,[r7,#23]
 4552 0076 002B     	 cmp r3,#0
 4553 0078 00D0     	 beq .L283
 4554 007a 48E0     	 b .L282
 4555              	.L283:
3070:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 4556              	 .loc 1 3070 0
 4557 007c 7868     	 ldr r0,[r7,#4]
 4558 007e FFF7FEFF 	 bl dir_find
 4559 0082 0346     	 mov r3,r0
 4560 0084 FB75     	 strb r3,[r7,#23]
3071:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ns = dp->fn[NSFLAG];
 4561              	 .loc 1 3071 0
 4562 0086 7B68     	 ldr r3,[r7,#4]
 4563 0088 93F82F30 	 ldrb r3,[r3,#47]
 4564 008c FB73     	 strb r3,[r7,#15]
3072:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 4565              	 .loc 1 3072 0
 4566 008e FB7D     	 ldrb r3,[r7,#23]
 4567 0090 002B     	 cmp r3,#0
 4568 0092 1DD0     	 beq .L284
3073:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 4569              	 .loc 1 3073 0
 4570 0094 FB7D     	 ldrb r3,[r7,#23]
 4571 0096 042B     	 cmp r3,#4
 4572 0098 19D1     	 bne .L285
3074:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 4573              	 .loc 1 3074 0
 4574 009a FB7B     	 ldrb r3,[r7,#15]
 4575 009c 03F02003 	 and r3,r3,#32
 4576 00a0 002B     	 cmp r3,#0
 4577 00a2 0CD0     	 beq .L286
3075:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 4578              	 .loc 1 3075 0
 4579 00a4 FB7B     	 ldrb r3,[r7,#15]
 4580 00a6 03F00403 	 and r3,r3,#4
 4581 00aa 002B     	 cmp r3,#0
 4582 00ac 00D1     	 bne .L287
 4583              	 .loc 1 3075 0 is_stmt 0 discriminator 1
 4584 00ae 2DE0     	 b .L288
 4585              	.L287:
3076:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
 4586              	 .loc 1 3076 0 is_stmt 1
 4587 00b0 7B68     	 ldr r3,[r7,#4]
 4588 00b2 8022     	 movs r2,#128
 4589 00b4 83F82F20 	 strb r2,[r3,#47]
3077:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_OK;
 4590              	 .loc 1 3077 0
 4591 00b8 0023     	 movs r3,#0
 4592 00ba FB75     	 strb r3,[r7,#23]
 4593 00bc 07E0     	 b .L285
 4594              	.L286:
3078:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {							/* Could not find the object */
3079:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 4595              	 .loc 1 3079 0
 4596 00be FB7B     	 ldrb r3,[r7,#15]
 4597 00c0 03F00403 	 and r3,r3,#4
 4598 00c4 002B     	 cmp r3,#0
 4599 00c6 02D1     	 bne .L285
 4600              	 .loc 1 3079 0 is_stmt 0 discriminator 1
 4601 00c8 0523     	 movs r3,#5
 4602 00ca FB75     	 strb r3,[r7,#23]
3080:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3081:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3082:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
 4603              	 .loc 1 3082 0 is_stmt 1 discriminator 1
 4604 00cc 1FE0     	 b .L282
 4605              	.L285:
 4606              	 .loc 1 3082 0 is_stmt 0
 4607 00ce 1EE0     	 b .L282
 4608              	.L284:
3083:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3084:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 4609              	 .loc 1 3084 0 is_stmt 1
 4610 00d0 FB7B     	 ldrb r3,[r7,#15]
 4611 00d2 03F00403 	 and r3,r3,#4
 4612 00d6 002B     	 cmp r3,#0
 4613 00d8 00D0     	 beq .L289
 4614 00da 18E0     	 b .L282
 4615              	.L289:
3085:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Get into the sub-directory */
3086:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 4616              	 .loc 1 3086 0
 4617 00dc 7B68     	 ldr r3,[r7,#4]
 4618 00de 9B79     	 ldrb r3,[r3,#6]
 4619 00e0 03F01003 	 and r3,r3,#16
 4620 00e4 002B     	 cmp r3,#0
 4621 00e6 02D1     	 bne .L290
3087:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_NO_PATH; break;
 4622              	 .loc 1 3087 0
 4623 00e8 0523     	 movs r3,#5
 4624 00ea FB75     	 strb r3,[r7,#23]
 4625 00ec 0FE0     	 b .L282
 4626              	.L290:
3088:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3089:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3090:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
3091:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_scl = dp->obj.sclust;
3092:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
3093:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_ofs = dp->blk_ofs;
3094:../Dave/Generated/FATFS/ff_Src/ff.c **** 				init_alloc_info(fs, &dp->obj);	/* Open next directory */
3095:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
3096:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3097:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3098:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 4627              	 .loc 1 3098 0
 4628 00ee 7B68     	 ldr r3,[r7,#4]
 4629 00f0 5B69     	 ldr r3,[r3,#20]
 4630 00f2 C3F30803 	 ubfx r3,r3,#0,#9
 4631 00f6 3033     	 adds r3,r3,#48
 4632 00f8 3A69     	 ldr r2,[r7,#16]
 4633 00fa 1344     	 add r3,r3,r2
 4634 00fc 0433     	 adds r3,r3,#4
 4635 00fe 3869     	 ldr r0,[r7,#16]
 4636 0100 1946     	 mov r1,r3
 4637 0102 FFF7FEFF 	 bl ld_clust
 4638 0106 0246     	 mov r2,r0
 4639 0108 7B68     	 ldr r3,[r7,#4]
 4640 010a 9A60     	 str r2,[r3,#8]
 4641              	.L288:
3099:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3100:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 4642              	 .loc 1 3100 0
 4643 010c ABE7     	 b .L281
 4644              	.L282:
3101:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3102:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3103:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 4645              	 .loc 1 3103 0
 4646 010e FB7D     	 ldrb r3,[r7,#23]
3104:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4647              	 .loc 1 3104 0
 4648 0110 1846     	 mov r0,r3
 4649 0112 1837     	 adds r7,r7,#24
 4650              	.LCFI194:
 4651              	 .cfi_def_cfa_offset 8
 4652 0114 BD46     	 mov sp,r7
 4653              	.LCFI195:
 4654              	 .cfi_def_cfa_register 13
 4655              	 
 4656 0116 80BD     	 pop {r7,pc}
 4657              	 .cfi_endproc
 4658              	.LFE35:
 4660              	 .section .text.get_ldnumber,"ax",%progbits
 4661              	 .align 2
 4662              	 .thumb
 4663              	 .thumb_func
 4665              	get_ldnumber:
 4666              	.LFB36:
3105:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3106:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3107:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3108:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3109:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3110:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get logical drive number from path name                               */
3111:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3112:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3113:../Dave/Generated/FATFS/ff_Src/ff.c **** static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer)
3114:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path		/* Pointer to pointer to the path name */
3115:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3116:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4667              	 .loc 1 3116 0
 4668              	 .cfi_startproc
 4669              	 
 4670              	 
 4671              	 
 4672 0000 80B4     	 push {r7}
 4673              	.LCFI196:
 4674              	 .cfi_def_cfa_offset 4
 4675              	 .cfi_offset 7,-4
 4676 0002 89B0     	 sub sp,sp,#36
 4677              	.LCFI197:
 4678              	 .cfi_def_cfa_offset 40
 4679 0004 00AF     	 add r7,sp,#0
 4680              	.LCFI198:
 4681              	 .cfi_def_cfa_register 7
 4682 0006 7860     	 str r0,[r7,#4]
3117:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *tp, *tt;
3118:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR tc;
3119:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int i, vol = -1;
 4683              	 .loc 1 3119 0
 4684 0008 4FF0FF33 	 mov r3,#-1
 4685 000c 7B61     	 str r3,[r7,#20]
3120:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
3121:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *sp;
3122:../Dave/Generated/FATFS/ff_Src/ff.c **** 	char c;
3123:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3124:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3125:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tt = tp = *path;
 4686              	 .loc 1 3125 0
 4687 000e 7B68     	 ldr r3,[r7,#4]
 4688 0010 1B68     	 ldr r3,[r3]
 4689 0012 3B61     	 str r3,[r7,#16]
 4690 0014 3B69     	 ldr r3,[r7,#16]
 4691 0016 FB61     	 str r3,[r7,#28]
3126:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!tp) return vol;	/* Invalid path name? */
 4692              	 .loc 1 3126 0
 4693 0018 3B69     	 ldr r3,[r7,#16]
 4694 001a 002B     	 cmp r3,#0
 4695 001c 01D1     	 bne .L293
 4696              	 .loc 1 3126 0 is_stmt 0 discriminator 1
 4697 001e 7B69     	 ldr r3,[r7,#20]
 4698 0020 2EE0     	 b .L294
 4699              	.L293:
3127:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the p
 4700              	 .loc 1 3127 0 is_stmt 1 discriminator 2
 4701 0022 FB69     	 ldr r3,[r7,#28]
 4702 0024 5A1C     	 adds r2,r3,#1
 4703 0026 FA61     	 str r2,[r7,#28]
 4704 0028 1B78     	 ldrb r3,[r3]
 4705 002a FB73     	 strb r3,[r7,#15]
 4706 002c FB7B     	 ldrb r3,[r7,#15]
 4707 002e 202B     	 cmp r3,#32
 4708 0030 02D9     	 bls .L295
 4709              	 .loc 1 3127 0 is_stmt 0 discriminator 1
 4710 0032 FB7B     	 ldrb r3,[r7,#15]
 4711 0034 3A2B     	 cmp r3,#58
 4712 0036 F4D1     	 bne .L293
 4713              	.L295:
3128:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3129:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (tc == ':') {	/* DOS/Windows style volume ID? */
 4714              	 .loc 1 3129 0 is_stmt 1
 4715 0038 FB7B     	 ldrb r3,[r7,#15]
 4716 003a 3A2B     	 cmp r3,#58
 4717 003c 1CD1     	 bne .L296
3130:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = FF_VOLUMES;
 4718              	 .loc 1 3130 0
 4719 003e 0123     	 movs r3,#1
 4720 0040 BB61     	 str r3,[r7,#24]
3131:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 4721              	 .loc 1 3131 0
 4722 0042 3B69     	 ldr r3,[r7,#16]
 4723 0044 1B78     	 ldrb r3,[r3]
 4724 0046 2F2B     	 cmp r3,#47
 4725 0048 0CD9     	 bls .L297
 4726              	 .loc 1 3131 0 is_stmt 0 discriminator 1
 4727 004a 3B69     	 ldr r3,[r7,#16]
 4728 004c 1B78     	 ldrb r3,[r3]
 4729 004e 392B     	 cmp r3,#57
 4730 0050 08D8     	 bhi .L297
 4731              	 .loc 1 3131 0 discriminator 2
 4732 0052 3B69     	 ldr r3,[r7,#16]
 4733 0054 9A1C     	 adds r2,r3,#2
 4734 0056 FB69     	 ldr r3,[r7,#28]
 4735 0058 9A42     	 cmp r2,r3
 4736 005a 03D1     	 bne .L297
3132:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = (int)*tp - '0';	/* Get the LD number */
 4737              	 .loc 1 3132 0 is_stmt 1
 4738 005c 3B69     	 ldr r3,[r7,#16]
 4739 005e 1B78     	 ldrb r3,[r3]
 4740 0060 303B     	 subs r3,r3,#48
 4741 0062 BB61     	 str r3,[r7,#24]
 4742              	.L297:
3133:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3134:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
3135:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {
3136:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = 0;
3137:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
3138:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3139:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {	/* Compare the volume ID with path name */
3140:../Dave/Generated/FATFS/ff_Src/ff.c **** 					c = *sp++; tc = *tp++;
3141:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (IsLower(c)) c -= 0x20;
3142:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (IsLower(tc)) tc -= 0x20;
3143:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (c && (TCHAR)c == tc);
3144:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
3145:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3146:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3147:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 4743              	 .loc 1 3147 0
 4744 0064 BB69     	 ldr r3,[r7,#24]
 4745 0066 002B     	 cmp r3,#0
 4746 0068 04D1     	 bne .L298
3148:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vol = i;		/* Drive number */
 4747              	 .loc 1 3148 0
 4748 006a BB69     	 ldr r3,[r7,#24]
 4749 006c 7B61     	 str r3,[r7,#20]
3149:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*path = tt;		/* Snip the drive prefix off */
 4750              	 .loc 1 3149 0
 4751 006e 7B68     	 ldr r3,[r7,#4]
 4752 0070 FA69     	 ldr r2,[r7,#28]
 4753 0072 1A60     	 str r2,[r3]
 4754              	.L298:
3150:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3151:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return vol;
 4755              	 .loc 1 3151 0
 4756 0074 7B69     	 ldr r3,[r7,#20]
 4757 0076 03E0     	 b .L294
 4758              	.L296:
3152:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3153:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
3154:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*tp == '/') {
3155:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
3156:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
3157:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3158:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Compare the volume ID with path name */
3159:../Dave/Generated/FATFS/ff_Src/ff.c **** 				c = *sp++; tc = *(++tp);
3160:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(c)) c -= 0x20;
3161:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(tc)) tc -= 0x20;
3162:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (c && (TCHAR)c == tc);
3163:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while ((c || (tc != '/' && (UINT)tc >= (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES);	/* Repe
3164:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
3165:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vol = i;		/* Drive number */
3166:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*path = tp;		/* Snip the drive prefix off */
3167:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return vol;
3168:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3169:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3170:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3171:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* No drive prefix is found */
3172:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3173:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = CurrVol;	/* Default drive is current drive */
 4759              	 .loc 1 3173 0
 4760 0078 044B     	 ldr r3,.L299
 4761 007a 1B78     	 ldrb r3,[r3]
 4762 007c 7B61     	 str r3,[r7,#20]
3174:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3175:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = 0;		/* Default drive is 0 */
3176:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3177:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return vol;		/* Return the default drive */
 4763              	 .loc 1 3177 0
 4764 007e 7B69     	 ldr r3,[r7,#20]
 4765              	.L294:
3178:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4766              	 .loc 1 3178 0
 4767 0080 1846     	 mov r0,r3
 4768 0082 2437     	 adds r7,r7,#36
 4769              	.LCFI199:
 4770              	 .cfi_def_cfa_offset 4
 4771 0084 BD46     	 mov sp,r7
 4772              	.LCFI200:
 4773              	 .cfi_def_cfa_register 13
 4774              	 
 4775 0086 5DF8047B 	 ldr r7,[sp],#4
 4776              	.LCFI201:
 4777              	 .cfi_restore 7
 4778              	 .cfi_def_cfa_offset 0
 4779 008a 7047     	 bx lr
 4780              	.L300:
 4781              	 .align 2
 4782              	.L299:
 4783 008c 00000000 	 .word CurrVol
 4784              	 .cfi_endproc
 4785              	.LFE36:
 4787              	 .section .rodata
 4788 000f 00       	 .align 2
 4789              	.LC1:
 4790 0010 46415400 	 .ascii "FAT\000"
 4791              	 .align 2
 4792              	.LC2:
 4793 0014 46415433 	 .ascii "FAT32\000"
 4793      3200
 4794 001a 0000     	 .section .text.check_fs,"ax",%progbits
 4795              	 .align 2
 4796              	 .thumb
 4797              	 .thumb_func
 4799              	check_fs:
 4800              	.LFB37:
3179:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3180:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3181:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3182:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3183:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3184:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Load a sector and check if it is an FAT VBR                           */
3185:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3186:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3187:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
3188:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Filesystem object */
3189:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
3190:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3191:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4801              	 .loc 1 3191 0
 4802              	 .cfi_startproc
 4803              	 
 4804              	 
 4805 0000 80B5     	 push {r7,lr}
 4806              	.LCFI202:
 4807              	 .cfi_def_cfa_offset 8
 4808              	 .cfi_offset 7,-8
 4809              	 .cfi_offset 14,-4
 4810 0002 82B0     	 sub sp,sp,#8
 4811              	.LCFI203:
 4812              	 .cfi_def_cfa_offset 16
 4813 0004 00AF     	 add r7,sp,#0
 4814              	.LCFI204:
 4815              	 .cfi_def_cfa_register 7
 4816 0006 7860     	 str r0,[r7,#4]
 4817 0008 3960     	 str r1,[r7]
3192:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 4818              	 .loc 1 3192 0
 4819 000a 7B68     	 ldr r3,[r7,#4]
 4820 000c 0022     	 movs r2,#0
 4821 000e DA70     	 strb r2,[r3,#3]
 4822 0010 7B68     	 ldr r3,[r7,#4]
 4823 0012 4FF0FF32 	 mov r2,#-1
 4824 0016 1A63     	 str r2,[r3,#48]
3193:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 4825              	 .loc 1 3193 0
 4826 0018 7868     	 ldr r0,[r7,#4]
 4827 001a 3968     	 ldr r1,[r7]
 4828 001c FFF7FEFF 	 bl move_window
 4829 0020 0346     	 mov r3,r0
 4830 0022 002B     	 cmp r3,#0
 4831 0024 01D0     	 beq .L302
 4832              	 .loc 1 3193 0 is_stmt 0 discriminator 1
 4833 0026 0423     	 movs r3,#4
 4834 0028 35E0     	 b .L303
 4835              	.L302:
3194:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3195:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here re
 4836              	 .loc 1 3195 0 is_stmt 1
 4837 002a 7B68     	 ldr r3,[r7,#4]
 4838 002c 03F23223 	 addw r3,r3,#562
 4839 0030 1846     	 mov r0,r3
 4840 0032 FFF7FEFF 	 bl ld_word
 4841 0036 0346     	 mov r3,r0
 4842 0038 1A46     	 mov r2,r3
 4843 003a 4AF65523 	 movw r3,#43605
 4844 003e 9A42     	 cmp r2,r3
 4845 0040 01D0     	 beq .L304
 4846              	 .loc 1 3195 0 is_stmt 0 discriminator 1
 4847 0042 0323     	 movs r3,#3
 4848 0044 27E0     	 b .L303
 4849              	.L304:
3196:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3197:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3198:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR
3199:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3200:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/
 4850              	 .loc 1 3200 0 is_stmt 1
 4851 0046 7B68     	 ldr r3,[r7,#4]
 4852 0048 93F83430 	 ldrb r3,[r3,#52]
 4853 004c E92B     	 cmp r3,#233
 4854 004e 09D0     	 beq .L305
 4855              	 .loc 1 3200 0 is_stmt 0 discriminator 1
 4856 0050 7B68     	 ldr r3,[r7,#4]
 4857 0052 93F83430 	 ldrb r3,[r3,#52]
 4858 0056 EB2B     	 cmp r3,#235
 4859 0058 04D0     	 beq .L305
 4860              	 .loc 1 3200 0 discriminator 2
 4861 005a 7B68     	 ldr r3,[r7,#4]
 4862 005c 93F83430 	 ldrb r3,[r3,#52]
 4863 0060 E82B     	 cmp r3,#232
 4864 0062 17D1     	 bne .L306
 4865              	.L305:
3201:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 4866              	 .loc 1 3201 0 is_stmt 1
 4867 0064 7B68     	 ldr r3,[r7,#4]
 4868 0066 6A33     	 adds r3,r3,#106
 4869 0068 1846     	 mov r0,r3
 4870 006a 0D49     	 ldr r1,.L308
 4871 006c 0322     	 movs r2,#3
 4872 006e FFF7FEFF 	 bl mem_cmp
 4873 0072 0346     	 mov r3,r0
 4874 0074 002B     	 cmp r3,#0
 4875 0076 01D1     	 bne .L307
 4876              	 .loc 1 3201 0 is_stmt 0 discriminator 1
 4877 0078 0023     	 movs r3,#0
 4878 007a 0CE0     	 b .L303
 4879              	.L307:
3202:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 4880              	 .loc 1 3202 0 is_stmt 1
 4881 007c 7B68     	 ldr r3,[r7,#4]
 4882 007e 8633     	 adds r3,r3,#134
 4883 0080 1846     	 mov r0,r3
 4884 0082 0849     	 ldr r1,.L308+4
 4885 0084 0522     	 movs r2,#5
 4886 0086 FFF7FEFF 	 bl mem_cmp
 4887 008a 0346     	 mov r3,r0
 4888 008c 002B     	 cmp r3,#0
 4889 008e 01D1     	 bne .L306
 4890              	 .loc 1 3202 0 is_stmt 0 discriminator 1
 4891 0090 0023     	 movs r3,#0
 4892 0092 00E0     	 b .L303
 4893              	.L306:
3203:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3204:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 2;	/* Valid BS but not FAT */
 4894              	 .loc 1 3204 0 is_stmt 1
 4895 0094 0223     	 movs r3,#2
 4896              	.L303:
3205:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4897              	 .loc 1 3205 0
 4898 0096 1846     	 mov r0,r3
 4899 0098 0837     	 adds r7,r7,#8
 4900              	.LCFI205:
 4901              	 .cfi_def_cfa_offset 8
 4902 009a BD46     	 mov sp,r7
 4903              	.LCFI206:
 4904              	 .cfi_def_cfa_register 13
 4905              	 
 4906 009c 80BD     	 pop {r7,pc}
 4907              	.L309:
 4908 009e 00BF     	 .align 2
 4909              	.L308:
 4910 00a0 10000000 	 .word .LC1
 4911 00a4 14000000 	 .word .LC2
 4912              	 .cfi_endproc
 4913              	.LFE37:
 4915              	 .section .text.find_volume,"ax",%progbits
 4916              	 .align 2
 4917              	 .thumb
 4918              	 .thumb_func
 4920              	find_volume:
 4921              	.LFB38:
3206:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3207:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3208:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3209:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3210:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3211:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Determine logical drive number and mount the volume if needed         */
3212:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3213:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3214:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
3215:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
3216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
3217:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mode					/* !=0: Check write protection for write access */
3218:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3219:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4922              	 .loc 1 3219 0
 4923              	 .cfi_startproc
 4924              	 
 4925              	 
 4926 0000 80B5     	 push {r7,lr}
 4927              	.LCFI207:
 4928              	 .cfi_def_cfa_offset 8
 4929              	 .cfi_offset 7,-8
 4930              	 .cfi_offset 14,-4
 4931 0002 96B0     	 sub sp,sp,#88
 4932              	.LCFI208:
 4933              	 .cfi_def_cfa_offset 96
 4934 0004 00AF     	 add r7,sp,#0
 4935              	.LCFI209:
 4936              	 .cfi_def_cfa_register 7
 4937 0006 F860     	 str r0,[r7,#12]
 4938 0008 B960     	 str r1,[r7,#8]
 4939 000a 1346     	 mov r3,r2
 4940 000c FB71     	 strb r3,[r7,#7]
3220:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE fmt, *pt;
3221:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
3222:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
3223:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
3224:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD nrsv;
3225:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3226:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
3227:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3228:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3229:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3230:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = 0;
 4941              	 .loc 1 3230 0
 4942 000e BB68     	 ldr r3,[r7,#8]
 4943 0010 0022     	 movs r2,#0
 4944 0012 1A60     	 str r2,[r3]
3231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(path);
 4945              	 .loc 1 3231 0
 4946 0014 F868     	 ldr r0,[r7,#12]
 4947 0016 FFF7FEFF 	 bl get_ldnumber
 4948 001a F863     	 str r0,[r7,#60]
3232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 4949              	 .loc 1 3232 0
 4950 001c FB6B     	 ldr r3,[r7,#60]
 4951 001e 002B     	 cmp r3,#0
 4952 0020 01DA     	 bge .L311
 4953              	 .loc 1 3232 0 is_stmt 0 discriminator 1
 4954 0022 0B23     	 movs r3,#11
 4955 0024 28E2     	 b .L351
 4956              	.L311:
3233:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3234:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check if the filesystem object is valid or not */
3235:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 4957              	 .loc 1 3235 0 is_stmt 1
 4958 0026 A54A     	 ldr r2,.L352
 4959 0028 FB6B     	 ldr r3,[r7,#60]
 4960 002a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4961 002e BB63     	 str r3,[r7,#56]
3236:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 4962              	 .loc 1 3236 0
 4963 0030 BB6B     	 ldr r3,[r7,#56]
 4964 0032 002B     	 cmp r3,#0
 4965 0034 01D1     	 bne .L313
 4966              	 .loc 1 3236 0 is_stmt 0 discriminator 1
 4967 0036 0C23     	 movs r3,#12
 4968 0038 1EE2     	 b .L351
 4969              	.L313:
3237:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
3238:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
3239:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = fs;							/* Return pointer to the filesystem object */
 4970              	 .loc 1 3240 0 is_stmt 1
 4971 003a BB68     	 ldr r3,[r7,#8]
 4972 003c BA6B     	 ldr r2,[r7,#56]
 4973 003e 1A60     	 str r2,[r3]
3241:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3242:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 4974              	 .loc 1 3242 0
 4975 0040 FB79     	 ldrb r3,[r7,#7]
 4976 0042 23F00103 	 bic r3,r3,#1
 4977 0046 FB71     	 strb r3,[r7,#7]
3243:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 4978              	 .loc 1 3243 0
 4979 0048 BB6B     	 ldr r3,[r7,#56]
 4980 004a 1B78     	 ldrb r3,[r3]
 4981 004c 002B     	 cmp r3,#0
 4982 004e 1AD0     	 beq .L314
3244:../Dave/Generated/FATFS/ff_Src/ff.c **** 		stat = disk_status(fs->pdrv);
 4983              	 .loc 1 3244 0
 4984 0050 BB6B     	 ldr r3,[r7,#56]
 4985 0052 5B78     	 ldrb r3,[r3,#1]
 4986 0054 1846     	 mov r0,r3
 4987 0056 FFF7FEFF 	 bl disk_status
 4988 005a 0346     	 mov r3,r0
 4989 005c 87F83730 	 strb r3,[r7,#55]
3245:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 4990              	 .loc 1 3245 0
 4991 0060 97F83730 	 ldrb r3,[r7,#55]
 4992 0064 03F00103 	 and r3,r3,#1
 4993 0068 002B     	 cmp r3,#0
 4994 006a 0CD1     	 bne .L314
3246:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 4995              	 .loc 1 3246 0
 4996 006c FB79     	 ldrb r3,[r7,#7]
 4997 006e 002B     	 cmp r3,#0
 4998 0070 07D0     	 beq .L315
 4999              	 .loc 1 3246 0 is_stmt 0 discriminator 1
 5000 0072 97F83730 	 ldrb r3,[r7,#55]
 5001 0076 03F00403 	 and r3,r3,#4
 5002 007a 002B     	 cmp r3,#0
 5003 007c 01D0     	 beq .L315
3247:../Dave/Generated/FATFS/ff_Src/ff.c **** 				return FR_WRITE_PROTECTED;
 5004              	 .loc 1 3247 0 is_stmt 1
 5005 007e 0A23     	 movs r3,#10
 5006 0080 FAE1     	 b .L351
 5007              	.L315:
3248:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3249:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return FR_OK;				/* The filesystem object is valid */
 5008              	 .loc 1 3249 0
 5009 0082 0023     	 movs r3,#0
 5010 0084 F8E1     	 b .L351
 5011              	.L314:
3250:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3251:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3252:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3253:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* The filesystem object is not valid. */
3254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object)
3255:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->fs_type = 0;					/* Clear the filesystem object */
 5012              	 .loc 1 3256 0
 5013 0086 BB6B     	 ldr r3,[r7,#56]
 5014 0088 0022     	 movs r2,#0
 5015 008a 1A70     	 strb r2,[r3]
3257:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 5016              	 .loc 1 3257 0
 5017 008c FB6B     	 ldr r3,[r7,#60]
 5018 008e DAB2     	 uxtb r2,r3
 5019 0090 BB6B     	 ldr r3,[r7,#56]
 5020 0092 5A70     	 strb r2,[r3,#1]
3258:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 5021              	 .loc 1 3258 0
 5022 0094 BB6B     	 ldr r3,[r7,#56]
 5023 0096 5B78     	 ldrb r3,[r3,#1]
 5024 0098 1846     	 mov r0,r3
 5025 009a FFF7FEFF 	 bl disk_initialize
 5026 009e 0346     	 mov r3,r0
 5027 00a0 87F83730 	 strb r3,[r7,#55]
3259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 5028              	 .loc 1 3259 0
 5029 00a4 97F83730 	 ldrb r3,[r7,#55]
 5030 00a8 03F00103 	 and r3,r3,#1
 5031 00ac 002B     	 cmp r3,#0
 5032 00ae 01D0     	 beq .L316
3260:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 5033              	 .loc 1 3260 0
 5034 00b0 0323     	 movs r3,#3
 5035 00b2 E1E1     	 b .L351
 5036              	.L316:
3261:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 5037              	 .loc 1 3262 0
 5038 00b4 FB79     	 ldrb r3,[r7,#7]
 5039 00b6 002B     	 cmp r3,#0
 5040 00b8 07D0     	 beq .L317
 5041              	 .loc 1 3262 0 is_stmt 0 discriminator 1
 5042 00ba 97F83730 	 ldrb r3,[r7,#55]
 5043 00be 03F00403 	 and r3,r3,#4
 5044 00c2 002B     	 cmp r3,#0
 5045 00c4 01D0     	 beq .L317
3263:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_WRITE_PROTECTED;
 5046              	 .loc 1 3263 0 is_stmt 1
 5047 00c6 0A23     	 movs r3,#10
 5048 00c8 D6E1     	 b .L351
 5049              	.L317:
3264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3265:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
3266:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3267:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3268:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3269:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3270:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and S
3271:../Dave/Generated/FATFS/ff_Src/ff.c **** 	bsect = 0;
 5050              	 .loc 1 3271 0
 5051 00ca 0023     	 movs r3,#0
 5052 00cc 3B65     	 str r3,[r7,#80]
3272:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 5053              	 .loc 1 3272 0
 5054 00ce B86B     	 ldr r0,[r7,#56]
 5055 00d0 396D     	 ldr r1,[r7,#80]
 5056 00d2 FFF7FEFF 	 bl check_fs
 5057 00d6 0346     	 mov r3,r0
 5058 00d8 87F85730 	 strb r3,[r7,#87]
3273:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 5059              	 .loc 1 3273 0
 5060 00dc 97F85730 	 ldrb r3,[r7,#87]
 5061 00e0 022B     	 cmp r3,#2
 5062 00e2 4BD1     	 bne .L318
3274:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 5063              	 .loc 1 3274 0
 5064 00e4 0023     	 movs r3,#0
 5065 00e6 3B64     	 str r3,[r7,#64]
 5066 00e8 1FE0     	 b .L319
 5067              	.L322:
3275:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 5068              	 .loc 1 3275 0
 5069 00ea 3B6C     	 ldr r3,[r7,#64]
 5070 00ec 1B01     	 lsls r3,r3,#4
 5071 00ee 03F5DF73 	 add r3,r3,#446
 5072 00f2 3033     	 adds r3,r3,#48
 5073 00f4 BA6B     	 ldr r2,[r7,#56]
 5074 00f6 1344     	 add r3,r3,r2
 5075 00f8 0433     	 adds r3,r3,#4
 5076 00fa 3B63     	 str r3,[r7,#48]
3276:../Dave/Generated/FATFS/ff_Src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 5077              	 .loc 1 3276 0
 5078 00fc 3B6B     	 ldr r3,[r7,#48]
 5079 00fe 0433     	 adds r3,r3,#4
 5080 0100 1B78     	 ldrb r3,[r3]
 5081 0102 002B     	 cmp r3,#0
 5082 0104 06D0     	 beq .L320
 5083              	 .loc 1 3276 0 is_stmt 0 discriminator 1
 5084 0106 3B6B     	 ldr r3,[r7,#48]
 5085 0108 0833     	 adds r3,r3,#8
 5086 010a 1846     	 mov r0,r3
 5087 010c FFF7FEFF 	 bl ld_dword
 5088 0110 0246     	 mov r2,r0
 5089 0112 00E0     	 b .L321
 5090              	.L320:
 5091              	 .loc 1 3276 0 discriminator 2
 5092 0114 0022     	 movs r2,#0
 5093              	.L321:
 5094              	 .loc 1 3276 0 discriminator 4
 5095 0116 3B6C     	 ldr r3,[r7,#64]
 5096 0118 9B00     	 lsls r3,r3,#2
 5097 011a 07F15801 	 add r1,r7,#88
 5098 011e 0B44     	 add r3,r3,r1
 5099 0120 43F8442C 	 str r2,[r3,#-68]
3274:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 5100              	 .loc 1 3274 0 is_stmt 1 discriminator 4
 5101 0124 3B6C     	 ldr r3,[r7,#64]
 5102 0126 0133     	 adds r3,r3,#1
 5103 0128 3B64     	 str r3,[r7,#64]
 5104              	.L319:
3274:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 5105              	 .loc 1 3274 0 is_stmt 0 discriminator 2
 5106 012a 3B6C     	 ldr r3,[r7,#64]
 5107 012c 032B     	 cmp r3,#3
 5108 012e DCD9     	 bls .L322
3277:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3278:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 5109              	 .loc 1 3278 0 is_stmt 1
 5110 0130 0023     	 movs r3,#0
 5111 0132 3B64     	 str r3,[r7,#64]
3279:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i != 0) i--;
 5112              	 .loc 1 3279 0
 5113 0134 3B6C     	 ldr r3,[r7,#64]
 5114 0136 002B     	 cmp r3,#0
 5115 0138 02D0     	 beq .L323
 5116              	 .loc 1 3279 0 is_stmt 0 discriminator 1
 5117 013a 3B6C     	 ldr r3,[r7,#64]
 5118 013c 013B     	 subs r3,r3,#1
 5119 013e 3B64     	 str r3,[r7,#64]
 5120              	.L323:
3280:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {							/* Find an FAT volume */
3281:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bsect = br[i];
 5121              	 .loc 1 3281 0 is_stmt 1
 5122 0140 3B6C     	 ldr r3,[r7,#64]
 5123 0142 9B00     	 lsls r3,r3,#2
 5124 0144 07F15802 	 add r2,r7,#88
 5125 0148 1344     	 add r3,r3,r2
 5126 014a 53F8443C 	 ldr r3,[r3,#-68]
 5127 014e 3B65     	 str r3,[r7,#80]
3282:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 5128              	 .loc 1 3282 0
 5129 0150 3B6D     	 ldr r3,[r7,#80]
 5130 0152 002B     	 cmp r3,#0
 5131 0154 05D0     	 beq .L324
 5132              	 .loc 1 3282 0 is_stmt 0 discriminator 1
 5133 0156 B86B     	 ldr r0,[r7,#56]
 5134 0158 396D     	 ldr r1,[r7,#80]
 5135 015a FFF7FEFF 	 bl check_fs
 5136 015e 0346     	 mov r3,r0
 5137 0160 00E0     	 b .L325
 5138              	.L324:
 5139              	 .loc 1 3282 0 discriminator 2
 5140 0162 0323     	 movs r3,#3
 5141              	.L325:
 5142              	 .loc 1 3282 0 discriminator 4
 5143 0164 87F85730 	 strb r3,[r7,#87]
3283:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 5144              	 .loc 1 3283 0 is_stmt 1 discriminator 4
 5145 0168 97F85730 	 ldrb r3,[r7,#87]
 5146 016c 012B     	 cmp r3,#1
 5147 016e 05D9     	 bls .L318
 5148              	 .loc 1 3283 0 is_stmt 0 discriminator 1
 5149 0170 3B6C     	 ldr r3,[r7,#64]
 5150 0172 0133     	 adds r3,r3,#1
 5151 0174 3B64     	 str r3,[r7,#64]
 5152 0176 3B6C     	 ldr r3,[r7,#64]
 5153 0178 032B     	 cmp r3,#3
 5154 017a E1D9     	 bls .L323
 5155              	.L318:
3284:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3285:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 5156              	 .loc 1 3285 0 is_stmt 1
 5157 017c 97F85730 	 ldrb r3,[r7,#87]
 5158 0180 042B     	 cmp r3,#4
 5159 0182 01D1     	 bne .L326
 5160              	 .loc 1 3285 0 is_stmt 0 discriminator 1
 5161 0184 0123     	 movs r3,#1
 5162 0186 77E1     	 b .L351
 5163              	.L326:
3286:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 5164              	 .loc 1 3286 0 is_stmt 1
 5165 0188 97F85730 	 ldrb r3,[r7,#87]
 5166 018c 012B     	 cmp r3,#1
 5167 018e 01D9     	 bls .L327
 5168              	 .loc 1 3286 0 is_stmt 0 discriminator 1
 5169 0190 0D23     	 movs r3,#13
 5170 0192 71E1     	 b .L351
 5171              	.L327:
3287:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3288:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the filesystem object */
3289:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3290:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3291:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 1) {
3292:../Dave/Generated/FATFS/ff_Src/ff.c **** 		QWORD maxlba;
3293:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DWORD so, cv, bcl;
3294:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3295:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3296:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3297:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3298:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (mus
3299:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3300:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3301:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return FR_NO_FILESYSTEM;
3302:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3303:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3304:../Dave/Generated/FATFS/ff_Src/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3305:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3306:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3308:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3309:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3310:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3311:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3312:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3313:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3314:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3315:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3316:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3317:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fatent = nclst + 2;
3318:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3319:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Boundaries and Limits */
3320:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->volbase = bsect;
3321:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3322:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3323:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3324:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3325:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3326:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get bitmap location and check if it is contiguous (implementation assumption) */
3327:../Dave/Generated/FATFS/ff_Src/ff.c **** 		so = i = 0;
3328:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
3329:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i == 0) {
3330:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
3331:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (move_window(fs, clst2sect(fs, fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
3332:../Dave/Generated/FATFS/ff_Src/ff.c **** 				so++;
3333:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3334:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
3335:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = (i + SZDIRE) % SS(fs);	/* Next entry */
3336:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3337:../Dave/Generated/FATFS/ff_Src/ff.c **** 		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
3338:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
3339:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
3340:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {	/* Check if bitmap is contiguous */
3341:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
3342:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
3343:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cv == 0xFFFFFFFF) break;				/* Last link? */
3344:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
3345:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3346:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3347:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3348:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3349:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3350:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3351:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
3352:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
3353:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
3354:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
 5172              	 .loc 1 3354 0 is_stmt 1
 5173 0194 BB6B     	 ldr r3,[r7,#56]
 5174 0196 3F33     	 adds r3,r3,#63
 5175 0198 1846     	 mov r0,r3
 5176 019a FFF7FEFF 	 bl ld_word
 5177 019e 0346     	 mov r3,r0
 5178 01a0 B3F5007F 	 cmp r3,#512
 5179 01a4 01D0     	 beq .L328
 5180              	 .loc 1 3354 0 is_stmt 0 discriminator 1
 5181 01a6 0D23     	 movs r3,#13
 5182 01a8 66E1     	 b .L351
 5183              	.L328:
3355:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3356:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 5184              	 .loc 1 3356 0 is_stmt 1
 5185 01aa BB6B     	 ldr r3,[r7,#56]
 5186 01ac 4A33     	 adds r3,r3,#74
 5187 01ae 1846     	 mov r0,r3
 5188 01b0 FFF7FEFF 	 bl ld_word
 5189 01b4 0346     	 mov r3,r0
 5190 01b6 FB64     	 str r3,[r7,#76]
3357:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 5191              	 .loc 1 3357 0
 5192 01b8 FB6C     	 ldr r3,[r7,#76]
 5193 01ba 002B     	 cmp r3,#0
 5194 01bc 05D1     	 bne .L329
 5195              	 .loc 1 3357 0 is_stmt 0 discriminator 1
 5196 01be BB6B     	 ldr r3,[r7,#56]
 5197 01c0 5833     	 adds r3,r3,#88
 5198 01c2 1846     	 mov r0,r3
 5199 01c4 FFF7FEFF 	 bl ld_dword
 5200 01c8 F864     	 str r0,[r7,#76]
 5201              	.L329:
3358:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsize = fasize;
 5202              	 .loc 1 3358 0 is_stmt 1
 5203 01ca BB6B     	 ldr r3,[r7,#56]
 5204 01cc FA6C     	 ldr r2,[r7,#76]
 5205 01ce DA61     	 str r2,[r3,#28]
3359:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3360:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 5206              	 .loc 1 3360 0
 5207 01d0 BB6B     	 ldr r3,[r7,#56]
 5208 01d2 93F84420 	 ldrb r2,[r3,#68]
 5209 01d6 BB6B     	 ldr r3,[r7,#56]
 5210 01d8 9A70     	 strb r2,[r3,#2]
3361:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 5211              	 .loc 1 3361 0
 5212 01da BB6B     	 ldr r3,[r7,#56]
 5213 01dc 9B78     	 ldrb r3,[r3,#2]
 5214 01de 012B     	 cmp r3,#1
 5215 01e0 05D0     	 beq .L330
 5216              	 .loc 1 3361 0 is_stmt 0 discriminator 1
 5217 01e2 BB6B     	 ldr r3,[r7,#56]
 5218 01e4 9B78     	 ldrb r3,[r3,#2]
 5219 01e6 022B     	 cmp r3,#2
 5220 01e8 01D0     	 beq .L330
 5221              	 .loc 1 3361 0 discriminator 2
 5222 01ea 0D23     	 movs r3,#13
 5223 01ec 44E1     	 b .L351
 5224              	.L330:
3362:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 5225              	 .loc 1 3362 0 is_stmt 1
 5226 01ee BB6B     	 ldr r3,[r7,#56]
 5227 01f0 9B78     	 ldrb r3,[r3,#2]
 5228 01f2 1A46     	 mov r2,r3
 5229 01f4 FB6C     	 ldr r3,[r7,#76]
 5230 01f6 02FB03F3 	 mul r3,r2,r3
 5231 01fa FB64     	 str r3,[r7,#76]
3363:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3364:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 5232              	 .loc 1 3364 0
 5233 01fc BB6B     	 ldr r3,[r7,#56]
 5234 01fe 93F84130 	 ldrb r3,[r3,#65]
 5235 0202 9AB2     	 uxth r2,r3
 5236 0204 BB6B     	 ldr r3,[r7,#56]
 5237 0206 5A81     	 strh r2,[r3,#10]
3365:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 5238              	 .loc 1 3365 0
 5239 0208 BB6B     	 ldr r3,[r7,#56]
 5240 020a 5B89     	 ldrh r3,[r3,#10]
 5241 020c 002B     	 cmp r3,#0
 5242 020e 08D0     	 beq .L331
 5243              	 .loc 1 3365 0 is_stmt 0 discriminator 2
 5244 0210 BB6B     	 ldr r3,[r7,#56]
 5245 0212 5B89     	 ldrh r3,[r3,#10]
 5246 0214 1A46     	 mov r2,r3
 5247 0216 BB6B     	 ldr r3,[r7,#56]
 5248 0218 5B89     	 ldrh r3,[r3,#10]
 5249 021a 013B     	 subs r3,r3,#1
 5250 021c 1340     	 ands r3,r3,r2
 5251 021e 002B     	 cmp r3,#0
 5252 0220 01D0     	 beq .L332
 5253              	.L331:
 5254              	 .loc 1 3365 0 discriminator 3
 5255 0222 0D23     	 movs r3,#13
 5256 0224 28E1     	 b .L351
 5257              	.L332:
3366:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3367:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 5258              	 .loc 1 3367 0 is_stmt 1
 5259 0226 BB6B     	 ldr r3,[r7,#56]
 5260 0228 4533     	 adds r3,r3,#69
 5261 022a 1846     	 mov r0,r3
 5262 022c FFF7FEFF 	 bl ld_word
 5263 0230 0346     	 mov r3,r0
 5264 0232 1A46     	 mov r2,r3
 5265 0234 BB6B     	 ldr r3,[r7,#56]
 5266 0236 1A81     	 strh r2,[r3,#8]
3368:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 5267              	 .loc 1 3368 0
 5268 0238 BB6B     	 ldr r3,[r7,#56]
 5269 023a 1B89     	 ldrh r3,[r3,#8]
 5270 023c 03F00F03 	 and r3,r3,#15
 5271 0240 9BB2     	 uxth r3,r3
 5272 0242 002B     	 cmp r3,#0
 5273 0244 01D0     	 beq .L333
 5274              	 .loc 1 3368 0 is_stmt 0 discriminator 1
 5275 0246 0D23     	 movs r3,#13
 5276 0248 16E1     	 b .L351
 5277              	.L333:
3369:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3370:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 5278              	 .loc 1 3370 0 is_stmt 1
 5279 024a BB6B     	 ldr r3,[r7,#56]
 5280 024c 4733     	 adds r3,r3,#71
 5281 024e 1846     	 mov r0,r3
 5282 0250 FFF7FEFF 	 bl ld_word
 5283 0254 0346     	 mov r3,r0
 5284 0256 BB64     	 str r3,[r7,#72]
3371:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 5285              	 .loc 1 3371 0
 5286 0258 BB6C     	 ldr r3,[r7,#72]
 5287 025a 002B     	 cmp r3,#0
 5288 025c 05D1     	 bne .L334
 5289              	 .loc 1 3371 0 is_stmt 0 discriminator 1
 5290 025e BB6B     	 ldr r3,[r7,#56]
 5291 0260 5433     	 adds r3,r3,#84
 5292 0262 1846     	 mov r0,r3
 5293 0264 FFF7FEFF 	 bl ld_dword
 5294 0268 B864     	 str r0,[r7,#72]
 5295              	.L334:
3372:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3373:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 5296              	 .loc 1 3373 0 is_stmt 1
 5297 026a BB6B     	 ldr r3,[r7,#56]
 5298 026c 4233     	 adds r3,r3,#66
 5299 026e 1846     	 mov r0,r3
 5300 0270 FFF7FEFF 	 bl ld_word
 5301 0274 0346     	 mov r3,r0
 5302 0276 FB85     	 strh r3,[r7,#46]
3374:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 5303              	 .loc 1 3374 0
 5304 0278 FB8D     	 ldrh r3,[r7,#46]
 5305 027a 002B     	 cmp r3,#0
 5306 027c 01D1     	 bne .L335
 5307              	 .loc 1 3374 0 is_stmt 0 discriminator 1
 5308 027e 0D23     	 movs r3,#13
 5309 0280 FAE0     	 b .L351
 5310              	.L335:
3375:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3376:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Determine the FAT sub type */
3377:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 5311              	 .loc 1 3377 0 is_stmt 1
 5312 0282 FA8D     	 ldrh r2,[r7,#46]
 5313 0284 FB6C     	 ldr r3,[r7,#76]
 5314 0286 1344     	 add r3,r3,r2
 5315 0288 BA6B     	 ldr r2,[r7,#56]
 5316 028a 1289     	 ldrh r2,[r2,#8]
 5317 028c 1209     	 lsrs r2,r2,#4
 5318 028e 92B2     	 uxth r2,r2
 5319 0290 1344     	 add r3,r3,r2
 5320 0292 BB62     	 str r3,[r7,#40]
3378:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 5321              	 .loc 1 3378 0
 5322 0294 BA6C     	 ldr r2,[r7,#72]
 5323 0296 BB6A     	 ldr r3,[r7,#40]
 5324 0298 9A42     	 cmp r2,r3
 5325 029a 01D2     	 bcs .L336
 5326              	 .loc 1 3378 0 is_stmt 0 discriminator 1
 5327 029c 0D23     	 movs r3,#13
 5328 029e EBE0     	 b .L351
 5329              	.L336:
3379:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 5330              	 .loc 1 3379 0 is_stmt 1
 5331 02a0 BA6C     	 ldr r2,[r7,#72]
 5332 02a2 BB6A     	 ldr r3,[r7,#40]
 5333 02a4 D31A     	 subs r3,r2,r3
 5334 02a6 BA6B     	 ldr r2,[r7,#56]
 5335 02a8 5289     	 ldrh r2,[r2,#10]
 5336 02aa B3FBF2F3 	 udiv r3,r3,r2
 5337 02ae 7B62     	 str r3,[r7,#36]
3380:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 5338              	 .loc 1 3380 0
 5339 02b0 7B6A     	 ldr r3,[r7,#36]
 5340 02b2 002B     	 cmp r3,#0
 5341 02b4 04D1     	 bne .L337
 5342              	 .loc 1 3380 0 is_stmt 0 discriminator 1
 5343 02b6 0D23     	 movs r3,#13
 5344 02b8 DEE0     	 b .L351
 5345              	.L353:
 5346 02ba 00BF     	 .align 2
 5347              	.L352:
 5348 02bc 00000000 	 .word FatFs
 5349              	.L337:
3381:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = 0;
 5350              	 .loc 1 3381 0 is_stmt 1
 5351 02c0 0023     	 movs r3,#0
 5352 02c2 87F85730 	 strb r3,[r7,#87]
3382:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 5353              	 .loc 1 3382 0
 5354 02c6 7B6A     	 ldr r3,[r7,#36]
 5355 02c8 6D4A     	 ldr r2,.L354
 5356 02ca 9342     	 cmp r3,r2
 5357 02cc 02D8     	 bhi .L338
 5358              	 .loc 1 3382 0 is_stmt 0 discriminator 1
 5359 02ce 0323     	 movs r3,#3
 5360 02d0 87F85730 	 strb r3,[r7,#87]
 5361              	.L338:
3383:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 5362              	 .loc 1 3383 0 is_stmt 1
 5363 02d4 7B6A     	 ldr r3,[r7,#36]
 5364 02d6 4FF6F572 	 movw r2,#65525
 5365 02da 9342     	 cmp r3,r2
 5366 02dc 02D8     	 bhi .L339
 5367              	 .loc 1 3383 0 is_stmt 0 discriminator 1
 5368 02de 0223     	 movs r3,#2
 5369 02e0 87F85730 	 strb r3,[r7,#87]
 5370              	.L339:
3384:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 5371              	 .loc 1 3384 0 is_stmt 1
 5372 02e4 7B6A     	 ldr r3,[r7,#36]
 5373 02e6 40F6F572 	 movw r2,#4085
 5374 02ea 9342     	 cmp r3,r2
 5375 02ec 02D8     	 bhi .L340
 5376              	 .loc 1 3384 0 is_stmt 0 discriminator 1
 5377 02ee 0123     	 movs r3,#1
 5378 02f0 87F85730 	 strb r3,[r7,#87]
 5379              	.L340:
3385:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 5380              	 .loc 1 3385 0 is_stmt 1
 5381 02f4 97F85730 	 ldrb r3,[r7,#87]
 5382 02f8 002B     	 cmp r3,#0
 5383 02fa 01D1     	 bne .L341
 5384              	 .loc 1 3385 0 is_stmt 0 discriminator 1
 5385 02fc 0D23     	 movs r3,#13
 5386 02fe BBE0     	 b .L351
 5387              	.L341:
3386:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3387:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Boundaries and Limits */
3388:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 5388              	 .loc 1 3388 0 is_stmt 1
 5389 0300 7B6A     	 ldr r3,[r7,#36]
 5390 0302 9A1C     	 adds r2,r3,#2
 5391 0304 BB6B     	 ldr r3,[r7,#56]
 5392 0306 9A61     	 str r2,[r3,#24]
3389:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 5393              	 .loc 1 3389 0
 5394 0308 BB6B     	 ldr r3,[r7,#56]
 5395 030a 3A6D     	 ldr r2,[r7,#80]
 5396 030c 1A62     	 str r2,[r3,#32]
3390:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 5397              	 .loc 1 3390 0
 5398 030e FA8D     	 ldrh r2,[r7,#46]
 5399 0310 3B6D     	 ldr r3,[r7,#80]
 5400 0312 1A44     	 add r2,r2,r3
 5401 0314 BB6B     	 ldr r3,[r7,#56]
 5402 0316 5A62     	 str r2,[r3,#36]
3391:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 5403              	 .loc 1 3391 0
 5404 0318 3A6D     	 ldr r2,[r7,#80]
 5405 031a BB6A     	 ldr r3,[r7,#40]
 5406 031c 1A44     	 add r2,r2,r3
 5407 031e BB6B     	 ldr r3,[r7,#56]
 5408 0320 DA62     	 str r2,[r3,#44]
3392:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
 5409              	 .loc 1 3392 0
 5410 0322 97F85730 	 ldrb r3,[r7,#87]
 5411 0326 032B     	 cmp r3,#3
 5412 0328 1CD1     	 bne .L342
3393:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 5413              	 .loc 1 3393 0
 5414 032a BB6B     	 ldr r3,[r7,#56]
 5415 032c 5E33     	 adds r3,r3,#94
 5416 032e 1846     	 mov r0,r3
 5417 0330 FFF7FEFF 	 bl ld_word
 5418 0334 0346     	 mov r3,r0
 5419 0336 002B     	 cmp r3,#0
 5420 0338 01D0     	 beq .L343
 5421              	 .loc 1 3393 0 is_stmt 0 discriminator 1
 5422 033a 0D23     	 movs r3,#13
 5423 033c 9CE0     	 b .L351
 5424              	.L343:
3394:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 5425              	 .loc 1 3394 0 is_stmt 1
 5426 033e BB6B     	 ldr r3,[r7,#56]
 5427 0340 1B89     	 ldrh r3,[r3,#8]
 5428 0342 002B     	 cmp r3,#0
 5429 0344 01D0     	 beq .L344
 5430              	 .loc 1 3394 0 is_stmt 0 discriminator 1
 5431 0346 0D23     	 movs r3,#13
 5432 0348 96E0     	 b .L351
 5433              	.L344:
3395:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 5434              	 .loc 1 3395 0 is_stmt 1
 5435 034a BB6B     	 ldr r3,[r7,#56]
 5436 034c 6033     	 adds r3,r3,#96
 5437 034e 1846     	 mov r0,r3
 5438 0350 FFF7FEFF 	 bl ld_dword
 5439 0354 0246     	 mov r2,r0
 5440 0356 BB6B     	 ldr r3,[r7,#56]
 5441 0358 9A62     	 str r2,[r3,#40]
3396:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 5442              	 .loc 1 3396 0
 5443 035a BB6B     	 ldr r3,[r7,#56]
 5444 035c 9B69     	 ldr r3,[r3,#24]
 5445 035e 9B00     	 lsls r3,r3,#2
 5446 0360 7B64     	 str r3,[r7,#68]
 5447 0362 1FE0     	 b .L345
 5448              	.L342:
3397:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
3398:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 5449              	 .loc 1 3398 0
 5450 0364 BB6B     	 ldr r3,[r7,#56]
 5451 0366 1B89     	 ldrh r3,[r3,#8]
 5452 0368 002B     	 cmp r3,#0
 5453 036a 01D1     	 bne .L346
 5454              	 .loc 1 3398 0 is_stmt 0 discriminator 1
 5455 036c 0D23     	 movs r3,#13
 5456 036e 83E0     	 b .L351
 5457              	.L346:
3399:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 5458              	 .loc 1 3399 0 is_stmt 1
 5459 0370 BB6B     	 ldr r3,[r7,#56]
 5460 0372 5A6A     	 ldr r2,[r3,#36]
 5461 0374 FB6C     	 ldr r3,[r7,#76]
 5462 0376 1A44     	 add r2,r2,r3
 5463 0378 BB6B     	 ldr r3,[r7,#56]
 5464 037a 9A62     	 str r2,[r3,#40]
3400:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3401:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 5465              	 .loc 1 3401 0
 5466 037c 97F85730 	 ldrb r3,[r7,#87]
 5467 0380 022B     	 cmp r3,#2
 5468 0382 03D1     	 bne .L347
 5469              	 .loc 1 3401 0 is_stmt 0 discriminator 1
 5470 0384 BB6B     	 ldr r3,[r7,#56]
 5471 0386 9B69     	 ldr r3,[r3,#24]
 5472 0388 5B00     	 lsls r3,r3,#1
 5473 038a 0AE0     	 b .L348
 5474              	.L347:
 5475              	 .loc 1 3401 0 discriminator 2
 5476 038c BB6B     	 ldr r3,[r7,#56]
 5477 038e 9A69     	 ldr r2,[r3,#24]
 5478 0390 1346     	 mov r3,r2
 5479 0392 5B00     	 lsls r3,r3,#1
 5480 0394 1344     	 add r3,r3,r2
 5481 0396 5A08     	 lsrs r2,r3,#1
 5482 0398 BB6B     	 ldr r3,[r7,#56]
 5483 039a 9B69     	 ldr r3,[r3,#24]
 5484 039c 03F00103 	 and r3,r3,#1
 5485 03a0 1344     	 add r3,r3,r2
 5486              	.L348:
3400:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 5487              	 .loc 1 3400 0 is_stmt 1
 5488 03a2 7B64     	 str r3,[r7,#68]
 5489              	.L345:
3402:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3403:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
 5490              	 .loc 1 3403 0
 5491 03a4 BB6B     	 ldr r3,[r7,#56]
 5492 03a6 DA69     	 ldr r2,[r3,#28]
 5493 03a8 7B6C     	 ldr r3,[r7,#68]
 5494 03aa 03F2FF13 	 addw r3,r3,#511
 5495 03ae 5B0A     	 lsrs r3,r3,#9
 5496 03b0 9A42     	 cmp r2,r3
 5497 03b2 01D2     	 bcs .L349
 5498              	 .loc 1 3403 0 is_stmt 0 discriminator 1
 5499 03b4 0D23     	 movs r3,#13
 5500 03b6 5FE0     	 b .L351
 5501              	.L349:
3404:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3405:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3406:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get FSInfo if available */
3407:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 5502              	 .loc 1 3407 0 is_stmt 1
 5503 03b8 BB6B     	 ldr r3,[r7,#56]
 5504 03ba 4FF0FF32 	 mov r2,#-1
 5505 03be 1A61     	 str r2,[r3,#16]
 5506 03c0 BB6B     	 ldr r3,[r7,#56]
 5507 03c2 1A69     	 ldr r2,[r3,#16]
 5508 03c4 BB6B     	 ldr r3,[r7,#56]
 5509 03c6 DA60     	 str r2,[r3,#12]
3408:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsi_flag = 0x80;
 5510              	 .loc 1 3408 0
 5511 03c8 BB6B     	 ldr r3,[r7,#56]
 5512 03ca 8022     	 movs r2,#128
 5513 03cc 1A71     	 strb r2,[r3,#4]
3409:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 3) != 3
3410:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 5514              	 .loc 1 3410 0
 5515 03ce 97F85730 	 ldrb r3,[r7,#87]
 5516 03d2 032B     	 cmp r3,#3
 5517 03d4 3BD1     	 bne .L350
3411:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 5518              	 .loc 1 3411 0
 5519 03d6 BB6B     	 ldr r3,[r7,#56]
 5520 03d8 6433     	 adds r3,r3,#100
 5521 03da 1846     	 mov r0,r3
 5522 03dc FFF7FEFF 	 bl ld_word
 5523 03e0 0346     	 mov r3,r0
 5524 03e2 012B     	 cmp r3,#1
 5525 03e4 33D1     	 bne .L350
3412:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 5526              	 .loc 1 3412 0
 5527 03e6 3B6D     	 ldr r3,[r7,#80]
 5528 03e8 0133     	 adds r3,r3,#1
 5529 03ea B86B     	 ldr r0,[r7,#56]
 5530 03ec 1946     	 mov r1,r3
 5531 03ee FFF7FEFF 	 bl move_window
 5532 03f2 0346     	 mov r3,r0
 5533 03f4 002B     	 cmp r3,#0
 5534 03f6 2AD1     	 bne .L350
3413:../Dave/Generated/FATFS/ff_Src/ff.c **** 		{
3414:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag = 0;
 5535              	 .loc 1 3414 0
 5536 03f8 BB6B     	 ldr r3,[r7,#56]
 5537 03fa 0022     	 movs r2,#0
 5538 03fc 1A71     	 strb r2,[r3,#4]
3415:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 5539              	 .loc 1 3415 0
 5540 03fe BB6B     	 ldr r3,[r7,#56]
 5541 0400 03F23223 	 addw r3,r3,#562
 5542 0404 1846     	 mov r0,r3
 5543 0406 FFF7FEFF 	 bl ld_word
 5544 040a 0346     	 mov r3,r0
 5545 040c 1A46     	 mov r2,r3
 5546 040e 4AF65523 	 movw r3,#43605
 5547 0412 9A42     	 cmp r2,r3
 5548 0414 1BD1     	 bne .L350
3416:../Dave/Generated/FATFS/ff_Src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 5549              	 .loc 1 3416 0
 5550 0416 BB6B     	 ldr r3,[r7,#56]
 5551 0418 3433     	 adds r3,r3,#52
 5552 041a 1846     	 mov r0,r3
 5553 041c FFF7FEFF 	 bl ld_dword
 5554 0420 0246     	 mov r2,r0
 5555 0422 184B     	 ldr r3,.L354+4
 5556 0424 9A42     	 cmp r2,r3
 5557 0426 12D1     	 bne .L350
3417:../Dave/Generated/FATFS/ff_Src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 5558              	 .loc 1 3417 0
 5559 0428 BB6B     	 ldr r3,[r7,#56]
 5560 042a 03F50673 	 add r3,r3,#536
 5561 042e 1846     	 mov r0,r3
 5562 0430 FFF7FEFF 	 bl ld_dword
 5563 0434 0246     	 mov r2,r0
 5564 0436 144B     	 ldr r3,.L354+8
 5565 0438 9A42     	 cmp r2,r3
 5566 043a 08D1     	 bne .L350
3418:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3419:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 1) == 0
3420:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 5567              	 .loc 1 3420 0
 5568 043c BB6B     	 ldr r3,[r7,#56]
 5569 043e 03F50773 	 add r3,r3,#540
 5570 0442 1846     	 mov r0,r3
 5571 0444 FFF7FEFF 	 bl ld_dword
 5572 0448 0246     	 mov r2,r0
 5573 044a BB6B     	 ldr r3,[r7,#56]
 5574 044c 1A61     	 str r2,[r3,#16]
 5575              	.L350:
3421:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3422:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 2) == 0
3423:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3424:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3425:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3426:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3427:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* (FF_FS_NOFSINFO & 3) != 3 */
3428:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
3429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3430:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3431:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
 5576              	 .loc 1 3431 0
 5577 044e BB6B     	 ldr r3,[r7,#56]
 5578 0450 97F85720 	 ldrb r2,[r7,#87]
 5579 0454 1A70     	 strb r2,[r3]
3432:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->id = ++Fsid;		/* Volume mount ID */
 5580              	 .loc 1 3432 0
 5581 0456 0D4B     	 ldr r3,.L354+12
 5582 0458 1B88     	 ldrh r3,[r3]
 5583 045a 0133     	 adds r3,r3,#1
 5584 045c 9AB2     	 uxth r2,r3
 5585 045e 0B4B     	 ldr r3,.L354+12
 5586 0460 1A80     	 strh r2,[r3]
 5587 0462 0A4B     	 ldr r3,.L354+12
 5588 0464 1A88     	 ldrh r2,[r3]
 5589 0466 BB6B     	 ldr r3,[r7,#56]
 5590 0468 DA80     	 strh r2,[r3,#6]
3433:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1
3434:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3435:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3436:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3437:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3438:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3439:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3440:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
 5591              	 .loc 1 3440 0
 5592 046a BB6B     	 ldr r3,[r7,#56]
 5593 046c 0022     	 movs r2,#0
 5594 046e 5A61     	 str r2,[r3,#20]
3441:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3442:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0			/* Clear file lock semaphores */
3443:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clear_lock(fs);
 5595              	 .loc 1 3443 0
 5596 0470 B86B     	 ldr r0,[r7,#56]
 5597 0472 FFF7FEFF 	 bl clear_lock
3444:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3445:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 5598              	 .loc 1 3445 0
 5599 0476 0023     	 movs r3,#0
 5600              	.L351:
3446:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5601              	 .loc 1 3446 0 discriminator 1
 5602 0478 1846     	 mov r0,r3
 5603 047a 5837     	 adds r7,r7,#88
 5604              	.LCFI210:
 5605              	 .cfi_def_cfa_offset 8
 5606 047c BD46     	 mov sp,r7
 5607              	.LCFI211:
 5608              	 .cfi_def_cfa_register 13
 5609              	 
 5610 047e 80BD     	 pop {r7,pc}
 5611              	.L355:
 5612              	 .align 2
 5613              	.L354:
 5614 0480 F5FFFF0F 	 .word 268435445
 5615 0484 52526141 	 .word 1096897106
 5616 0488 72724161 	 .word 1631679090
 5617 048c 00000000 	 .word Fsid
 5618              	 .cfi_endproc
 5619              	.LFE38:
 5621              	 .section .text.validate,"ax",%progbits
 5622              	 .align 2
 5623              	 .thumb
 5624              	 .thumb_func
 5626              	validate:
 5627              	.LFB39:
3447:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3448:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3449:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3450:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3451:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3452:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check if the file/directory object is valid or not                    */
3453:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3454:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3455:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3456:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity
3457:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
3458:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3459:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5628              	 .loc 1 3459 0
 5629              	 .cfi_startproc
 5630              	 
 5631              	 
 5632 0000 80B5     	 push {r7,lr}
 5633              	.LCFI212:
 5634              	 .cfi_def_cfa_offset 8
 5635              	 .cfi_offset 7,-8
 5636              	 .cfi_offset 14,-4
 5637 0002 84B0     	 sub sp,sp,#16
 5638              	.LCFI213:
 5639              	 .cfi_def_cfa_offset 24
 5640 0004 00AF     	 add r7,sp,#0
 5641              	.LCFI214:
 5642              	 .cfi_def_cfa_register 7
 5643 0006 7860     	 str r0,[r7,#4]
 5644 0008 3960     	 str r1,[r7]
3460:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
 5645              	 .loc 1 3460 0
 5646 000a 0923     	 movs r3,#9
 5647 000c FB73     	 strb r3,[r7,#15]
3461:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3462:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3463:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
 5648              	 .loc 1 3463 0
 5649 000e 7B68     	 ldr r3,[r7,#4]
 5650 0010 002B     	 cmp r3,#0
 5651 0012 1CD0     	 beq .L357
 5652              	 .loc 1 3463 0 is_stmt 0 discriminator 1
 5653 0014 7B68     	 ldr r3,[r7,#4]
 5654 0016 1B68     	 ldr r3,[r3]
 5655 0018 002B     	 cmp r3,#0
 5656 001a 18D0     	 beq .L357
 5657              	 .loc 1 3463 0 discriminator 2
 5658 001c 7B68     	 ldr r3,[r7,#4]
 5659 001e 1B68     	 ldr r3,[r3]
 5660 0020 1B78     	 ldrb r3,[r3]
 5661 0022 002B     	 cmp r3,#0
 5662 0024 13D0     	 beq .L357
 5663              	 .loc 1 3463 0 discriminator 3
 5664 0026 7B68     	 ldr r3,[r7,#4]
 5665 0028 9A88     	 ldrh r2,[r3,#4]
 5666 002a 7B68     	 ldr r3,[r7,#4]
 5667 002c 1B68     	 ldr r3,[r3]
 5668 002e DB88     	 ldrh r3,[r3,#6]
 5669 0030 9A42     	 cmp r2,r3
 5670 0032 0CD1     	 bne .L357
3464:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
3465:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
3466:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initializ
3467:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_OK;
3468:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
3469:../Dave/Generated/FATFS/ff_Src/ff.c **** 				unlock_fs(obj->fs, FR_OK);
3470:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3471:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
3472:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_TIMEOUT;
3473:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3474:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3475:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialize
 5671              	 .loc 1 3475 0 is_stmt 1
 5672 0034 7B68     	 ldr r3,[r7,#4]
 5673 0036 1B68     	 ldr r3,[r3]
 5674 0038 5B78     	 ldrb r3,[r3,#1]
 5675 003a 1846     	 mov r0,r3
 5676 003c FFF7FEFF 	 bl disk_status
 5677 0040 0346     	 mov r3,r0
 5678 0042 03F00103 	 and r3,r3,#1
 5679 0046 002B     	 cmp r3,#0
 5680 0048 01D1     	 bne .L357
3476:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 5681              	 .loc 1 3476 0
 5682 004a 0023     	 movs r3,#0
 5683 004c FB73     	 strb r3,[r7,#15]
 5684              	.L357:
3477:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3478:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3479:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3480:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 5685              	 .loc 1 3480 0
 5686 004e FB7B     	 ldrb r3,[r7,#15]
 5687 0050 002B     	 cmp r3,#0
 5688 0052 02D1     	 bne .L358
 5689              	 .loc 1 3480 0 is_stmt 0 discriminator 1
 5690 0054 7B68     	 ldr r3,[r7,#4]
 5691 0056 1B68     	 ldr r3,[r3]
 5692 0058 00E0     	 b .L359
 5693              	.L358:
 5694              	 .loc 1 3480 0 discriminator 2
 5695 005a 0023     	 movs r3,#0
 5696              	.L359:
 5697              	 .loc 1 3480 0 discriminator 4
 5698 005c 3A68     	 ldr r2,[r7]
 5699 005e 1360     	 str r3,[r2]
3481:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 5700              	 .loc 1 3481 0 is_stmt 1 discriminator 4
 5701 0060 FB7B     	 ldrb r3,[r7,#15]
3482:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5702              	 .loc 1 3482 0 discriminator 4
 5703 0062 1846     	 mov r0,r3
 5704 0064 1037     	 adds r7,r7,#16
 5705              	.LCFI215:
 5706              	 .cfi_def_cfa_offset 8
 5707 0066 BD46     	 mov sp,r7
 5708              	.LCFI216:
 5709              	 .cfi_def_cfa_register 13
 5710              	 
 5711 0068 80BD     	 pop {r7,pc}
 5712              	 .cfi_endproc
 5713              	.LFE39:
 5715 006a 00BF     	 .section .text.f_mount,"ax",%progbits
 5716              	 .align 2
 5717              	 .global f_mount
 5718              	 .thumb
 5719              	 .thumb_func
 5721              	f_mount:
 5722              	.LFB40:
3483:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3484:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3485:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3486:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3487:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------------------------------------
3488:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3489:../Dave/Generated/FATFS/ff_Src/ff.c ****    Public Functions (FatFs API)
3490:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3491:../Dave/Generated/FATFS/ff_Src/ff.c **** ----------------------------------------------------------------------------*/
3492:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3493:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3494:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3495:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3496:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3497:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3498:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3499:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mount (
3500:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
3501:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3502:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3503:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3504:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5723              	 .loc 1 3504 0
 5724              	 .cfi_startproc
 5725              	 
 5726              	 
 5727 0000 80B5     	 push {r7,lr}
 5728              	.LCFI217:
 5729              	 .cfi_def_cfa_offset 8
 5730              	 .cfi_offset 7,-8
 5731              	 .cfi_offset 14,-4
 5732 0002 88B0     	 sub sp,sp,#32
 5733              	.LCFI218:
 5734              	 .cfi_def_cfa_offset 40
 5735 0004 00AF     	 add r7,sp,#0
 5736              	.LCFI219:
 5737              	 .cfi_def_cfa_register 7
 5738 0006 F860     	 str r0,[r7,#12]
 5739 0008 B960     	 str r1,[r7,#8]
 5740 000a 1346     	 mov r3,r2
 5741 000c FB71     	 strb r3,[r7,#7]
3505:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *cfs;
3506:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
3507:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3508:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *rp = path;
 5742              	 .loc 1 3508 0
 5743 000e BB68     	 ldr r3,[r7,#8]
 5744 0010 3B61     	 str r3,[r7,#16]
3509:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3510:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3511:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3512:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&rp);
 5745              	 .loc 1 3512 0
 5746 0012 07F11003 	 add r3,r7,#16
 5747 0016 1846     	 mov r0,r3
 5748 0018 FFF7FEFF 	 bl get_ldnumber
 5749 001c F861     	 str r0,[r7,#28]
3513:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5750              	 .loc 1 3513 0
 5751 001e FB69     	 ldr r3,[r7,#28]
 5752 0020 002B     	 cmp r3,#0
 5753 0022 01DA     	 bge .L362
 5754              	 .loc 1 3513 0 is_stmt 0 discriminator 1
 5755 0024 0B23     	 movs r3,#11
 5756 0026 29E0     	 b .L367
 5757              	.L362:
3514:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5758              	 .loc 1 3514 0 is_stmt 1
 5759 0028 164A     	 ldr r2,.L368
 5760 002a FB69     	 ldr r3,[r7,#28]
 5761 002c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 5762 0030 BB61     	 str r3,[r7,#24]
3515:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3516:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (cfs) {
 5763              	 .loc 1 3516 0
 5764 0032 BB69     	 ldr r3,[r7,#24]
 5765 0034 002B     	 cmp r3,#0
 5766 0036 05D0     	 beq .L364
3517:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3518:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clear_lock(cfs);
 5767              	 .loc 1 3518 0
 5768 0038 B869     	 ldr r0,[r7,#24]
 5769 003a FFF7FEFF 	 bl clear_lock
3519:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3520:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT						/* Discard sync object of the current volume */
3521:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3522:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3523:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 5770              	 .loc 1 3523 0
 5771 003e BB69     	 ldr r3,[r7,#24]
 5772 0040 0022     	 movs r2,#0
 5773 0042 1A70     	 strb r2,[r3]
 5774              	.L364:
3524:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3525:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3526:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs) {
 5775              	 .loc 1 3526 0
 5776 0044 FB68     	 ldr r3,[r7,#12]
 5777 0046 002B     	 cmp r3,#0
 5778 0048 02D0     	 beq .L365
3527:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 5779              	 .loc 1 3527 0
 5780 004a FB68     	 ldr r3,[r7,#12]
 5781 004c 0022     	 movs r2,#0
 5782 004e 1A70     	 strb r2,[r3]
 5783              	.L365:
3528:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT						/* Create sync object for the new volume */
3529:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3530:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3531:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3532:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 5784              	 .loc 1 3532 0
 5785 0050 FA68     	 ldr r2,[r7,#12]
 5786 0052 0C49     	 ldr r1,.L368
 5787 0054 FB69     	 ldr r3,[r7,#28]
 5788 0056 41F82320 	 str r2,[r1,r3,lsl#2]
3533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3534:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 5789              	 .loc 1 3534 0
 5790 005a FB79     	 ldrb r3,[r7,#7]
 5791 005c 002B     	 cmp r3,#0
 5792 005e 01D1     	 bne .L366
 5793              	 .loc 1 3534 0 is_stmt 0 discriminator 1
 5794 0060 0023     	 movs r3,#0
 5795 0062 0BE0     	 b .L367
 5796              	.L366:
3535:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3536:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 5797              	 .loc 1 3536 0 is_stmt 1
 5798 0064 07F10802 	 add r2,r7,#8
 5799 0068 07F10C03 	 add r3,r7,#12
 5800 006c 1046     	 mov r0,r2
 5801 006e 1946     	 mov r1,r3
 5802 0070 0022     	 movs r2,#0
 5803 0072 FFF7FEFF 	 bl find_volume
 5804 0076 0346     	 mov r3,r0
 5805 0078 FB75     	 strb r3,[r7,#23]
3537:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 5806              	 .loc 1 3537 0
 5807 007a FB7D     	 ldrb r3,[r7,#23]
 5808              	.L367:
3538:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5809              	 .loc 1 3538 0 discriminator 1
 5810 007c 1846     	 mov r0,r3
 5811 007e 2037     	 adds r7,r7,#32
 5812              	.LCFI220:
 5813              	 .cfi_def_cfa_offset 8
 5814 0080 BD46     	 mov sp,r7
 5815              	.LCFI221:
 5816              	 .cfi_def_cfa_register 13
 5817              	 
 5818 0082 80BD     	 pop {r7,pc}
 5819              	.L369:
 5820              	 .align 2
 5821              	.L368:
 5822 0084 00000000 	 .word FatFs
 5823              	 .cfi_endproc
 5824              	.LFE40:
 5826              	 .section .text.f_open,"ax",%progbits
 5827              	 .align 2
 5828              	 .global f_open
 5829              	 .thumb
 5830              	 .thumb_func
 5832              	f_open:
 5833              	.LFB41:
3539:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3540:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3541:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3542:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3543:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3544:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Open or Create a File                                                 */
3545:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3546:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3547:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_open (
3548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3549:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3550:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3551:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3552:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5834              	 .loc 1 3552 0
 5835              	 .cfi_startproc
 5836              	 
 5837              	 
 5838 0000 90B5     	 push {r4,r7,lr}
 5839              	.LCFI222:
 5840              	 .cfi_def_cfa_offset 12
 5841              	 .cfi_offset 4,-12
 5842              	 .cfi_offset 7,-8
 5843              	 .cfi_offset 14,-4
 5844 0002 99B0     	 sub sp,sp,#100
 5845              	.LCFI223:
 5846              	 .cfi_def_cfa_offset 112
 5847 0004 00AF     	 add r7,sp,#0
 5848              	.LCFI224:
 5849              	 .cfi_def_cfa_register 7
 5850 0006 F860     	 str r0,[r7,#12]
 5851 0008 B960     	 str r1,[r7,#8]
 5852 000a 1346     	 mov r3,r2
 5853 000c FB71     	 strb r3,[r7,#7]
3553:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3554:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
3555:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3556:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3557:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dw, cl, bcs, clst, sc;
3558:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs;
3559:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3560:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
3561:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3562:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3563:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 5854              	 .loc 1 3563 0
 5855 000e FB68     	 ldr r3,[r7,#12]
 5856 0010 002B     	 cmp r3,#0
 5857 0012 01D1     	 bne .L371
 5858              	 .loc 1 3563 0 is_stmt 0 discriminator 1
 5859 0014 0923     	 movs r3,#9
 5860 0016 ACE1     	 b .L395
 5861              	.L371:
3564:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3565:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3566:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN
 5862              	 .loc 1 3566 0 is_stmt 1
 5863 0018 FB79     	 ldrb r3,[r7,#7]
 5864 001a 03F03F03 	 and r3,r3,#63
 5865 001e FB71     	 strb r3,[r7,#7]
3567:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, mode);
 5866              	 .loc 1 3567 0
 5867 0020 07F10801 	 add r1,r7,#8
 5868 0024 07F11002 	 add r2,r7,#16
 5869 0028 FB79     	 ldrb r3,[r7,#7]
 5870 002a 0846     	 mov r0,r1
 5871 002c 1146     	 mov r1,r2
 5872 002e 1A46     	 mov r2,r3
 5873 0030 FFF7FEFF 	 bl find_volume
 5874 0034 0346     	 mov r3,r0
 5875 0036 87F85F30 	 strb r3,[r7,#95]
3568:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 5876              	 .loc 1 3568 0
 5877 003a 97F85F30 	 ldrb r3,[r7,#95]
 5878 003e 002B     	 cmp r3,#0
 5879 0040 40F08E81 	 bne .L373
3569:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 5880              	 .loc 1 3569 0
 5881 0044 3B69     	 ldr r3,[r7,#16]
 5882 0046 7B61     	 str r3,[r7,#20]
3570:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
3571:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5883              	 .loc 1 3571 0
 5884 0048 BB68     	 ldr r3,[r7,#8]
 5885 004a 07F11402 	 add r2,r7,#20
 5886 004e 1046     	 mov r0,r2
 5887 0050 1946     	 mov r1,r3
 5888 0052 FFF7FEFF 	 bl follow_path
 5889 0056 0346     	 mov r3,r0
 5890 0058 87F85F30 	 strb r3,[r7,#95]
3572:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY	/* Read/Write configuration */
3573:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 5891              	 .loc 1 3573 0
 5892 005c 97F85F30 	 ldrb r3,[r7,#95]
 5893 0060 002B     	 cmp r3,#0
 5894 0062 1BD1     	 bne .L374
3574:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 5895              	 .loc 1 3574 0
 5896 0064 97F84330 	 ldrb r3,[r7,#67]
 5897 0068 DBB2     	 uxtb r3,r3
 5898 006a 5BB2     	 sxtb r3,r3
 5899 006c 002B     	 cmp r3,#0
 5900 006e 03DA     	 bge .L375
3575:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
 5901              	 .loc 1 3575 0
 5902 0070 0623     	 movs r3,#6
 5903 0072 87F85F30 	 strb r3,[r7,#95]
 5904 0076 11E0     	 b .L374
 5905              	.L375:
3576:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3577:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3578:../Dave/Generated/FATFS/ff_Src/ff.c **** 			else {
3579:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
 5906              	 .loc 1 3579 0
 5907 0078 FB79     	 ldrb r3,[r7,#7]
 5908 007a 23F00103 	 bic r3,r3,#1
 5909 007e 002B     	 cmp r3,#0
 5910 0080 14BF     	 ite ne
 5911 0082 0123     	 movne r3,#1
 5912 0084 0023     	 moveq r3,#0
 5913 0086 DBB2     	 uxtb r3,r3
 5914 0088 1A46     	 mov r2,r3
 5915 008a 07F11403 	 add r3,r7,#20
 5916 008e 1846     	 mov r0,r3
 5917 0090 1146     	 mov r1,r2
 5918 0092 FFF7FEFF 	 bl chk_lock
 5919 0096 0346     	 mov r3,r0
 5920 0098 87F85F30 	 strb r3,[r7,#95]
 5921              	.L374:
3580:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3581:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3582:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3583:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create or Open a file */
3584:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 5922              	 .loc 1 3584 0
 5923 009c FB79     	 ldrb r3,[r7,#7]
 5924 009e 03F01C03 	 and r3,r3,#28
 5925 00a2 002B     	 cmp r3,#0
 5926 00a4 7BD0     	 beq .L376
3585:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5927              	 .loc 1 3585 0
 5928 00a6 97F85F30 	 ldrb r3,[r7,#95]
 5929 00aa 002B     	 cmp r3,#0
 5930 00ac 17D0     	 beq .L377
3586:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 5931              	 .loc 1 3586 0
 5932 00ae 97F85F30 	 ldrb r3,[r7,#95]
 5933 00b2 042B     	 cmp r3,#4
 5934 00b4 0ED1     	 bne .L378
3587:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3588:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 5935              	 .loc 1 3588 0
 5936 00b6 FFF7FEFF 	 bl enq_lock
 5937 00ba 0346     	 mov r3,r0
 5938 00bc 002B     	 cmp r3,#0
 5939 00be 06D0     	 beq .L379
 5940              	 .loc 1 3588 0 is_stmt 0 discriminator 1
 5941 00c0 07F11403 	 add r3,r7,#20
 5942 00c4 1846     	 mov r0,r3
 5943 00c6 FFF7FEFF 	 bl dir_register
 5944 00ca 0346     	 mov r3,r0
 5945 00cc 00E0     	 b .L380
 5946              	.L379:
 5947              	 .loc 1 3588 0 discriminator 2
 5948 00ce 1223     	 movs r3,#18
 5949              	.L380:
 5950              	 .loc 1 3588 0 discriminator 4
 5951 00d0 87F85F30 	 strb r3,[r7,#95]
 5952              	.L378:
3589:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3590:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&dj);
3591:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3592:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3593:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 5953              	 .loc 1 3593 0 is_stmt 1
 5954 00d4 FB79     	 ldrb r3,[r7,#7]
 5955 00d6 43F00803 	 orr r3,r3,#8
 5956 00da FB71     	 strb r3,[r7,#7]
 5957 00dc 10E0     	 b .L381
 5958              	.L377:
3594:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3595:../Dave/Generated/FATFS/ff_Src/ff.c **** 			else {								/* Any object with the same name is already existing */
3596:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 5959              	 .loc 1 3596 0
 5960 00de BB7E     	 ldrb r3,[r7,#26]
 5961 00e0 03F01103 	 and r3,r3,#17
 5962 00e4 002B     	 cmp r3,#0
 5963 00e6 03D0     	 beq .L382
3597:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_DENIED;
 5964              	 .loc 1 3597 0
 5965 00e8 0723     	 movs r3,#7
 5966 00ea 87F85F30 	 strb r3,[r7,#95]
 5967 00ee 07E0     	 b .L381
 5968              	.L382:
3598:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
3599:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 5969              	 .loc 1 3599 0
 5970 00f0 FB79     	 ldrb r3,[r7,#7]
 5971 00f2 03F00403 	 and r3,r3,#4
 5972 00f6 002B     	 cmp r3,#0
 5973 00f8 02D0     	 beq .L381
 5974              	 .loc 1 3599 0 is_stmt 0 discriminator 1
 5975 00fa 0823     	 movs r3,#8
 5976 00fc 87F85F30 	 strb r3,[r7,#95]
 5977              	.L381:
3600:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3601:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3602:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 5978              	 .loc 1 3602 0 is_stmt 1
 5979 0100 97F85F30 	 ldrb r3,[r7,#95]
 5980 0104 002B     	 cmp r3,#0
 5981 0106 64D1     	 bne .L384
 5982              	 .loc 1 3602 0 is_stmt 0 discriminator 1
 5983 0108 FB79     	 ldrb r3,[r7,#7]
 5984 010a 03F00803 	 and r3,r3,#8
 5985 010e 002B     	 cmp r3,#0
 5986 0110 5FD0     	 beq .L384
3603:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3604:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3605:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Get current allocation info */
3606:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.fs = fs;
3607:../Dave/Generated/FATFS/ff_Src/ff.c **** 					init_alloc_info(fs, &fp->obj);
3608:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Set directory entry block initial state */
3609:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
3610:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
3611:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;
3612:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
3613:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3614:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = store_xdir(&dj);
3615:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
3616:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3617:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3618:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3619:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
3620:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3621:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
3622:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Set directory entry initial state */
3623:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 5987              	 .loc 1 3623 0 is_stmt 1
 5988 0112 3A69     	 ldr r2,[r7,#16]
 5989 0114 7B6B     	 ldr r3,[r7,#52]
 5990 0116 1046     	 mov r0,r2
 5991 0118 1946     	 mov r1,r3
 5992 011a FFF7FEFF 	 bl ld_clust
 5993 011e 3865     	 str r0,[r7,#80]
3624:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 5994              	 .loc 1 3624 0
 5995 0120 7B6B     	 ldr r3,[r7,#52]
 5996 0122 03F10E04 	 add r4,r3,#14
 5997 0126 FFF7FEFF 	 bl get_fattime
 5998 012a 0346     	 mov r3,r0
 5999 012c 2046     	 mov r0,r4
 6000 012e 1946     	 mov r1,r3
 6001 0130 FFF7FEFF 	 bl st_dword
3625:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 6002              	 .loc 1 3625 0
 6003 0134 7B6B     	 ldr r3,[r7,#52]
 6004 0136 0B33     	 adds r3,r3,#11
 6005 0138 2022     	 movs r2,#32
 6006 013a 1A70     	 strb r2,[r3]
3626:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 6007              	 .loc 1 3626 0
 6008 013c 3A69     	 ldr r2,[r7,#16]
 6009 013e 7B6B     	 ldr r3,[r7,#52]
 6010 0140 1046     	 mov r0,r2
 6011 0142 1946     	 mov r1,r3
 6012 0144 0022     	 movs r2,#0
 6013 0146 FFF7FEFF 	 bl st_clust
3627:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 6014              	 .loc 1 3627 0
 6015 014a 7B6B     	 ldr r3,[r7,#52]
 6016 014c 1C33     	 adds r3,r3,#28
 6017 014e 1846     	 mov r0,r3
 6018 0150 0021     	 movs r1,#0
 6019 0152 FFF7FEFF 	 bl st_dword
3628:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 6020              	 .loc 1 3628 0
 6021 0156 3B69     	 ldr r3,[r7,#16]
 6022 0158 0122     	 movs r2,#1
 6023 015a DA70     	 strb r2,[r3,#3]
3629:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
 6024              	 .loc 1 3629 0
 6025 015c 3B6D     	 ldr r3,[r7,#80]
 6026 015e 002B     	 cmp r3,#0
 6027 0160 37D0     	 beq .L384
3630:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dw = fs->winsect;
 6028              	 .loc 1 3630 0
 6029 0162 3B69     	 ldr r3,[r7,#16]
 6030 0164 1B6B     	 ldr r3,[r3,#48]
 6031 0166 FB64     	 str r3,[r7,#76]
3631:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 6032              	 .loc 1 3631 0
 6033 0168 07F11403 	 add r3,r7,#20
 6034 016c 1846     	 mov r0,r3
 6035 016e 396D     	 ldr r1,[r7,#80]
 6036 0170 0022     	 movs r2,#0
 6037 0172 FFF7FEFF 	 bl remove_chain
 6038 0176 0346     	 mov r3,r0
 6039 0178 87F85F30 	 strb r3,[r7,#95]
3632:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
 6040              	 .loc 1 3632 0
 6041 017c 97F85F30 	 ldrb r3,[r7,#95]
 6042 0180 002B     	 cmp r3,#0
 6043 0182 26D1     	 bne .L384
3633:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, dw);
 6044              	 .loc 1 3633 0
 6045 0184 3B69     	 ldr r3,[r7,#16]
 6046 0186 1846     	 mov r0,r3
 6047 0188 F96C     	 ldr r1,[r7,#76]
 6048 018a FFF7FEFF 	 bl move_window
 6049 018e 0346     	 mov r3,r0
 6050 0190 87F85F30 	 strb r3,[r7,#95]
3634:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 6051              	 .loc 1 3634 0
 6052 0194 3B69     	 ldr r3,[r7,#16]
 6053 0196 3A6D     	 ldr r2,[r7,#80]
 6054 0198 013A     	 subs r2,r2,#1
 6055 019a DA60     	 str r2,[r3,#12]
 6056 019c 19E0     	 b .L384
 6057              	.L376:
3635:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
3636:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3637:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3638:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3639:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3640:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {	/* Open an existing file */
3641:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {					/* Is the object exsiting? */
 6058              	 .loc 1 3641 0
 6059 019e 97F85F30 	 ldrb r3,[r7,#95]
 6060 01a2 002B     	 cmp r3,#0
 6061 01a4 15D1     	 bne .L384
3642:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 6062              	 .loc 1 3642 0
 6063 01a6 BB7E     	 ldrb r3,[r7,#26]
 6064 01a8 03F01003 	 and r3,r3,#16
 6065 01ac 002B     	 cmp r3,#0
 6066 01ae 03D0     	 beq .L385
3643:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_FILE;
 6067              	 .loc 1 3643 0
 6068 01b0 0423     	 movs r3,#4
 6069 01b2 87F85F30 	 strb r3,[r7,#95]
 6070 01b6 0CE0     	 b .L384
 6071              	.L385:
3644:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
3645:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 6072              	 .loc 1 3645 0
 6073 01b8 FB79     	 ldrb r3,[r7,#7]
 6074 01ba 03F00203 	 and r3,r3,#2
 6075 01be 002B     	 cmp r3,#0
 6076 01c0 07D0     	 beq .L384
 6077              	 .loc 1 3645 0 is_stmt 0 discriminator 1
 6078 01c2 BB7E     	 ldrb r3,[r7,#26]
 6079 01c4 03F00103 	 and r3,r3,#1
 6080 01c8 002B     	 cmp r3,#0
 6081 01ca 02D0     	 beq .L384
3646:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_DENIED;
 6082              	 .loc 1 3646 0 is_stmt 1
 6083 01cc 0723     	 movs r3,#7
 6084 01ce 87F85F30 	 strb r3,[r7,#95]
 6085              	.L384:
3647:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3648:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3649:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3650:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3651:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 6086              	 .loc 1 3651 0
 6087 01d2 97F85F30 	 ldrb r3,[r7,#95]
 6088 01d6 002B     	 cmp r3,#0
 6089 01d8 28D1     	 bne .L386
3652:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
 6090              	 .loc 1 3652 0
 6091 01da FB79     	 ldrb r3,[r7,#7]
 6092 01dc 03F00803 	 and r3,r3,#8
 6093 01e0 002B     	 cmp r3,#0
 6094 01e2 03D0     	 beq .L387
 6095              	 .loc 1 3652 0 is_stmt 0 discriminator 1
 6096 01e4 FB79     	 ldrb r3,[r7,#7]
 6097 01e6 43F04003 	 orr r3,r3,#64
 6098 01ea FB71     	 strb r3,[r7,#7]
 6099              	.L387:
3653:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 6100              	 .loc 1 3653 0 is_stmt 1
 6101 01ec 3B69     	 ldr r3,[r7,#16]
 6102 01ee 1A6B     	 ldr r2,[r3,#48]
 6103 01f0 FB68     	 ldr r3,[r7,#12]
 6104 01f2 5A62     	 str r2,[r3,#36]
3654:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->dir_ptr = dj.dir;
 6105              	 .loc 1 3654 0
 6106 01f4 7A6B     	 ldr r2,[r7,#52]
 6107 01f6 FB68     	 ldr r3,[r7,#12]
 6108 01f8 9A62     	 str r2,[r3,#40]
3655:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3656:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 6109              	 .loc 1 3656 0
 6110 01fa FB79     	 ldrb r3,[r7,#7]
 6111 01fc 23F00103 	 bic r3,r3,#1
 6112 0200 002B     	 cmp r3,#0
 6113 0202 14BF     	 ite ne
 6114 0204 0123     	 movne r3,#1
 6115 0206 0023     	 moveq r3,#0
 6116 0208 DBB2     	 uxtb r3,r3
 6117 020a 1A46     	 mov r2,r3
 6118 020c 07F11403 	 add r3,r7,#20
 6119 0210 1846     	 mov r0,r3
 6120 0212 1146     	 mov r1,r2
 6121 0214 FFF7FEFF 	 bl inc_lock
 6122 0218 0246     	 mov r2,r0
 6123 021a FB68     	 ldr r3,[r7,#12]
 6124 021c 1A61     	 str r2,[r3,#16]
3657:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 6125              	 .loc 1 3657 0
 6126 021e FB68     	 ldr r3,[r7,#12]
 6127 0220 1B69     	 ldr r3,[r3,#16]
 6128 0222 002B     	 cmp r3,#0
 6129 0224 02D1     	 bne .L386
 6130              	 .loc 1 3657 0 is_stmt 0 discriminator 1
 6131 0226 0223     	 movs r3,#2
 6132 0228 87F85F30 	 strb r3,[r7,#95]
 6133              	.L386:
3658:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3659:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3660:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* R/O configuration */
3661:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
3662:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
3663:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
3664:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
3665:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
3666:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_FILE;
3667:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3668:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3669:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3670:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3671:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3672:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 6134              	 .loc 1 3672 0 is_stmt 1
 6135 022c 97F85F30 	 ldrb r3,[r7,#95]
 6136 0230 002B     	 cmp r3,#0
 6137 0232 40F09580 	 bne .L373
3673:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3674:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3675:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3676:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3677:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3678:../Dave/Generated/FATFS/ff_Src/ff.c **** 				init_alloc_info(fs, &fp->obj);
3679:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
3680:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3681:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3682:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 6138              	 .loc 1 3682 0
 6139 0236 3A69     	 ldr r2,[r7,#16]
 6140 0238 7B6B     	 ldr r3,[r7,#52]
 6141 023a 1046     	 mov r0,r2
 6142 023c 1946     	 mov r1,r3
 6143 023e FFF7FEFF 	 bl ld_clust
 6144 0242 0246     	 mov r2,r0
 6145 0244 FB68     	 ldr r3,[r7,#12]
 6146 0246 9A60     	 str r2,[r3,#8]
3683:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 6147              	 .loc 1 3683 0
 6148 0248 7B6B     	 ldr r3,[r7,#52]
 6149 024a 1C33     	 adds r3,r3,#28
 6150 024c 1846     	 mov r0,r3
 6151 024e FFF7FEFF 	 bl ld_dword
 6152 0252 0246     	 mov r2,r0
 6153 0254 FB68     	 ldr r3,[r7,#12]
 6154 0256 DA60     	 str r2,[r3,#12]
3684:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3685:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3686:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3687:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3688:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
 6155              	 .loc 1 3688 0
 6156 0258 3A69     	 ldr r2,[r7,#16]
 6157 025a FB68     	 ldr r3,[r7,#12]
 6158 025c 1A60     	 str r2,[r3]
3689:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.id = fs->id;
 6159              	 .loc 1 3689 0
 6160 025e 3B69     	 ldr r3,[r7,#16]
 6161 0260 DA88     	 ldrh r2,[r3,#6]
 6162 0262 FB68     	 ldr r3,[r7,#12]
 6163 0264 9A80     	 strh r2,[r3,#4]
3690:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 6164              	 .loc 1 3690 0
 6165 0266 FB68     	 ldr r3,[r7,#12]
 6166 0268 FA79     	 ldrb r2,[r7,#7]
 6167 026a 1A75     	 strb r2,[r3,#20]
3691:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->err = 0;			/* Clear error flag */
 6168              	 .loc 1 3691 0
 6169 026c FB68     	 ldr r3,[r7,#12]
 6170 026e 0022     	 movs r2,#0
 6171 0270 5A75     	 strb r2,[r3,#21]
3692:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 6172              	 .loc 1 3692 0
 6173 0272 FB68     	 ldr r3,[r7,#12]
 6174 0274 0022     	 movs r2,#0
 6175 0276 1A62     	 str r2,[r3,#32]
3693:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 6176              	 .loc 1 3693 0
 6177 0278 FB68     	 ldr r3,[r7,#12]
 6178 027a 0022     	 movs r2,#0
 6179 027c 9A61     	 str r2,[r3,#24]
3694:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3695:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3696:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 6180              	 .loc 1 3696 0
 6181 027e FB68     	 ldr r3,[r7,#12]
 6182 0280 2C33     	 adds r3,r3,#44
 6183 0282 1846     	 mov r0,r3
 6184 0284 0021     	 movs r1,#0
 6185 0286 4FF40072 	 mov r2,#512
 6186 028a FFF7FEFF 	 bl mem_set
3697:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3698:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
 6187              	 .loc 1 3698 0
 6188 028e FB79     	 ldrb r3,[r7,#7]
 6189 0290 03F02003 	 and r3,r3,#32
 6190 0294 002B     	 cmp r3,#0
 6191 0296 63D0     	 beq .L373
 6192              	 .loc 1 3698 0 is_stmt 0 discriminator 1
 6193 0298 FB68     	 ldr r3,[r7,#12]
 6194 029a DB68     	 ldr r3,[r3,#12]
 6195 029c 002B     	 cmp r3,#0
 6196 029e 5FD0     	 beq .L373
3699:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 6197              	 .loc 1 3699 0 is_stmt 1
 6198 02a0 FB68     	 ldr r3,[r7,#12]
 6199 02a2 DA68     	 ldr r2,[r3,#12]
 6200 02a4 FB68     	 ldr r3,[r7,#12]
 6201 02a6 9A61     	 str r2,[r3,#24]
3700:../Dave/Generated/FATFS/ff_Src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 6202              	 .loc 1 3700 0
 6203 02a8 3B69     	 ldr r3,[r7,#16]
 6204 02aa 5B89     	 ldrh r3,[r3,#10]
 6205 02ac 5B02     	 lsls r3,r3,#9
 6206 02ae BB64     	 str r3,[r7,#72]
3701:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 6207              	 .loc 1 3701 0
 6208 02b0 FB68     	 ldr r3,[r7,#12]
 6209 02b2 9B68     	 ldr r3,[r3,#8]
 6210 02b4 BB65     	 str r3,[r7,#88]
3702:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 6211              	 .loc 1 3702 0
 6212 02b6 FB68     	 ldr r3,[r7,#12]
 6213 02b8 DB68     	 ldr r3,[r3,#12]
 6214 02ba 7B65     	 str r3,[r7,#84]
 6215 02bc 16E0     	 b .L388
 6216              	.L392:
3703:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6217              	 .loc 1 3703 0
 6218 02be FB68     	 ldr r3,[r7,#12]
 6219 02c0 1846     	 mov r0,r3
 6220 02c2 B96D     	 ldr r1,[r7,#88]
 6221 02c4 FFF7FEFF 	 bl get_fat
 6222 02c8 B865     	 str r0,[r7,#88]
3704:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 6223              	 .loc 1 3704 0
 6224 02ca BB6D     	 ldr r3,[r7,#88]
 6225 02cc 012B     	 cmp r3,#1
 6226 02ce 02D8     	 bhi .L389
 6227              	 .loc 1 3704 0 is_stmt 0 discriminator 1
 6228 02d0 0223     	 movs r3,#2
 6229 02d2 87F85F30 	 strb r3,[r7,#95]
 6230              	.L389:
3705:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 6231              	 .loc 1 3705 0 is_stmt 1
 6232 02d6 BB6D     	 ldr r3,[r7,#88]
 6233 02d8 B3F1FF3F 	 cmp r3,#-1
 6234 02dc 02D1     	 bne .L390
 6235              	 .loc 1 3705 0 is_stmt 0 discriminator 1
 6236 02de 0123     	 movs r3,#1
 6237 02e0 87F85F30 	 strb r3,[r7,#95]
 6238              	.L390:
3702:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6239              	 .loc 1 3702 0 is_stmt 1 discriminator 2
 6240 02e4 7A6D     	 ldr r2,[r7,#84]
 6241 02e6 BB6C     	 ldr r3,[r7,#72]
 6242 02e8 D31A     	 subs r3,r2,r3
 6243 02ea 7B65     	 str r3,[r7,#84]
 6244              	.L388:
3702:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6245              	 .loc 1 3702 0 is_stmt 0 discriminator 1
 6246 02ec 97F85F30 	 ldrb r3,[r7,#95]
 6247 02f0 002B     	 cmp r3,#0
 6248 02f2 03D1     	 bne .L391
3702:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6249              	 .loc 1 3702 0 discriminator 3
 6250 02f4 7A6D     	 ldr r2,[r7,#84]
 6251 02f6 BB6C     	 ldr r3,[r7,#72]
 6252 02f8 9A42     	 cmp r2,r3
 6253 02fa E0D8     	 bhi .L392
 6254              	.L391:
3706:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3707:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;
 6255              	 .loc 1 3707 0 is_stmt 1
 6256 02fc FB68     	 ldr r3,[r7,#12]
 6257 02fe BA6D     	 ldr r2,[r7,#88]
 6258 0300 DA61     	 str r2,[r3,#28]
3708:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 6259              	 .loc 1 3708 0
 6260 0302 97F85F30 	 ldrb r3,[r7,#95]
 6261 0306 002B     	 cmp r3,#0
 6262 0308 2AD1     	 bne .L373
 6263              	 .loc 1 3708 0 is_stmt 0 discriminator 1
 6264 030a 7B6D     	 ldr r3,[r7,#84]
 6265 030c C3F30803 	 ubfx r3,r3,#0,#9
 6266 0310 002B     	 cmp r3,#0
 6267 0312 25D0     	 beq .L373
3709:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((sc = clst2sect(fs, clst)) == 0) {
 6268              	 .loc 1 3709 0 is_stmt 1
 6269 0314 3B69     	 ldr r3,[r7,#16]
 6270 0316 1846     	 mov r0,r3
 6271 0318 B96D     	 ldr r1,[r7,#88]
 6272 031a FFF7FEFF 	 bl clst2sect
 6273 031e 7864     	 str r0,[r7,#68]
 6274 0320 7B6C     	 ldr r3,[r7,#68]
 6275 0322 002B     	 cmp r3,#0
 6276 0324 03D1     	 bne .L393
3710:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_INT_ERR;
 6277              	 .loc 1 3710 0
 6278 0326 0223     	 movs r3,#2
 6279 0328 87F85F30 	 strb r3,[r7,#95]
 6280 032c 18E0     	 b .L373
 6281              	.L393:
3711:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
3712:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
 6282              	 .loc 1 3712 0
 6283 032e 7B6D     	 ldr r3,[r7,#84]
 6284 0330 5A0A     	 lsrs r2,r3,#9
 6285 0332 7B6C     	 ldr r3,[r7,#68]
 6286 0334 1A44     	 add r2,r2,r3
 6287 0336 FB68     	 ldr r3,[r7,#12]
 6288 0338 1A62     	 str r2,[r3,#32]
3713:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3714:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 6289              	 .loc 1 3714 0
 6290 033a 3B69     	 ldr r3,[r7,#16]
 6291 033c 5978     	 ldrb r1,[r3,#1]
 6292 033e FB68     	 ldr r3,[r7,#12]
 6293 0340 03F12C02 	 add r2,r3,#44
 6294 0344 FB68     	 ldr r3,[r7,#12]
 6295 0346 1B6A     	 ldr r3,[r3,#32]
 6296 0348 0846     	 mov r0,r1
 6297 034a 1146     	 mov r1,r2
 6298 034c 1A46     	 mov r2,r3
 6299 034e 0123     	 movs r3,#1
 6300 0350 FFF7FEFF 	 bl disk_read
 6301 0354 0346     	 mov r3,r0
 6302 0356 002B     	 cmp r3,#0
 6303 0358 02D0     	 beq .L373
 6304              	 .loc 1 3714 0 is_stmt 0 discriminator 1
 6305 035a 0123     	 movs r3,#1
 6306 035c 87F85F30 	 strb r3,[r7,#95]
 6307              	.L373:
3715:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3716:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3717:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3718:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3719:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3720:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3721:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3722:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
3723:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3724:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3725:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 6308              	 .loc 1 3725 0 is_stmt 1
 6309 0360 97F85F30 	 ldrb r3,[r7,#95]
 6310 0364 002B     	 cmp r3,#0
 6311 0366 02D0     	 beq .L394
 6312              	 .loc 1 3725 0 is_stmt 0 discriminator 1
 6313 0368 FB68     	 ldr r3,[r7,#12]
 6314 036a 0022     	 movs r2,#0
 6315 036c 1A60     	 str r2,[r3]
 6316              	.L394:
3726:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3727:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 6317              	 .loc 1 3727 0 is_stmt 1
 6318 036e 97F85F30 	 ldrb r3,[r7,#95]
 6319              	.L395:
3728:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6320              	 .loc 1 3728 0 discriminator 1
 6321 0372 1846     	 mov r0,r3
 6322 0374 6437     	 adds r7,r7,#100
 6323              	.LCFI225:
 6324              	 .cfi_def_cfa_offset 12
 6325 0376 BD46     	 mov sp,r7
 6326              	.LCFI226:
 6327              	 .cfi_def_cfa_register 13
 6328              	 
 6329 0378 90BD     	 pop {r4,r7,pc}
 6330              	 .cfi_endproc
 6331              	.LFE41:
 6333 037a 00BF     	 .section .text.f_read,"ax",%progbits
 6334              	 .align 2
 6335              	 .global f_read
 6336              	 .thumb
 6337              	 .thumb_func
 6339              	f_read:
 6340              	.LFB42:
3729:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3730:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3731:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3732:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3733:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3734:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read File                                                             */
3735:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3736:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3737:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_read (
3738:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3739:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* buff,	/* Pointer to data buffer */
3740:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btr,	/* Number of bytes to read */
3741:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3742:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3743:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6341              	 .loc 1 3743 0
 6342              	 .cfi_startproc
 6343              	 
 6344              	 
 6345 0000 80B5     	 push {r7,lr}
 6346              	.LCFI227:
 6347              	 .cfi_def_cfa_offset 8
 6348              	 .cfi_offset 7,-8
 6349              	 .cfi_offset 14,-4
 6350 0002 8EB0     	 sub sp,sp,#56
 6351              	.LCFI228:
 6352              	 .cfi_def_cfa_offset 64
 6353 0004 00AF     	 add r7,sp,#0
 6354              	.LCFI229:
 6355              	 .cfi_def_cfa_register 7
 6356 0006 F860     	 str r0,[r7,#12]
 6357 0008 B960     	 str r1,[r7,#8]
 6358 000a 7A60     	 str r2,[r7,#4]
 6359 000c 3B60     	 str r3,[r7]
3744:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3745:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, sect;
3747:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t remain;
3748:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rcnt, cc, csect;
3749:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
 6360              	 .loc 1 3749 0
 6361 000e BB68     	 ldr r3,[r7,#8]
 6362 0010 7B62     	 str r3,[r7,#36]
3750:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3751:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3752:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*br = 0;	/* Clear read byte counter */
 6363              	 .loc 1 3752 0
 6364 0012 3B68     	 ldr r3,[r7]
 6365 0014 0022     	 movs r2,#0
 6366 0016 1A60     	 str r2,[r3]
3753:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 6367              	 .loc 1 3753 0
 6368 0018 FA68     	 ldr r2,[r7,#12]
 6369 001a 07F11403 	 add r3,r7,#20
 6370 001e 1046     	 mov r0,r2
 6371 0020 1946     	 mov r1,r3
 6372 0022 FFF7FEFF 	 bl validate
 6373 0026 0346     	 mov r3,r0
 6374 0028 87F83730 	 strb r3,[r7,#55]
3754:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6375              	 .loc 1 3754 0
 6376 002c 97F83730 	 ldrb r3,[r7,#55]
 6377 0030 002B     	 cmp r3,#0
 6378 0032 07D1     	 bne .L397
 6379              	 .loc 1 3754 0 is_stmt 0 discriminator 2
 6380 0034 FB68     	 ldr r3,[r7,#12]
 6381 0036 5B7D     	 ldrb r3,[r3,#21]
 6382 0038 87F83730 	 strb r3,[r7,#55]
 6383 003c 97F83730 	 ldrb r3,[r7,#55]
 6384 0040 002B     	 cmp r3,#0
 6385 0042 02D0     	 beq .L398
 6386              	.L397:
 6387              	 .loc 1 3754 0 discriminator 3
 6388 0044 97F83730 	 ldrb r3,[r7,#55]
 6389 0048 10E1     	 b .L420
 6390              	.L398:
3755:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 6391              	 .loc 1 3755 0 is_stmt 1
 6392 004a FB68     	 ldr r3,[r7,#12]
 6393 004c 1B7D     	 ldrb r3,[r3,#20]
 6394 004e 03F00103 	 and r3,r3,#1
 6395 0052 002B     	 cmp r3,#0
 6396 0054 01D1     	 bne .L400
 6397              	 .loc 1 3755 0 is_stmt 0 discriminator 1
 6398 0056 0723     	 movs r3,#7
 6399 0058 08E1     	 b .L420
 6400              	.L400:
3756:../Dave/Generated/FATFS/ff_Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 6401              	 .loc 1 3756 0 is_stmt 1
 6402 005a FB68     	 ldr r3,[r7,#12]
 6403 005c DA68     	 ldr r2,[r3,#12]
 6404 005e FB68     	 ldr r3,[r7,#12]
 6405 0060 9B69     	 ldr r3,[r3,#24]
 6406 0062 D31A     	 subs r3,r2,r3
 6407 0064 3B62     	 str r3,[r7,#32]
3757:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6408              	 .loc 1 3757 0
 6409 0066 7A68     	 ldr r2,[r7,#4]
 6410 0068 3B6A     	 ldr r3,[r7,#32]
 6411 006a 9A42     	 cmp r2,r3
 6412 006c 01D9     	 bls .L401
 6413              	 .loc 1 3757 0 is_stmt 0 discriminator 1
 6414 006e 3B6A     	 ldr r3,[r7,#32]
 6415 0070 7B60     	 str r3,[r7,#4]
 6416              	.L401:
3758:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3759:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btr;								/* Repeat until btr bytes read */
 6417              	 .loc 1 3759 0 is_stmt 1
 6418 0072 F6E0     	 b .L402
 6419              	.L419:
3760:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
3761:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 6420              	 .loc 1 3761 0
 6421 0074 FB68     	 ldr r3,[r7,#12]
 6422 0076 9B69     	 ldr r3,[r3,#24]
 6423 0078 C3F30803 	 ubfx r3,r3,#0,#9
 6424 007c 002B     	 cmp r3,#0
 6425 007e 40F0C280 	 bne .L403
3762:../Dave/Generated/FATFS/ff_Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 6426              	 .loc 1 3762 0
 6427 0082 FB68     	 ldr r3,[r7,#12]
 6428 0084 9B69     	 ldr r3,[r3,#24]
 6429 0086 5B0A     	 lsrs r3,r3,#9
 6430 0088 7A69     	 ldr r2,[r7,#20]
 6431 008a 5289     	 ldrh r2,[r2,#10]
 6432 008c 013A     	 subs r2,r2,#1
 6433 008e 1340     	 ands r3,r3,r2
 6434 0090 FB61     	 str r3,[r7,#28]
3763:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 6435              	 .loc 1 3763 0
 6436 0092 FB69     	 ldr r3,[r7,#28]
 6437 0094 002B     	 cmp r3,#0
 6438 0096 23D1     	 bne .L404
3764:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 6439              	 .loc 1 3764 0
 6440 0098 FB68     	 ldr r3,[r7,#12]
 6441 009a 9B69     	 ldr r3,[r3,#24]
 6442 009c 002B     	 cmp r3,#0
 6443 009e 03D1     	 bne .L405
3765:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 6444              	 .loc 1 3765 0
 6445 00a0 FB68     	 ldr r3,[r7,#12]
 6446 00a2 9B68     	 ldr r3,[r3,#8]
 6447 00a4 3B63     	 str r3,[r7,#48]
 6448 00a6 07E0     	 b .L406
 6449              	.L405:
3766:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {						/* Middle or end of the file */
3767:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3768:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->cltbl) {
3769:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3770:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
3771:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3772:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
3773:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 6450              	 .loc 1 3773 0
 6451 00a8 FA68     	 ldr r2,[r7,#12]
 6452 00aa FB68     	 ldr r3,[r7,#12]
 6453 00ac DB69     	 ldr r3,[r3,#28]
 6454 00ae 1046     	 mov r0,r2
 6455 00b0 1946     	 mov r1,r3
 6456 00b2 FFF7FEFF 	 bl get_fat
 6457 00b6 3863     	 str r0,[r7,#48]
 6458              	.L406:
3774:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3775:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3776:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
 6459              	 .loc 1 3776 0
 6460 00b8 3B6B     	 ldr r3,[r7,#48]
 6461 00ba 012B     	 cmp r3,#1
 6462 00bc 04D8     	 bhi .L407
 6463              	 .loc 1 3776 0 is_stmt 0 discriminator 1
 6464 00be FB68     	 ldr r3,[r7,#12]
 6465 00c0 0222     	 movs r2,#2
 6466 00c2 5A75     	 strb r2,[r3,#21]
 6467 00c4 0223     	 movs r3,#2
 6468 00c6 D1E0     	 b .L420
 6469              	.L407:
3777:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6470              	 .loc 1 3777 0 is_stmt 1
 6471 00c8 3B6B     	 ldr r3,[r7,#48]
 6472 00ca B3F1FF3F 	 cmp r3,#-1
 6473 00ce 04D1     	 bne .L408
 6474              	 .loc 1 3777 0 is_stmt 0 discriminator 1
 6475 00d0 FB68     	 ldr r3,[r7,#12]
 6476 00d2 0122     	 movs r2,#1
 6477 00d4 5A75     	 strb r2,[r3,#21]
 6478 00d6 0123     	 movs r3,#1
 6479 00d8 C8E0     	 b .L420
 6480              	.L408:
3778:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6481              	 .loc 1 3778 0 is_stmt 1
 6482 00da FB68     	 ldr r3,[r7,#12]
 6483 00dc 3A6B     	 ldr r2,[r7,#48]
 6484 00de DA61     	 str r2,[r3,#28]
 6485              	.L404:
3779:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3780:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 6486              	 .loc 1 3780 0
 6487 00e0 7A69     	 ldr r2,[r7,#20]
 6488 00e2 FB68     	 ldr r3,[r7,#12]
 6489 00e4 DB69     	 ldr r3,[r3,#28]
 6490 00e6 1046     	 mov r0,r2
 6491 00e8 1946     	 mov r1,r3
 6492 00ea FFF7FEFF 	 bl clst2sect
 6493 00ee B861     	 str r0,[r7,#24]
3781:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 6494              	 .loc 1 3781 0
 6495 00f0 BB69     	 ldr r3,[r7,#24]
 6496 00f2 002B     	 cmp r3,#0
 6497 00f4 04D1     	 bne .L409
 6498              	 .loc 1 3781 0 is_stmt 0 discriminator 1
 6499 00f6 FB68     	 ldr r3,[r7,#12]
 6500 00f8 0222     	 movs r2,#2
 6501 00fa 5A75     	 strb r2,[r3,#21]
 6502 00fc 0223     	 movs r3,#2
 6503 00fe B5E0     	 b .L420
 6504              	.L409:
3782:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += csect;
 6505              	 .loc 1 3782 0 is_stmt 1
 6506 0100 BA69     	 ldr r2,[r7,#24]
 6507 0102 FB69     	 ldr r3,[r7,#28]
 6508 0104 1344     	 add r3,r3,r2
 6509 0106 BB61     	 str r3,[r7,#24]
3783:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 6510              	 .loc 1 3783 0
 6511 0108 7B68     	 ldr r3,[r7,#4]
 6512 010a 5B0A     	 lsrs r3,r3,#9
 6513 010c BB62     	 str r3,[r7,#40]
3784:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 6514              	 .loc 1 3784 0
 6515 010e BB6A     	 ldr r3,[r7,#40]
 6516 0110 002B     	 cmp r3,#0
 6517 0112 3CD0     	 beq .L410
3785:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 6518              	 .loc 1 3785 0
 6519 0114 FA69     	 ldr r2,[r7,#28]
 6520 0116 BB6A     	 ldr r3,[r7,#40]
 6521 0118 1344     	 add r3,r3,r2
 6522 011a 7A69     	 ldr r2,[r7,#20]
 6523 011c 5289     	 ldrh r2,[r2,#10]
 6524 011e 9342     	 cmp r3,r2
 6525 0120 05D9     	 bls .L411
3786:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cc = fs->csize - csect;
 6526              	 .loc 1 3786 0
 6527 0122 7B69     	 ldr r3,[r7,#20]
 6528 0124 5B89     	 ldrh r3,[r3,#10]
 6529 0126 1A46     	 mov r2,r3
 6530 0128 FB69     	 ldr r3,[r7,#28]
 6531 012a D31A     	 subs r3,r2,r3
 6532 012c BB62     	 str r3,[r7,#40]
 6533              	.L411:
3787:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3788:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6534              	 .loc 1 3788 0
 6535 012e 7B69     	 ldr r3,[r7,#20]
 6536 0130 5B78     	 ldrb r3,[r3,#1]
 6537 0132 1846     	 mov r0,r3
 6538 0134 796A     	 ldr r1,[r7,#36]
 6539 0136 BA69     	 ldr r2,[r7,#24]
 6540 0138 BB6A     	 ldr r3,[r7,#40]
 6541 013a FFF7FEFF 	 bl disk_read
 6542 013e 0346     	 mov r3,r0
 6543 0140 002B     	 cmp r3,#0
 6544 0142 04D0     	 beq .L412
 6545              	 .loc 1 3788 0 is_stmt 0 discriminator 1
 6546 0144 FB68     	 ldr r3,[r7,#12]
 6547 0146 0122     	 movs r2,#1
 6548 0148 5A75     	 strb r2,[r3,#21]
 6549 014a 0123     	 movs r3,#1
 6550 014c 8EE0     	 b .L420
 6551              	.L412:
3789:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
3790:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3791:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3792:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3793:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3794:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3795:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 6552              	 .loc 1 3795 0 is_stmt 1
 6553 014e FB68     	 ldr r3,[r7,#12]
 6554 0150 1B7D     	 ldrb r3,[r3,#20]
 6555 0152 DBB2     	 uxtb r3,r3
 6556 0154 5BB2     	 sxtb r3,r3
 6557 0156 002B     	 cmp r3,#0
 6558 0158 15DA     	 bge .L413
 6559              	 .loc 1 3795 0 is_stmt 0 discriminator 1
 6560 015a FB68     	 ldr r3,[r7,#12]
 6561 015c 1A6A     	 ldr r2,[r3,#32]
 6562 015e BB69     	 ldr r3,[r7,#24]
 6563 0160 D21A     	 subs r2,r2,r3
 6564 0162 BB6A     	 ldr r3,[r7,#40]
 6565 0164 9A42     	 cmp r2,r3
 6566 0166 0ED2     	 bcs .L413
3796:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 6567              	 .loc 1 3796 0 is_stmt 1
 6568 0168 FB68     	 ldr r3,[r7,#12]
 6569 016a 1A6A     	 ldr r2,[r3,#32]
 6570 016c BB69     	 ldr r3,[r7,#24]
 6571 016e D31A     	 subs r3,r2,r3
 6572 0170 5B02     	 lsls r3,r3,#9
 6573 0172 7A6A     	 ldr r2,[r7,#36]
 6574 0174 1A44     	 add r2,r2,r3
 6575 0176 FB68     	 ldr r3,[r7,#12]
 6576 0178 2C33     	 adds r3,r3,#44
 6577 017a 1046     	 mov r0,r2
 6578 017c 1946     	 mov r1,r3
 6579 017e 4FF40072 	 mov r2,#512
 6580 0182 FFF7FEFF 	 bl mem_cpy
 6581              	.L413:
3797:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3798:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3799:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3800:../Dave/Generated/FATFS/ff_Src/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 6582              	 .loc 1 3800 0
 6583 0186 BB6A     	 ldr r3,[r7,#40]
 6584 0188 5B02     	 lsls r3,r3,#9
 6585 018a FB62     	 str r3,[r7,#44]
3801:../Dave/Generated/FATFS/ff_Src/ff.c **** 				continue;
 6586              	 .loc 1 3801 0
 6587 018c 55E0     	 b .L414
 6588              	.L410:
3802:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3803:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3804:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
 6589              	 .loc 1 3804 0
 6590 018e FB68     	 ldr r3,[r7,#12]
 6591 0190 1A6A     	 ldr r2,[r3,#32]
 6592 0192 BB69     	 ldr r3,[r7,#24]
 6593 0194 9A42     	 cmp r2,r3
 6594 0196 33D0     	 beq .L415
3805:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3806:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 6595              	 .loc 1 3806 0
 6596 0198 FB68     	 ldr r3,[r7,#12]
 6597 019a 1B7D     	 ldrb r3,[r3,#20]
 6598 019c DBB2     	 uxtb r3,r3
 6599 019e 5BB2     	 sxtb r3,r3
 6600 01a0 002B     	 cmp r3,#0
 6601 01a2 1BDA     	 bge .L416
3807:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6602              	 .loc 1 3807 0
 6603 01a4 7B69     	 ldr r3,[r7,#20]
 6604 01a6 5978     	 ldrb r1,[r3,#1]
 6605 01a8 FB68     	 ldr r3,[r7,#12]
 6606 01aa 03F12C02 	 add r2,r3,#44
 6607 01ae FB68     	 ldr r3,[r7,#12]
 6608 01b0 1B6A     	 ldr r3,[r3,#32]
 6609 01b2 0846     	 mov r0,r1
 6610 01b4 1146     	 mov r1,r2
 6611 01b6 1A46     	 mov r2,r3
 6612 01b8 0123     	 movs r3,#1
 6613 01ba FFF7FEFF 	 bl disk_write
 6614 01be 0346     	 mov r3,r0
 6615 01c0 002B     	 cmp r3,#0
 6616 01c2 04D0     	 beq .L417
 6617              	 .loc 1 3807 0 is_stmt 0 discriminator 1
 6618 01c4 FB68     	 ldr r3,[r7,#12]
 6619 01c6 0122     	 movs r2,#1
 6620 01c8 5A75     	 strb r2,[r3,#21]
 6621 01ca 0123     	 movs r3,#1
 6622 01cc 4EE0     	 b .L420
 6623              	.L417:
3808:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 6624              	 .loc 1 3808 0 is_stmt 1
 6625 01ce FB68     	 ldr r3,[r7,#12]
 6626 01d0 1B7D     	 ldrb r3,[r3,#20]
 6627 01d2 03F07F03 	 and r3,r3,#127
 6628 01d6 DAB2     	 uxtb r2,r3
 6629 01d8 FB68     	 ldr r3,[r7,#12]
 6630 01da 1A75     	 strb r2,[r3,#20]
 6631              	.L416:
3809:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3810:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3811:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 6632              	 .loc 1 3811 0
 6633 01dc 7B69     	 ldr r3,[r7,#20]
 6634 01de 5A78     	 ldrb r2,[r3,#1]
 6635 01e0 FB68     	 ldr r3,[r7,#12]
 6636 01e2 2C33     	 adds r3,r3,#44
 6637 01e4 1046     	 mov r0,r2
 6638 01e6 1946     	 mov r1,r3
 6639 01e8 BA69     	 ldr r2,[r7,#24]
 6640 01ea 0123     	 movs r3,#1
 6641 01ec FFF7FEFF 	 bl disk_read
 6642 01f0 0346     	 mov r3,r0
 6643 01f2 002B     	 cmp r3,#0
 6644 01f4 04D0     	 beq .L415
 6645              	 .loc 1 3811 0 is_stmt 0 discriminator 1
 6646 01f6 FB68     	 ldr r3,[r7,#12]
 6647 01f8 0122     	 movs r2,#1
 6648 01fa 5A75     	 strb r2,[r3,#21]
 6649 01fc 0123     	 movs r3,#1
 6650 01fe 35E0     	 b .L420
 6651              	.L415:
3812:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3813:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3814:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = sect;
 6652              	 .loc 1 3814 0 is_stmt 1
 6653 0200 FB68     	 ldr r3,[r7,#12]
 6654 0202 BA69     	 ldr r2,[r7,#24]
 6655 0204 1A62     	 str r2,[r3,#32]
 6656              	.L403:
3815:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3816:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 6657              	 .loc 1 3816 0
 6658 0206 FB68     	 ldr r3,[r7,#12]
 6659 0208 9B69     	 ldr r3,[r3,#24]
 6660 020a C3F30803 	 ubfx r3,r3,#0,#9
 6661 020e C3F50073 	 rsb r3,r3,#512
 6662 0212 FB62     	 str r3,[r7,#44]
3817:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 6663              	 .loc 1 3817 0
 6664 0214 FA6A     	 ldr r2,[r7,#44]
 6665 0216 7B68     	 ldr r3,[r7,#4]
 6666 0218 9A42     	 cmp r2,r3
 6667 021a 01D9     	 bls .L418
 6668              	 .loc 1 3817 0 is_stmt 0 discriminator 1
 6669 021c 7B68     	 ldr r3,[r7,#4]
 6670 021e FB62     	 str r3,[r7,#44]
 6671              	.L418:
3818:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3819:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3820:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3821:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3822:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 6672              	 .loc 1 3822 0 is_stmt 1
 6673 0220 FB68     	 ldr r3,[r7,#12]
 6674 0222 9B69     	 ldr r3,[r3,#24]
 6675 0224 C3F30803 	 ubfx r3,r3,#0,#9
 6676 0228 2833     	 adds r3,r3,#40
 6677 022a FA68     	 ldr r2,[r7,#12]
 6678 022c 1344     	 add r3,r3,r2
 6679 022e 0433     	 adds r3,r3,#4
 6680 0230 786A     	 ldr r0,[r7,#36]
 6681 0232 1946     	 mov r1,r3
 6682 0234 FA6A     	 ldr r2,[r7,#44]
 6683 0236 FFF7FEFF 	 bl mem_cpy
 6684              	.L414:
3760:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 6685              	 .loc 1 3760 0
 6686 023a 7A68     	 ldr r2,[r7,#4]
 6687 023c FB6A     	 ldr r3,[r7,#44]
 6688 023e D31A     	 subs r3,r2,r3
 6689 0240 7B60     	 str r3,[r7,#4]
 6690 0242 3B68     	 ldr r3,[r7]
 6691 0244 1A68     	 ldr r2,[r3]
 6692 0246 FB6A     	 ldr r3,[r7,#44]
 6693 0248 1A44     	 add r2,r2,r3
 6694 024a 3B68     	 ldr r3,[r7]
 6695 024c 1A60     	 str r2,[r3]
 6696 024e 7A6A     	 ldr r2,[r7,#36]
 6697 0250 FB6A     	 ldr r3,[r7,#44]
 6698 0252 1344     	 add r3,r3,r2
 6699 0254 7B62     	 str r3,[r7,#36]
 6700 0256 FB68     	 ldr r3,[r7,#12]
 6701 0258 9A69     	 ldr r2,[r3,#24]
 6702 025a FB6A     	 ldr r3,[r7,#44]
 6703 025c 1A44     	 add r2,r2,r3
 6704 025e FB68     	 ldr r3,[r7,#12]
 6705 0260 9A61     	 str r2,[r3,#24]
 6706              	.L402:
3759:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 6707              	 .loc 1 3759 0
 6708 0262 7B68     	 ldr r3,[r7,#4]
 6709 0264 002B     	 cmp r3,#0
 6710 0266 7FF405AF 	 bne .L419
3823:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3824:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3825:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3826:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 6711              	 .loc 1 3826 0
 6712 026a 0023     	 movs r3,#0
 6713              	.L420:
3827:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6714              	 .loc 1 3827 0 discriminator 1
 6715 026c 1846     	 mov r0,r3
 6716 026e 3837     	 adds r7,r7,#56
 6717              	.LCFI230:
 6718              	 .cfi_def_cfa_offset 8
 6719 0270 BD46     	 mov sp,r7
 6720              	.LCFI231:
 6721              	 .cfi_def_cfa_register 13
 6722              	 
 6723 0272 80BD     	 pop {r7,pc}
 6724              	 .cfi_endproc
 6725              	.LFE42:
 6727              	 .section .text.f_write,"ax",%progbits
 6728              	 .align 2
 6729              	 .global f_write
 6730              	 .thumb
 6731              	 .thumb_func
 6733              	f_write:
 6734              	.LFB43:
3828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3829:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3830:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3831:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3832:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3833:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3834:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Write File                                                            */
3835:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3836:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3837:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_write (
3838:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
3839:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3840:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btw,			/* Number of bytes to write */
3841:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3842:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3843:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6735              	 .loc 1 3843 0
 6736              	 .cfi_startproc
 6737              	 
 6738              	 
 6739 0000 80B5     	 push {r7,lr}
 6740              	.LCFI232:
 6741              	 .cfi_def_cfa_offset 8
 6742              	 .cfi_offset 7,-8
 6743              	 .cfi_offset 14,-4
 6744 0002 8CB0     	 sub sp,sp,#48
 6745              	.LCFI233:
 6746              	 .cfi_def_cfa_offset 56
 6747 0004 00AF     	 add r7,sp,#0
 6748              	.LCFI234:
 6749              	 .cfi_def_cfa_register 7
 6750 0006 F860     	 str r0,[r7,#12]
 6751 0008 B960     	 str r1,[r7,#8]
 6752 000a 7A60     	 str r2,[r7,#4]
 6753 000c 3B60     	 str r3,[r7]
3844:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3845:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3846:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, sect;
3847:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wcnt, cc, csect;
3848:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 6754              	 .loc 1 3848 0
 6755 000e BB68     	 ldr r3,[r7,#8]
 6756 0010 FB61     	 str r3,[r7,#28]
3849:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3850:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3851:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 6757              	 .loc 1 3851 0
 6758 0012 3B68     	 ldr r3,[r7]
 6759 0014 0022     	 movs r2,#0
 6760 0016 1A60     	 str r2,[r3]
3852:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 6761              	 .loc 1 3852 0
 6762 0018 FA68     	 ldr r2,[r7,#12]
 6763 001a 07F11003 	 add r3,r7,#16
 6764 001e 1046     	 mov r0,r2
 6765 0020 1946     	 mov r1,r3
 6766 0022 FFF7FEFF 	 bl validate
 6767 0026 0346     	 mov r3,r0
 6768 0028 87F82F30 	 strb r3,[r7,#47]
3853:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6769              	 .loc 1 3853 0
 6770 002c 97F82F30 	 ldrb r3,[r7,#47]
 6771 0030 002B     	 cmp r3,#0
 6772 0032 07D1     	 bne .L422
 6773              	 .loc 1 3853 0 is_stmt 0 discriminator 2
 6774 0034 FB68     	 ldr r3,[r7,#12]
 6775 0036 5B7D     	 ldrb r3,[r3,#21]
 6776 0038 87F82F30 	 strb r3,[r7,#47]
 6777 003c 97F82F30 	 ldrb r3,[r7,#47]
 6778 0040 002B     	 cmp r3,#0
 6779 0042 02D0     	 beq .L423
 6780              	.L422:
 6781              	 .loc 1 3853 0 discriminator 3
 6782 0044 97F82F30 	 ldrb r3,[r7,#47]
 6783 0048 43E1     	 b .L448
 6784              	.L423:
3854:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6785              	 .loc 1 3854 0 is_stmt 1
 6786 004a FB68     	 ldr r3,[r7,#12]
 6787 004c 1B7D     	 ldrb r3,[r3,#20]
 6788 004e 03F00203 	 and r3,r3,#2
 6789 0052 002B     	 cmp r3,#0
 6790 0054 01D1     	 bne .L425
 6791              	 .loc 1 3854 0 is_stmt 0 discriminator 1
 6792 0056 0723     	 movs r3,#7
 6793 0058 3BE1     	 b .L448
 6794              	.L425:
3855:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3856:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
3857:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 6795              	 .loc 1 3857 0 is_stmt 1
 6796 005a FB68     	 ldr r3,[r7,#12]
 6797 005c 9A69     	 ldr r2,[r3,#24]
 6798 005e 7B68     	 ldr r3,[r7,#4]
 6799 0060 1A44     	 add r2,r2,r3
 6800 0062 FB68     	 ldr r3,[r7,#12]
 6801 0064 9B69     	 ldr r3,[r3,#24]
 6802 0066 9A42     	 cmp r2,r3
 6803 0068 03D2     	 bcs .L426
3858:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 6804              	 .loc 1 3858 0
 6805 006a FB68     	 ldr r3,[r7,#12]
 6806 006c 9B69     	 ldr r3,[r3,#24]
 6807 006e DB43     	 mvns r3,r3
 6808 0070 7B60     	 str r3,[r7,#4]
 6809              	.L426:
3859:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3860:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3861:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 6810              	 .loc 1 3861 0
 6811 0072 22E1     	 b .L427
 6812              	.L447:
3862:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
3863:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 6813              	 .loc 1 3863 0
 6814 0074 FB68     	 ldr r3,[r7,#12]
 6815 0076 9B69     	 ldr r3,[r3,#24]
 6816 0078 C3F30803 	 ubfx r3,r3,#0,#9
 6817 007c 002B     	 cmp r3,#0
 6818 007e 40F0DE80 	 bne .L428
3864:../Dave/Generated/FATFS/ff_Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 6819              	 .loc 1 3864 0
 6820 0082 FB68     	 ldr r3,[r7,#12]
 6821 0084 9B69     	 ldr r3,[r3,#24]
 6822 0086 5B0A     	 lsrs r3,r3,#9
 6823 0088 3A69     	 ldr r2,[r7,#16]
 6824 008a 5289     	 ldrh r2,[r2,#10]
 6825 008c 013A     	 subs r2,r2,#1
 6826 008e 1340     	 ands r3,r3,r2
 6827 0090 BB61     	 str r3,[r7,#24]
3865:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 6828              	 .loc 1 3865 0
 6829 0092 BB69     	 ldr r3,[r7,#24]
 6830 0094 002B     	 cmp r3,#0
 6831 0096 37D1     	 bne .L429
3866:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6832              	 .loc 1 3866 0
 6833 0098 FB68     	 ldr r3,[r7,#12]
 6834 009a 9B69     	 ldr r3,[r3,#24]
 6835 009c 002B     	 cmp r3,#0
 6836 009e 0CD1     	 bne .L430
3867:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 6837              	 .loc 1 3867 0
 6838 00a0 FB68     	 ldr r3,[r7,#12]
 6839 00a2 9B68     	 ldr r3,[r3,#8]
 6840 00a4 BB62     	 str r3,[r7,#40]
3868:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 6841              	 .loc 1 3868 0
 6842 00a6 BB6A     	 ldr r3,[r7,#40]
 6843 00a8 002B     	 cmp r3,#0
 6844 00aa 0ED1     	 bne .L432
3869:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 6845              	 .loc 1 3869 0
 6846 00ac FB68     	 ldr r3,[r7,#12]
 6847 00ae 1846     	 mov r0,r3
 6848 00b0 0021     	 movs r1,#0
 6849 00b2 FFF7FEFF 	 bl create_chain
 6850 00b6 B862     	 str r0,[r7,#40]
 6851 00b8 07E0     	 b .L432
 6852              	.L430:
3870:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3871:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* On the middle or end of the file */
3872:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3873:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->cltbl) {
3874:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3875:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
3876:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3877:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
3878:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 6853              	 .loc 1 3878 0
 6854 00ba FA68     	 ldr r2,[r7,#12]
 6855 00bc FB68     	 ldr r3,[r7,#12]
 6856 00be DB69     	 ldr r3,[r3,#28]
 6857 00c0 1046     	 mov r0,r2
 6858 00c2 1946     	 mov r1,r3
 6859 00c4 FFF7FEFF 	 bl create_chain
 6860 00c8 B862     	 str r0,[r7,#40]
 6861              	.L432:
3879:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3880:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3881:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 6862              	 .loc 1 3881 0
 6863 00ca BB6A     	 ldr r3,[r7,#40]
 6864 00cc 002B     	 cmp r3,#0
 6865 00ce 00D1     	 bne .L433
 6866 00d0 F7E0     	 b .L434
 6867              	.L433:
3882:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 6868              	 .loc 1 3882 0
 6869 00d2 BB6A     	 ldr r3,[r7,#40]
 6870 00d4 012B     	 cmp r3,#1
 6871 00d6 04D1     	 bne .L435
 6872              	 .loc 1 3882 0 is_stmt 0 discriminator 1
 6873 00d8 FB68     	 ldr r3,[r7,#12]
 6874 00da 0222     	 movs r2,#2
 6875 00dc 5A75     	 strb r2,[r3,#21]
 6876 00de 0223     	 movs r3,#2
 6877 00e0 F7E0     	 b .L448
 6878              	.L435:
3883:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6879              	 .loc 1 3883 0 is_stmt 1
 6880 00e2 BB6A     	 ldr r3,[r7,#40]
 6881 00e4 B3F1FF3F 	 cmp r3,#-1
 6882 00e8 04D1     	 bne .L436
 6883              	 .loc 1 3883 0 is_stmt 0 discriminator 1
 6884 00ea FB68     	 ldr r3,[r7,#12]
 6885 00ec 0122     	 movs r2,#1
 6886 00ee 5A75     	 strb r2,[r3,#21]
 6887 00f0 0123     	 movs r3,#1
 6888 00f2 EEE0     	 b .L448
 6889              	.L436:
3884:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6890              	 .loc 1 3884 0 is_stmt 1
 6891 00f4 FB68     	 ldr r3,[r7,#12]
 6892 00f6 BA6A     	 ldr r2,[r7,#40]
 6893 00f8 DA61     	 str r2,[r3,#28]
3885:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 6894              	 .loc 1 3885 0
 6895 00fa FB68     	 ldr r3,[r7,#12]
 6896 00fc 9B68     	 ldr r3,[r3,#8]
 6897 00fe 002B     	 cmp r3,#0
 6898 0100 02D1     	 bne .L429
 6899              	 .loc 1 3885 0 is_stmt 0 discriminator 1
 6900 0102 FB68     	 ldr r3,[r7,#12]
 6901 0104 BA6A     	 ldr r2,[r7,#40]
 6902 0106 9A60     	 str r2,[r3,#8]
 6903              	.L429:
3886:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3887:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3888:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3889:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3890:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 6904              	 .loc 1 3890 0 is_stmt 1
 6905 0108 FB68     	 ldr r3,[r7,#12]
 6906 010a 1B7D     	 ldrb r3,[r3,#20]
 6907 010c DBB2     	 uxtb r3,r3
 6908 010e 5BB2     	 sxtb r3,r3
 6909 0110 002B     	 cmp r3,#0
 6910 0112 1BDA     	 bge .L437
3891:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6911              	 .loc 1 3891 0
 6912 0114 3B69     	 ldr r3,[r7,#16]
 6913 0116 5978     	 ldrb r1,[r3,#1]
 6914 0118 FB68     	 ldr r3,[r7,#12]
 6915 011a 03F12C02 	 add r2,r3,#44
 6916 011e FB68     	 ldr r3,[r7,#12]
 6917 0120 1B6A     	 ldr r3,[r3,#32]
 6918 0122 0846     	 mov r0,r1
 6919 0124 1146     	 mov r1,r2
 6920 0126 1A46     	 mov r2,r3
 6921 0128 0123     	 movs r3,#1
 6922 012a FFF7FEFF 	 bl disk_write
 6923 012e 0346     	 mov r3,r0
 6924 0130 002B     	 cmp r3,#0
 6925 0132 04D0     	 beq .L438
 6926              	 .loc 1 3891 0 is_stmt 0 discriminator 1
 6927 0134 FB68     	 ldr r3,[r7,#12]
 6928 0136 0122     	 movs r2,#1
 6929 0138 5A75     	 strb r2,[r3,#21]
 6930 013a 0123     	 movs r3,#1
 6931 013c C9E0     	 b .L448
 6932              	.L438:
3892:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 6933              	 .loc 1 3892 0 is_stmt 1
 6934 013e FB68     	 ldr r3,[r7,#12]
 6935 0140 1B7D     	 ldrb r3,[r3,#20]
 6936 0142 03F07F03 	 and r3,r3,#127
 6937 0146 DAB2     	 uxtb r2,r3
 6938 0148 FB68     	 ldr r3,[r7,#12]
 6939 014a 1A75     	 strb r2,[r3,#20]
 6940              	.L437:
3893:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3894:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3895:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 6941              	 .loc 1 3895 0
 6942 014c 3A69     	 ldr r2,[r7,#16]
 6943 014e FB68     	 ldr r3,[r7,#12]
 6944 0150 DB69     	 ldr r3,[r3,#28]
 6945 0152 1046     	 mov r0,r2
 6946 0154 1946     	 mov r1,r3
 6947 0156 FFF7FEFF 	 bl clst2sect
 6948 015a 7861     	 str r0,[r7,#20]
3896:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 6949              	 .loc 1 3896 0
 6950 015c 7B69     	 ldr r3,[r7,#20]
 6951 015e 002B     	 cmp r3,#0
 6952 0160 04D1     	 bne .L439
 6953              	 .loc 1 3896 0 is_stmt 0 discriminator 1
 6954 0162 FB68     	 ldr r3,[r7,#12]
 6955 0164 0222     	 movs r2,#2
 6956 0166 5A75     	 strb r2,[r3,#21]
 6957 0168 0223     	 movs r3,#2
 6958 016a B2E0     	 b .L448
 6959              	.L439:
3897:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += csect;
 6960              	 .loc 1 3897 0 is_stmt 1
 6961 016c 7A69     	 ldr r2,[r7,#20]
 6962 016e BB69     	 ldr r3,[r7,#24]
 6963 0170 1344     	 add r3,r3,r2
 6964 0172 7B61     	 str r3,[r7,#20]
3898:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 6965              	 .loc 1 3898 0
 6966 0174 7B68     	 ldr r3,[r7,#4]
 6967 0176 5B0A     	 lsrs r3,r3,#9
 6968 0178 3B62     	 str r3,[r7,#32]
3899:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 6969              	 .loc 1 3899 0
 6970 017a 3B6A     	 ldr r3,[r7,#32]
 6971 017c 002B     	 cmp r3,#0
 6972 017e 3ED0     	 beq .L440
3900:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 6973              	 .loc 1 3900 0
 6974 0180 BA69     	 ldr r2,[r7,#24]
 6975 0182 3B6A     	 ldr r3,[r7,#32]
 6976 0184 1344     	 add r3,r3,r2
 6977 0186 3A69     	 ldr r2,[r7,#16]
 6978 0188 5289     	 ldrh r2,[r2,#10]
 6979 018a 9342     	 cmp r3,r2
 6980 018c 05D9     	 bls .L441
3901:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cc = fs->csize - csect;
 6981              	 .loc 1 3901 0
 6982 018e 3B69     	 ldr r3,[r7,#16]
 6983 0190 5B89     	 ldrh r3,[r3,#10]
 6984 0192 1A46     	 mov r2,r3
 6985 0194 BB69     	 ldr r3,[r7,#24]
 6986 0196 D31A     	 subs r3,r2,r3
 6987 0198 3B62     	 str r3,[r7,#32]
 6988              	.L441:
3902:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3903:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6989              	 .loc 1 3903 0
 6990 019a 3B69     	 ldr r3,[r7,#16]
 6991 019c 5B78     	 ldrb r3,[r3,#1]
 6992 019e 1846     	 mov r0,r3
 6993 01a0 F969     	 ldr r1,[r7,#28]
 6994 01a2 7A69     	 ldr r2,[r7,#20]
 6995 01a4 3B6A     	 ldr r3,[r7,#32]
 6996 01a6 FFF7FEFF 	 bl disk_write
 6997 01aa 0346     	 mov r3,r0
 6998 01ac 002B     	 cmp r3,#0
 6999 01ae 04D0     	 beq .L442
 7000              	 .loc 1 3903 0 is_stmt 0 discriminator 1
 7001 01b0 FB68     	 ldr r3,[r7,#12]
 7002 01b2 0122     	 movs r2,#1
 7003 01b4 5A75     	 strb r2,[r3,#21]
 7004 01b6 0123     	 movs r3,#1
 7005 01b8 8BE0     	 b .L448
 7006              	.L442:
3904:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 2
3905:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3906:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3907:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3908:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 0;
3909:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3910:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3911:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
 7007              	 .loc 1 3911 0 is_stmt 1
 7008 01ba FB68     	 ldr r3,[r7,#12]
 7009 01bc 1A6A     	 ldr r2,[r3,#32]
 7010 01be 7B69     	 ldr r3,[r7,#20]
 7011 01c0 D21A     	 subs r2,r2,r3
 7012 01c2 3B6A     	 ldr r3,[r7,#32]
 7013 01c4 9A42     	 cmp r2,r3
 7014 01c6 16D2     	 bcs .L443
3912:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 7015              	 .loc 1 3912 0
 7016 01c8 FB68     	 ldr r3,[r7,#12]
 7017 01ca 03F12C01 	 add r1,r3,#44
 7018 01ce FB68     	 ldr r3,[r7,#12]
 7019 01d0 1A6A     	 ldr r2,[r3,#32]
 7020 01d2 7B69     	 ldr r3,[r7,#20]
 7021 01d4 D31A     	 subs r3,r2,r3
 7022 01d6 5B02     	 lsls r3,r3,#9
 7023 01d8 FA69     	 ldr r2,[r7,#28]
 7024 01da 1344     	 add r3,r3,r2
 7025 01dc 0846     	 mov r0,r1
 7026 01de 1946     	 mov r1,r3
 7027 01e0 4FF40072 	 mov r2,#512
 7028 01e4 FFF7FEFF 	 bl mem_cpy
3913:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7029              	 .loc 1 3913 0
 7030 01e8 FB68     	 ldr r3,[r7,#12]
 7031 01ea 1B7D     	 ldrb r3,[r3,#20]
 7032 01ec 03F07F03 	 and r3,r3,#127
 7033 01f0 DAB2     	 uxtb r2,r3
 7034 01f2 FB68     	 ldr r3,[r7,#12]
 7035 01f4 1A75     	 strb r2,[r3,#20]
 7036              	.L443:
3914:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3915:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3916:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3917:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 7037              	 .loc 1 3917 0
 7038 01f6 3B6A     	 ldr r3,[r7,#32]
 7039 01f8 5B02     	 lsls r3,r3,#9
 7040 01fa 7B62     	 str r3,[r7,#36]
3918:../Dave/Generated/FATFS/ff_Src/ff.c **** 				continue;
 7041              	 .loc 1 3918 0
 7042 01fc 40E0     	 b .L444
 7043              	.L440:
3919:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3920:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3921:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
3922:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
3923:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->winsect = sect;
3924:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3925:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3926:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
 7044              	 .loc 1 3926 0
 7045 01fe FB68     	 ldr r3,[r7,#12]
 7046 0200 1A6A     	 ldr r2,[r3,#32]
 7047 0202 7B69     	 ldr r3,[r7,#20]
 7048 0204 9A42     	 cmp r2,r3
 7049 0206 17D0     	 beq .L445
3927:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7050              	 .loc 1 3927 0 discriminator 1
 7051 0208 FB68     	 ldr r3,[r7,#12]
 7052 020a 9A69     	 ldr r2,[r3,#24]
 7053 020c FB68     	 ldr r3,[r7,#12]
 7054 020e DB68     	 ldr r3,[r3,#12]
3926:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7055              	 .loc 1 3926 0 discriminator 1
 7056 0210 9A42     	 cmp r2,r3
 7057 0212 11D2     	 bcs .L445
3928:../Dave/Generated/FATFS/ff_Src/ff.c **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 7058              	 .loc 1 3928 0
 7059 0214 3B69     	 ldr r3,[r7,#16]
 7060 0216 5A78     	 ldrb r2,[r3,#1]
 7061 0218 FB68     	 ldr r3,[r7,#12]
 7062 021a 2C33     	 adds r3,r3,#44
 7063 021c 1046     	 mov r0,r2
 7064 021e 1946     	 mov r1,r3
 7065 0220 7A69     	 ldr r2,[r7,#20]
 7066 0222 0123     	 movs r3,#1
 7067 0224 FFF7FEFF 	 bl disk_read
 7068 0228 0346     	 mov r3,r0
3927:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7069              	 .loc 1 3927 0
 7070 022a 002B     	 cmp r3,#0
 7071 022c 04D0     	 beq .L445
3929:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 7072              	 .loc 1 3929 0
 7073 022e FB68     	 ldr r3,[r7,#12]
 7074 0230 0122     	 movs r2,#1
 7075 0232 5A75     	 strb r2,[r3,#21]
 7076 0234 0123     	 movs r3,#1
 7077 0236 4CE0     	 b .L448
 7078              	.L445:
3930:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3931:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3932:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = sect;
 7079              	 .loc 1 3932 0
 7080 0238 FB68     	 ldr r3,[r7,#12]
 7081 023a 7A69     	 ldr r2,[r7,#20]
 7082 023c 1A62     	 str r2,[r3,#32]
 7083              	.L428:
3933:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3934:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 7084              	 .loc 1 3934 0
 7085 023e FB68     	 ldr r3,[r7,#12]
 7086 0240 9B69     	 ldr r3,[r3,#24]
 7087 0242 C3F30803 	 ubfx r3,r3,#0,#9
 7088 0246 C3F50073 	 rsb r3,r3,#512
 7089 024a 7B62     	 str r3,[r7,#36]
3935:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 7090              	 .loc 1 3935 0
 7091 024c 7A6A     	 ldr r2,[r7,#36]
 7092 024e 7B68     	 ldr r3,[r7,#4]
 7093 0250 9A42     	 cmp r2,r3
 7094 0252 01D9     	 bls .L446
 7095              	 .loc 1 3935 0 is_stmt 0 discriminator 1
 7096 0254 7B68     	 ldr r3,[r7,#4]
 7097 0256 7B62     	 str r3,[r7,#36]
 7098              	.L446:
3936:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3937:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3938:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3939:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->wflag = 1;
3940:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3941:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 7099              	 .loc 1 3941 0 is_stmt 1
 7100 0258 FB68     	 ldr r3,[r7,#12]
 7101 025a 9B69     	 ldr r3,[r3,#24]
 7102 025c C3F30803 	 ubfx r3,r3,#0,#9
 7103 0260 2833     	 adds r3,r3,#40
 7104 0262 FA68     	 ldr r2,[r7,#12]
 7105 0264 1344     	 add r3,r3,r2
 7106 0266 0433     	 adds r3,r3,#4
 7107 0268 1846     	 mov r0,r3
 7108 026a F969     	 ldr r1,[r7,#28]
 7109 026c 7A6A     	 ldr r2,[r7,#36]
 7110 026e FFF7FEFF 	 bl mem_cpy
3942:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->flag |= FA_DIRTY;
 7111              	 .loc 1 3942 0
 7112 0272 FB68     	 ldr r3,[r7,#12]
 7113 0274 1B7D     	 ldrb r3,[r3,#20]
 7114 0276 63F07F03 	 orn r3,r3,#127
 7115 027a DAB2     	 uxtb r2,r3
 7116 027c FB68     	 ldr r3,[r7,#12]
 7117 027e 1A75     	 strb r2,[r3,#20]
 7118              	.L444:
3862:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7119              	 .loc 1 3862 0
 7120 0280 7A68     	 ldr r2,[r7,#4]
 7121 0282 7B6A     	 ldr r3,[r7,#36]
 7122 0284 D31A     	 subs r3,r2,r3
 7123 0286 7B60     	 str r3,[r7,#4]
 7124 0288 3B68     	 ldr r3,[r7]
 7125 028a 1A68     	 ldr r2,[r3]
 7126 028c 7B6A     	 ldr r3,[r7,#36]
 7127 028e 1A44     	 add r2,r2,r3
 7128 0290 3B68     	 ldr r3,[r7]
 7129 0292 1A60     	 str r2,[r3]
 7130 0294 FA69     	 ldr r2,[r7,#28]
 7131 0296 7B6A     	 ldr r3,[r7,#36]
 7132 0298 1344     	 add r3,r3,r2
 7133 029a FB61     	 str r3,[r7,#28]
 7134 029c FB68     	 ldr r3,[r7,#12]
 7135 029e 9A69     	 ldr r2,[r3,#24]
 7136 02a0 7B6A     	 ldr r3,[r7,#36]
 7137 02a2 1A44     	 add r2,r2,r3
 7138 02a4 FB68     	 ldr r3,[r7,#12]
 7139 02a6 9A61     	 str r2,[r3,#24]
 7140 02a8 FB68     	 ldr r3,[r7,#12]
 7141 02aa DA68     	 ldr r2,[r3,#12]
 7142 02ac FB68     	 ldr r3,[r7,#12]
 7143 02ae 9B69     	 ldr r3,[r3,#24]
 7144 02b0 9A42     	 cmp r2,r3
 7145 02b2 38BF     	 it cc
 7146 02b4 1A46     	 movcc r2,r3
 7147 02b6 FB68     	 ldr r3,[r7,#12]
 7148 02b8 DA60     	 str r2,[r3,#12]
 7149              	.L427:
3861:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
 7150              	 .loc 1 3861 0
 7151 02ba 7B68     	 ldr r3,[r7,#4]
 7152 02bc 002B     	 cmp r3,#0
 7153 02be 7FF4D9AE 	 bne .L447
 7154              	.L434:
3943:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3944:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3945:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 7155              	 .loc 1 3946 0
 7156 02c2 FB68     	 ldr r3,[r7,#12]
 7157 02c4 1B7D     	 ldrb r3,[r3,#20]
 7158 02c6 43F04003 	 orr r3,r3,#64
 7159 02ca DAB2     	 uxtb r2,r3
 7160 02cc FB68     	 ldr r3,[r7,#12]
 7161 02ce 1A75     	 strb r2,[r3,#20]
3947:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3948:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 7162              	 .loc 1 3948 0
 7163 02d0 0023     	 movs r3,#0
 7164              	.L448:
3949:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7165              	 .loc 1 3949 0 discriminator 1
 7166 02d2 1846     	 mov r0,r3
 7167 02d4 3037     	 adds r7,r7,#48
 7168              	.LCFI235:
 7169              	 .cfi_def_cfa_offset 8
 7170 02d6 BD46     	 mov sp,r7
 7171              	.LCFI236:
 7172              	 .cfi_def_cfa_register 13
 7173              	 
 7174 02d8 80BD     	 pop {r7,pc}
 7175              	 .cfi_endproc
 7176              	.LFE43:
 7178 02da 00BF     	 .section .text.f_sync,"ax",%progbits
 7179              	 .align 2
 7180              	 .global f_sync
 7181              	 .thumb
 7182              	 .thumb_func
 7184              	f_sync:
 7185              	.LFB44:
3950:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3951:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3952:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3953:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3954:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3955:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Synchronize the File                                                  */
3956:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3957:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3958:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_sync (
3959:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
3960:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3961:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7186              	 .loc 1 3961 0
 7187              	 .cfi_startproc
 7188              	 
 7189              	 
 7190 0000 80B5     	 push {r7,lr}
 7191              	.LCFI237:
 7192              	 .cfi_def_cfa_offset 8
 7193              	 .cfi_offset 7,-8
 7194              	 .cfi_offset 14,-4
 7195 0002 86B0     	 sub sp,sp,#24
 7196              	.LCFI238:
 7197              	 .cfi_def_cfa_offset 32
 7198 0004 00AF     	 add r7,sp,#0
 7199              	.LCFI239:
 7200              	 .cfi_def_cfa_register 7
 7201 0006 7860     	 str r0,[r7,#4]
3962:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3963:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3964:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD tm;
3965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *dir;
3966:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3967:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3968:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 7202              	 .loc 1 3968 0
 7203 0008 7A68     	 ldr r2,[r7,#4]
 7204 000a 07F10803 	 add r3,r7,#8
 7205 000e 1046     	 mov r0,r2
 7206 0010 1946     	 mov r1,r3
 7207 0012 FFF7FEFF 	 bl validate
 7208 0016 0346     	 mov r3,r0
 7209 0018 FB75     	 strb r3,[r7,#23]
3969:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 7210              	 .loc 1 3969 0
 7211 001a FB7D     	 ldrb r3,[r7,#23]
 7212 001c 002B     	 cmp r3,#0
 7213 001e 6DD1     	 bne .L450
3970:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 7214              	 .loc 1 3970 0
 7215 0020 7B68     	 ldr r3,[r7,#4]
 7216 0022 1B7D     	 ldrb r3,[r3,#20]
 7217 0024 03F04003 	 and r3,r3,#64
 7218 0028 002B     	 cmp r3,#0
 7219 002a 67D0     	 beq .L450
3971:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3972:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 7220              	 .loc 1 3972 0
 7221 002c 7B68     	 ldr r3,[r7,#4]
 7222 002e 1B7D     	 ldrb r3,[r3,#20]
 7223 0030 DBB2     	 uxtb r3,r3
 7224 0032 5BB2     	 sxtb r3,r3
 7225 0034 002B     	 cmp r3,#0
 7226 0036 18DA     	 bge .L451
3973:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 7227              	 .loc 1 3973 0
 7228 0038 BB68     	 ldr r3,[r7,#8]
 7229 003a 5978     	 ldrb r1,[r3,#1]
 7230 003c 7B68     	 ldr r3,[r7,#4]
 7231 003e 03F12C02 	 add r2,r3,#44
 7232 0042 7B68     	 ldr r3,[r7,#4]
 7233 0044 1B6A     	 ldr r3,[r3,#32]
 7234 0046 0846     	 mov r0,r1
 7235 0048 1146     	 mov r1,r2
 7236 004a 1A46     	 mov r2,r3
 7237 004c 0123     	 movs r3,#1
 7238 004e FFF7FEFF 	 bl disk_write
 7239 0052 0346     	 mov r3,r0
 7240 0054 002B     	 cmp r3,#0
 7241 0056 01D0     	 beq .L452
 7242              	 .loc 1 3973 0 is_stmt 0 discriminator 1
 7243 0058 0123     	 movs r3,#1
 7244 005a 50E0     	 b .L454
 7245              	.L452:
3974:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7246              	 .loc 1 3974 0 is_stmt 1
 7247 005c 7B68     	 ldr r3,[r7,#4]
 7248 005e 1B7D     	 ldrb r3,[r3,#20]
 7249 0060 03F07F03 	 and r3,r3,#127
 7250 0064 DAB2     	 uxtb r2,r3
 7251 0066 7B68     	 ldr r3,[r7,#4]
 7252 0068 1A75     	 strb r2,[r3,#20]
 7253              	.L451:
3975:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3976:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3977:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Update the directory entry */
3978:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
 7254              	 .loc 1 3978 0
 7255 006a FFF7FEFF 	 bl get_fattime
 7256 006e 3861     	 str r0,[r7,#16]
3979:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3980:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3981:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
3982:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
3983:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
3984:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3985:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
3986:../Dave/Generated/FATFS/ff_Src/ff.c **** 					DIR dj;
3987:../Dave/Generated/FATFS/ff_Src/ff.c **** 					DEF_NAMBUF
3988:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3989:../Dave/Generated/FATFS/ff_Src/ff.c **** 					INIT_NAMBUF(fs);
3990:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
3991:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
3992:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has be
3993:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
3994:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3995:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3996:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3997:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3998:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3999:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
4000:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
4001:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
4002:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = sync_fs(fs);
4003:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
4004:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4005:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4006:../Dave/Generated/FATFS/ff_Src/ff.c **** 					FREE_NAMBUF();
4007:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4008:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
4009:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4010:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
4011:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, fp->dir_sect);
 7257              	 .loc 1 4011 0
 7258 0070 BA68     	 ldr r2,[r7,#8]
 7259 0072 7B68     	 ldr r3,[r7,#4]
 7260 0074 5B6A     	 ldr r3,[r3,#36]
 7261 0076 1046     	 mov r0,r2
 7262 0078 1946     	 mov r1,r3
 7263 007a FFF7FEFF 	 bl move_window
 7264 007e 0346     	 mov r3,r0
 7265 0080 FB75     	 strb r3,[r7,#23]
4012:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 7266              	 .loc 1 4012 0
 7267 0082 FB7D     	 ldrb r3,[r7,#23]
 7268 0084 002B     	 cmp r3,#0
 7269 0086 39D1     	 bne .L450
4013:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir = fp->dir_ptr;
 7270              	 .loc 1 4013 0
 7271 0088 7B68     	 ldr r3,[r7,#4]
 7272 008a 9B6A     	 ldr r3,[r3,#40]
 7273 008c FB60     	 str r3,[r7,#12]
4014:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been chan
 7274              	 .loc 1 4014 0
 7275 008e FB68     	 ldr r3,[r7,#12]
 7276 0090 0B33     	 adds r3,r3,#11
 7277 0092 FA68     	 ldr r2,[r7,#12]
 7278 0094 0B32     	 adds r2,r2,#11
 7279 0096 1278     	 ldrb r2,[r2]
 7280 0098 42F02002 	 orr r2,r2,#32
 7281 009c D2B2     	 uxtb r2,r2
 7282 009e 1A70     	 strb r2,[r3]
4015:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 7283              	 .loc 1 4015 0
 7284 00a0 7B68     	 ldr r3,[r7,#4]
 7285 00a2 1A68     	 ldr r2,[r3]
 7286 00a4 7B68     	 ldr r3,[r7,#4]
 7287 00a6 9B68     	 ldr r3,[r3,#8]
 7288 00a8 1046     	 mov r0,r2
 7289 00aa F968     	 ldr r1,[r7,#12]
 7290 00ac 1A46     	 mov r2,r3
 7291 00ae FFF7FEFF 	 bl st_clust
4016:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 7292              	 .loc 1 4016 0
 7293 00b2 FB68     	 ldr r3,[r7,#12]
 7294 00b4 03F11C02 	 add r2,r3,#28
 7295 00b8 7B68     	 ldr r3,[r7,#4]
 7296 00ba DB68     	 ldr r3,[r3,#12]
 7297 00bc 1046     	 mov r0,r2
 7298 00be 1946     	 mov r1,r3
 7299 00c0 FFF7FEFF 	 bl st_dword
4017:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 7300              	 .loc 1 4017 0
 7301 00c4 FB68     	 ldr r3,[r7,#12]
 7302 00c6 1633     	 adds r3,r3,#22
 7303 00c8 1846     	 mov r0,r3
 7304 00ca 3969     	 ldr r1,[r7,#16]
 7305 00cc FFF7FEFF 	 bl st_dword
4018:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 7306              	 .loc 1 4018 0
 7307 00d0 FB68     	 ldr r3,[r7,#12]
 7308 00d2 1233     	 adds r3,r3,#18
 7309 00d4 1846     	 mov r0,r3
 7310 00d6 0021     	 movs r1,#0
 7311 00d8 FFF7FEFF 	 bl st_word
4019:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 7312              	 .loc 1 4019 0
 7313 00dc BB68     	 ldr r3,[r7,#8]
 7314 00de 0122     	 movs r2,#1
 7315 00e0 DA70     	 strb r2,[r3,#3]
4020:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 7316              	 .loc 1 4020 0
 7317 00e2 BB68     	 ldr r3,[r7,#8]
 7318 00e4 1846     	 mov r0,r3
 7319 00e6 FFF7FEFF 	 bl sync_fs
 7320 00ea 0346     	 mov r3,r0
 7321 00ec FB75     	 strb r3,[r7,#23]
4021:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 7322              	 .loc 1 4021 0
 7323 00ee 7B68     	 ldr r3,[r7,#4]
 7324 00f0 1B7D     	 ldrb r3,[r3,#20]
 7325 00f2 23F04003 	 bic r3,r3,#64
 7326 00f6 DAB2     	 uxtb r2,r3
 7327 00f8 7B68     	 ldr r3,[r7,#4]
 7328 00fa 1A75     	 strb r2,[r3,#20]
 7329              	.L450:
4022:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4023:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4024:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4025:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4026:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 7330              	 .loc 1 4027 0
 7331 00fc FB7D     	 ldrb r3,[r7,#23]
 7332              	.L454:
4028:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7333              	 .loc 1 4028 0 discriminator 1
 7334 00fe 1846     	 mov r0,r3
 7335 0100 1837     	 adds r7,r7,#24
 7336              	.LCFI240:
 7337              	 .cfi_def_cfa_offset 8
 7338 0102 BD46     	 mov sp,r7
 7339              	.LCFI241:
 7340              	 .cfi_def_cfa_register 13
 7341              	 
 7342 0104 80BD     	 pop {r7,pc}
 7343              	 .cfi_endproc
 7344              	.LFE44:
 7346 0106 00BF     	 .section .text.f_close,"ax",%progbits
 7347              	 .align 2
 7348              	 .global f_close
 7349              	 .thumb
 7350              	 .thumb_func
 7352              	f_close:
 7353              	.LFB45:
4029:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4030:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
4031:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4032:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4033:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4034:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4035:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4036:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Close File                                                            */
4037:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4038:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4039:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_close (
4040:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
4041:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4042:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7354              	 .loc 1 4042 0
 7355              	 .cfi_startproc
 7356              	 
 7357              	 
 7358 0000 80B5     	 push {r7,lr}
 7359              	.LCFI242:
 7360              	 .cfi_def_cfa_offset 8
 7361              	 .cfi_offset 7,-8
 7362              	 .cfi_offset 14,-4
 7363 0002 84B0     	 sub sp,sp,#16
 7364              	.LCFI243:
 7365              	 .cfi_def_cfa_offset 24
 7366 0004 00AF     	 add r7,sp,#0
 7367              	.LCFI244:
 7368              	 .cfi_def_cfa_register 7
 7369 0006 7860     	 str r0,[r7,#4]
4043:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4044:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4045:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4046:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4047:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
 7370              	 .loc 1 4047 0
 7371 0008 7868     	 ldr r0,[r7,#4]
 7372 000a FFF7FEFF 	 bl f_sync
 7373 000e 0346     	 mov r3,r0
 7374 0010 FB73     	 strb r3,[r7,#15]
4048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK)
 7375              	 .loc 1 4048 0
 7376 0012 FB7B     	 ldrb r3,[r7,#15]
 7377 0014 002B     	 cmp r3,#0
 7378 0016 18D1     	 bne .L456
4049:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4050:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
4051:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
 7379              	 .loc 1 4051 0
 7380 0018 7A68     	 ldr r2,[r7,#4]
 7381 001a 07F10803 	 add r3,r7,#8
 7382 001e 1046     	 mov r0,r2
 7383 0020 1946     	 mov r1,r3
 7384 0022 FFF7FEFF 	 bl validate
 7385 0026 0346     	 mov r3,r0
 7386 0028 FB73     	 strb r3,[r7,#15]
4052:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 7387              	 .loc 1 4052 0
 7388 002a FB7B     	 ldrb r3,[r7,#15]
 7389 002c 002B     	 cmp r3,#0
 7390 002e 0CD1     	 bne .L456
4053:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4054:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
 7391              	 .loc 1 4054 0
 7392 0030 7B68     	 ldr r3,[r7,#4]
 7393 0032 1B69     	 ldr r3,[r3,#16]
 7394 0034 1846     	 mov r0,r3
 7395 0036 FFF7FEFF 	 bl dec_lock
 7396 003a 0346     	 mov r3,r0
 7397 003c FB73     	 strb r3,[r7,#15]
4055:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 7398              	 .loc 1 4055 0
 7399 003e FB7B     	 ldrb r3,[r7,#15]
 7400 0040 002B     	 cmp r3,#0
 7401 0042 02D1     	 bne .L456
 7402              	 .loc 1 4055 0 is_stmt 0 discriminator 1
 7403 0044 7B68     	 ldr r3,[r7,#4]
 7404 0046 0022     	 movs r2,#0
 7405 0048 1A60     	 str r2,[r3]
 7406              	.L456:
4056:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4057:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.fs = 0;	/* Invalidate file object */
4058:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4059:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
4060:../Dave/Generated/FATFS/ff_Src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
4061:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4062:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4063:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4064:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 7407              	 .loc 1 4064 0 is_stmt 1
 7408 004a FB7B     	 ldrb r3,[r7,#15]
4065:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7409              	 .loc 1 4065 0
 7410 004c 1846     	 mov r0,r3
 7411 004e 1037     	 adds r7,r7,#16
 7412              	.LCFI245:
 7413              	 .cfi_def_cfa_offset 8
 7414 0050 BD46     	 mov sp,r7
 7415              	.LCFI246:
 7416              	 .cfi_def_cfa_register 13
 7417              	 
 7418 0052 80BD     	 pop {r7,pc}
 7419              	 .cfi_endproc
 7420              	.LFE45:
 7422              	 .section .text.f_chdrive,"ax",%progbits
 7423              	 .align 2
 7424              	 .global f_chdrive
 7425              	 .thumb
 7426              	 .thumb_func
 7428              	f_chdrive:
 7429              	.LFB46:
4066:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4067:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4068:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4069:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4070:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH >= 1
4071:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4072:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
4073:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4074:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4075:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chdrive (
4076:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Drive number to set */
4077:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4078:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7430              	 .loc 1 4078 0
 7431              	 .cfi_startproc
 7432              	 
 7433              	 
 7434 0000 80B5     	 push {r7,lr}
 7435              	.LCFI247:
 7436              	 .cfi_def_cfa_offset 8
 7437              	 .cfi_offset 7,-8
 7438              	 .cfi_offset 14,-4
 7439 0002 84B0     	 sub sp,sp,#16
 7440              	.LCFI248:
 7441              	 .cfi_def_cfa_offset 24
 7442 0004 00AF     	 add r7,sp,#0
 7443              	.LCFI249:
 7444              	 .cfi_def_cfa_register 7
 7445 0006 7860     	 str r0,[r7,#4]
4079:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
4080:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4081:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4082:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
4083:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&path);
 7446              	 .loc 1 4083 0
 7447 0008 3B1D     	 adds r3,r7,#4
 7448 000a 1846     	 mov r0,r3
 7449 000c FFF7FEFF 	 bl get_ldnumber
 7450 0010 F860     	 str r0,[r7,#12]
4084:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 7451              	 .loc 1 4084 0
 7452 0012 FB68     	 ldr r3,[r7,#12]
 7453 0014 002B     	 cmp r3,#0
 7454 0016 01DA     	 bge .L459
 7455              	 .loc 1 4084 0 is_stmt 0 discriminator 1
 7456 0018 0B23     	 movs r3,#11
 7457 001a 04E0     	 b .L460
 7458              	.L459:
4085:../Dave/Generated/FATFS/ff_Src/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
 7459              	 .loc 1 4085 0 is_stmt 1
 7460 001c FB68     	 ldr r3,[r7,#12]
 7461 001e DAB2     	 uxtb r2,r3
 7462 0020 034B     	 ldr r3,.L461
 7463 0022 1A70     	 strb r2,[r3]
4086:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4087:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 7464              	 .loc 1 4087 0
 7465 0024 0023     	 movs r3,#0
 7466              	.L460:
4088:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7467              	 .loc 1 4088 0
 7468 0026 1846     	 mov r0,r3
 7469 0028 1037     	 adds r7,r7,#16
 7470              	.LCFI250:
 7471              	 .cfi_def_cfa_offset 8
 7472 002a BD46     	 mov sp,r7
 7473              	.LCFI251:
 7474              	 .cfi_def_cfa_register 13
 7475              	 
 7476 002c 80BD     	 pop {r7,pc}
 7477              	.L462:
 7478 002e 00BF     	 .align 2
 7479              	.L461:
 7480 0030 00000000 	 .word CurrVol
 7481              	 .cfi_endproc
 7482              	.LFE46:
 7484              	 .section .text.f_chdir,"ax",%progbits
 7485              	 .align 2
 7486              	 .global f_chdir
 7487              	 .thumb
 7488              	 .thumb_func
 7490              	f_chdir:
 7491              	.LFB47:
4089:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4090:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4091:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4092:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chdir (
4093:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4094:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4095:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7492              	 .loc 1 4095 0
 7493              	 .cfi_startproc
 7494              	 
 7495              	 
 7496 0000 90B5     	 push {r4,r7,lr}
 7497              	.LCFI252:
 7498              	 .cfi_def_cfa_offset 12
 7499              	 .cfi_offset 4,-12
 7500              	 .cfi_offset 7,-8
 7501              	 .cfi_offset 14,-4
 7502 0002 91B0     	 sub sp,sp,#68
 7503              	.LCFI253:
 7504              	 .cfi_def_cfa_offset 80
 7505 0004 00AF     	 add r7,sp,#0
 7506              	.LCFI254:
 7507              	 .cfi_def_cfa_register 7
 7508 0006 7860     	 str r0,[r7,#4]
4096:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2
4097:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
4098:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4099:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4100:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4101:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4102:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4103:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4104:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4105:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4106:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 7509              	 .loc 1 4106 0
 7510 0008 3A1D     	 adds r2,r7,#4
 7511 000a 07F10803 	 add r3,r7,#8
 7512 000e 1046     	 mov r0,r2
 7513 0010 1946     	 mov r1,r3
 7514 0012 0022     	 movs r2,#0
 7515 0014 FFF7FEFF 	 bl find_volume
 7516 0018 0346     	 mov r3,r0
 7517 001a 87F83F30 	 strb r3,[r7,#63]
4107:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 7518              	 .loc 1 4107 0
 7519 001e 97F83F30 	 ldrb r3,[r7,#63]
 7520 0022 002B     	 cmp r3,#0
 7521 0024 32D1     	 bne .L464
4108:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 7522              	 .loc 1 4108 0
 7523 0026 BB68     	 ldr r3,[r7,#8]
 7524 0028 FB60     	 str r3,[r7,#12]
4109:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4110:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 7525              	 .loc 1 4110 0
 7526 002a 7B68     	 ldr r3,[r7,#4]
 7527 002c 07F10C02 	 add r2,r7,#12
 7528 0030 1046     	 mov r0,r2
 7529 0032 1946     	 mov r1,r3
 7530 0034 FFF7FEFF 	 bl follow_path
 7531 0038 0346     	 mov r3,r0
 7532 003a 87F83F30 	 strb r3,[r7,#63]
4111:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 7533              	 .loc 1 4111 0
 7534 003e 97F83F30 	 ldrb r3,[r7,#63]
 7535 0042 002B     	 cmp r3,#0
 7536 0044 1BD1     	 bne .L465
4112:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 7537              	 .loc 1 4112 0
 7538 0046 97F83B30 	 ldrb r3,[r7,#59]
 7539 004a DBB2     	 uxtb r3,r3
 7540 004c 5BB2     	 sxtb r3,r3
 7541 004e 002B     	 cmp r3,#0
 7542 0050 03DA     	 bge .L466
4113:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->cdir = dj.obj.sclust;
 7543              	 .loc 1 4113 0
 7544 0052 BB68     	 ldr r3,[r7,#8]
 7545 0054 7A69     	 ldr r2,[r7,#20]
 7546 0056 5A61     	 str r2,[r3,#20]
 7547 0058 11E0     	 b .L465
 7548              	.L466:
4114:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4115:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4116:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
4117:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_size = dj.obj.c_size;
4118:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
4119:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4120:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4121:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4122:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 7549              	 .loc 1 4122 0
 7550 005a BB7C     	 ldrb r3,[r7,#18]
 7551 005c 03F01003 	 and r3,r3,#16
 7552 0060 002B     	 cmp r3,#0
 7553 0062 09D0     	 beq .L467
4123:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4124:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4125:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
4126:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
4127:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
4128:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
4129:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4130:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4131:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4132:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 7554              	 .loc 1 4132 0
 7555 0064 BC68     	 ldr r4,[r7,#8]
 7556 0066 BA68     	 ldr r2,[r7,#8]
 7557 0068 FB6A     	 ldr r3,[r7,#44]
 7558 006a 1046     	 mov r0,r2
 7559 006c 1946     	 mov r1,r3
 7560 006e FFF7FEFF 	 bl ld_clust
 7561 0072 0346     	 mov r3,r0
 7562 0074 6361     	 str r3,[r4,#20]
 7563 0076 02E0     	 b .L465
 7564              	.L467:
4133:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4134:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
4135:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
 7565              	 .loc 1 4135 0
 7566 0078 0523     	 movs r3,#5
 7567 007a 87F83F30 	 strb r3,[r7,#63]
 7568              	.L465:
4136:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4137:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4138:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4139:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4140:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 7569              	 .loc 1 4140 0
 7570 007e 97F83F30 	 ldrb r3,[r7,#63]
 7571 0082 042B     	 cmp r3,#4
 7572 0084 02D1     	 bne .L464
 7573              	 .loc 1 4140 0 is_stmt 0 discriminator 1
 7574 0086 0523     	 movs r3,#5
 7575 0088 87F83F30 	 strb r3,[r7,#63]
 7576              	.L464:
4141:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2	/* Also current drive is changed at Unix style volume ID */
4142:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
4143:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = FF_VOLUMES - 1; i && fs != FatFs[i]; i--) ;	/* Set current drive */
4144:../Dave/Generated/FATFS/ff_Src/ff.c **** 			CurrVol = (BYTE)i;
4145:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4146:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4147:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4148:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4149:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 7577              	 .loc 1 4149 0 is_stmt 1
 7578 008c 97F83F30 	 ldrb r3,[r7,#63]
4150:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7579              	 .loc 1 4150 0
 7580 0090 1846     	 mov r0,r3
 7581 0092 4437     	 adds r7,r7,#68
 7582              	.LCFI255:
 7583              	 .cfi_def_cfa_offset 12
 7584 0094 BD46     	 mov sp,r7
 7585              	.LCFI256:
 7586              	 .cfi_def_cfa_register 13
 7587              	 
 7588 0096 90BD     	 pop {r4,r7,pc}
 7589              	 .cfi_endproc
 7590              	.LFE47:
 7592              	 .section .text.f_getcwd,"ax",%progbits
 7593              	 .align 2
 7594              	 .global f_getcwd
 7595              	 .thumb
 7596              	 .thumb_func
 7598              	f_getcwd:
 7599              	.LFB48:
4151:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4152:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4153:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH >= 2
4154:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getcwd (
4155:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
4156:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT len		/* Size of buff in unit of TCHAR */
4157:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4158:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7600              	 .loc 1 4158 0
 7601              	 .cfi_startproc
 7602              	 
 7603              	 
 7604 0000 80B5     	 push {r7,lr}
 7605              	.LCFI257:
 7606              	 .cfi_def_cfa_offset 8
 7607              	 .cfi_offset 7,-8
 7608              	 .cfi_offset 14,-4
 7609 0002 9AB0     	 sub sp,sp,#104
 7610              	.LCFI258:
 7611              	 .cfi_def_cfa_offset 112
 7612 0004 00AF     	 add r7,sp,#0
 7613              	.LCFI259:
 7614              	 .cfi_def_cfa_register 7
 7615 0006 7860     	 str r0,[r7,#4]
 7616 0008 3960     	 str r1,[r7]
4159:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4160:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4161:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4162:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, n;
4163:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ccl;
4164:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *tp = buff;
 7617              	 .loc 1 4164 0
 7618 000a 7B68     	 ldr r3,[r7,#4]
 7619 000c BB65     	 str r3,[r7,#88]
4165:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES >= 2
4166:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT vl;
4167:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID
4168:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *vp;
4169:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4170:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4171:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO fno;
4172:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4173:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4175:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4176:../Dave/Generated/FATFS/ff_Src/ff.c **** 	buff[0] = 0;	/* Set null string to get current volume */
 7620              	 .loc 1 4176 0
 7621 000e 7B68     	 ldr r3,[r7,#4]
 7622 0010 0022     	 movs r2,#0
 7623 0012 1A70     	 strb r2,[r3]
4177:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 7624              	 .loc 1 4177 0
 7625 0014 3A1D     	 adds r2,r7,#4
 7626 0016 07F12003 	 add r3,r7,#32
 7627 001a 1046     	 mov r0,r2
 7628 001c 1946     	 mov r1,r3
 7629 001e 0022     	 movs r2,#0
 7630 0020 FFF7FEFF 	 bl find_volume
 7631 0024 0346     	 mov r3,r0
 7632 0026 87F86730 	 strb r3,[r7,#103]
4178:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 7633              	 .loc 1 4178 0
 7634 002a 97F86730 	 ldrb r3,[r7,#103]
 7635 002e 002B     	 cmp r3,#0
 7636 0030 40F0CD80 	 bne .L470
4179:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 7637              	 .loc 1 4179 0
 7638 0034 3B6A     	 ldr r3,[r7,#32]
 7639 0036 7B62     	 str r3,[r7,#36]
4180:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4181:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4182:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Follow parent directories and create the path */
4183:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
 7640              	 .loc 1 4183 0
 7641 0038 3B68     	 ldr r3,[r7]
 7642 003a 3B66     	 str r3,[r7,#96]
4184:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root pat
4185:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 7643              	 .loc 1 4185 0
 7644 003c 3B6A     	 ldr r3,[r7,#32]
 7645 003e 5B69     	 ldr r3,[r3,#20]
 7646 0040 FB62     	 str r3,[r7,#44]
4186:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 7647              	 .loc 1 4186 0
 7648 0042 9CE0     	 b .L471
 7649              	.L486:
4187:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 7650              	 .loc 1 4187 0
 7651 0044 07F12403 	 add r3,r7,#36
 7652 0048 1846     	 mov r0,r3
 7653 004a 2021     	 movs r1,#32
 7654 004c FFF7FEFF 	 bl dir_sdi
 7655 0050 0346     	 mov r3,r0
 7656 0052 87F86730 	 strb r3,[r7,#103]
4188:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7657              	 .loc 1 4188 0
 7658 0056 97F86730 	 ldrb r3,[r7,#103]
 7659 005a 002B     	 cmp r3,#0
 7660 005c 00D0     	 beq .L472
 7661 005e 94E0     	 b .L473
 7662              	.L472:
4189:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, dj.sect);
 7663              	 .loc 1 4189 0
 7664 0060 3A6A     	 ldr r2,[r7,#32]
 7665 0062 3B6C     	 ldr r3,[r7,#64]
 7666 0064 1046     	 mov r0,r2
 7667 0066 1946     	 mov r1,r3
 7668 0068 FFF7FEFF 	 bl move_window
 7669 006c 0346     	 mov r3,r0
 7670 006e 87F86730 	 strb r3,[r7,#103]
4190:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7671              	 .loc 1 4190 0
 7672 0072 97F86730 	 ldrb r3,[r7,#103]
 7673 0076 002B     	 cmp r3,#0
 7674 0078 00D0     	 beq .L474
 7675 007a 86E0     	 b .L473
 7676              	.L474:
4191:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 7677              	 .loc 1 4191 0
 7678 007c 3A6A     	 ldr r2,[r7,#32]
 7679 007e 7B6C     	 ldr r3,[r7,#68]
 7680 0080 1046     	 mov r0,r2
 7681 0082 1946     	 mov r1,r3
 7682 0084 FFF7FEFF 	 bl ld_clust
 7683 0088 0346     	 mov r3,r0
 7684 008a FB62     	 str r3,[r7,#44]
4192:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 0);
 7685              	 .loc 1 4192 0
 7686 008c 07F12403 	 add r3,r7,#36
 7687 0090 1846     	 mov r0,r3
 7688 0092 0021     	 movs r1,#0
 7689 0094 FFF7FEFF 	 bl dir_sdi
 7690 0098 0346     	 mov r3,r0
 7691 009a 87F86730 	 strb r3,[r7,#103]
4193:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7692              	 .loc 1 4193 0
 7693 009e 97F86730 	 ldrb r3,[r7,#103]
 7694 00a2 002B     	 cmp r3,#0
 7695 00a4 00D0     	 beq .L475
 7696 00a6 70E0     	 b .L473
 7697              	.L475:
4194:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {							/* Find the entry links to the child directory */
4195:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = DIR_READ_FILE(&dj);
 7698              	 .loc 1 4195 0
 7699 00a8 07F12403 	 add r3,r7,#36
 7700 00ac 1846     	 mov r0,r3
 7701 00ae 0021     	 movs r1,#0
 7702 00b0 FFF7FEFF 	 bl dir_read
 7703 00b4 0346     	 mov r3,r0
 7704 00b6 87F86730 	 strb r3,[r7,#103]
4196:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res != FR_OK) break;
 7705              	 .loc 1 4196 0
 7706 00ba 97F86730 	 ldrb r3,[r7,#103]
 7707 00be 002B     	 cmp r3,#0
 7708 00c0 00D0     	 beq .L476
 7709 00c2 17E0     	 b .L477
 7710              	.L476:
4197:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 7711              	 .loc 1 4197 0
 7712 00c4 3A6A     	 ldr r2,[r7,#32]
 7713 00c6 7B6C     	 ldr r3,[r7,#68]
 7714 00c8 1046     	 mov r0,r2
 7715 00ca 1946     	 mov r1,r3
 7716 00cc FFF7FEFF 	 bl ld_clust
 7717 00d0 0246     	 mov r2,r0
 7718 00d2 7B6D     	 ldr r3,[r7,#84]
 7719 00d4 9A42     	 cmp r2,r3
 7720 00d6 00D1     	 bne .L478
 7721 00d8 0CE0     	 b .L477
 7722              	.L478:
4198:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_next(&dj, 0);
 7723              	 .loc 1 4198 0
 7724 00da 07F12403 	 add r3,r7,#36
 7725 00de 1846     	 mov r0,r3
 7726 00e0 0021     	 movs r1,#0
 7727 00e2 FFF7FEFF 	 bl dir_next
 7728 00e6 0346     	 mov r3,r0
 7729 00e8 87F86730 	 strb r3,[r7,#103]
4199:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (res == FR_OK);
 7730              	 .loc 1 4199 0
 7731 00ec 97F86730 	 ldrb r3,[r7,#103]
 7732 00f0 002B     	 cmp r3,#0
 7733 00f2 D9D0     	 beq .L475
 7734              	.L477:
4200:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 7735              	 .loc 1 4200 0
 7736 00f4 97F86730 	 ldrb r3,[r7,#103]
 7737 00f8 042B     	 cmp r3,#4
 7738 00fa 02D1     	 bne .L479
 7739              	 .loc 1 4200 0 is_stmt 0 discriminator 1
 7740 00fc 0223     	 movs r3,#2
 7741 00fe 87F86730 	 strb r3,[r7,#103]
 7742              	.L479:
4201:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7743              	 .loc 1 4201 0 is_stmt 1
 7744 0102 97F86730 	 ldrb r3,[r7,#103]
 7745 0106 002B     	 cmp r3,#0
 7746 0108 00D0     	 beq .L480
 7747 010a 3EE0     	 b .L473
 7748              	.L480:
4202:../Dave/Generated/FATFS/ff_Src/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 7749              	 .loc 1 4202 0
 7750 010c 07F12402 	 add r2,r7,#36
 7751 0110 07F10803 	 add r3,r7,#8
 7752 0114 1046     	 mov r0,r2
 7753 0116 1946     	 mov r1,r3
 7754 0118 FFF7FEFF 	 bl get_fileinfo
4203:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
 7755              	 .loc 1 4203 0
 7756 011c 0023     	 movs r3,#0
 7757 011e FB65     	 str r3,[r7,#92]
 7758 0120 02E0     	 b .L481
 7759              	.L482:
 7760              	 .loc 1 4203 0 is_stmt 0 discriminator 3
 7761 0122 FB6D     	 ldr r3,[r7,#92]
 7762 0124 0133     	 adds r3,r3,#1
 7763 0126 FB65     	 str r3,[r7,#92]
 7764              	.L481:
 7765              	 .loc 1 4203 0 discriminator 1
 7766 0128 07F11002 	 add r2,r7,#16
 7767 012c FB6D     	 ldr r3,[r7,#92]
 7768 012e 1344     	 add r3,r3,r2
 7769 0130 5B78     	 ldrb r3,[r3,#1]
 7770 0132 002B     	 cmp r3,#0
 7771 0134 F5D1     	 bne .L482
4204:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (i < n + 1) {	/* Insufficient space to store the path name? */
 7772              	 .loc 1 4204 0 is_stmt 1
 7773 0136 FB6D     	 ldr r3,[r7,#92]
 7774 0138 5A1C     	 adds r2,r3,#1
 7775 013a 3B6E     	 ldr r3,[r7,#96]
 7776 013c 9A42     	 cmp r2,r3
 7777 013e 03D9     	 bls .L483
4205:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
 7778              	 .loc 1 4205 0
 7779 0140 1123     	 movs r3,#17
 7780 0142 87F86730 	 strb r3,[r7,#103]
 7781 0146 20E0     	 b .L473
 7782              	.L483:
4206:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4207:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
 7783              	 .loc 1 4207 0
 7784 0148 0EE0     	 b .L484
 7785              	.L485:
 7786              	 .loc 1 4207 0 is_stmt 0 discriminator 2
 7787 014a 7A68     	 ldr r2,[r7,#4]
 7788 014c 3B6E     	 ldr r3,[r7,#96]
 7789 014e 013B     	 subs r3,r3,#1
 7790 0150 3B66     	 str r3,[r7,#96]
 7791 0152 3B6E     	 ldr r3,[r7,#96]
 7792 0154 1344     	 add r3,r3,r2
 7793 0156 FA6D     	 ldr r2,[r7,#92]
 7794 0158 013A     	 subs r2,r2,#1
 7795 015a FA65     	 str r2,[r7,#92]
 7796 015c 07F11001 	 add r1,r7,#16
 7797 0160 FA6D     	 ldr r2,[r7,#92]
 7798 0162 0A44     	 add r2,r2,r1
 7799 0164 5278     	 ldrb r2,[r2,#1]
 7800 0166 1A70     	 strb r2,[r3]
 7801              	.L484:
 7802              	 .loc 1 4207 0 discriminator 1
 7803 0168 FB6D     	 ldr r3,[r7,#92]
 7804 016a 002B     	 cmp r3,#0
 7805 016c EDD1     	 bne .L485
4208:../Dave/Generated/FATFS/ff_Src/ff.c **** 				buff[--i] = '/';
 7806              	 .loc 1 4208 0 is_stmt 1
 7807 016e 7A68     	 ldr r2,[r7,#4]
 7808 0170 3B6E     	 ldr r3,[r7,#96]
 7809 0172 013B     	 subs r3,r3,#1
 7810 0174 3B66     	 str r3,[r7,#96]
 7811 0176 3B6E     	 ldr r3,[r7,#96]
 7812 0178 1344     	 add r3,r3,r2
 7813 017a 2F22     	 movs r2,#47
 7814 017c 1A70     	 strb r2,[r3]
 7815              	.L471:
4186:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 7816              	 .loc 1 4186 0
 7817 017e FB6A     	 ldr r3,[r7,#44]
 7818 0180 7B65     	 str r3,[r7,#84]
 7819 0182 7B6D     	 ldr r3,[r7,#84]
 7820 0184 002B     	 cmp r3,#0
 7821 0186 7FF45DAF 	 bne .L486
 7822              	.L473:
4209:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4210:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4211:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 7823              	 .loc 1 4211 0
 7824 018a 97F86730 	 ldrb r3,[r7,#103]
 7825 018e 002B     	 cmp r3,#0
 7826 0190 1DD1     	 bne .L470
4212:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
 7827              	 .loc 1 4212 0
 7828 0192 3A6E     	 ldr r2,[r7,#96]
 7829 0194 3B68     	 ldr r3,[r7]
 7830 0196 9A42     	 cmp r2,r3
 7831 0198 07D1     	 bne .L487
 7832              	 .loc 1 4212 0 is_stmt 0 discriminator 1
 7833 019a 7A68     	 ldr r2,[r7,#4]
 7834 019c 3B6E     	 ldr r3,[r7,#96]
 7835 019e 013B     	 subs r3,r3,#1
 7836 01a0 3B66     	 str r3,[r7,#96]
 7837 01a2 3B6E     	 ldr r3,[r7,#96]
 7838 01a4 1344     	 add r3,r3,r2
 7839 01a6 2F22     	 movs r2,#47
 7840 01a8 1A70     	 strb r2,[r3]
 7841              	.L487:
4213:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES >= 2			/* Put drive prefix */
4214:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vl = 0;
4215:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID >= 1	/* String volume ID */
4216:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (n = 0, vp = (const char*)VolumeStr[CurrVol]; vp[n]; n++) ;
4217:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= n + 2) {
4218:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (FF_STR_VOLUME_ID == 2) *tp++ = (TCHAR)'/';
4219:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (vl = 0; vl < n; *tp++ = (TCHAR)vp[vl], vl++) ;
4220:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (FF_STR_VOLUME_ID == 1) *tp++ = (TCHAR)':';
4221:../Dave/Generated/FATFS/ff_Src/ff.c **** 				vl++;
4222:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4223:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* Numeric volume ID */
4224:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= 3) {
4225:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tp++ = (TCHAR)'0' + CurrVol;
4226:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tp++ = (TCHAR)':';
4227:../Dave/Generated/FATFS/ff_Src/ff.c **** 				vl = 2;
4228:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4229:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4230:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
4231:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4232:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Add current directory path */
4233:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 7842              	 .loc 1 4233 0 is_stmt 1
 7843 01aa 97F86730 	 ldrb r3,[r7,#103]
 7844 01ae 002B     	 cmp r3,#0
 7845 01b0 0DD1     	 bne .L470
 7846              	.L488:
4234:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
 7847              	 .loc 1 4234 0 discriminator 1
 7848 01b2 BB6D     	 ldr r3,[r7,#88]
 7849 01b4 5A1C     	 adds r2,r3,#1
 7850 01b6 BA65     	 str r2,[r7,#88]
 7851 01b8 7968     	 ldr r1,[r7,#4]
 7852 01ba 3A6E     	 ldr r2,[r7,#96]
 7853 01bc 501C     	 adds r0,r2,#1
 7854 01be 3866     	 str r0,[r7,#96]
 7855 01c0 0A44     	 add r2,r2,r1
 7856 01c2 1278     	 ldrb r2,[r2]
 7857 01c4 1A70     	 strb r2,[r3]
 7858 01c6 3A6E     	 ldr r2,[r7,#96]
 7859 01c8 3B68     	 ldr r3,[r7]
 7860 01ca 9A42     	 cmp r2,r3
 7861 01cc F1D3     	 bcc .L488
 7862              	.L470:
4235:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4236:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4237:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4238:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4239:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*tp = 0;
 7863              	 .loc 1 4240 0
 7864 01ce BB6D     	 ldr r3,[r7,#88]
 7865 01d0 0022     	 movs r2,#0
 7866 01d2 1A70     	 strb r2,[r3]
4241:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 7867              	 .loc 1 4241 0
 7868 01d4 97F86730 	 ldrb r3,[r7,#103]
4242:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7869              	 .loc 1 4242 0
 7870 01d8 1846     	 mov r0,r3
 7871 01da 6837     	 adds r7,r7,#104
 7872              	.LCFI260:
 7873              	 .cfi_def_cfa_offset 8
 7874 01dc BD46     	 mov sp,r7
 7875              	.LCFI261:
 7876              	 .cfi_def_cfa_register 13
 7877              	 
 7878 01de 80BD     	 pop {r7,pc}
 7879              	 .cfi_endproc
 7880              	.LFE48:
 7882              	 .section .text.f_lseek,"ax",%progbits
 7883              	 .align 2
 7884              	 .global f_lseek
 7885              	 .thumb
 7886              	 .thumb_func
 7888              	f_lseek:
 7889              	.LFB49:
4243:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4244:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_RPATH >= 2 */
4245:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_RPATH >= 1 */
4246:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4247:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4248:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4249:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 2
4250:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4251:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Seek File Read/Write Pointer                                          */
4252:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4253:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4254:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_lseek (
4255:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
4256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
4257:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4258:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7890              	 .loc 1 4258 0
 7891              	 .cfi_startproc
 7892              	 
 7893              	 
 7894 0000 80B5     	 push {r7,lr}
 7895              	.LCFI262:
 7896              	 .cfi_def_cfa_offset 8
 7897              	 .cfi_offset 7,-8
 7898              	 .cfi_offset 14,-4
 7899 0002 88B0     	 sub sp,sp,#32
 7900              	.LCFI263:
 7901              	 .cfi_def_cfa_offset 40
 7902 0004 00AF     	 add r7,sp,#0
 7903              	.LCFI264:
 7904              	 .cfi_def_cfa_register 7
 7905 0006 7860     	 str r0,[r7,#4]
 7906 0008 3960     	 str r1,[r7]
4259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4260:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4261:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, bcs, nsect;
4262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ifptr;
4263:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
4264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
4265:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4266:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4267:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 7907              	 .loc 1 4267 0
 7908 000a 7A68     	 ldr r2,[r7,#4]
 7909 000c 07F10803 	 add r3,r7,#8
 7910 0010 1046     	 mov r0,r2
 7911 0012 1946     	 mov r1,r3
 7912 0014 FFF7FEFF 	 bl validate
 7913 0018 0346     	 mov r3,r0
 7914 001a FB77     	 strb r3,[r7,#31]
4268:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 7915              	 .loc 1 4268 0
 7916 001c FB7F     	 ldrb r3,[r7,#31]
 7917 001e 002B     	 cmp r3,#0
 7918 0020 02D1     	 bne .L491
 7919              	 .loc 1 4268 0 is_stmt 0 discriminator 1
 7920 0022 7B68     	 ldr r3,[r7,#4]
 7921 0024 5B7D     	 ldrb r3,[r3,#21]
 7922 0026 FB77     	 strb r3,[r7,#31]
 7923              	.L491:
4269:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
4270:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4271:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4272:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4273:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4274:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 7924              	 .loc 1 4274 0 is_stmt 1
 7925 0028 FB7F     	 ldrb r3,[r7,#31]
 7926 002a 002B     	 cmp r3,#0
 7927 002c 01D0     	 beq .L492
 7928              	 .loc 1 4274 0 is_stmt 0 discriminator 1
 7929 002e FB7F     	 ldrb r3,[r7,#31]
 7930 0030 14E1     	 b .L515
 7931              	.L492:
4275:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4276:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
4277:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
4278:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4279:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tbl = fp->cltbl;
4280:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4281:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4282:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cl != 0) {
4283:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {
4284:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Get a fragment */
4285:../Dave/Generated/FATFS/ff_Src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4286:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {
4287:../Dave/Generated/FATFS/ff_Src/ff.c **** 						pcl = cl; ncl++;
4288:../Dave/Generated/FATFS/ff_Src/ff.c **** 						cl = get_fat(&fp->obj, cl);
4289:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4290:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4291:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (cl == pcl + 1);
4292:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4293:../Dave/Generated/FATFS/ff_Src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
4294:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4295:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4296:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4297:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
4298:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ulen <= tlen) {
4299:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tbl = 0;		/* Terminate table */
4300:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4301:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4302:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4303:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* Fast seek */
4304:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4305:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
4306:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs > 0) {
4307:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
4308:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dsc = clst2sect(fs, fp->clust);
4309:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dsc == 0) ABORT(fs, FR_INT_ERR);
4310:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4311:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4312:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4313:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4314:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4315:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4316:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
4317:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4318:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4319:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current se
4320:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4321:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->sect = dsc;
4322:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4323:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4324:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4325:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
4326:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4327:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4328:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Normal Seek */
4329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
4330:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4331:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at F
4332:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4333:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, 
 7932              	 .loc 1 4333 0 is_stmt 1
 7933 0032 7B68     	 ldr r3,[r7,#4]
 7934 0034 DA68     	 ldr r2,[r3,#12]
 7935 0036 3B68     	 ldr r3,[r7]
 7936 0038 9A42     	 cmp r2,r3
 7937 003a 08D2     	 bcs .L494
 7938              	 .loc 1 4333 0 is_stmt 0 discriminator 1
 7939 003c 7B68     	 ldr r3,[r7,#4]
 7940 003e 1B7D     	 ldrb r3,[r3,#20]
 7941 0040 03F00203 	 and r3,r3,#2
 7942 0044 002B     	 cmp r3,#0
 7943 0046 02D1     	 bne .L494
4334:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs = fp->obj.objsize;
 7944              	 .loc 1 4334 0 is_stmt 1
 7945 0048 7B68     	 ldr r3,[r7,#4]
 7946 004a DB68     	 ldr r3,[r3,#12]
 7947 004c 3B60     	 str r3,[r7]
 7948              	.L494:
4335:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4336:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ifptr = fp->fptr;
 7949              	 .loc 1 4336 0
 7950 004e 7B68     	 ldr r3,[r7,#4]
 7951 0050 9B69     	 ldr r3,[r3,#24]
 7952 0052 3B61     	 str r3,[r7,#16]
4337:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->fptr = nsect = 0;
 7953              	 .loc 1 4337 0
 7954 0054 0023     	 movs r3,#0
 7955 0056 7B61     	 str r3,[r7,#20]
 7956 0058 7B68     	 ldr r3,[r7,#4]
 7957 005a 7A69     	 ldr r2,[r7,#20]
 7958 005c 9A61     	 str r2,[r3,#24]
4338:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs > 0) {
 7959              	 .loc 1 4338 0
 7960 005e 3B68     	 ldr r3,[r7]
 7961 0060 002B     	 cmp r3,#0
 7962 0062 00F0A780 	 beq .L495
4339:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 7963              	 .loc 1 4339 0
 7964 0066 BB68     	 ldr r3,[r7,#8]
 7965 0068 5B89     	 ldrh r3,[r3,#10]
 7966 006a 5B02     	 lsls r3,r3,#9
 7967 006c FB60     	 str r3,[r7,#12]
4340:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ifptr > 0 &&
 7968              	 .loc 1 4340 0
 7969 006e 3B69     	 ldr r3,[r7,#16]
 7970 0070 002B     	 cmp r3,#0
 7971 0072 1BD0     	 beq .L496
4341:../Dave/Generated/FATFS/ff_Src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7972              	 .loc 1 4341 0 discriminator 1
 7973 0074 3B68     	 ldr r3,[r7]
 7974 0076 5A1E     	 subs r2,r3,#1
 7975 0078 FB68     	 ldr r3,[r7,#12]
 7976 007a B2FBF3F2 	 udiv r2,r2,r3
 7977 007e 3B69     	 ldr r3,[r7,#16]
 7978 0080 591E     	 subs r1,r3,#1
 7979 0082 FB68     	 ldr r3,[r7,#12]
 7980 0084 B1FBF3F3 	 udiv r3,r1,r3
4340:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ifptr > 0 &&
 7981              	 .loc 1 4340 0 discriminator 1
 7982 0088 9A42     	 cmp r2,r3
 7983 008a 0FD3     	 bcc .L496
4342:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 7984              	 .loc 1 4342 0
 7985 008c 3B69     	 ldr r3,[r7,#16]
 7986 008e 5A1E     	 subs r2,r3,#1
 7987 0090 FB68     	 ldr r3,[r7,#12]
 7988 0092 5B42     	 negs r3,r3
 7989 0094 1A40     	 ands r2,r2,r3
 7990 0096 7B68     	 ldr r3,[r7,#4]
 7991 0098 9A61     	 str r2,[r3,#24]
4343:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ofs -= fp->fptr;
 7992              	 .loc 1 4343 0
 7993 009a 7B68     	 ldr r3,[r7,#4]
 7994 009c 9B69     	 ldr r3,[r3,#24]
 7995 009e 3A68     	 ldr r2,[r7]
 7996 00a0 D31A     	 subs r3,r2,r3
 7997 00a2 3B60     	 str r3,[r7]
4344:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->clust;
 7998              	 .loc 1 4344 0
 7999 00a4 7B68     	 ldr r3,[r7,#4]
 8000 00a6 DB69     	 ldr r3,[r3,#28]
 8001 00a8 BB61     	 str r3,[r7,#24]
 8002 00aa 22E0     	 b .L497
 8003              	.L496:
4345:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {									/* When seek to back cluster, */
4346:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
 8004              	 .loc 1 4346 0
 8005 00ac 7B68     	 ldr r3,[r7,#4]
 8006 00ae 9B68     	 ldr r3,[r3,#8]
 8007 00b0 BB61     	 str r3,[r7,#24]
4347:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4348:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008              	 .loc 1 4348 0
 8009 00b2 BB69     	 ldr r3,[r7,#24]
 8010 00b4 002B     	 cmp r3,#0
 8011 00b6 19D1     	 bne .L498
4349:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = create_chain(&fp->obj, 0);
 8012              	 .loc 1 4349 0
 8013 00b8 7B68     	 ldr r3,[r7,#4]
 8014 00ba 1846     	 mov r0,r3
 8015 00bc 0021     	 movs r1,#0
 8016 00be FFF7FEFF 	 bl create_chain
 8017 00c2 B861     	 str r0,[r7,#24]
4350:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018              	 .loc 1 4350 0
 8019 00c4 BB69     	 ldr r3,[r7,#24]
 8020 00c6 012B     	 cmp r3,#1
 8021 00c8 04D1     	 bne .L499
 8022              	 .loc 1 4350 0 is_stmt 0 discriminator 1
 8023 00ca 7B68     	 ldr r3,[r7,#4]
 8024 00cc 0222     	 movs r2,#2
 8025 00ce 5A75     	 strb r2,[r3,#21]
 8026 00d0 0223     	 movs r3,#2
 8027 00d2 C3E0     	 b .L515
 8028              	.L499:
4351:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8029              	 .loc 1 4351 0 is_stmt 1
 8030 00d4 BB69     	 ldr r3,[r7,#24]
 8031 00d6 B3F1FF3F 	 cmp r3,#-1
 8032 00da 04D1     	 bne .L500
 8033              	 .loc 1 4351 0 is_stmt 0 discriminator 1
 8034 00dc 7B68     	 ldr r3,[r7,#4]
 8035 00de 0122     	 movs r2,#1
 8036 00e0 5A75     	 strb r2,[r3,#21]
 8037 00e2 0123     	 movs r3,#1
 8038 00e4 BAE0     	 b .L515
 8039              	.L500:
4352:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.sclust = clst;
 8040              	 .loc 1 4352 0 is_stmt 1
 8041 00e6 7B68     	 ldr r3,[r7,#4]
 8042 00e8 BA69     	 ldr r2,[r7,#24]
 8043 00ea 9A60     	 str r2,[r3,#8]
 8044              	.L498:
4353:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4354:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4355:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;
 8045              	 .loc 1 4355 0
 8046 00ec 7B68     	 ldr r3,[r7,#4]
 8047 00ee BA69     	 ldr r2,[r7,#24]
 8048 00f0 DA61     	 str r2,[r3,#28]
 8049              	.L497:
4356:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4357:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst != 0) {
 8050              	 .loc 1 4357 0
 8051 00f2 BB69     	 ldr r3,[r7,#24]
 8052 00f4 002B     	 cmp r3,#0
 8053 00f6 5DD0     	 beq .L495
4358:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 8054              	 .loc 1 4358 0
 8055 00f8 3AE0     	 b .L501
 8056              	.L508:
4359:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 8057              	 .loc 1 4359 0
 8058 00fa 3A68     	 ldr r2,[r7]
 8059 00fc FB68     	 ldr r3,[r7,#12]
 8060 00fe D31A     	 subs r3,r2,r3
 8061 0100 3B60     	 str r3,[r7]
 8062 0102 7B68     	 ldr r3,[r7,#4]
 8063 0104 9A69     	 ldr r2,[r3,#24]
 8064 0106 FB68     	 ldr r3,[r7,#12]
 8065 0108 1A44     	 add r2,r2,r3
 8066 010a 7B68     	 ldr r3,[r7,#4]
 8067 010c 9A61     	 str r2,[r3,#24]
4360:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4361:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8068              	 .loc 1 4361 0
 8069 010e 7B68     	 ldr r3,[r7,#4]
 8070 0110 1B7D     	 ldrb r3,[r3,#20]
 8071 0112 03F00203 	 and r3,r3,#2
 8072 0116 002B     	 cmp r3,#0
 8073 0118 0BD0     	 beq .L502
4362:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
4363:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->obj.objsize = fp->fptr;
4364:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->flag |= FA_MODIFIED;
4365:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4366:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8074              	 .loc 1 4366 0
 8075 011a 7B68     	 ldr r3,[r7,#4]
 8076 011c 1846     	 mov r0,r3
 8077 011e B969     	 ldr r1,[r7,#24]
 8078 0120 FFF7FEFF 	 bl create_chain
 8079 0124 B861     	 str r0,[r7,#24]
4367:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 8080              	 .loc 1 4367 0
 8081 0126 BB69     	 ldr r3,[r7,#24]
 8082 0128 002B     	 cmp r3,#0
 8083 012a 08D1     	 bne .L503
4368:../Dave/Generated/FATFS/ff_Src/ff.c **** 							ofs = 0; break;
 8084              	 .loc 1 4368 0
 8085 012c 0023     	 movs r3,#0
 8086 012e 3B60     	 str r3,[r7]
 8087 0130 22E0     	 b .L504
 8088              	.L502:
4369:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4370:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4371:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4372:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4373:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8089              	 .loc 1 4373 0
 8090 0132 7B68     	 ldr r3,[r7,#4]
 8091 0134 1846     	 mov r0,r3
 8092 0136 B969     	 ldr r1,[r7,#24]
 8093 0138 FFF7FEFF 	 bl get_fat
 8094 013c B861     	 str r0,[r7,#24]
 8095              	.L503:
4374:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4375:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8096              	 .loc 1 4375 0
 8097 013e BB69     	 ldr r3,[r7,#24]
 8098 0140 B3F1FF3F 	 cmp r3,#-1
 8099 0144 04D1     	 bne .L505
 8100              	 .loc 1 4375 0 is_stmt 0 discriminator 1
 8101 0146 7B68     	 ldr r3,[r7,#4]
 8102 0148 0122     	 movs r2,#1
 8103 014a 5A75     	 strb r2,[r3,#21]
 8104 014c 0123     	 movs r3,#1
 8105 014e 85E0     	 b .L515
 8106              	.L505:
4376:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8107              	 .loc 1 4376 0 is_stmt 1
 8108 0150 BB69     	 ldr r3,[r7,#24]
 8109 0152 012B     	 cmp r3,#1
 8110 0154 04D9     	 bls .L506
 8111              	 .loc 1 4376 0 is_stmt 0 discriminator 2
 8112 0156 BB68     	 ldr r3,[r7,#8]
 8113 0158 9A69     	 ldr r2,[r3,#24]
 8114 015a BB69     	 ldr r3,[r7,#24]
 8115 015c 9A42     	 cmp r2,r3
 8116 015e 04D8     	 bhi .L507
 8117              	.L506:
 8118              	 .loc 1 4376 0 discriminator 3
 8119 0160 7B68     	 ldr r3,[r7,#4]
 8120 0162 0222     	 movs r2,#2
 8121 0164 5A75     	 strb r2,[r3,#21]
 8122 0166 0223     	 movs r3,#2
 8123 0168 78E0     	 b .L515
 8124              	.L507:
4377:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->clust = clst;
 8125              	 .loc 1 4377 0 is_stmt 1
 8126 016a 7B68     	 ldr r3,[r7,#4]
 8127 016c BA69     	 ldr r2,[r7,#24]
 8128 016e DA61     	 str r2,[r3,#28]
 8129              	.L501:
4358:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 8130              	 .loc 1 4358 0
 8131 0170 3A68     	 ldr r2,[r7]
 8132 0172 FB68     	 ldr r3,[r7,#12]
 8133 0174 9A42     	 cmp r2,r3
 8134 0176 C0D8     	 bhi .L508
 8135              	.L504:
4378:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4379:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr += ofs;
 8136              	 .loc 1 4379 0
 8137 0178 7B68     	 ldr r3,[r7,#4]
 8138 017a 9A69     	 ldr r2,[r3,#24]
 8139 017c 3B68     	 ldr r3,[r7]
 8140 017e 1A44     	 add r2,r2,r3
 8141 0180 7B68     	 ldr r3,[r7,#4]
 8142 0182 9A61     	 str r2,[r3,#24]
4380:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ofs % SS(fs)) {
 8143              	 .loc 1 4380 0
 8144 0184 3B68     	 ldr r3,[r7]
 8145 0186 C3F30803 	 ubfx r3,r3,#0,#9
 8146 018a 002B     	 cmp r3,#0
 8147 018c 12D0     	 beq .L495
4381:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 8148              	 .loc 1 4381 0
 8149 018e BB68     	 ldr r3,[r7,#8]
 8150 0190 1846     	 mov r0,r3
 8151 0192 B969     	 ldr r1,[r7,#24]
 8152 0194 FFF7FEFF 	 bl clst2sect
 8153 0198 7861     	 str r0,[r7,#20]
4382:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8154              	 .loc 1 4382 0
 8155 019a 7B69     	 ldr r3,[r7,#20]
 8156 019c 002B     	 cmp r3,#0
 8157 019e 04D1     	 bne .L509
 8158              	 .loc 1 4382 0 is_stmt 0 discriminator 1
 8159 01a0 7B68     	 ldr r3,[r7,#4]
 8160 01a2 0222     	 movs r2,#2
 8161 01a4 5A75     	 strb r2,[r3,#21]
 8162 01a6 0223     	 movs r3,#2
 8163 01a8 58E0     	 b .L515
 8164              	.L509:
4383:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 8165              	 .loc 1 4383 0 is_stmt 1
 8166 01aa 3B68     	 ldr r3,[r7]
 8167 01ac 5B0A     	 lsrs r3,r3,#9
 8168 01ae 7A69     	 ldr r2,[r7,#20]
 8169 01b0 1344     	 add r3,r3,r2
 8170 01b2 7B61     	 str r3,[r7,#20]
 8171              	.L495:
4384:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4385:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4386:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4387:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is 
 8172              	 .loc 1 4387 0
 8173 01b4 7B68     	 ldr r3,[r7,#4]
 8174 01b6 9A69     	 ldr r2,[r3,#24]
 8175 01b8 7B68     	 ldr r3,[r7,#4]
 8176 01ba DB68     	 ldr r3,[r3,#12]
 8177 01bc 9A42     	 cmp r2,r3
 8178 01be 0AD9     	 bls .L510
4388:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.objsize = fp->fptr;
 8179              	 .loc 1 4388 0
 8180 01c0 7B68     	 ldr r3,[r7,#4]
 8181 01c2 9A69     	 ldr r2,[r3,#24]
 8182 01c4 7B68     	 ldr r3,[r7,#4]
 8183 01c6 DA60     	 str r2,[r3,#12]
4389:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag |= FA_MODIFIED;
 8184              	 .loc 1 4389 0
 8185 01c8 7B68     	 ldr r3,[r7,#4]
 8186 01ca 1B7D     	 ldrb r3,[r3,#20]
 8187 01cc 43F04003 	 orr r3,r3,#64
 8188 01d0 DAB2     	 uxtb r2,r3
 8189 01d2 7B68     	 ldr r3,[r7,#4]
 8190 01d4 1A75     	 strb r2,[r3,#20]
 8191              	.L510:
4390:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4391:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8192              	 .loc 1 4391 0
 8193 01d6 7B68     	 ldr r3,[r7,#4]
 8194 01d8 9B69     	 ldr r3,[r3,#24]
 8195 01da C3F30803 	 ubfx r3,r3,#0,#9
 8196 01de 002B     	 cmp r3,#0
 8197 01e0 3BD0     	 beq .L511
 8198              	 .loc 1 4391 0 is_stmt 0 discriminator 1
 8199 01e2 7B68     	 ldr r3,[r7,#4]
 8200 01e4 1A6A     	 ldr r2,[r3,#32]
 8201 01e6 7B69     	 ldr r3,[r7,#20]
 8202 01e8 9A42     	 cmp r2,r3
 8203 01ea 36D0     	 beq .L511
4392:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4393:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4394:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8204              	 .loc 1 4394 0 is_stmt 1
 8205 01ec 7B68     	 ldr r3,[r7,#4]
 8206 01ee 1B7D     	 ldrb r3,[r3,#20]
 8207 01f0 DBB2     	 uxtb r3,r3
 8208 01f2 5BB2     	 sxtb r3,r3
 8209 01f4 002B     	 cmp r3,#0
 8210 01f6 1BDA     	 bge .L512
4395:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8211              	 .loc 1 4395 0
 8212 01f8 BB68     	 ldr r3,[r7,#8]
 8213 01fa 5978     	 ldrb r1,[r3,#1]
 8214 01fc 7B68     	 ldr r3,[r7,#4]
 8215 01fe 03F12C02 	 add r2,r3,#44
 8216 0202 7B68     	 ldr r3,[r7,#4]
 8217 0204 1B6A     	 ldr r3,[r3,#32]
 8218 0206 0846     	 mov r0,r1
 8219 0208 1146     	 mov r1,r2
 8220 020a 1A46     	 mov r2,r3
 8221 020c 0123     	 movs r3,#1
 8222 020e FFF7FEFF 	 bl disk_write
 8223 0212 0346     	 mov r3,r0
 8224 0214 002B     	 cmp r3,#0
 8225 0216 04D0     	 beq .L513
 8226              	 .loc 1 4395 0 is_stmt 0 discriminator 1
 8227 0218 7B68     	 ldr r3,[r7,#4]
 8228 021a 0122     	 movs r2,#1
 8229 021c 5A75     	 strb r2,[r3,#21]
 8230 021e 0123     	 movs r3,#1
 8231 0220 1CE0     	 b .L515
 8232              	.L513:
4396:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8233              	 .loc 1 4396 0 is_stmt 1
 8234 0222 7B68     	 ldr r3,[r7,#4]
 8235 0224 1B7D     	 ldrb r3,[r3,#20]
 8236 0226 03F07F03 	 and r3,r3,#127
 8237 022a DAB2     	 uxtb r2,r3
 8238 022c 7B68     	 ldr r3,[r7,#4]
 8239 022e 1A75     	 strb r2,[r3,#20]
 8240              	.L512:
4397:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4398:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4399:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 8241              	 .loc 1 4399 0
 8242 0230 BB68     	 ldr r3,[r7,#8]
 8243 0232 5A78     	 ldrb r2,[r3,#1]
 8244 0234 7B68     	 ldr r3,[r7,#4]
 8245 0236 2C33     	 adds r3,r3,#44
 8246 0238 1046     	 mov r0,r2
 8247 023a 1946     	 mov r1,r3
 8248 023c 7A69     	 ldr r2,[r7,#20]
 8249 023e 0123     	 movs r3,#1
 8250 0240 FFF7FEFF 	 bl disk_read
 8251 0244 0346     	 mov r3,r0
 8252 0246 002B     	 cmp r3,#0
 8253 0248 04D0     	 beq .L514
 8254              	 .loc 1 4399 0 is_stmt 0 discriminator 1
 8255 024a 7B68     	 ldr r3,[r7,#4]
 8256 024c 0122     	 movs r2,#1
 8257 024e 5A75     	 strb r2,[r3,#21]
 8258 0250 0123     	 movs r3,#1
 8259 0252 03E0     	 b .L515
 8260              	.L514:
4400:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4401:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = nsect;
 8261              	 .loc 1 4401 0 is_stmt 1
 8262 0254 7B68     	 ldr r3,[r7,#4]
 8263 0256 7A69     	 ldr r2,[r7,#20]
 8264 0258 1A62     	 str r2,[r3,#32]
 8265              	.L511:
4402:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4403:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4404:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4405:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8266              	 .loc 1 4405 0
 8267 025a FB7F     	 ldrb r3,[r7,#31]
 8268              	.L515:
4406:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8269              	 .loc 1 4406 0 discriminator 1
 8270 025c 1846     	 mov r0,r3
 8271 025e 2037     	 adds r7,r7,#32
 8272              	.LCFI265:
 8273              	 .cfi_def_cfa_offset 8
 8274 0260 BD46     	 mov sp,r7
 8275              	.LCFI266:
 8276              	 .cfi_def_cfa_register 13
 8277              	 
 8278 0262 80BD     	 pop {r7,pc}
 8279              	 .cfi_endproc
 8280              	.LFE49:
 8282              	 .section .text.f_opendir,"ax",%progbits
 8283              	 .align 2
 8284              	 .global f_opendir
 8285              	 .thumb
 8286              	 .thumb_func
 8288              	f_opendir:
 8289              	.LFB50:
4407:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4408:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4409:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4410:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1
4411:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4412:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create a Directory Object                                             */
4413:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4414:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4415:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_opendir (
4416:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4417:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4418:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4419:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8290              	 .loc 1 4419 0
 8291              	 .cfi_startproc
 8292              	 
 8293              	 
 8294 0000 80B5     	 push {r7,lr}
 8295              	.LCFI267:
 8296              	 .cfi_def_cfa_offset 8
 8297              	 .cfi_offset 7,-8
 8298              	 .cfi_offset 14,-4
 8299 0002 84B0     	 sub sp,sp,#16
 8300              	.LCFI268:
 8301              	 .cfi_def_cfa_offset 24
 8302 0004 00AF     	 add r7,sp,#0
 8303              	.LCFI269:
 8304              	 .cfi_def_cfa_register 7
 8305 0006 7860     	 str r0,[r7,#4]
 8306 0008 3960     	 str r1,[r7]
4420:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4421:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4422:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4423:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4424:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4425:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
 8307              	 .loc 1 4425 0
 8308 000a 7B68     	 ldr r3,[r7,#4]
 8309 000c 002B     	 cmp r3,#0
 8310 000e 01D1     	 bne .L517
 8311              	 .loc 1 4425 0 is_stmt 0 discriminator 1
 8312 0010 0923     	 movs r3,#9
 8313 0012 64E0     	 b .L526
 8314              	.L517:
4426:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4427:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4428:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 8315              	 .loc 1 4428 0 is_stmt 1
 8316 0014 3A46     	 mov r2,r7
 8317 0016 07F10803 	 add r3,r7,#8
 8318 001a 1046     	 mov r0,r2
 8319 001c 1946     	 mov r1,r3
 8320 001e 0022     	 movs r2,#0
 8321 0020 FFF7FEFF 	 bl find_volume
 8322 0024 0346     	 mov r3,r0
 8323 0026 FB73     	 strb r3,[r7,#15]
4429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8324              	 .loc 1 4429 0
 8325 0028 FB7B     	 ldrb r3,[r7,#15]
 8326 002a 002B     	 cmp r3,#0
 8327 002c 50D1     	 bne .L519
4430:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs = fs;
 8328              	 .loc 1 4430 0
 8329 002e BA68     	 ldr r2,[r7,#8]
 8330 0030 7B68     	 ldr r3,[r7,#4]
 8331 0032 1A60     	 str r2,[r3]
4431:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4432:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8332              	 .loc 1 4432 0
 8333 0034 3B68     	 ldr r3,[r7]
 8334 0036 7868     	 ldr r0,[r7,#4]
 8335 0038 1946     	 mov r1,r3
 8336 003a FFF7FEFF 	 bl follow_path
 8337 003e 0346     	 mov r3,r0
 8338 0040 FB73     	 strb r3,[r7,#15]
4433:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 8339              	 .loc 1 4433 0
 8340 0042 FB7B     	 ldrb r3,[r7,#15]
 8341 0044 002B     	 cmp r3,#0
 8342 0046 3ED1     	 bne .L520
4434:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8343              	 .loc 1 4434 0
 8344 0048 7B68     	 ldr r3,[r7,#4]
 8345 004a 93F82F30 	 ldrb r3,[r3,#47]
 8346 004e DBB2     	 uxtb r3,r3
 8347 0050 5BB2     	 sxtb r3,r3
 8348 0052 002B     	 cmp r3,#0
 8349 0054 12DB     	 blt .L521
4435:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8350              	 .loc 1 4435 0
 8351 0056 7B68     	 ldr r3,[r7,#4]
 8352 0058 9B79     	 ldrb r3,[r3,#6]
 8353 005a 03F01003 	 and r3,r3,#16
 8354 005e 002B     	 cmp r3,#0
 8355 0060 0AD0     	 beq .L522
4436:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4437:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4438:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
4439:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
4440:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_ofs = dp->blk_ofs;
4441:../Dave/Generated/FATFS/ff_Src/ff.c **** 						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
4442:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4443:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4444:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4445:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8356              	 .loc 1 4445 0
 8357 0062 BA68     	 ldr r2,[r7,#8]
 8358 0064 7B68     	 ldr r3,[r7,#4]
 8359 0066 1B6A     	 ldr r3,[r3,#32]
 8360 0068 1046     	 mov r0,r2
 8361 006a 1946     	 mov r1,r3
 8362 006c FFF7FEFF 	 bl ld_clust
 8363 0070 0246     	 mov r2,r0
 8364 0072 7B68     	 ldr r3,[r7,#4]
 8365 0074 9A60     	 str r2,[r3,#8]
 8366 0076 01E0     	 b .L521
 8367              	.L522:
4446:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4447:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {						/* This object is a file */
4448:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_PATH;
 8368              	 .loc 1 4448 0
 8369 0078 0523     	 movs r3,#5
 8370 007a FB73     	 strb r3,[r7,#15]
 8371              	.L521:
4449:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4450:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4451:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 8372              	 .loc 1 4451 0
 8373 007c FB7B     	 ldrb r3,[r7,#15]
 8374 007e 002B     	 cmp r3,#0
 8375 0080 21D1     	 bne .L520
4452:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.id = fs->id;
 8376              	 .loc 1 4452 0
 8377 0082 BB68     	 ldr r3,[r7,#8]
 8378 0084 DA88     	 ldrh r2,[r3,#6]
 8379 0086 7B68     	 ldr r3,[r7,#4]
 8380 0088 9A80     	 strh r2,[r3,#4]
4453:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8381              	 .loc 1 4453 0
 8382 008a 7868     	 ldr r0,[r7,#4]
 8383 008c 0021     	 movs r1,#0
 8384 008e FFF7FEFF 	 bl dir_sdi
 8385 0092 0346     	 mov r3,r0
 8386 0094 FB73     	 strb r3,[r7,#15]
4454:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4455:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 8387              	 .loc 1 4455 0
 8388 0096 FB7B     	 ldrb r3,[r7,#15]
 8389 0098 002B     	 cmp r3,#0
 8390 009a 14D1     	 bne .L520
4456:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dp->obj.sclust != 0) {
 8391              	 .loc 1 4456 0
 8392 009c 7B68     	 ldr r3,[r7,#4]
 8393 009e 9B68     	 ldr r3,[r3,#8]
 8394 00a0 002B     	 cmp r3,#0
 8395 00a2 0DD0     	 beq .L523
4457:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8396              	 .loc 1 4457 0
 8397 00a4 7868     	 ldr r0,[r7,#4]
 8398 00a6 0021     	 movs r1,#0
 8399 00a8 FFF7FEFF 	 bl inc_lock
 8400 00ac 0246     	 mov r2,r0
 8401 00ae 7B68     	 ldr r3,[r7,#4]
 8402 00b0 1A61     	 str r2,[r3,#16]
4458:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 8403              	 .loc 1 4458 0
 8404 00b2 7B68     	 ldr r3,[r7,#4]
 8405 00b4 1B69     	 ldr r3,[r3,#16]
 8406 00b6 002B     	 cmp r3,#0
 8407 00b8 05D1     	 bne .L520
 8408              	 .loc 1 4458 0 is_stmt 0 discriminator 1
 8409 00ba 1223     	 movs r3,#18
 8410 00bc FB73     	 strb r3,[r7,#15]
 8411 00be 02E0     	 b .L520
 8412              	.L523:
4459:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
4460:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 8413              	 .loc 1 4460 0 is_stmt 1
 8414 00c0 7B68     	 ldr r3,[r7,#4]
 8415 00c2 0022     	 movs r2,#0
 8416 00c4 1A61     	 str r2,[r3,#16]
 8417              	.L520:
4461:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4462:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4463:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4464:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4465:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4466:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4467:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8418              	 .loc 1 4467 0
 8419 00c6 FB7B     	 ldrb r3,[r7,#15]
 8420 00c8 042B     	 cmp r3,#4
 8421 00ca 01D1     	 bne .L519
 8422              	 .loc 1 4467 0 is_stmt 0 discriminator 1
 8423 00cc 0523     	 movs r3,#5
 8424 00ce FB73     	 strb r3,[r7,#15]
 8425              	.L519:
4468:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4469:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8426              	 .loc 1 4469 0 is_stmt 1
 8427 00d0 FB7B     	 ldrb r3,[r7,#15]
 8428 00d2 002B     	 cmp r3,#0
 8429 00d4 02D0     	 beq .L525
 8430              	 .loc 1 4469 0 is_stmt 0 discriminator 1
 8431 00d6 7B68     	 ldr r3,[r7,#4]
 8432 00d8 0022     	 movs r2,#0
 8433 00da 1A60     	 str r2,[r3]
 8434              	.L525:
4470:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4471:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8435              	 .loc 1 4471 0 is_stmt 1
 8436 00dc FB7B     	 ldrb r3,[r7,#15]
 8437              	.L526:
4472:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8438              	 .loc 1 4472 0 discriminator 1
 8439 00de 1846     	 mov r0,r3
 8440 00e0 1037     	 adds r7,r7,#16
 8441              	.LCFI270:
 8442              	 .cfi_def_cfa_offset 8
 8443 00e2 BD46     	 mov sp,r7
 8444              	.LCFI271:
 8445              	 .cfi_def_cfa_register 13
 8446              	 
 8447 00e4 80BD     	 pop {r7,pc}
 8448              	 .cfi_endproc
 8449              	.LFE50:
 8451 00e6 00BF     	 .section .text.f_closedir,"ax",%progbits
 8452              	 .align 2
 8453              	 .global f_closedir
 8454              	 .thumb
 8455              	 .thumb_func
 8457              	f_closedir:
 8458              	.LFB51:
4473:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4474:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4475:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4476:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4477:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4478:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Close Directory                                                       */
4479:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4480:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4481:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_closedir (
4482:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4483:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4484:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8459              	 .loc 1 4484 0
 8460              	 .cfi_startproc
 8461              	 
 8462              	 
 8463 0000 80B5     	 push {r7,lr}
 8464              	.LCFI272:
 8465              	 .cfi_def_cfa_offset 8
 8466              	 .cfi_offset 7,-8
 8467              	 .cfi_offset 14,-4
 8468 0002 84B0     	 sub sp,sp,#16
 8469              	.LCFI273:
 8470              	 .cfi_def_cfa_offset 24
 8471 0004 00AF     	 add r7,sp,#0
 8472              	.LCFI274:
 8473              	 .cfi_def_cfa_register 7
 8474 0006 7860     	 str r0,[r7,#4]
4485:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4486:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4487:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4488:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4489:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8475              	 .loc 1 4489 0
 8476 0008 7A68     	 ldr r2,[r7,#4]
 8477 000a 07F10803 	 add r3,r7,#8
 8478 000e 1046     	 mov r0,r2
 8479 0010 1946     	 mov r1,r3
 8480 0012 FFF7FEFF 	 bl validate
 8481 0016 0346     	 mov r3,r0
 8482 0018 FB73     	 strb r3,[r7,#15]
4490:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8483              	 .loc 1 4490 0
 8484 001a FB7B     	 ldrb r3,[r7,#15]
 8485 001c 002B     	 cmp r3,#0
 8486 001e 10D1     	 bne .L528
4491:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4492:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8487              	 .loc 1 4492 0
 8488 0020 7B68     	 ldr r3,[r7,#4]
 8489 0022 1B69     	 ldr r3,[r3,#16]
 8490 0024 002B     	 cmp r3,#0
 8491 0026 06D0     	 beq .L529
 8492              	 .loc 1 4492 0 is_stmt 0 discriminator 1
 8493 0028 7B68     	 ldr r3,[r7,#4]
 8494 002a 1B69     	 ldr r3,[r3,#16]
 8495 002c 1846     	 mov r0,r3
 8496 002e FFF7FEFF 	 bl dec_lock
 8497 0032 0346     	 mov r3,r0
 8498 0034 FB73     	 strb r3,[r7,#15]
 8499              	.L529:
4493:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 8500              	 .loc 1 4493 0 is_stmt 1
 8501 0036 FB7B     	 ldrb r3,[r7,#15]
 8502 0038 002B     	 cmp r3,#0
 8503 003a 02D1     	 bne .L528
 8504              	 .loc 1 4493 0 is_stmt 0 discriminator 1
 8505 003c 7B68     	 ldr r3,[r7,#4]
 8506 003e 0022     	 movs r2,#0
 8507 0040 1A60     	 str r2,[r3]
 8508              	.L528:
4494:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4495:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs = 0;	/* Invalidate directory object */
4496:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4497:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
4498:../Dave/Generated/FATFS/ff_Src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4499:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4500:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4501:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 8509              	 .loc 1 4501 0 is_stmt 1
 8510 0042 FB7B     	 ldrb r3,[r7,#15]
4502:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8511              	 .loc 1 4502 0
 8512 0044 1846     	 mov r0,r3
 8513 0046 1037     	 adds r7,r7,#16
 8514              	.LCFI275:
 8515              	 .cfi_def_cfa_offset 8
 8516 0048 BD46     	 mov sp,r7
 8517              	.LCFI276:
 8518              	 .cfi_def_cfa_register 13
 8519              	 
 8520 004a 80BD     	 pop {r7,pc}
 8521              	 .cfi_endproc
 8522              	.LFE51:
 8524              	 .section .text.f_readdir,"ax",%progbits
 8525              	 .align 2
 8526              	 .global f_readdir
 8527              	 .thumb
 8528              	 .thumb_func
 8530              	f_readdir:
 8531              	.LFB52:
4503:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4504:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4505:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4506:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4507:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4508:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read Directory Entries in Sequence                                    */
4509:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4510:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4511:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_readdir (
4512:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4513:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4514:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4515:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8532              	 .loc 1 4515 0
 8533              	 .cfi_startproc
 8534              	 
 8535              	 
 8536 0000 80B5     	 push {r7,lr}
 8537              	.LCFI277:
 8538              	 .cfi_def_cfa_offset 8
 8539              	 .cfi_offset 7,-8
 8540              	 .cfi_offset 14,-4
 8541 0002 84B0     	 sub sp,sp,#16
 8542              	.LCFI278:
 8543              	 .cfi_def_cfa_offset 24
 8544 0004 00AF     	 add r7,sp,#0
 8545              	.LCFI279:
 8546              	 .cfi_def_cfa_register 7
 8547 0006 7860     	 str r0,[r7,#4]
 8548 0008 3960     	 str r1,[r7]
4516:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4517:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4518:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4519:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4520:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4521:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8549              	 .loc 1 4521 0
 8550 000a 7A68     	 ldr r2,[r7,#4]
 8551 000c 07F10803 	 add r3,r7,#8
 8552 0010 1046     	 mov r0,r2
 8553 0012 1946     	 mov r1,r3
 8554 0014 FFF7FEFF 	 bl validate
 8555 0018 0346     	 mov r3,r0
 8556 001a FB73     	 strb r3,[r7,#15]
4522:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8557              	 .loc 1 4522 0
 8558 001c FB7B     	 ldrb r3,[r7,#15]
 8559 001e 002B     	 cmp r3,#0
 8560 0020 26D1     	 bne .L532
4523:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!fno) {
 8561              	 .loc 1 4523 0
 8562 0022 3B68     	 ldr r3,[r7]
 8563 0024 002B     	 cmp r3,#0
 8564 0026 06D1     	 bne .L533
4524:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8565              	 .loc 1 4524 0
 8566 0028 7868     	 ldr r0,[r7,#4]
 8567 002a 0021     	 movs r1,#0
 8568 002c FFF7FEFF 	 bl dir_sdi
 8569 0030 0346     	 mov r3,r0
 8570 0032 FB73     	 strb r3,[r7,#15]
 8571 0034 1CE0     	 b .L532
 8572              	.L533:
4525:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
4526:../Dave/Generated/FATFS/ff_Src/ff.c **** 			INIT_NAMBUF(fs);
4527:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = DIR_READ_FILE(dp);		/* Read an item */
 8573              	 .loc 1 4527 0
 8574 0036 7868     	 ldr r0,[r7,#4]
 8575 0038 0021     	 movs r1,#0
 8576 003a FFF7FEFF 	 bl dir_read
 8577 003e 0346     	 mov r3,r0
 8578 0040 FB73     	 strb r3,[r7,#15]
4528:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8579              	 .loc 1 4528 0
 8580 0042 FB7B     	 ldrb r3,[r7,#15]
 8581 0044 042B     	 cmp r3,#4
 8582 0046 01D1     	 bne .L534
 8583              	 .loc 1 4528 0 is_stmt 0 discriminator 1
 8584 0048 0023     	 movs r3,#0
 8585 004a FB73     	 strb r3,[r7,#15]
 8586              	.L534:
4529:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 8587              	 .loc 1 4529 0 is_stmt 1
 8588 004c FB7B     	 ldrb r3,[r7,#15]
 8589 004e 002B     	 cmp r3,#0
 8590 0050 0ED1     	 bne .L532
4530:../Dave/Generated/FATFS/ff_Src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8591              	 .loc 1 4530 0
 8592 0052 7868     	 ldr r0,[r7,#4]
 8593 0054 3968     	 ldr r1,[r7]
 8594 0056 FFF7FEFF 	 bl get_fileinfo
4531:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 8595              	 .loc 1 4531 0
 8596 005a 7868     	 ldr r0,[r7,#4]
 8597 005c 0021     	 movs r1,#0
 8598 005e FFF7FEFF 	 bl dir_next
 8599 0062 0346     	 mov r3,r0
 8600 0064 FB73     	 strb r3,[r7,#15]
4532:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8601              	 .loc 1 4532 0
 8602 0066 FB7B     	 ldrb r3,[r7,#15]
 8603 0068 042B     	 cmp r3,#4
 8604 006a 01D1     	 bne .L532
 8605              	 .loc 1 4532 0 is_stmt 0 discriminator 1
 8606 006c 0023     	 movs r3,#0
 8607 006e FB73     	 strb r3,[r7,#15]
 8608              	.L532:
4533:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4534:../Dave/Generated/FATFS/ff_Src/ff.c **** 			FREE_NAMBUF();
4535:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4536:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4537:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8609              	 .loc 1 4537 0 is_stmt 1
 8610 0070 FB7B     	 ldrb r3,[r7,#15]
4538:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8611              	 .loc 1 4538 0
 8612 0072 1846     	 mov r0,r3
 8613 0074 1037     	 adds r7,r7,#16
 8614              	.LCFI280:
 8615              	 .cfi_def_cfa_offset 8
 8616 0076 BD46     	 mov sp,r7
 8617              	.LCFI281:
 8618              	 .cfi_def_cfa_register 13
 8619              	 
 8620 0078 80BD     	 pop {r7,pc}
 8621              	 .cfi_endproc
 8622              	.LFE52:
 8624 007a 00BF     	 .section .text.f_stat,"ax",%progbits
 8625              	 .align 2
 8626              	 .global f_stat
 8627              	 .thumb
 8628              	 .thumb_func
 8630              	f_stat:
 8631              	.LFB53:
4539:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4540:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4541:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4542:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FIND
4543:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4544:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find Next File                                                        */
4545:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4546:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4547:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_findnext (
4548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4549:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4550:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4551:../Dave/Generated/FATFS/ff_Src/ff.c **** {
4552:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4553:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4554:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4555:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
4556:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4557:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4558:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4559:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_USE_FIND == 2
4560:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4561:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4562:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4563:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
4564:../Dave/Generated/FATFS/ff_Src/ff.c **** }
4565:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4566:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4567:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4568:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4569:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find First File                                                       */
4570:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4571:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4572:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_findfirst (
4573:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4574:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4575:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4576:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4577:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4578:../Dave/Generated/FATFS/ff_Src/ff.c **** {
4579:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4580:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4581:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4582:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4583:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4584:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
4585:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4586:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4587:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
4588:../Dave/Generated/FATFS/ff_Src/ff.c **** }
4589:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4590:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_FIND */
4591:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4592:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4593:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4594:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE == 0
4595:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4596:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get File Status                                                       */
4597:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4598:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4599:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_stat (
4600:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4601:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4602:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4603:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8632              	 .loc 1 4603 0
 8633              	 .cfi_startproc
 8634              	 
 8635              	 
 8636 0000 80B5     	 push {r7,lr}
 8637              	.LCFI282:
 8638              	 .cfi_def_cfa_offset 8
 8639              	 .cfi_offset 7,-8
 8640              	 .cfi_offset 14,-4
 8641 0002 90B0     	 sub sp,sp,#64
 8642              	.LCFI283:
 8643              	 .cfi_def_cfa_offset 72
 8644 0004 00AF     	 add r7,sp,#0
 8645              	.LCFI284:
 8646              	 .cfi_def_cfa_register 7
 8647 0006 7860     	 str r0,[r7,#4]
 8648 0008 3960     	 str r1,[r7]
4604:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4605:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4606:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4607:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4608:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4609:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4610:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &dj.obj.fs, 0);
 8649              	 .loc 1 4610 0
 8650 000a 3A1D     	 adds r2,r7,#4
 8651 000c 07F10C03 	 add r3,r7,#12
 8652 0010 1046     	 mov r0,r2
 8653 0012 1946     	 mov r1,r3
 8654 0014 0022     	 movs r2,#0
 8655 0016 FFF7FEFF 	 bl find_volume
 8656 001a 0346     	 mov r3,r0
 8657 001c 87F83F30 	 strb r3,[r7,#63]
4611:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8658              	 .loc 1 4611 0
 8659 0020 97F83F30 	 ldrb r3,[r7,#63]
 8660 0024 002B     	 cmp r3,#0
 8661 0026 20D1     	 bne .L537
4612:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4613:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8662              	 .loc 1 4613 0
 8663 0028 7B68     	 ldr r3,[r7,#4]
 8664 002a 07F10C02 	 add r2,r7,#12
 8665 002e 1046     	 mov r0,r2
 8666 0030 1946     	 mov r1,r3
 8667 0032 FFF7FEFF 	 bl follow_path
 8668 0036 0346     	 mov r3,r0
 8669 0038 87F83F30 	 strb r3,[r7,#63]
4614:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8670              	 .loc 1 4614 0
 8671 003c 97F83F30 	 ldrb r3,[r7,#63]
 8672 0040 002B     	 cmp r3,#0
 8673 0042 12D1     	 bne .L537
4615:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8674              	 .loc 1 4615 0
 8675 0044 97F83B30 	 ldrb r3,[r7,#59]
 8676 0048 DBB2     	 uxtb r3,r3
 8677 004a 5BB2     	 sxtb r3,r3
 8678 004c 002B     	 cmp r3,#0
 8679 004e 03DA     	 bge .L538
4616:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
 8680              	 .loc 1 4616 0
 8681 0050 0623     	 movs r3,#6
 8682 0052 87F83F30 	 strb r3,[r7,#63]
 8683 0056 08E0     	 b .L537
 8684              	.L538:
4617:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {							/* Found an object */
4618:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 8685              	 .loc 1 4618 0
 8686 0058 3B68     	 ldr r3,[r7]
 8687 005a 002B     	 cmp r3,#0
 8688 005c 05D0     	 beq .L537
 8689              	 .loc 1 4618 0 is_stmt 0 discriminator 1
 8690 005e 07F10C03 	 add r3,r7,#12
 8691 0062 1846     	 mov r0,r3
 8692 0064 3968     	 ldr r1,[r7]
 8693 0066 FFF7FEFF 	 bl get_fileinfo
 8694              	.L537:
4619:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4620:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4621:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4622:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4623:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4624:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
 8695              	 .loc 1 4624 0 is_stmt 1
 8696 006a 97F83F30 	 ldrb r3,[r7,#63]
4625:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8697              	 .loc 1 4625 0
 8698 006e 1846     	 mov r0,r3
 8699 0070 4037     	 adds r7,r7,#64
 8700              	.LCFI285:
 8701              	 .cfi_def_cfa_offset 8
 8702 0072 BD46     	 mov sp,r7
 8703              	.LCFI286:
 8704              	 .cfi_def_cfa_register 13
 8705              	 
 8706 0074 80BD     	 pop {r7,pc}
 8707              	 .cfi_endproc
 8708              	.LFE53:
 8710 0076 00BF     	 .section .text.f_getfree,"ax",%progbits
 8711              	 .align 2
 8712              	 .global f_getfree
 8713              	 .thumb
 8714              	 .thumb_func
 8716              	f_getfree:
 8717              	.LFB54:
4626:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4627:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4628:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4629:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4630:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4631:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get Number of Free Clusters                                           */
4632:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4633:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4634:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getfree (
4635:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
4636:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4637:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
4638:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4639:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8718              	 .loc 1 4639 0
 8719              	 .cfi_startproc
 8720              	 
 8721              	 
 8722 0000 80B5     	 push {r7,lr}
 8723              	.LCFI287:
 8724              	 .cfi_def_cfa_offset 8
 8725              	 .cfi_offset 7,-8
 8726              	 .cfi_offset 14,-4
 8727 0002 90B0     	 sub sp,sp,#64
 8728              	.LCFI288:
 8729              	 .cfi_def_cfa_offset 72
 8730 0004 00AF     	 add r7,sp,#0
 8731              	.LCFI289:
 8732              	 .cfi_def_cfa_register 7
 8733 0006 F860     	 str r0,[r7,#12]
 8734 0008 B960     	 str r1,[r7,#8]
 8735 000a 7A60     	 str r2,[r7,#4]
4640:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4641:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4642:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD nfree, clst, sect, stat;
4643:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
4644:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID obj;
4645:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4646:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4647:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4648:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 8736              	 .loc 1 4648 0
 8737 000c 07F10C02 	 add r2,r7,#12
 8738 0010 07F12403 	 add r3,r7,#36
 8739 0014 1046     	 mov r0,r2
 8740 0016 1946     	 mov r1,r3
 8741 0018 0022     	 movs r2,#0
 8742 001a FFF7FEFF 	 bl find_volume
 8743 001e 0346     	 mov r3,r0
 8744 0020 87F83F30 	 strb r3,[r7,#63]
4649:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8745              	 .loc 1 4649 0
 8746 0024 97F83F30 	 ldrb r3,[r7,#63]
 8747 0028 002B     	 cmp r3,#0
 8748 002a 40F09A80 	 bne .L541
4650:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 8749              	 .loc 1 4650 0
 8750 002e 7A6A     	 ldr r2,[r7,#36]
 8751 0030 7B68     	 ldr r3,[r7,#4]
 8752 0032 1A60     	 str r2,[r3]
4651:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* If free_clst is valid, return it without full FAT scan */
4652:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
 8753              	 .loc 1 4652 0
 8754 0034 7B6A     	 ldr r3,[r7,#36]
 8755 0036 1A69     	 ldr r2,[r3,#16]
 8756 0038 7B6A     	 ldr r3,[r7,#36]
 8757 003a 9B69     	 ldr r3,[r3,#24]
 8758 003c 023B     	 subs r3,r3,#2
 8759 003e 9A42     	 cmp r2,r3
 8760 0040 04D8     	 bhi .L542
4653:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*nclst = fs->free_clst;
 8761              	 .loc 1 4653 0
 8762 0042 7B6A     	 ldr r3,[r7,#36]
 8763 0044 1A69     	 ldr r2,[r3,#16]
 8764 0046 BB68     	 ldr r3,[r7,#8]
 8765 0048 1A60     	 str r2,[r3]
 8766 004a 8AE0     	 b .L541
 8767              	.L542:
4654:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
4655:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Scan FAT to obtain number of free clusters */
4656:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nfree = 0;
 8768              	 .loc 1 4656 0
 8769 004c 0023     	 movs r3,#0
 8770 004e BB63     	 str r3,[r7,#56]
4657:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8771              	 .loc 1 4657 0
 8772 0050 7B6A     	 ldr r3,[r7,#36]
 8773 0052 1B78     	 ldrb r3,[r3]
 8774 0054 012B     	 cmp r3,#1
 8775 0056 29D1     	 bne .L543
4658:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = 2; obj.fs = fs;
 8776              	 .loc 1 4658 0
 8777 0058 0223     	 movs r3,#2
 8778 005a 7B63     	 str r3,[r7,#52]
 8779 005c 7B6A     	 ldr r3,[r7,#36]
 8780 005e 3B61     	 str r3,[r7,#16]
 8781              	.L548:
4659:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {
4660:../Dave/Generated/FATFS/ff_Src/ff.c **** 					stat = get_fat(&obj, clst);
 8782              	 .loc 1 4660 0
 8783 0060 07F11003 	 add r3,r7,#16
 8784 0064 1846     	 mov r0,r3
 8785 0066 796B     	 ldr r1,[r7,#52]
 8786 0068 FFF7FEFF 	 bl get_fat
 8787 006c B862     	 str r0,[r7,#40]
4661:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8788              	 .loc 1 4661 0
 8789 006e BB6A     	 ldr r3,[r7,#40]
 8790 0070 B3F1FF3F 	 cmp r3,#-1
 8791 0074 03D1     	 bne .L544
 8792              	 .loc 1 4661 0 is_stmt 0 discriminator 1
 8793 0076 0123     	 movs r3,#1
 8794 0078 87F83F30 	 strb r3,[r7,#63]
 8795 007c 15E0     	 b .L545
 8796              	.L544:
4662:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8797              	 .loc 1 4662 0 is_stmt 1
 8798 007e BB6A     	 ldr r3,[r7,#40]
 8799 0080 012B     	 cmp r3,#1
 8800 0082 03D1     	 bne .L546
 8801              	 .loc 1 4662 0 is_stmt 0 discriminator 1
 8802 0084 0223     	 movs r3,#2
 8803 0086 87F83F30 	 strb r3,[r7,#63]
 8804 008a 0EE0     	 b .L545
 8805              	.L546:
4663:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 0) nfree++;
 8806              	 .loc 1 4663 0 is_stmt 1
 8807 008c BB6A     	 ldr r3,[r7,#40]
 8808 008e 002B     	 cmp r3,#0
 8809 0090 02D1     	 bne .L547
 8810              	 .loc 1 4663 0 is_stmt 0 discriminator 1
 8811 0092 BB6B     	 ldr r3,[r7,#56]
 8812 0094 0133     	 adds r3,r3,#1
 8813 0096 BB63     	 str r3,[r7,#56]
 8814              	.L547:
4664:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (++clst < fs->n_fatent);
 8815              	 .loc 1 4664 0 is_stmt 1
 8816 0098 7B6B     	 ldr r3,[r7,#52]
 8817 009a 0133     	 adds r3,r3,#1
 8818 009c 7B63     	 str r3,[r7,#52]
 8819 009e 7B6A     	 ldr r3,[r7,#36]
 8820 00a0 9B69     	 ldr r3,[r3,#24]
 8821 00a2 7A6B     	 ldr r2,[r7,#52]
 8822 00a4 9A42     	 cmp r2,r3
 8823 00a6 DBD3     	 bcc .L548
 8824 00a8 4EE0     	 b .L549
 8825              	.L545:
 8826 00aa 4DE0     	 b .L549
 8827              	.L543:
4665:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4666:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4667:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
4668:../Dave/Generated/FATFS/ff_Src/ff.c **** 					BYTE bm;
4669:../Dave/Generated/FATFS/ff_Src/ff.c **** 					UINT b;
4670:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4671:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fs->n_fatent - 2;	/* Number of clusters */
4672:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sect = fs->bitbase;			/* Bitmap sector */
4673:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i = 0;						/* Offset in the sector */
4674:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {	/* Counts numbuer of bits with zero in the bitmap */
4675:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (i == 0) {
4676:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, sect++);
4677:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res != FR_OK) break;
4678:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4679:../Dave/Generated/FATFS/ff_Src/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4680:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (!(bm & 1)) nfree++;
4681:../Dave/Generated/FATFS/ff_Src/ff.c **** 							bm >>= 1;
4682:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4683:../Dave/Generated/FATFS/ff_Src/ff.c **** 						i = (i + 1) % SS(fs);
4684:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (clst);
4685:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4686:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4687:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
4688:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fs->n_fatent;	/* Number of entries */
 8828              	 .loc 1 4688 0
 8829 00ac 7B6A     	 ldr r3,[r7,#36]
 8830 00ae 9B69     	 ldr r3,[r3,#24]
 8831 00b0 7B63     	 str r3,[r7,#52]
4689:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sect = fs->fatbase;		/* Top of the FAT */
 8832              	 .loc 1 4689 0
 8833 00b2 7B6A     	 ldr r3,[r7,#36]
 8834 00b4 5B6A     	 ldr r3,[r3,#36]
 8835 00b6 3B63     	 str r3,[r7,#48]
4690:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i = 0;					/* Offset in the sector */
 8836              	 .loc 1 4690 0
 8837 00b8 0023     	 movs r3,#0
 8838 00ba FB62     	 str r3,[r7,#44]
 8839              	.L555:
4691:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {	/* Counts numbuer of entries with zero in the FAT */
4692:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (i == 0) {
 8840              	 .loc 1 4692 0
 8841 00bc FB6A     	 ldr r3,[r7,#44]
 8842 00be 002B     	 cmp r3,#0
 8843 00c0 0FD1     	 bne .L550
4693:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, sect++);
 8844              	 .loc 1 4693 0
 8845 00c2 796A     	 ldr r1,[r7,#36]
 8846 00c4 3B6B     	 ldr r3,[r7,#48]
 8847 00c6 5A1C     	 adds r2,r3,#1
 8848 00c8 3A63     	 str r2,[r7,#48]
 8849 00ca 0846     	 mov r0,r1
 8850 00cc 1946     	 mov r1,r3
 8851 00ce FFF7FEFF 	 bl move_window
 8852 00d2 0346     	 mov r3,r0
 8853 00d4 87F83F30 	 strb r3,[r7,#63]
4694:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res != FR_OK) break;
 8854              	 .loc 1 4694 0
 8855 00d8 97F83F30 	 ldrb r3,[r7,#63]
 8856 00dc 002B     	 cmp r3,#0
 8857 00de 00D0     	 beq .L550
 8858 00e0 32E0     	 b .L549
 8859              	.L550:
4695:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4696:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (fs->fs_type == FS_FAT16) {
 8860              	 .loc 1 4696 0
 8861 00e2 7B6A     	 ldr r3,[r7,#36]
 8862 00e4 1B78     	 ldrb r3,[r3]
 8863 00e6 022B     	 cmp r3,#2
 8864 00e8 11D1     	 bne .L551
4697:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (ld_word(fs->win + i) == 0) nfree++;
 8865              	 .loc 1 4697 0
 8866 00ea 7A6A     	 ldr r2,[r7,#36]
 8867 00ec FB6A     	 ldr r3,[r7,#44]
 8868 00ee 3033     	 adds r3,r3,#48
 8869 00f0 1344     	 add r3,r3,r2
 8870 00f2 0433     	 adds r3,r3,#4
 8871 00f4 1846     	 mov r0,r3
 8872 00f6 FFF7FEFF 	 bl ld_word
 8873 00fa 0346     	 mov r3,r0
 8874 00fc 002B     	 cmp r3,#0
 8875 00fe 02D1     	 bne .L552
 8876              	 .loc 1 4697 0 is_stmt 0 discriminator 1
 8877 0100 BB6B     	 ldr r3,[r7,#56]
 8878 0102 0133     	 adds r3,r3,#1
 8879 0104 BB63     	 str r3,[r7,#56]
 8880              	.L552:
4698:../Dave/Generated/FATFS/ff_Src/ff.c **** 							i += 2;
 8881              	 .loc 1 4698 0 is_stmt 1
 8882 0106 FB6A     	 ldr r3,[r7,#44]
 8883 0108 0233     	 adds r3,r3,#2
 8884 010a FB62     	 str r3,[r7,#44]
 8885 010c 12E0     	 b .L553
 8886              	.L551:
4699:../Dave/Generated/FATFS/ff_Src/ff.c **** 						} else {
4700:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8887              	 .loc 1 4700 0
 8888 010e 7A6A     	 ldr r2,[r7,#36]
 8889 0110 FB6A     	 ldr r3,[r7,#44]
 8890 0112 3033     	 adds r3,r3,#48
 8891 0114 1344     	 add r3,r3,r2
 8892 0116 0433     	 adds r3,r3,#4
 8893 0118 1846     	 mov r0,r3
 8894 011a FFF7FEFF 	 bl ld_dword
 8895 011e 0346     	 mov r3,r0
 8896 0120 23F07043 	 bic r3,r3,#-268435456
 8897 0124 002B     	 cmp r3,#0
 8898 0126 02D1     	 bne .L554
 8899              	 .loc 1 4700 0 is_stmt 0 discriminator 1
 8900 0128 BB6B     	 ldr r3,[r7,#56]
 8901 012a 0133     	 adds r3,r3,#1
 8902 012c BB63     	 str r3,[r7,#56]
 8903              	.L554:
4701:../Dave/Generated/FATFS/ff_Src/ff.c **** 							i += 4;
 8904              	 .loc 1 4701 0 is_stmt 1
 8905 012e FB6A     	 ldr r3,[r7,#44]
 8906 0130 0433     	 adds r3,r3,#4
 8907 0132 FB62     	 str r3,[r7,#44]
 8908              	.L553:
4702:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4703:../Dave/Generated/FATFS/ff_Src/ff.c **** 						i %= SS(fs);
 8909              	 .loc 1 4703 0
 8910 0134 FB6A     	 ldr r3,[r7,#44]
 8911 0136 C3F30803 	 ubfx r3,r3,#0,#9
 8912 013a FB62     	 str r3,[r7,#44]
4704:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (--clst);
 8913              	 .loc 1 4704 0
 8914 013c 7B6B     	 ldr r3,[r7,#52]
 8915 013e 013B     	 subs r3,r3,#1
 8916 0140 7B63     	 str r3,[r7,#52]
 8917 0142 7B6B     	 ldr r3,[r7,#52]
 8918 0144 002B     	 cmp r3,#0
 8919 0146 B9D1     	 bne .L555
 8920              	.L549:
4705:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4706:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4707:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
 8921              	 .loc 1 4707 0
 8922 0148 BB68     	 ldr r3,[r7,#8]
 8923 014a BA6B     	 ldr r2,[r7,#56]
 8924 014c 1A60     	 str r2,[r3]
4708:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 8925              	 .loc 1 4708 0
 8926 014e 7B6A     	 ldr r3,[r7,#36]
 8927 0150 BA6B     	 ldr r2,[r7,#56]
 8928 0152 1A61     	 str r2,[r3,#16]
4709:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8929              	 .loc 1 4709 0
 8930 0154 7B6A     	 ldr r3,[r7,#36]
 8931 0156 7A6A     	 ldr r2,[r7,#36]
 8932 0158 1279     	 ldrb r2,[r2,#4]
 8933 015a 42F00102 	 orr r2,r2,#1
 8934 015e D2B2     	 uxtb r2,r2
 8935 0160 1A71     	 strb r2,[r3,#4]
 8936              	.L541:
4710:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4711:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4712:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4713:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8937              	 .loc 1 4713 0
 8938 0162 97F83F30 	 ldrb r3,[r7,#63]
4714:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8939              	 .loc 1 4714 0
 8940 0166 1846     	 mov r0,r3
 8941 0168 4037     	 adds r7,r7,#64
 8942              	.LCFI290:
 8943              	 .cfi_def_cfa_offset 8
 8944 016a BD46     	 mov sp,r7
 8945              	.LCFI291:
 8946              	 .cfi_def_cfa_register 13
 8947              	 
 8948 016c 80BD     	 pop {r7,pc}
 8949              	 .cfi_endproc
 8950              	.LFE54:
 8952 016e 00BF     	 .section .text.f_truncate,"ax",%progbits
 8953              	 .align 2
 8954              	 .global f_truncate
 8955              	 .thumb
 8956              	 .thumb_func
 8958              	f_truncate:
 8959              	.LFB55:
4715:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4716:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4717:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4718:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4719:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4720:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Truncate File                                                         */
4721:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4722:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4723:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_truncate (
4724:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4725:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4726:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8960              	 .loc 1 4726 0
 8961              	 .cfi_startproc
 8962              	 
 8963              	 
 8964 0000 80B5     	 push {r7,lr}
 8965              	.LCFI292:
 8966              	 .cfi_def_cfa_offset 8
 8967              	 .cfi_offset 7,-8
 8968              	 .cfi_offset 14,-4
 8969 0002 86B0     	 sub sp,sp,#24
 8970              	.LCFI293:
 8971              	 .cfi_def_cfa_offset 32
 8972 0004 00AF     	 add r7,sp,#0
 8973              	.LCFI294:
 8974              	 .cfi_def_cfa_register 7
 8975 0006 7860     	 str r0,[r7,#4]
4727:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4728:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4729:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl;
4730:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4731:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4732:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8976              	 .loc 1 4732 0
 8977 0008 7A68     	 ldr r2,[r7,#4]
 8978 000a 07F10C03 	 add r3,r7,#12
 8979 000e 1046     	 mov r0,r2
 8980 0010 1946     	 mov r1,r3
 8981 0012 FFF7FEFF 	 bl validate
 8982 0016 0346     	 mov r3,r0
 8983 0018 FB75     	 strb r3,[r7,#23]
4733:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 8984              	 .loc 1 4733 0
 8985 001a FB7D     	 ldrb r3,[r7,#23]
 8986 001c 002B     	 cmp r3,#0
 8987 001e 05D1     	 bne .L558
 8988              	 .loc 1 4733 0 is_stmt 0 discriminator 2
 8989 0020 7B68     	 ldr r3,[r7,#4]
 8990 0022 5B7D     	 ldrb r3,[r3,#21]
 8991 0024 FB75     	 strb r3,[r7,#23]
 8992 0026 FB7D     	 ldrb r3,[r7,#23]
 8993 0028 002B     	 cmp r3,#0
 8994 002a 01D0     	 beq .L559
 8995              	.L558:
 8996              	 .loc 1 4733 0 discriminator 3
 8997 002c FB7D     	 ldrb r3,[r7,#23]
 8998 002e 7DE0     	 b .L569
 8999              	.L559:
4734:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 9000              	 .loc 1 4734 0 is_stmt 1
 9001 0030 7B68     	 ldr r3,[r7,#4]
 9002 0032 1B7D     	 ldrb r3,[r3,#20]
 9003 0034 03F00203 	 and r3,r3,#2
 9004 0038 002B     	 cmp r3,#0
 9005 003a 01D1     	 bne .L561
 9006              	 .loc 1 4734 0 is_stmt 0 discriminator 1
 9007 003c 0723     	 movs r3,#7
 9008 003e 75E0     	 b .L569
 9009              	.L561:
4735:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 9010              	 .loc 1 4736 0 is_stmt 1
 9011 0040 7B68     	 ldr r3,[r7,#4]
 9012 0042 9A69     	 ldr r2,[r3,#24]
 9013 0044 7B68     	 ldr r3,[r7,#4]
 9014 0046 DB68     	 ldr r3,[r3,#12]
 9015 0048 9A42     	 cmp r2,r3
 9016 004a 6ED2     	 bcs .L562
4737:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 9017              	 .loc 1 4737 0
 9018 004c 7B68     	 ldr r3,[r7,#4]
 9019 004e 9B69     	 ldr r3,[r3,#24]
 9020 0050 002B     	 cmp r3,#0
 9021 0052 0DD1     	 bne .L563
4738:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 9022              	 .loc 1 4738 0
 9023 0054 7A68     	 ldr r2,[r7,#4]
 9024 0056 7B68     	 ldr r3,[r7,#4]
 9025 0058 9B68     	 ldr r3,[r3,#8]
 9026 005a 1046     	 mov r0,r2
 9027 005c 1946     	 mov r1,r3
 9028 005e 0022     	 movs r2,#0
 9029 0060 FFF7FEFF 	 bl remove_chain
 9030 0064 0346     	 mov r3,r0
 9031 0066 FB75     	 strb r3,[r7,#23]
4739:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.sclust = 0;
 9032              	 .loc 1 4739 0
 9033 0068 7B68     	 ldr r3,[r7,#4]
 9034 006a 0022     	 movs r2,#0
 9035 006c 9A60     	 str r2,[r3,#8]
 9036 006e 26E0     	 b .L564
 9037              	.L563:
4740:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4741:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
 9038              	 .loc 1 4741 0
 9039 0070 7A68     	 ldr r2,[r7,#4]
 9040 0072 7B68     	 ldr r3,[r7,#4]
 9041 0074 DB69     	 ldr r3,[r3,#28]
 9042 0076 1046     	 mov r0,r2
 9043 0078 1946     	 mov r1,r3
 9044 007a FFF7FEFF 	 bl get_fat
 9045 007e 3861     	 str r0,[r7,#16]
4742:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 9046              	 .loc 1 4742 0
 9047 0080 0023     	 movs r3,#0
 9048 0082 FB75     	 strb r3,[r7,#23]
4743:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9049              	 .loc 1 4743 0
 9050 0084 3B69     	 ldr r3,[r7,#16]
 9051 0086 B3F1FF3F 	 cmp r3,#-1
 9052 008a 01D1     	 bne .L565
 9053              	 .loc 1 4743 0 is_stmt 0 discriminator 1
 9054 008c 0123     	 movs r3,#1
 9055 008e FB75     	 strb r3,[r7,#23]
 9056              	.L565:
4744:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 9057              	 .loc 1 4744 0 is_stmt 1
 9058 0090 3B69     	 ldr r3,[r7,#16]
 9059 0092 012B     	 cmp r3,#1
 9060 0094 01D1     	 bne .L566
 9061              	 .loc 1 4744 0 is_stmt 0 discriminator 1
 9062 0096 0223     	 movs r3,#2
 9063 0098 FB75     	 strb r3,[r7,#23]
 9064              	.L566:
4745:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9065              	 .loc 1 4745 0 is_stmt 1
 9066 009a FB7D     	 ldrb r3,[r7,#23]
 9067 009c 002B     	 cmp r3,#0
 9068 009e 0ED1     	 bne .L564
 9069              	 .loc 1 4745 0 is_stmt 0 discriminator 1
 9070 00a0 FB68     	 ldr r3,[r7,#12]
 9071 00a2 9A69     	 ldr r2,[r3,#24]
 9072 00a4 3B69     	 ldr r3,[r7,#16]
 9073 00a6 9A42     	 cmp r2,r3
 9074 00a8 09D9     	 bls .L564
4746:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9075              	 .loc 1 4746 0 is_stmt 1
 9076 00aa 7A68     	 ldr r2,[r7,#4]
 9077 00ac 7B68     	 ldr r3,[r7,#4]
 9078 00ae DB69     	 ldr r3,[r3,#28]
 9079 00b0 1046     	 mov r0,r2
 9080 00b2 3969     	 ldr r1,[r7,#16]
 9081 00b4 1A46     	 mov r2,r3
 9082 00b6 FFF7FEFF 	 bl remove_chain
 9083 00ba 0346     	 mov r3,r0
 9084 00bc FB75     	 strb r3,[r7,#23]
 9085              	.L564:
4747:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4748:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4749:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 9086              	 .loc 1 4749 0
 9087 00be 7B68     	 ldr r3,[r7,#4]
 9088 00c0 9A69     	 ldr r2,[r3,#24]
 9089 00c2 7B68     	 ldr r3,[r7,#4]
 9090 00c4 DA60     	 str r2,[r3,#12]
4750:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->flag |= FA_MODIFIED;
 9091              	 .loc 1 4750 0
 9092 00c6 7B68     	 ldr r3,[r7,#4]
 9093 00c8 1B7D     	 ldrb r3,[r3,#20]
 9094 00ca 43F04003 	 orr r3,r3,#64
 9095 00ce DAB2     	 uxtb r2,r3
 9096 00d0 7B68     	 ldr r3,[r7,#4]
 9097 00d2 1A75     	 strb r2,[r3,#20]
4751:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4752:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 9098              	 .loc 1 4752 0
 9099 00d4 FB7D     	 ldrb r3,[r7,#23]
 9100 00d6 002B     	 cmp r3,#0
 9101 00d8 1FD1     	 bne .L567
 9102              	 .loc 1 4752 0 is_stmt 0 discriminator 1
 9103 00da 7B68     	 ldr r3,[r7,#4]
 9104 00dc 1B7D     	 ldrb r3,[r3,#20]
 9105 00de DBB2     	 uxtb r3,r3
 9106 00e0 5BB2     	 sxtb r3,r3
 9107 00e2 002B     	 cmp r3,#0
 9108 00e4 19DA     	 bge .L567
4753:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 9109              	 .loc 1 4753 0 is_stmt 1
 9110 00e6 FB68     	 ldr r3,[r7,#12]
 9111 00e8 5978     	 ldrb r1,[r3,#1]
 9112 00ea 7B68     	 ldr r3,[r7,#4]
 9113 00ec 03F12C02 	 add r2,r3,#44
 9114 00f0 7B68     	 ldr r3,[r7,#4]
 9115 00f2 1B6A     	 ldr r3,[r3,#32]
 9116 00f4 0846     	 mov r0,r1
 9117 00f6 1146     	 mov r1,r2
 9118 00f8 1A46     	 mov r2,r3
 9119 00fa 0123     	 movs r3,#1
 9120 00fc FFF7FEFF 	 bl disk_write
 9121 0100 0346     	 mov r3,r0
 9122 0102 002B     	 cmp r3,#0
 9123 0104 02D0     	 beq .L568
4754:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_DISK_ERR;
 9124              	 .loc 1 4754 0
 9125 0106 0123     	 movs r3,#1
 9126 0108 FB75     	 strb r3,[r7,#23]
 9127 010a 06E0     	 b .L567
 9128              	.L568:
4755:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4756:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 9129              	 .loc 1 4756 0
 9130 010c 7B68     	 ldr r3,[r7,#4]
 9131 010e 1B7D     	 ldrb r3,[r3,#20]
 9132 0110 03F07F03 	 and r3,r3,#127
 9133 0114 DAB2     	 uxtb r2,r3
 9134 0116 7B68     	 ldr r3,[r7,#4]
 9135 0118 1A75     	 strb r2,[r3,#20]
 9136              	.L567:
4757:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4758:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4759:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4760:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
 9137              	 .loc 1 4760 0
 9138 011a FB7D     	 ldrb r3,[r7,#23]
 9139 011c 002B     	 cmp r3,#0
 9140 011e 04D0     	 beq .L562
 9141              	 .loc 1 4760 0 is_stmt 0 discriminator 1
 9142 0120 7B68     	 ldr r3,[r7,#4]
 9143 0122 FA7D     	 ldrb r2,[r7,#23]
 9144 0124 5A75     	 strb r2,[r3,#21]
 9145 0126 FB7D     	 ldrb r3,[r7,#23]
 9146 0128 00E0     	 b .L569
 9147              	.L562:
4761:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4762:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4763:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9148              	 .loc 1 4763 0 is_stmt 1
 9149 012a FB7D     	 ldrb r3,[r7,#23]
 9150              	.L569:
4764:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9151              	 .loc 1 4764 0 discriminator 1
 9152 012c 1846     	 mov r0,r3
 9153 012e 1837     	 adds r7,r7,#24
 9154              	.LCFI295:
 9155              	 .cfi_def_cfa_offset 8
 9156 0130 BD46     	 mov sp,r7
 9157              	.LCFI296:
 9158              	 .cfi_def_cfa_register 13
 9159              	 
 9160 0132 80BD     	 pop {r7,pc}
 9161              	 .cfi_endproc
 9162              	.LFE55:
 9164              	 .section .text.f_unlink,"ax",%progbits
 9165              	 .align 2
 9166              	 .global f_unlink
 9167              	 .thumb
 9168              	 .thumb_func
 9170              	f_unlink:
 9171              	.LFB56:
4765:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4766:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4767:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4768:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4769:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4770:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Delete a File/Directory                                               */
4771:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4772:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4773:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_unlink (
4774:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4775:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4776:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9172              	 .loc 1 4776 0
 9173              	 .cfi_startproc
 9174              	 
 9175              	 
 9176 0000 80B5     	 push {r7,lr}
 9177              	.LCFI297:
 9178              	 .cfi_def_cfa_offset 8
 9179              	 .cfi_offset 7,-8
 9180              	 .cfi_offset 14,-4
 9181 0002 9EB0     	 sub sp,sp,#120
 9182              	.LCFI298:
 9183              	 .cfi_def_cfa_offset 128
 9184 0004 00AF     	 add r7,sp,#0
 9185              	.LCFI299:
 9186              	 .cfi_def_cfa_register 7
 9187 0006 7860     	 str r0,[r7,#4]
4777:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4778:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj, sdj;
4779:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dclst = 0;
 9188              	 .loc 1 4779 0
 9189 0008 0023     	 movs r3,#0
 9190 000a 3B67     	 str r3,[r7,#112]
4780:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4781:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4782:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID obj;
4783:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4784:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4785:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4786:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4787:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4788:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
 9191              	 .loc 1 4788 0
 9192 000c 3A1D     	 adds r2,r7,#4
 9193 000e 07F10C03 	 add r3,r7,#12
 9194 0012 1046     	 mov r0,r2
 9195 0014 1946     	 mov r1,r3
 9196 0016 0222     	 movs r2,#2
 9197 0018 FFF7FEFF 	 bl find_volume
 9198 001c 0346     	 mov r3,r0
 9199 001e 87F87730 	 strb r3,[r7,#119]
4789:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9200              	 .loc 1 4789 0
 9201 0022 97F87730 	 ldrb r3,[r7,#119]
 9202 0026 002B     	 cmp r3,#0
 9203 0028 40F0A780 	 bne .L571
4790:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 9204              	 .loc 1 4790 0
 9205 002c FB68     	 ldr r3,[r7,#12]
 9206 002e 3B64     	 str r3,[r7,#64]
4791:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4792:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9207              	 .loc 1 4792 0
 9208 0030 7B68     	 ldr r3,[r7,#4]
 9209 0032 07F14002 	 add r2,r7,#64
 9210 0036 1046     	 mov r0,r2
 9211 0038 1946     	 mov r1,r3
 9212 003a FFF7FEFF 	 bl follow_path
 9213 003e 0346     	 mov r3,r0
 9214 0040 87F87730 	 strb r3,[r7,#119]
4793:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 9215              	 .loc 1 4793 0
 9216 0044 97F87730 	 ldrb r3,[r7,#119]
 9217 0048 002B     	 cmp r3,#0
 9218 004a 08D1     	 bne .L572
 9219              	 .loc 1 4793 0 is_stmt 0 discriminator 1
 9220 004c 97F86F30 	 ldrb r3,[r7,#111]
 9221 0050 03F02003 	 and r3,r3,#32
 9222 0054 002B     	 cmp r3,#0
 9223 0056 02D0     	 beq .L572
4794:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 9224              	 .loc 1 4794 0 is_stmt 1
 9225 0058 0623     	 movs r3,#6
 9226 005a 87F87730 	 strb r3,[r7,#119]
 9227              	.L572:
4795:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4796:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4797:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 9228              	 .loc 1 4797 0
 9229 005e 97F87730 	 ldrb r3,[r7,#119]
 9230 0062 002B     	 cmp r3,#0
 9231 0064 08D1     	 bne .L573
 9232              	 .loc 1 4797 0 is_stmt 0 discriminator 1
 9233 0066 07F14003 	 add r3,r7,#64
 9234 006a 1846     	 mov r0,r3
 9235 006c 0221     	 movs r1,#2
 9236 006e FFF7FEFF 	 bl chk_lock
 9237 0072 0346     	 mov r3,r0
 9238 0074 87F87730 	 strb r3,[r7,#119]
 9239              	.L573:
4798:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4799:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 9240              	 .loc 1 4799 0 is_stmt 1
 9241 0078 97F87730 	 ldrb r3,[r7,#119]
 9242 007c 002B     	 cmp r3,#0
 9243 007e 7CD1     	 bne .L571
4800:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 9244              	 .loc 1 4800 0
 9245 0080 97F86F30 	 ldrb r3,[r7,#111]
 9246 0084 DBB2     	 uxtb r3,r3
 9247 0086 5BB2     	 sxtb r3,r3
 9248 0088 002B     	 cmp r3,#0
 9249 008a 03DA     	 bge .L574
4801:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 9250              	 .loc 1 4801 0
 9251 008c 0623     	 movs r3,#6
 9252 008e 87F87730 	 strb r3,[r7,#119]
 9253 0092 08E0     	 b .L575
 9254              	.L574:
4802:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4803:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_RDO) {
 9255              	 .loc 1 4803 0
 9256 0094 97F84630 	 ldrb r3,[r7,#70]
 9257 0098 03F00103 	 and r3,r3,#1
 9258 009c 002B     	 cmp r3,#0
 9259 009e 02D0     	 beq .L575
4804:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9260              	 .loc 1 4804 0
 9261 00a0 0723     	 movs r3,#7
 9262 00a2 87F87730 	 strb r3,[r7,#119]
 9263              	.L575:
4805:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4806:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4807:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9264              	 .loc 1 4807 0
 9265 00a6 97F87730 	 ldrb r3,[r7,#119]
 9266 00aa 002B     	 cmp r3,#0
 9267 00ac 3DD1     	 bne .L576
4808:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4809:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj.fs = fs;
4810:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4811:../Dave/Generated/FATFS/ff_Src/ff.c **** 					init_alloc_info(fs, &obj);
4812:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dclst = obj.sclust;
4813:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4814:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4815:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
4816:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dclst = ld_clust(fs, dj.dir);
 9268              	 .loc 1 4816 0
 9269 00ae FA68     	 ldr r2,[r7,#12]
 9270 00b0 3B6E     	 ldr r3,[r7,#96]
 9271 00b2 1046     	 mov r0,r2
 9272 00b4 1946     	 mov r1,r3
 9273 00b6 FFF7FEFF 	 bl ld_clust
 9274 00ba 3867     	 str r0,[r7,#112]
4817:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4818:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 9275              	 .loc 1 4818 0
 9276 00bc 97F84630 	 ldrb r3,[r7,#70]
 9277 00c0 03F01003 	 and r3,r3,#16
 9278 00c4 002B     	 cmp r3,#0
 9279 00c6 30D0     	 beq .L576
4819:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
4820:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
 9280              	 .loc 1 4820 0
 9281 00c8 FB68     	 ldr r3,[r7,#12]
 9282 00ca 5A69     	 ldr r2,[r3,#20]
 9283 00cc 3B6F     	 ldr r3,[r7,#112]
 9284 00ce 9A42     	 cmp r2,r3
 9285 00d0 03D1     	 bne .L577
4821:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_DENIED;
 9286              	 .loc 1 4821 0
 9287 00d2 0723     	 movs r3,#7
 9288 00d4 87F87730 	 strb r3,[r7,#119]
 9289 00d8 27E0     	 b .L576
 9290              	.L577:
4822:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4823:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4824:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4825:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sdj.obj.fs = fs;				/* Open the sub-directory */
 9291              	 .loc 1 4825 0
 9292 00da FB68     	 ldr r3,[r7,#12]
 9293 00dc 3B61     	 str r3,[r7,#16]
4826:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sdj.obj.sclust = dclst;
 9294              	 .loc 1 4826 0
 9295 00de 3B6F     	 ldr r3,[r7,#112]
 9296 00e0 BB61     	 str r3,[r7,#24]
4827:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4828:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4829:../Dave/Generated/FATFS/ff_Src/ff.c **** 							sdj.obj.objsize = obj.objsize;
4830:../Dave/Generated/FATFS/ff_Src/ff.c **** 							sdj.obj.stat = obj.stat;
4831:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4832:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4833:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = dir_sdi(&sdj, 0);
 9297              	 .loc 1 4833 0
 9298 00e2 07F11003 	 add r3,r7,#16
 9299 00e6 1846     	 mov r0,r3
 9300 00e8 0021     	 movs r1,#0
 9301 00ea FFF7FEFF 	 bl dir_sdi
 9302 00ee 0346     	 mov r3,r0
 9303 00f0 87F87730 	 strb r3,[r7,#119]
4834:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
 9304              	 .loc 1 4834 0
 9305 00f4 97F87730 	 ldrb r3,[r7,#119]
 9306 00f8 002B     	 cmp r3,#0
 9307 00fa 16D1     	 bne .L576
4835:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 9308              	 .loc 1 4835 0
 9309 00fc 07F11003 	 add r3,r7,#16
 9310 0100 1846     	 mov r0,r3
 9311 0102 0021     	 movs r1,#0
 9312 0104 FFF7FEFF 	 bl dir_read
 9313 0108 0346     	 mov r3,r0
 9314 010a 87F87730 	 strb r3,[r7,#119]
4836:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 9315              	 .loc 1 4836 0
 9316 010e 97F87730 	 ldrb r3,[r7,#119]
 9317 0112 002B     	 cmp r3,#0
 9318 0114 02D1     	 bne .L578
 9319              	 .loc 1 4836 0 is_stmt 0 discriminator 1
 9320 0116 0723     	 movs r3,#7
 9321 0118 87F87730 	 strb r3,[r7,#119]
 9322              	.L578:
4837:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9323              	 .loc 1 4837 0 is_stmt 1
 9324 011c 97F87730 	 ldrb r3,[r7,#119]
 9325 0120 042B     	 cmp r3,#4
 9326 0122 02D1     	 bne .L576
 9327              	 .loc 1 4837 0 is_stmt 0 discriminator 1
 9328 0124 0023     	 movs r3,#0
 9329 0126 87F87730 	 strb r3,[r7,#119]
 9330              	.L576:
4838:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4839:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4840:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4841:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4842:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9331              	 .loc 1 4842 0 is_stmt 1
 9332 012a 97F87730 	 ldrb r3,[r7,#119]
 9333 012e 002B     	 cmp r3,#0
 9334 0130 23D1     	 bne .L571
4843:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 9335              	 .loc 1 4843 0
 9336 0132 07F14003 	 add r3,r7,#64
 9337 0136 1846     	 mov r0,r3
 9338 0138 FFF7FEFF 	 bl dir_remove
 9339 013c 0346     	 mov r3,r0
 9340 013e 87F87730 	 strb r3,[r7,#119]
4844:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 9341              	 .loc 1 4844 0
 9342 0142 97F87730 	 ldrb r3,[r7,#119]
 9343 0146 002B     	 cmp r3,#0
 9344 0148 0CD1     	 bne .L579
 9345              	 .loc 1 4844 0 is_stmt 0 discriminator 1
 9346 014a 3B6F     	 ldr r3,[r7,#112]
 9347 014c 002B     	 cmp r3,#0
 9348 014e 09D0     	 beq .L579
4845:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4846:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4847:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4848:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
 9349              	 .loc 1 4848 0 is_stmt 1
 9350 0150 07F14003 	 add r3,r7,#64
 9351 0154 1846     	 mov r0,r3
 9352 0156 396F     	 ldr r1,[r7,#112]
 9353 0158 0022     	 movs r2,#0
 9354 015a FFF7FEFF 	 bl remove_chain
 9355 015e 0346     	 mov r3,r0
 9356 0160 87F87730 	 strb r3,[r7,#119]
 9357              	.L579:
4849:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4850:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4851:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
 9358              	 .loc 1 4851 0
 9359 0164 97F87730 	 ldrb r3,[r7,#119]
 9360 0168 002B     	 cmp r3,#0
 9361 016a 06D1     	 bne .L571
 9362              	 .loc 1 4851 0 is_stmt 0 discriminator 1
 9363 016c FB68     	 ldr r3,[r7,#12]
 9364 016e 1846     	 mov r0,r3
 9365 0170 FFF7FEFF 	 bl sync_fs
 9366 0174 0346     	 mov r3,r0
 9367 0176 87F87730 	 strb r3,[r7,#119]
 9368              	.L571:
4852:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4853:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4854:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4855:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4856:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4857:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9369              	 .loc 1 4857 0 is_stmt 1
 9370 017a 97F87730 	 ldrb r3,[r7,#119]
4858:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9371              	 .loc 1 4858 0
 9372 017e 1846     	 mov r0,r3
 9373 0180 7837     	 adds r7,r7,#120
 9374              	.LCFI300:
 9375              	 .cfi_def_cfa_offset 8
 9376 0182 BD46     	 mov sp,r7
 9377              	.LCFI301:
 9378              	 .cfi_def_cfa_register 13
 9379              	 
 9380 0184 80BD     	 pop {r7,pc}
 9381              	 .cfi_endproc
 9382              	.LFE56:
 9384 0186 00BF     	 .section .text.f_mkdir,"ax",%progbits
 9385              	 .align 2
 9386              	 .global f_mkdir
 9387              	 .thumb
 9388              	 .thumb_func
 9390              	f_mkdir:
 9391              	.LFB57:
4859:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4860:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4861:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4862:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4863:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4864:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create a Directory                                                    */
4865:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4866:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4867:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mkdir (
4868:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
4869:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4870:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9392              	 .loc 1 4870 0
 9393              	 .cfi_startproc
 9394              	 
 9395              	 
 9396 0000 80B5     	 push {r7,lr}
 9397              	.LCFI302:
 9398              	 .cfi_def_cfa_offset 8
 9399              	 .cfi_offset 7,-8
 9400              	 .cfi_offset 14,-4
 9401 0002 98B0     	 sub sp,sp,#96
 9402              	.LCFI303:
 9403              	 .cfi_def_cfa_offset 104
 9404 0004 00AF     	 add r7,sp,#0
 9405              	.LCFI304:
 9406              	 .cfi_def_cfa_register 7
 9407 0006 7860     	 str r0,[r7,#4]
4871:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4873:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID sobj;
4874:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4875:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dcl, pcl, tm;
4876:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4877:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4878:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4879:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 9408              	 .loc 1 4879 0
 9409 0008 3A1D     	 adds r2,r7,#4
 9410 000a 07F10803 	 add r3,r7,#8
 9411 000e 1046     	 mov r0,r2
 9412 0010 1946     	 mov r1,r3
 9413 0012 0222     	 movs r2,#2
 9414 0014 FFF7FEFF 	 bl find_volume
 9415 0018 0346     	 mov r3,r0
 9416 001a 87F85F30 	 strb r3,[r7,#95]
4880:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9417              	 .loc 1 4880 0
 9418 001e 97F85F30 	 ldrb r3,[r7,#95]
 9419 0022 002B     	 cmp r3,#0
 9420 0024 40F0C280 	 bne .L582
4881:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 9421              	 .loc 1 4881 0
 9422 0028 BB68     	 ldr r3,[r7,#8]
 9423 002a 3B62     	 str r3,[r7,#32]
4882:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4883:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9424              	 .loc 1 4883 0
 9425 002c 7B68     	 ldr r3,[r7,#4]
 9426 002e 07F12002 	 add r2,r7,#32
 9427 0032 1046     	 mov r0,r2
 9428 0034 1946     	 mov r1,r3
 9429 0036 FFF7FEFF 	 bl follow_path
 9430 003a 0346     	 mov r3,r0
 9431 003c 87F85F30 	 strb r3,[r7,#95]
4884:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 9432              	 .loc 1 4884 0
 9433 0040 97F85F30 	 ldrb r3,[r7,#95]
 9434 0044 002B     	 cmp r3,#0
 9435 0046 02D1     	 bne .L583
 9436              	 .loc 1 4884 0 is_stmt 0 discriminator 1
 9437 0048 0823     	 movs r3,#8
 9438 004a 87F85F30 	 strb r3,[r7,#95]
 9439              	.L583:
4885:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 9440              	 .loc 1 4885 0 is_stmt 1
 9441 004e 97F85F30 	 ldrb r3,[r7,#95]
 9442 0052 042B     	 cmp r3,#4
 9443 0054 08D1     	 bne .L584
 9444              	 .loc 1 4885 0 is_stmt 0 discriminator 1
 9445 0056 97F84F30 	 ldrb r3,[r7,#79]
 9446 005a 03F02003 	 and r3,r3,#32
 9447 005e 002B     	 cmp r3,#0
 9448 0060 02D0     	 beq .L584
4886:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_INVALID_NAME;
 9449              	 .loc 1 4886 0 is_stmt 1
 9450 0062 0623     	 movs r3,#6
 9451 0064 87F85F30 	 strb r3,[r7,#95]
 9452              	.L584:
4887:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4888:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 9453              	 .loc 1 4888 0
 9454 0068 97F85F30 	 ldrb r3,[r7,#95]
 9455 006c 042B     	 cmp r3,#4
 9456 006e 40F09D80 	 bne .L582
4889:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sobj.fs = fs;						/* New object id to create a new chain */
 9457              	 .loc 1 4889 0
 9458 0072 BB68     	 ldr r3,[r7,#8]
 9459 0074 FB60     	 str r3,[r7,#12]
4890:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 9460              	 .loc 1 4890 0
 9461 0076 07F10C03 	 add r3,r7,#12
 9462 007a 1846     	 mov r0,r3
 9463 007c 0021     	 movs r1,#0
 9464 007e FFF7FEFF 	 bl create_chain
 9465 0082 B865     	 str r0,[r7,#88]
4891:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 9466              	 .loc 1 4891 0
 9467 0084 0023     	 movs r3,#0
 9468 0086 87F85F30 	 strb r3,[r7,#95]
4892:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 9469              	 .loc 1 4892 0
 9470 008a BB6D     	 ldr r3,[r7,#88]
 9471 008c 002B     	 cmp r3,#0
 9472 008e 02D1     	 bne .L585
 9473              	 .loc 1 4892 0 is_stmt 0 discriminator 1
 9474 0090 0723     	 movs r3,#7
 9475 0092 87F85F30 	 strb r3,[r7,#95]
 9476              	.L585:
4893:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 9477              	 .loc 1 4893 0 is_stmt 1
 9478 0096 BB6D     	 ldr r3,[r7,#88]
 9479 0098 012B     	 cmp r3,#1
 9480 009a 02D1     	 bne .L586
 9481              	 .loc 1 4893 0 is_stmt 0 discriminator 1
 9482 009c 0223     	 movs r3,#2
 9483 009e 87F85F30 	 strb r3,[r7,#95]
 9484              	.L586:
4894:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 9485              	 .loc 1 4894 0 is_stmt 1
 9486 00a2 BB6D     	 ldr r3,[r7,#88]
 9487 00a4 B3F1FF3F 	 cmp r3,#-1
 9488 00a8 02D1     	 bne .L587
 9489              	 .loc 1 4894 0 is_stmt 0 discriminator 1
 9490 00aa 0123     	 movs r3,#1
 9491 00ac 87F85F30 	 strb r3,[r7,#95]
 9492              	.L587:
4895:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tm = GET_FATTIME();
 9493              	 .loc 1 4895 0 is_stmt 1
 9494 00b0 FFF7FEFF 	 bl get_fattime
 9495 00b4 7865     	 str r0,[r7,#84]
4896:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9496              	 .loc 1 4896 0
 9497 00b6 97F85F30 	 ldrb r3,[r7,#95]
 9498 00ba 002B     	 cmp r3,#0
 9499 00bc 4BD1     	 bne .L588
4897:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
 9500              	 .loc 1 4897 0
 9501 00be BB68     	 ldr r3,[r7,#8]
 9502 00c0 1846     	 mov r0,r3
 9503 00c2 B96D     	 ldr r1,[r7,#88]
 9504 00c4 FFF7FEFF 	 bl dir_clear
 9505 00c8 0346     	 mov r3,r0
 9506 00ca 87F85F30 	 strb r3,[r7,#95]
4898:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 9507              	 .loc 1 4898 0
 9508 00ce 97F85F30 	 ldrb r3,[r7,#95]
 9509 00d2 002B     	 cmp r3,#0
 9510 00d4 3FD1     	 bne .L588
4899:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
4900:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 9511              	 .loc 1 4900 0
 9512 00d6 BB68     	 ldr r3,[r7,#8]
 9513 00d8 3433     	 adds r3,r3,#52
 9514 00da 1846     	 mov r0,r3
 9515 00dc 2021     	 movs r1,#32
 9516 00de 0B22     	 movs r2,#11
 9517 00e0 FFF7FEFF 	 bl mem_set
4901:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->win[DIR_Name] = '.';
 9518              	 .loc 1 4901 0
 9519 00e4 BB68     	 ldr r3,[r7,#8]
 9520 00e6 2E22     	 movs r2,#46
 9521 00e8 83F83420 	 strb r2,[r3,#52]
4902:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->win[DIR_Attr] = AM_DIR;
 9522              	 .loc 1 4902 0
 9523 00ec BB68     	 ldr r3,[r7,#8]
 9524 00ee 1022     	 movs r2,#16
 9525 00f0 83F83F20 	 strb r2,[r3,#63]
4903:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->win + DIR_ModTime, tm);
 9526              	 .loc 1 4903 0
 9527 00f4 BB68     	 ldr r3,[r7,#8]
 9528 00f6 4A33     	 adds r3,r3,#74
 9529 00f8 1846     	 mov r0,r3
 9530 00fa 796D     	 ldr r1,[r7,#84]
 9531 00fc FFF7FEFF 	 bl st_dword
4904:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_clust(fs, fs->win, dcl);
 9532              	 .loc 1 4904 0
 9533 0100 BA68     	 ldr r2,[r7,#8]
 9534 0102 BB68     	 ldr r3,[r7,#8]
 9535 0104 3433     	 adds r3,r3,#52
 9536 0106 1046     	 mov r0,r2
 9537 0108 1946     	 mov r1,r3
 9538 010a BA6D     	 ldr r2,[r7,#88]
 9539 010c FFF7FEFF 	 bl st_clust
4905:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 9540              	 .loc 1 4905 0
 9541 0110 BB68     	 ldr r3,[r7,#8]
 9542 0112 03F15402 	 add r2,r3,#84
 9543 0116 BB68     	 ldr r3,[r7,#8]
 9544 0118 3433     	 adds r3,r3,#52
 9545 011a 1046     	 mov r0,r2
 9546 011c 1946     	 mov r1,r3
 9547 011e 2022     	 movs r2,#32
 9548 0120 FFF7FEFF 	 bl mem_cpy
4906:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 9549              	 .loc 1 4906 0
 9550 0124 BB68     	 ldr r3,[r7,#8]
 9551 0126 2E22     	 movs r2,#46
 9552 0128 83F85520 	 strb r2,[r3,#85]
 9553 012c BB6A     	 ldr r3,[r7,#40]
 9554 012e 3B65     	 str r3,[r7,#80]
4907:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_clust(fs, fs->win + SZDIRE, pcl);
 9555              	 .loc 1 4907 0
 9556 0130 BA68     	 ldr r2,[r7,#8]
 9557 0132 BB68     	 ldr r3,[r7,#8]
 9558 0134 5433     	 adds r3,r3,#84
 9559 0136 1046     	 mov r0,r2
 9560 0138 1946     	 mov r1,r3
 9561 013a 3A6D     	 ldr r2,[r7,#80]
 9562 013c FFF7FEFF 	 bl st_clust
4908:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
 9563              	 .loc 1 4908 0
 9564 0140 BB68     	 ldr r3,[r7,#8]
 9565 0142 0122     	 movs r2,#1
 9566 0144 DA70     	 strb r2,[r3,#3]
4909:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4910:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&dj);	/* Register the object to the parent directoy */
 9567              	 .loc 1 4910 0
 9568 0146 07F12003 	 add r3,r7,#32
 9569 014a 1846     	 mov r0,r3
 9570 014c FFF7FEFF 	 bl dir_register
 9571 0150 0346     	 mov r3,r0
 9572 0152 87F85F30 	 strb r3,[r7,#95]
 9573              	.L588:
4911:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4912:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4913:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9574              	 .loc 1 4913 0
 9575 0156 97F85F30 	 ldrb r3,[r7,#95]
 9576 015a 002B     	 cmp r3,#0
 9577 015c 1FD1     	 bne .L589
4914:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4915:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4916:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4917:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
4918:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* File size needs to be vali
4919:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
4920:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
4921:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4922:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = store_xdir(&dj);
4923:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4924:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4925:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
4926:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 9578              	 .loc 1 4926 0
 9579 015e 3B6C     	 ldr r3,[r7,#64]
 9580 0160 1633     	 adds r3,r3,#22
 9581 0162 1846     	 mov r0,r3
 9582 0164 796D     	 ldr r1,[r7,#84]
 9583 0166 FFF7FEFF 	 bl st_dword
4927:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 9584              	 .loc 1 4927 0
 9585 016a BA68     	 ldr r2,[r7,#8]
 9586 016c 3B6C     	 ldr r3,[r7,#64]
 9587 016e 1046     	 mov r0,r2
 9588 0170 1946     	 mov r1,r3
 9589 0172 BA6D     	 ldr r2,[r7,#88]
 9590 0174 FFF7FEFF 	 bl st_clust
4928:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 9591              	 .loc 1 4928 0
 9592 0178 3B6C     	 ldr r3,[r7,#64]
 9593 017a 0B33     	 adds r3,r3,#11
 9594 017c 1022     	 movs r2,#16
 9595 017e 1A70     	 strb r2,[r3]
4929:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 9596              	 .loc 1 4929 0
 9597 0180 BB68     	 ldr r3,[r7,#8]
 9598 0182 0122     	 movs r2,#1
 9599 0184 DA70     	 strb r2,[r3,#3]
4930:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4931:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 9600              	 .loc 1 4931 0
 9601 0186 97F85F30 	 ldrb r3,[r7,#95]
 9602 018a 002B     	 cmp r3,#0
 9603 018c 0ED1     	 bne .L582
4932:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);
 9604              	 .loc 1 4932 0
 9605 018e BB68     	 ldr r3,[r7,#8]
 9606 0190 1846     	 mov r0,r3
 9607 0192 FFF7FEFF 	 bl sync_fs
 9608 0196 0346     	 mov r3,r0
 9609 0198 87F85F30 	 strb r3,[r7,#95]
 9610 019c 06E0     	 b .L582
 9611              	.L589:
4933:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4934:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4935:../Dave/Generated/FATFS/ff_Src/ff.c **** 				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 9612              	 .loc 1 4935 0
 9613 019e 07F10C03 	 add r3,r7,#12
 9614 01a2 1846     	 mov r0,r3
 9615 01a4 B96D     	 ldr r1,[r7,#88]
 9616 01a6 0022     	 movs r2,#0
 9617 01a8 FFF7FEFF 	 bl remove_chain
 9618              	.L582:
4936:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4937:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4938:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4939:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4940:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9619              	 .loc 1 4941 0
 9620 01ac 97F85F30 	 ldrb r3,[r7,#95]
4942:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9621              	 .loc 1 4942 0
 9622 01b0 1846     	 mov r0,r3
 9623 01b2 6037     	 adds r7,r7,#96
 9624              	.LCFI305:
 9625              	 .cfi_def_cfa_offset 8
 9626 01b4 BD46     	 mov sp,r7
 9627              	.LCFI306:
 9628              	 .cfi_def_cfa_register 13
 9629              	 
 9630 01b6 80BD     	 pop {r7,pc}
 9631              	 .cfi_endproc
 9632              	.LFE57:
 9634              	 .section .text.f_rename,"ax",%progbits
 9635              	 .align 2
 9636              	 .global f_rename
 9637              	 .thumb
 9638              	 .thumb_func
 9640              	f_rename:
 9641              	.LFB58:
4943:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4944:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4945:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4946:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4947:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4948:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Rename a File/Directory                                               */
4949:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4950:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4951:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_rename (
4952:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4953:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
4954:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4955:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9642              	 .loc 1 4955 0
 9643              	 .cfi_startproc
 9644              	 
 9645              	 
 9646 0000 90B5     	 push {r4,r7,lr}
 9647              	.LCFI307:
 9648              	 .cfi_def_cfa_offset 12
 9649              	 .cfi_offset 4,-12
 9650              	 .cfi_offset 7,-8
 9651              	 .cfi_offset 14,-4
 9652 0002 A7B0     	 sub sp,sp,#156
 9653              	.LCFI308:
 9654              	 .cfi_def_cfa_offset 168
 9655 0004 00AF     	 add r7,sp,#0
 9656              	.LCFI309:
 9657              	 .cfi_def_cfa_register 7
 9658 0006 7860     	 str r0,[r7,#4]
 9659 0008 3960     	 str r1,[r7]
4956:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4957:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR djo, djn;
4958:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4959:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
4960:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dw;
4961:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4962:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4963:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4964:../Dave/Generated/FATFS/ff_Src/ff.c **** 	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 9660              	 .loc 1 4964 0
 9661 000a 3B46     	 mov r3,r7
 9662 000c 1846     	 mov r0,r3
 9663 000e FFF7FEFF 	 bl get_ldnumber
4965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 9664              	 .loc 1 4965 0
 9665 0012 3A1D     	 adds r2,r7,#4
 9666 0014 07F12803 	 add r3,r7,#40
 9667 0018 1046     	 mov r0,r2
 9668 001a 1946     	 mov r1,r3
 9669 001c 0222     	 movs r2,#2
 9670 001e FFF7FEFF 	 bl find_volume
 9671 0022 0346     	 mov r3,r0
 9672 0024 87F89730 	 strb r3,[r7,#151]
4966:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9673              	 .loc 1 4966 0
 9674 0028 97F89730 	 ldrb r3,[r7,#151]
 9675 002c 002B     	 cmp r3,#0
 9676 002e 40F0EC80 	 bne .L593
4967:../Dave/Generated/FATFS/ff_Src/ff.c **** 		djo.obj.fs = fs;
 9677              	 .loc 1 4967 0
 9678 0032 BB6A     	 ldr r3,[r7,#40]
 9679 0034 FB65     	 str r3,[r7,#92]
4968:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4969:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9680              	 .loc 1 4969 0
 9681 0036 7B68     	 ldr r3,[r7,#4]
 9682 0038 07F15C02 	 add r2,r7,#92
 9683 003c 1046     	 mov r0,r2
 9684 003e 1946     	 mov r1,r3
 9685 0040 FFF7FEFF 	 bl follow_path
 9686 0044 0346     	 mov r3,r0
 9687 0046 87F89730 	 strb r3,[r7,#151]
4970:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 9688              	 .loc 1 4970 0
 9689 004a 97F89730 	 ldrb r3,[r7,#151]
 9690 004e 002B     	 cmp r3,#0
 9691 0050 08D1     	 bne .L594
 9692              	 .loc 1 4970 0 is_stmt 0 discriminator 1
 9693 0052 97F88B30 	 ldrb r3,[r7,#139]
 9694 0056 03F0A003 	 and r3,r3,#160
 9695 005a 002B     	 cmp r3,#0
 9696 005c 02D0     	 beq .L594
 9697              	 .loc 1 4970 0 discriminator 2
 9698 005e 0623     	 movs r3,#6
 9699 0060 87F89730 	 strb r3,[r7,#151]
 9700              	.L594:
4971:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4972:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 9701              	 .loc 1 4972 0 is_stmt 1
 9702 0064 97F89730 	 ldrb r3,[r7,#151]
 9703 0068 002B     	 cmp r3,#0
 9704 006a 08D1     	 bne .L595
4973:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = chk_lock(&djo, 2);
 9705              	 .loc 1 4973 0
 9706 006c 07F15C03 	 add r3,r7,#92
 9707 0070 1846     	 mov r0,r3
 9708 0072 0221     	 movs r1,#2
 9709 0074 FFF7FEFF 	 bl chk_lock
 9710 0078 0346     	 mov r3,r0
 9711 007a 87F89730 	 strb r3,[r7,#151]
 9712              	.L595:
4974:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4975:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4976:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
 9713              	 .loc 1 4976 0
 9714 007e 97F89730 	 ldrb r3,[r7,#151]
 9715 0082 002B     	 cmp r3,#0
 9716 0084 40F0C180 	 bne .L593
4977:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4978:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
4979:../Dave/Generated/FATFS/ff_Src/ff.c **** 				BYTE nf, nn;
4980:../Dave/Generated/FATFS/ff_Src/ff.c **** 				WORD nh;
4981:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4982:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4983:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
4984:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4985:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4986:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4987:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4988:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4989:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4990:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
4991:../Dave/Generated/FATFS/ff_Src/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4992:../Dave/Generated/FATFS/ff_Src/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4993:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
4994:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4995:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4996:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attrib
4997:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4998:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = store_xdir(&djn);
4999:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5000:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5001:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5002:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5003:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{	/* At FAT/FAT32 volume */
5004:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 9717              	 .loc 1 5004 0
 9718 0088 FB6F     	 ldr r3,[r7,#124]
 9719 008a 07F10802 	 add r2,r7,#8
 9720 008e 1046     	 mov r0,r2
 9721 0090 1946     	 mov r1,r3
 9722 0092 2022     	 movs r2,#32
 9723 0094 FFF7FEFF 	 bl mem_cpy
5005:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 9724              	 .loc 1 5005 0
 9725 0098 07F12C02 	 add r2,r7,#44
 9726 009c 07F15C03 	 add r3,r7,#92
 9727 00a0 1046     	 mov r0,r2
 9728 00a2 1946     	 mov r1,r3
 9729 00a4 3022     	 movs r2,#48
 9730 00a6 FFF7FEFF 	 bl mem_cpy
5006:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 9731              	 .loc 1 5006 0
 9732 00aa 3B68     	 ldr r3,[r7]
 9733 00ac 07F12C02 	 add r2,r7,#44
 9734 00b0 1046     	 mov r0,r2
 9735 00b2 1946     	 mov r1,r3
 9736 00b4 FFF7FEFF 	 bl follow_path
 9737 00b8 0346     	 mov r3,r0
 9738 00ba 87F89730 	 strb r3,[r7,#151]
5007:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 9739              	 .loc 1 5007 0
 9740 00be 97F89730 	 ldrb r3,[r7,#151]
 9741 00c2 002B     	 cmp r3,#0
 9742 00c4 0CD1     	 bne .L596
5008:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 9743              	 .loc 1 5008 0
 9744 00c6 7A6B     	 ldr r2,[r7,#52]
 9745 00c8 7B6E     	 ldr r3,[r7,#100]
 9746 00ca 9A42     	 cmp r2,r3
 9747 00cc 05D1     	 bne .L597
 9748              	 .loc 1 5008 0 is_stmt 0 discriminator 1
 9749 00ce 3A6C     	 ldr r2,[r7,#64]
 9750 00d0 3B6F     	 ldr r3,[r7,#112]
 9751 00d2 9A42     	 cmp r2,r3
 9752 00d4 01D1     	 bne .L597
 9753              	 .loc 1 5008 0 discriminator 3
 9754 00d6 0423     	 movs r3,#4
 9755 00d8 00E0     	 b .L598
 9756              	.L597:
 9757              	 .loc 1 5008 0 discriminator 4
 9758 00da 0823     	 movs r3,#8
 9759              	.L598:
 9760              	 .loc 1 5008 0 discriminator 6
 9761 00dc 87F89730 	 strb r3,[r7,#151]
 9762              	.L596:
5009:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5010:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 9763              	 .loc 1 5010 0 is_stmt 1
 9764 00e0 97F89730 	 ldrb r3,[r7,#151]
 9765 00e4 042B     	 cmp r3,#4
 9766 00e6 79D1     	 bne .L599
5011:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9767              	 .loc 1 5011 0
 9768 00e8 07F12C03 	 add r3,r7,#44
 9769 00ec 1846     	 mov r0,r3
 9770 00ee FFF7FEFF 	 bl dir_register
 9771 00f2 0346     	 mov r3,r0
 9772 00f4 87F89730 	 strb r3,[r7,#151]
5012:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
 9773              	 .loc 1 5012 0
 9774 00f8 97F89730 	 ldrb r3,[r7,#151]
 9775 00fc 002B     	 cmp r3,#0
 9776 00fe 6DD1     	 bne .L599
5013:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
 9777              	 .loc 1 5013 0
 9778 0100 FB6C     	 ldr r3,[r7,#76]
 9779 0102 C7F89030 	 str r3,[r7,#144]
5014:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
 9780              	 .loc 1 5014 0
 9781 0106 D7F89030 	 ldr r3,[r7,#144]
 9782 010a 03F10D02 	 add r2,r3,#13
 9783 010e 07F10803 	 add r3,r7,#8
 9784 0112 0D33     	 adds r3,r3,#13
 9785 0114 1046     	 mov r0,r2
 9786 0116 1946     	 mov r1,r3
 9787 0118 1322     	 movs r2,#19
 9788 011a FFF7FEFF 	 bl mem_cpy
5015:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dir[DIR_Attr] = buf[DIR_Attr];
 9789              	 .loc 1 5015 0
 9790 011e D7F89030 	 ldr r3,[r7,#144]
 9791 0122 0B33     	 adds r3,r3,#11
 9792 0124 FA7C     	 ldrb r2,[r7,#19]
 9793 0126 1A70     	 strb r2,[r3]
5016:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
 9794              	 .loc 1 5016 0
 9795 0128 D7F89030 	 ldr r3,[r7,#144]
 9796 012c 0B33     	 adds r3,r3,#11
 9797 012e 1B78     	 ldrb r3,[r3]
 9798 0130 03F01003 	 and r3,r3,#16
 9799 0134 002B     	 cmp r3,#0
 9800 0136 0AD1     	 bne .L600
 9801              	 .loc 1 5016 0 is_stmt 0 discriminator 1
 9802 0138 D7F89030 	 ldr r3,[r7,#144]
 9803 013c 0B33     	 adds r3,r3,#11
 9804 013e D7F89020 	 ldr r2,[r7,#144]
 9805 0142 0B32     	 adds r2,r2,#11
 9806 0144 1278     	 ldrb r2,[r2]
 9807 0146 42F02002 	 orr r2,r2,#32
 9808 014a D2B2     	 uxtb r2,r2
 9809 014c 1A70     	 strb r2,[r3]
 9810              	.L600:
5017:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
 9811              	 .loc 1 5017 0 is_stmt 1
 9812 014e BB6A     	 ldr r3,[r7,#40]
 9813 0150 0122     	 movs r2,#1
 9814 0152 DA70     	 strb r2,[r3,#3]
5018:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 9815              	 .loc 1 5018 0
 9816 0154 D7F89030 	 ldr r3,[r7,#144]
 9817 0158 0B33     	 adds r3,r3,#11
 9818 015a 1B78     	 ldrb r3,[r3]
 9819 015c 03F01003 	 and r3,r3,#16
 9820 0160 002B     	 cmp r3,#0
 9821 0162 3BD0     	 beq .L599
 9822              	 .loc 1 5018 0 is_stmt 0 discriminator 1
 9823 0164 7A6E     	 ldr r2,[r7,#100]
 9824 0166 7B6B     	 ldr r3,[r7,#52]
 9825 0168 9A42     	 cmp r2,r3
 9826 016a 37D0     	 beq .L599
5019:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dw = clst2sect(fs, ld_clust(fs, dir));
 9827              	 .loc 1 5019 0 is_stmt 1
 9828 016c BC6A     	 ldr r4,[r7,#40]
 9829 016e BB6A     	 ldr r3,[r7,#40]
 9830 0170 1846     	 mov r0,r3
 9831 0172 D7F89010 	 ldr r1,[r7,#144]
 9832 0176 FFF7FEFF 	 bl ld_clust
 9833 017a 0346     	 mov r3,r0
 9834 017c 2046     	 mov r0,r4
 9835 017e 1946     	 mov r1,r3
 9836 0180 FFF7FEFF 	 bl clst2sect
 9837 0184 C7F88C00 	 str r0,[r7,#140]
5020:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (dw == 0) {
 9838              	 .loc 1 5020 0
 9839 0188 D7F88C30 	 ldr r3,[r7,#140]
 9840 018c 002B     	 cmp r3,#0
 9841 018e 03D1     	 bne .L601
5021:../Dave/Generated/FATFS/ff_Src/ff.c **** 								res = FR_INT_ERR;
 9842              	 .loc 1 5021 0
 9843 0190 0223     	 movs r3,#2
 9844 0192 87F89730 	 strb r3,[r7,#151]
 9845 0196 21E0     	 b .L599
 9846              	.L601:
5022:../Dave/Generated/FATFS/ff_Src/ff.c **** 							} else {
5023:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
5024:../Dave/Generated/FATFS/ff_Src/ff.c **** 								res = move_window(fs, dw);
 9847              	 .loc 1 5024 0
 9848 0198 BB6A     	 ldr r3,[r7,#40]
 9849 019a 1846     	 mov r0,r3
 9850 019c D7F88C10 	 ldr r1,[r7,#140]
 9851 01a0 FFF7FEFF 	 bl move_window
 9852 01a4 0346     	 mov r3,r0
 9853 01a6 87F89730 	 strb r3,[r7,#151]
5025:../Dave/Generated/FATFS/ff_Src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 9854              	 .loc 1 5025 0
 9855 01aa BB6A     	 ldr r3,[r7,#40]
 9856 01ac 5433     	 adds r3,r3,#84
 9857 01ae C7F89030 	 str r3,[r7,#144]
5026:../Dave/Generated/FATFS/ff_Src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 9858              	 .loc 1 5026 0
 9859 01b2 97F89730 	 ldrb r3,[r7,#151]
 9860 01b6 002B     	 cmp r3,#0
 9861 01b8 10D1     	 bne .L599
 9862              	 .loc 1 5026 0 is_stmt 0 discriminator 1
 9863 01ba D7F89030 	 ldr r3,[r7,#144]
 9864 01be 0133     	 adds r3,r3,#1
 9865 01c0 1B78     	 ldrb r3,[r3]
 9866 01c2 2E2B     	 cmp r3,#46
 9867 01c4 0AD1     	 bne .L599
5027:../Dave/Generated/FATFS/ff_Src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 9868              	 .loc 1 5027 0 is_stmt 1
 9869 01c6 BA6A     	 ldr r2,[r7,#40]
 9870 01c8 7B6B     	 ldr r3,[r7,#52]
 9871 01ca 1046     	 mov r0,r2
 9872 01cc D7F89010 	 ldr r1,[r7,#144]
 9873 01d0 1A46     	 mov r2,r3
 9874 01d2 FFF7FEFF 	 bl st_clust
5028:../Dave/Generated/FATFS/ff_Src/ff.c **** 									fs->wflag = 1;
 9875              	 .loc 1 5028 0
 9876 01d6 BB6A     	 ldr r3,[r7,#40]
 9877 01d8 0122     	 movs r2,#1
 9878 01da DA70     	 strb r2,[r3,#3]
 9879              	.L599:
5029:../Dave/Generated/FATFS/ff_Src/ff.c **** 								}
5030:../Dave/Generated/FATFS/ff_Src/ff.c **** 							}
5031:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5032:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5033:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5034:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5035:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9880              	 .loc 1 5035 0
 9881 01dc 97F89730 	 ldrb r3,[r7,#151]
 9882 01e0 002B     	 cmp r3,#0
 9883 01e2 12D1     	 bne .L593
5036:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 9884              	 .loc 1 5036 0
 9885 01e4 07F15C03 	 add r3,r7,#92
 9886 01e8 1846     	 mov r0,r3
 9887 01ea FFF7FEFF 	 bl dir_remove
 9888 01ee 0346     	 mov r3,r0
 9889 01f0 87F89730 	 strb r3,[r7,#151]
5037:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 9890              	 .loc 1 5037 0
 9891 01f4 97F89730 	 ldrb r3,[r7,#151]
 9892 01f8 002B     	 cmp r3,#0
 9893 01fa 06D1     	 bne .L593
5038:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);
 9894              	 .loc 1 5038 0
 9895 01fc BB6A     	 ldr r3,[r7,#40]
 9896 01fe 1846     	 mov r0,r3
 9897 0200 FFF7FEFF 	 bl sync_fs
 9898 0204 0346     	 mov r3,r0
 9899 0206 87F89730 	 strb r3,[r7,#151]
 9900              	.L593:
5039:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5040:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5041:../Dave/Generated/FATFS/ff_Src/ff.c **** /* End of the critical section */
5042:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5043:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5044:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5045:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5046:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9901              	 .loc 1 5046 0
 9902 020a 97F89730 	 ldrb r3,[r7,#151]
5047:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9903              	 .loc 1 5047 0
 9904 020e 1846     	 mov r0,r3
 9905 0210 9C37     	 adds r7,r7,#156
 9906              	.LCFI310:
 9907              	 .cfi_def_cfa_offset 12
 9908 0212 BD46     	 mov sp,r7
 9909              	.LCFI311:
 9910              	 .cfi_def_cfa_register 13
 9911              	 
 9912 0214 90BD     	 pop {r4,r7,pc}
 9913              	 .cfi_endproc
 9914              	.LFE58:
 9916 0216 00BF     	 .section .text.f_gets,"ax",%progbits
 9917              	 .align 2
 9918              	 .global f_gets
 9919              	 .thumb
 9920              	 .thumb_func
 9922              	f_gets:
 9923              	.LFB59:
5048:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5049:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
5050:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE == 0 */
5051:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 */
5052:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 2 */
5053:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5054:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5055:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5056:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_CHMOD && !FF_FS_READONLY
5057:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5058:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Attribute                                                      */
5059:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5060:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5061:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chmod (
5062:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
5063:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE attr,			/* Attribute bits */
5064:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mask			/* Attribute mask to change */
5065:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5066:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5067:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5068:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5069:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5070:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5071:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5072:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5073:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5074:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5075:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
5076:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5077:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5078:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5079:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5080:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
5081:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5082:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5083:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
5084:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);
5085:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5086:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5087:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
5088:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
5089:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
5090:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5091:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
5092:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = sync_fs(fs);
5093:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5094:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5095:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5096:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5097:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5098:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5099:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5100:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5101:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5102:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5103:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5104:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5105:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Timestamp                                                      */
5106:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5107:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5108:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_utime (
5109:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
5110:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const FILINFO* fno	/* Pointer to the timestamp to be set */
5111:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5112:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5113:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5114:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5115:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5116:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5117:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5118:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5119:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5120:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5121:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
5122:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5123:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5124:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5125:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5126:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5127:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5128:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5129:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);
5130:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5131:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5132:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
5133:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5134:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
5135:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5136:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
5137:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = sync_fs(fs);
5138:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5139:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5140:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5141:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5142:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5143:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5144:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5145:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5146:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
5147:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5148:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5149:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5150:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LABEL
5151:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5152:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get Volume Label                                                      */
5153:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5154:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5155:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getlabel (
5156:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5157:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* label,		/* Buffer to store the volume label */
5158:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD* vsn			/* Variable to store the volume serial number */
5159:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5160:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5161:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5162:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5163:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5164:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT si, di;
5165:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
5166:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5167:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
5168:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
5169:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5170:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get volume label */
5171:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && label) {
5172:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5173:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(&dj, 0);
5174:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5175:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
5176:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 	if (res == FR_OK) {
5177:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5178:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
5179:../Dave/Generated/FATFS/ff_Src/ff.c **** 					WCHAR hs;
5180:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5181:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (si = di = hs = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 ent
5182:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = ld_word(dj.dir + XDIR_Label + si * 2);
5183:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (hs == 0 && IsSurrogate(wc)) {	/* Is the code a surrogate? */
5184:../Dave/Generated/FATFS/ff_Src/ff.c **** 							hs = wc; continue;
5185:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5186:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = put_utf((DWORD)hs << 16 | wc, &label[di], 4);
5187:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc == 0) { di = 0; break; }
5188:../Dave/Generated/FATFS/ff_Src/ff.c **** 						di += wc;
5189:../Dave/Generated/FATFS/ff_Src/ff.c **** 						hs = 0;
5190:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5191:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (hs != 0) di = 0;	/* Broken surrogate pair? */
5192:../Dave/Generated/FATFS/ff_Src/ff.c **** 					label[di] = 0;
5193:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
5194:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5195:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
5196:../Dave/Generated/FATFS/ff_Src/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry */
5197:../Dave/Generated/FATFS/ff_Src/ff.c **** 					while (si < 11) {
5198:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = dj.dir[si++];
5199:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
5200:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
5201:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
5202:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
5203:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc == 0) { di = 0; break; }
5204:../Dave/Generated/FATFS/ff_Src/ff.c **** 						di += wc;
5205:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM output */
5206:../Dave/Generated/FATFS/ff_Src/ff.c **** 						label[di++] = (TCHAR)wc;
5207:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5208:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5209:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {				/* Truncate trailing spaces */
5210:../Dave/Generated/FATFS/ff_Src/ff.c **** 						label[di] = 0;
5211:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (di == 0) break;
5212:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (label[--di] == ' ');
5213:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5214:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5215:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5216:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
5217:../Dave/Generated/FATFS/ff_Src/ff.c **** 			label[0] = 0;
5218:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
5219:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5220:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5221:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5222:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get volume serial number */
5223:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && vsn) {
5224:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, fs->volbase);
5225:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5226:../Dave/Generated/FATFS/ff_Src/ff.c **** 			switch (fs->fs_type) {
5227:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case FS_EXFAT:
5228:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BPB_VolIDEx; break;
5229:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5230:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case FS_FAT32:
5231:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BS_VolID32; break;
5232:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5233:../Dave/Generated/FATFS/ff_Src/ff.c **** 			default:
5234:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BS_VolID;
5235:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5236:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*vsn = ld_dword(fs->win + di);
5237:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5238:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5239:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5241:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5242:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5243:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5244:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5245:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
5246:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5247:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Set Volume Label                                                      */
5248:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5249:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5250:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_setlabel (
5251:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* label	/* Volume label to set with heading logical drive number */
5252:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5253:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5255:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5257:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE dirvn[22];
5258:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT di;
5259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
5260:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const char badchr[] = "+.,;=[]/\\\"*:<>\?|\x7F";	/* [0..] for FAT, [7..] for exFAT */
5261:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
5262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
5263:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5264:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5265:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
5266:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&label, &fs, FA_WRITE);
5267:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5268:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5269:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5270:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5271:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(dirvn, 0, 22);
5272:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di = 0;
5273:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5274:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = tchar2uni(&label);	/* Get a Unicode character */
5275:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc >= 0x10000) {
5276:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dc == 0xFFFFFFFF || di >= 10) {	/* Wrong surrogate or buffer overflow */
5277:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dc = 0;
5278:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5279:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_word(dirvn + di * 2, (WCHAR)(dc >> 16)); di++;
5280:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5281:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5282:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc == 0 || chk_chr(badchr + 7, (int)dc) || di >= 11) {	/* Check validity of the volume label
5283:../Dave/Generated/FATFS/ff_Src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5284:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5285:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(dirvn + di * 2, (WCHAR)dc); di++;
5286:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5287:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5288:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5289:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
5290:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(dirvn, ' ', 11);
5291:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di = 0;
5292:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5293:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
5294:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = tchar2uni(&label);
5295:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
5296:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input */
5297:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (BYTE)*label++;
5298:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dbc_1st((BYTE)wc)) wc = dbc_2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
5299:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
5300:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
5301:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ExCvt && wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5302:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
5303:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5304:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5305:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5306:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Rejec
5307:../Dave/Generated/FATFS/ff_Src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5308:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5309:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
5310:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dirvn[di++] = (BYTE)wc;
5311:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5312:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5313:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
5314:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5315:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5316:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Set volume label */
5317:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5318:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(&dj, 0);
5319:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5320:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
5321:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5322:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5323:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
5324:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5325:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5326:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (di != 0) {
5327:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5328:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5329:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5330:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5331:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5332:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
5333:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = sync_fs(fs);
5334:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {			/* No volume label entry or an error */
5335:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_NO_FILE) {
5336:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_OK;
5337:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (di != 0) {	/* Create a volume label entry */
5338:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5339:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
5340:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
5341:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5342:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[XDIR_Type] = ET_VLABEL;	/* Create volume label entry */
5343:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)di;
5344:../Dave/Generated/FATFS/ff_Src/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5345:../Dave/Generated/FATFS/ff_Src/ff.c **** 						} else {
5346:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5347:../Dave/Generated/FATFS/ff_Src/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5348:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5349:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
5350:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = sync_fs(fs);
5351:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5352:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5353:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5354:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5355:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5356:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5357:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5358:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5359:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5360:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
5361:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_LABEL */
5362:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5363:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5364:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5365:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_EXPAND && !FF_FS_READONLY
5366:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5367:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5368:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5369:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5370:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_expand (
5371:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5372:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5373:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5374:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5375:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5376:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5377:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5378:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5379:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5380:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5381:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5382:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5383:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5384:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5385:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5386:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5387:../Dave/Generated/FATFS/ff_Src/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5388:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5389:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5390:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5391:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5392:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5393:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5394:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5395:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5396:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5397:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5398:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (opt) {		/* Allocate it now */
5399:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5400:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl + tcl - 1;
5401:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5402:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl - 1;
5403:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5404:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5405:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5406:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5407:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
5408:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = clst = stcl; ncl = 0;
5409:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5410:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = get_fat(&fp->obj, clst);
5411:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5412:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5413:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5414:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5415:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5416:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5417:../Dave/Generated/FATFS/ff_Src/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5418:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5419:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5420:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5421:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5422:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (opt) {		/* Allocate it now */
5423:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5424:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5425:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res != FR_OK) break;
5426:../Dave/Generated/FATFS/ff_Src/ff.c **** 					lclst = clst;
5427:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5428:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5429:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl - 1;
5430:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5431:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5432:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5433:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5434:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5435:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5436:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (opt) {	/* Is it allocated now? */
5437:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5438:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.objsize = fsz;
5439:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5440:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag |= FA_MODIFIED;
5441:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5442:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->free_clst -= tcl;
5443:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->fsi_flag |= 1;
5444:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5445:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5446:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5447:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5448:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5449:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5450:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5451:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_EXPAND && !FF_FS_READONLY */
5452:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5453:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5454:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5455:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FORWARD
5456:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5457:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Forward Data to the Stream Directly                                   */
5458:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5459:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5460:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_forward (
5461:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5462:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5463:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5464:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5465:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5466:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5467:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5468:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5469:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, sect;
5470:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t remain;
5471:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rcnt, csect;
5472:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *dbuf;
5473:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5474:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5475:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5476:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5477:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5478:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5479:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5480:../Dave/Generated/FATFS/ff_Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5481:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5482:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5483:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5484:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5485:../Dave/Generated/FATFS/ff_Src/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5486:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5487:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5488:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5489:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5490:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5491:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5492:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5493:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5494:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5495:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = clst2sect(fs, fp->clust);			/* Get current data sector */
5496:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sect == 0) ABORT(fs, FR_INT_ERR);
5497:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect += csect;
5498:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
5499:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5500:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dbuf = fs->win;
5501:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5502:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5503:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
5504:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5505:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5506:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5507:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5508:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5509:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5510:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5511:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dbuf = fp->buf;
5512:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5513:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->sect = sect;
5514:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5515:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5516:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5517:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
5518:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5519:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5520:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
5521:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5522:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_FORWARD */
5523:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5524:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5525:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5526:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_MKFS && !FF_FS_READONLY
5527:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5528:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create an FAT/exFAT volume                                            */
5529:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5530:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5531:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mkfs (
5532:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5533:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt,			/* Format option */
5534:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD au,			/* Size of allocation unit (cluster) [byte] */
5535:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* work,			/* Pointer to working buffer (null: use heap memory) */
5536:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT len			/* Size of working buffer [byte] */
5537:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5538:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5539:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT/FAT32 volume (1 or 2) */
5540:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT volume */
5541:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT volume (4K
5542:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5543:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5544:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD ss;	/* Sector size */
5545:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5546:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5547:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
5549:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
5550:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
5551:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM || FF_FS_EXFAT
5552:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD tbl[3];
5553:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5554:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5555:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5556:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check mounted drive and clear work area */
5557:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5558:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5559:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume if mounted */
5560:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
5561:../Dave/Generated/FATFS/ff_Src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
5562:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5563:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check physical drive status */
5564:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(pdrv);
5565:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5566:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5567:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
5568:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS != FF_MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
5569:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5570:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5571:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5572:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ss = FF_MAX_SS;
5573:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5574:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Che
5575:../Dave/Generated/FATFS/ff_Src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
5576:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5577:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get working buffer */
5578:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3
5579:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!work) {	/* Use heap memory for working buffer */
5580:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (szb_buf = MAX_MALLOC, buf = 0; szb_buf >= ss && (buf = ff_memalloc(szb_buf)) == 0; szb_buf /
5581:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_buf = szb_buf / ss;		/* Size of working buffer (sector) */
5582:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5583:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5584:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
5585:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf = (BYTE*)work;		/* Working buffer */
5586:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_buf = len / ss;		/* Size of working buffer (sector) */
5587:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
5588:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5589:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf || sz_buf == 0) return FR_NOT_ENOUGH_CORE;
5590:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5591:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5592:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_MULTI_PARTITION && part != 0) {
5593:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get partition information from partition table in the MBR */
5594:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Load MBR */
5595:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if MBR is valid */
5596:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5597:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
5598:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5599:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5600:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
5601:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create a single-partition in this function */
5602:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5603:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
5604:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);
5605:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
5606:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5607:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
5608:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5609:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Pre-determine the FAT type */
5610:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
5611:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5612:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms 
5613:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fmt = FS_EXFAT; break;
5614:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5615:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5616:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (au > 128) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* Too large au for FAT/FAT32 */
5617:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
5618:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
5619:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fmt = FS_FAT32; break;
5620:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5621:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5622:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(opt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
5623:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = FS_FAT16;
5624:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (0);
5625:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5626:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5627:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
5628:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DWORD szb_bit, szb_case, sum, nb, cl;
5629:../Dave/Generated/FATFS/ff_Src/ff.c **** 		WCHAR ch, si;
5630:../Dave/Generated/FATFS/ff_Src/ff.c **** 		UINT j, st;
5631:../Dave/Generated/FATFS/ff_Src/ff.c **** 		BYTE b;
5632:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5633:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
5634:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
5635:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased *
5636:../Dave/Generated/FATFS/ff_Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5637:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5638:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5639:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (au == 0) {	/* au auto-selection */
5640:../Dave/Generated/FATFS/ff_Src/ff.c **** 			au = 8;
5641:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
5642:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
5643:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5644:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5645:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
5646:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5647:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
5648:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
5649:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
5650:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */
5651:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5652:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
5653:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
5654:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5655:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create a compressed up-case table */
5656:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5657:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5658:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
5659:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5660:../Dave/Generated/FATFS/ff_Src/ff.c **** 			switch (st) {
5661:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case 0:
5662:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
5663:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ch != si) {
5664:../Dave/Generated/FATFS/ff_Src/ff.c **** 					si++; break;		/* Store the up-case char if exist */
5665:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5666:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5667:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (j >= 128) {
5668:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5669:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5670:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st = 1;			/* Do not compress short run */
5671:../Dave/Generated/FATFS/ff_Src/ff.c **** 				/* go to next case */
5672:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case 1:
5673:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = si++;		/* Fill the short run */
5674:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (--j == 0) st = 0;
5675:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
5676:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5677:../Dave/Generated/FATFS/ff_Src/ff.c **** 			default:
5678:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
5679:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st = 0;
5680:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5681:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5682:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5683:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i += 2; szb_case += 2;
5684:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si == 0 || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
5685:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = (i + ss - 1) / ss;
5686:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5687:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sect += n; i = 0;
5688:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5689:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (si);
5690:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
5691:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[2] = 1;										/* Number of root dir clusters */
5692:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5693:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the allocation bitmap */
5694:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
5695:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
5696:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5697:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, szb_buf);
5698:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5699:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (b = 1; nb != 0 && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5700:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
5701:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5702:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5703:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5704:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5705:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the FAT */
5706:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
5707:../Dave/Generated/FATFS/ff_Src/ff.c **** 		j = nb = cl = 0;
5708:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5709:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
5710:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cl == 0) {	/* Set entry 0 and 1 */
5711:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
5712:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
5713:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5714:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
5715:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (nb != 0 && i < szb_buf) {			/* Create a chain */
5716:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5717:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i += 4; cl++; nb--;
5718:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5719:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (nb == 0 && j < 3) nb = tbl[j++];	/* Next chain */
5720:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (nb != 0 && i < szb_buf);
5721:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
5722:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5723:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5724:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5725:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5726:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the root directory */
5727:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, szb_buf);
5728:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 0 + 0] = ET_VLABEL;		/* Volume label entry */
5729:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 1 + 0] = ET_BITMAP;		/* Bitmap entry */
5730:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);				/* cluster */
5731:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/* size */
5732:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 2 + 0] = ET_UPCASE;		/* Up-case table entry */
5733:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);			/* sum */
5734:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);	/* cluster */
5735:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/* size */
5736:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of 
5737:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Fill root directory sectors */
5738:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5739:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5740:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5741:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5742:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5743:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5744:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create two set of the exFAT VBR blocks */
5745:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_vol;
5746:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < 2; n++) {
5747:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Main record (+0) */
5748:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5749:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5750:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5751:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
5752:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5753:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5754:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5755:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5756:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5757:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5758:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* Filesystem version (1.00) */
5759:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5760:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5761:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5762:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5763:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5764:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5765:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5766:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5767:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5768:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5769:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Extended bootstrap record (+1..+8) */
5770:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5771:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5772:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (j = 1; j < 9; j++) {
5773:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5774:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5775:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5776:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* OEM/Reserved record (+9..+10) */
5777:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5778:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for ( ; j < 11; j++) {
5779:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5780:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5781:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5782:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Sum record (+11) */
5783:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5784:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5785:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5786:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5787:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5788:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
5789:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* Create an FAT/FAT32 volume */
5790:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5791:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pau = au;
5792:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
5793:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
5794:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pau == 0) {	/* au auto-selection */
5795:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
5796:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5797:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5798:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_clst = sz_vol / pau;	/* Number of clusters */
5799:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
5800:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
5801:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_dir = 0;		/* No static directory */
5802:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
5803:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {				/* FAT volume */
5804:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pau == 0) {	/* au auto-selection */
5805:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
5806:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5807:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5808:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_clst = sz_vol / pau;
5809:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst > MAX_FAT12) {
5810:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
5811:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5812:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fmt = FS_FAT12;
5813:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
5814:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5815:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
5816:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
5817:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
5818:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5819:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
5820:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
5821:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5822:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Align data base to erase block boundary (for flash memory media) */
5823:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
5824:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
5825:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv += n; b_fat += n;
5826:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {					/* FAT: Expand FAT size */
5827:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat += n / n_fats;
5828:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5829:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5830:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5831:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume */
5832:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5833:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {
5834:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
5835:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
5836:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
5837:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5838:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5839:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT16) {
5840:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
5841:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (pau * 2) <= 64) {
5842:../Dave/Generated/FATFS/ff_Src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
5843:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5844:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((opt & FM_FAT32)) {
5845:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
5846:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5847:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5848:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
5849:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5850:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
5851:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5852:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
5853:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5854:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5855:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for
5856:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5857:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Ok, it is the valid cluster configuration */
5858:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
5859:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (1);
5860:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5861:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
5862:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5863:../Dave/Generated/FATFS/ff_Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5864:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5865:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create FAT VBR */
5866:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, ss);
5867:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
5868:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
5869:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
5870:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
5871:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
5872:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
5873:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < 0x10000) {
5874:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
5875:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
5876:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
5877:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5878:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
5879:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
5880:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
5881:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
5882:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
5883:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
5884:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
5885:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
5886:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
5887:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
5888:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
5889:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
5890:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
5891:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
5892:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
5893:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
5894:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
5895:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
5896:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
5897:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5898:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
5899:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR se
5900:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5901:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create FSINFO record if needed */
5902:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
5903:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
5904:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5905:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
5906:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
5907:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
5908:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
5909:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
5910:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
5911:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
5912:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5913:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5914:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize FAT area */
5915:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, (UINT)szb_buf);
5916:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_fat;		/* FAT start sector */
5917:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
5918:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {
5919:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
5920:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
5921:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
5922:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5923:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
5924:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5925:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
5926:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Fill FAT sectors */
5927:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
5928:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5929:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_set(buf, 0, ss);
5930:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sect += n; nsect -= n;
5931:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (nsect);
5932:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5933:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5934:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize root directory (fill with zero) */
5935:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
5936:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5937:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5938:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5939:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5940:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5942:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5943:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine system ID in the partition table */
5944:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_FS_EXFAT && fmt == FS_EXFAT) {
5945:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
5946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
5947:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
5948:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sys = 0x0C;		/* FAT32X */
5949:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
5950:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x10000) {
5951:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sys = 0x06;	/* FAT12/16 (large) */
5952:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5953:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
5954:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5955:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5956:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5957:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5958:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Update partition information */
5959:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_MULTI_PARTITION && part != 0) {	/* Created in the existing partition */
5960:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Update system ID in the partition table */
5961:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
5962:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
5963:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR *
5964:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {								/* Created as a new single partition */
5965:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
5966:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5967:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5968:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
5969:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
5970:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
5971:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
5972:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
5973:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
5974:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
5975:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
5976:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(((n >> 2) & 0xC0) | 63);	/* End sector */
5977:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
5978:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
5979:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
5980:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the MBR */
5981:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5982:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5983:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5984:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5985:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5986:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_MKFS(FR_OK);
5987:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5988:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5989:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5990:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5991:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MULTI_PARTITION
5992:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5993:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create Partition Table on the Physical Drive                          */
5994:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5995:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5996:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_fdisk (
5997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
5998:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5999:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* work			/* Pointer to the working buffer (null: use heap memory) */
6000:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6001:../Dave/Generated/FATFS/ff_Src/ff.c **** {
6002:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
6003:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
6004:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
6005:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sz_disk, sz_part, s_part;
6006:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
6007:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6008:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6009:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(pdrv);
6010:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
6011:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
6012:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
6013:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6014:../Dave/Generated/FATFS/ff_Src/ff.c **** 	buf = (BYTE*)work;
6015:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3
6016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) buf = ff_memalloc(FF_MAX_SS);	/* Use heap memory for working buffer */
6017:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6018:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) return FR_NOT_ENOUGH_CORE;
6019:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6020:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine the CHS without any consideration of the drive geometry */
6021:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
6022:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (n == 256) n--;
6023:../Dave/Generated/FATFS/ff_Src/ff.c **** 	e_hd = (BYTE)(n - 1);
6024:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_cyl = 63 * n;
6025:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
6026:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create partition table */
6028:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(buf, 0, FF_MAX_SS);
6029:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
6030:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
6031:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;	/* Number of cylinder
6032:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (p_cyl == 0) continue;
6033:../Dave/Generated/FATFS/ff_Src/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
6034:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
6035:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
6036:../Dave/Generated/FATFS/ff_Src/ff.c **** 			s_hd = 1;
6037:../Dave/Generated/FATFS/ff_Src/ff.c **** 			s_part += 63; sz_part -= 63;
6038:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6039:../Dave/Generated/FATFS/ff_Src/ff.c **** 			s_hd = 0;
6040:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6041:../Dave/Generated/FATFS/ff_Src/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;	/* End cylinder */
6042:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (e_cyl >= tot_cyl) LEAVE_MKFS(FR_INVALID_PARAMETER);
6043:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6044:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Set partition table */
6045:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[1] = s_hd;						/* Start head */
6046:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[2] = (BYTE)(((b_cyl >> 2) & 0xC0) | 1);	/* Start sector */
6047:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
6048:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[4] = 0x07;						/* System type (temporary setting) */
6049:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[5] = e_hd;						/* End head */
6050:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[6] = (BYTE)(((e_cyl >> 2) & 0xC0) | 63);	/* End sector */
6051:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
6052:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
6053:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(p + 12, sz_part);			/* Number of sectors */
6054:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6055:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Next partition */
6056:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_cyl += p_cyl;
6057:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6058:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(p, 0xAA55);		/* MBR signature (always at offset 510) */
6059:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6060:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Write it to the MBR */
6061:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = (disk_write(pdrv, buf, 0, 1) == RES_OK && disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK 
6062:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_MKFS(res);
6063:../Dave/Generated/FATFS/ff_Src/ff.c **** }
6064:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6065:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_MULTI_PARTITION */
6066:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_MKFS && !FF_FS_READONLY */
6067:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6068:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6069:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6070:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6071:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_STRFUNC
6072:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCODE < 0 || FF_STRF_ENCODE > 3)
6073:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong FF_STRF_ENCODE setting
6074:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6075:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6076:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get a String from the File                                            */
6077:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6078:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6079:../Dave/Generated/FATFS/ff_Src/ff.c **** TCHAR* f_gets (
6080:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
6081:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int len,		/* Size of string buffer (items) */
6082:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp			/* Pointer to the file object */
6083:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6084:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9924              	 .loc 1 6084 0
 9925              	 .cfi_startproc
 9926              	 
 9927              	 
 9928 0000 80B5     	 push {r7,lr}
 9929              	.LCFI312:
 9930              	 .cfi_def_cfa_offset 8
 9931              	 .cfi_offset 7,-8
 9932              	 .cfi_offset 14,-4
 9933 0002 8AB0     	 sub sp,sp,#40
 9934              	.LCFI313:
 9935              	 .cfi_def_cfa_offset 48
 9936 0004 00AF     	 add r7,sp,#0
 9937              	.LCFI314:
 9938              	 .cfi_def_cfa_register 7
 9939 0006 F860     	 str r0,[r7,#12]
 9940 0008 B960     	 str r1,[r7,#8]
 9941 000a 7A60     	 str r2,[r7,#4]
6085:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nc = 0;
 9942              	 .loc 1 6085 0
 9943 000c 0023     	 movs r3,#0
 9944 000e 7B62     	 str r3,[r7,#36]
6086:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *p = buff;
 9945              	 .loc 1 6086 0
 9946 0010 FB68     	 ldr r3,[r7,#12]
 9947 0012 3B62     	 str r3,[r7,#32]
6087:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE s[4];
6088:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rc;
6089:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
6090:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE <= 2
6091:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
6092:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6093:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE == 3
6094:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT ct;
6095:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6096:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6097:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE			/* With code conversion (Unicode API) */
6098:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Make a room for the character and terminator  */
6099:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE == 0) ? 1 : 2;
6100:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE == 0) ? 3 : 4;
6101:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 3) len -= 1;
6102:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < len) {
6103:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STRF_ENCODE == 0		/* Read a character in ANSI/OEM */
6104:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
6105:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;
6106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = s[0];
6107:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st((BYTE)wc)) {
6108:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, 1, &rc);
6109:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != 1 || !dbc_2nd(s[0])) continue;
6110:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = wc << 8 | s[0];
6111:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6112:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = ff_oem2uni(wc, CODEPAGE);
6113:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == 0) continue;
6114:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 	/* Read a character in UTF-16LE/BE */
6115:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 2, &rc);
6116:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 2) break;
6117:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6118:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateL(dc)) continue;
6119:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateH(dc)) {
6120:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, 2, &rc);
6121:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != 2) break;
6122:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6123:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!IsSurrogateL(wc)) continue;
6124:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = ((dc & 0x3FF) + 0x40) << 10 | (wc & 0x3FF);
6125:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6126:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Read a character in UTF-8 */
6127:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
6128:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;
6129:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = s[0];
6130:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc >= 0x80) {	/* Multi-byte character? */
6131:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ct = 0;
6132:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xE0) == 0xC0) { dc &= 0x1F; ct = 1; }	/* 2-byte? */
6133:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xF0) == 0xE0) { dc &= 0x0F; ct = 2; }	/* 3-byte? */
6134:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xF8) == 0xF0) { dc &= 0x07; ct = 3; }	/* 4-byte? */
6135:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ct == 0) continue;
6136:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, ct, &rc);		/* Get trailing bytes */
6137:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != ct) break;
6138:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rc = 0;
6139:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Merge trailing bytes */
6140:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((s[rc] & 0xC0) != 0x80) break;
6141:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dc = dc << 6 | (s[rc] & 0x3F);
6142:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (++rc < ct);
6143:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != ct || dc < 0x80 || IsSurrogate(dc) || dc >= 0x110000) continue;	/* Wrong encoding? */
6144:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6145:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6146:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;	/* Strip \r off if needed */
6147:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	/* Output it in UTF-16/32 encoding */
6148:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_LFN_UNICODE == 1 && dc >= 0x10000) {	/* Out of BMP at UTF-16? */
6149:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p++ = (TCHAR)(0xD800 | ((dc >> 10) - 0x40)); nc++;	/* Make and output high surrogate */
6150:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = 0xDC00 | (dc & 0x3FF);		/* Make low surrogate */
6151:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6152:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*p++ = (TCHAR)dc; nc++;
6153:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == '\n') break;	/* End of line? */
6154:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2		/* Output it in UTF-8 encoding */
6155:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc < 0x80) {	/* 1-byte */
6156:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p++ = (TCHAR)dc;
6157:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nc++;
6158:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc == '\n') break;	/* End of line? */
6159:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6160:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc < 0x800) {		/* 2-byte */
6161:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*p++ = (TCHAR)(0xC0 | (dc >> 6 & 0x1F));
6162:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6163:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 2;
6164:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
6165:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dc < 0x10000) {	/* 3-byte */
6166:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0xE0 | (dc >> 12 & 0x0F));
6167:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
6168:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6169:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nc += 3;
6170:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {			/* 4-byte */
6171:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0xF0 | (dc >> 18 & 0x07));
6172:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 12 & 0x3F));
6173:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
6174:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6175:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nc += 4;
6176:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6177:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6178:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6179:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6180:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6181:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6182:../Dave/Generated/FATFS/ff_Src/ff.c **** #else			/* Byte-by-byte without any conversion (ANSI/OEM API) */
6183:../Dave/Generated/FATFS/ff_Src/ff.c **** 	len -= 1;	/* Make a room for the terminator */
 9948              	 .loc 1 6183 0
 9949 0014 BB68     	 ldr r3,[r7,#8]
 9950 0016 013B     	 subs r3,r3,#1
 9951 0018 BB60     	 str r3,[r7,#8]
6184:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < len) {
 9952              	 .loc 1 6184 0
 9953 001a 1FE0     	 b .L604
 9954              	.L608:
6185:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
 9955              	 .loc 1 6185 0
 9956 001c 07F11802 	 add r2,r7,#24
 9957 0020 07F11403 	 add r3,r7,#20
 9958 0024 7868     	 ldr r0,[r7,#4]
 9959 0026 1146     	 mov r1,r2
 9960 0028 0122     	 movs r2,#1
 9961 002a FFF7FEFF 	 bl f_read
6186:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;
 9962              	 .loc 1 6186 0
 9963 002e 7B69     	 ldr r3,[r7,#20]
 9964 0030 012B     	 cmp r3,#1
 9965 0032 00D0     	 beq .L605
 9966 0034 16E0     	 b .L606
 9967              	.L605:
6187:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = s[0];
 9968              	 .loc 1 6187 0
 9969 0036 3B7E     	 ldrb r3,[r7,#24]
 9970 0038 FB61     	 str r3,[r7,#28]
6188:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
 9971              	 .loc 1 6188 0
 9972 003a FB69     	 ldr r3,[r7,#28]
 9973 003c 0D2B     	 cmp r3,#13
 9974 003e 00D1     	 bne .L607
 9975              	 .loc 1 6188 0 is_stmt 0 discriminator 1
 9976 0040 0CE0     	 b .L604
 9977              	.L607:
6189:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*p++ = (TCHAR)dc; nc++;
 9978              	 .loc 1 6189 0 is_stmt 1
 9979 0042 3B6A     	 ldr r3,[r7,#32]
 9980 0044 5A1C     	 adds r2,r3,#1
 9981 0046 3A62     	 str r2,[r7,#32]
 9982 0048 FA69     	 ldr r2,[r7,#28]
 9983 004a D2B2     	 uxtb r2,r2
 9984 004c 1A70     	 strb r2,[r3]
 9985 004e 7B6A     	 ldr r3,[r7,#36]
 9986 0050 0133     	 adds r3,r3,#1
 9987 0052 7B62     	 str r3,[r7,#36]
6190:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == '\n') break;
 9988              	 .loc 1 6190 0
 9989 0054 FB69     	 ldr r3,[r7,#28]
 9990 0056 0A2B     	 cmp r3,#10
 9991 0058 00D1     	 bne .L604
 9992 005a 03E0     	 b .L606
 9993              	.L604:
6184:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
 9994              	 .loc 1 6184 0
 9995 005c 7A6A     	 ldr r2,[r7,#36]
 9996 005e BB68     	 ldr r3,[r7,#8]
 9997 0060 9A42     	 cmp r2,r3
 9998 0062 DBDB     	 blt .L608
 9999              	.L606:
6191:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6192:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6193:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6194:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*p = 0;		/* Terminate the string */
 10000              	 .loc 1 6194 0
 10001 0064 3B6A     	 ldr r3,[r7,#32]
 10002 0066 0022     	 movs r2,#0
 10003 0068 1A70     	 strb r2,[r3]
6195:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
 10004              	 .loc 1 6195 0
 10005 006a 7B6A     	 ldr r3,[r7,#36]
 10006 006c 002B     	 cmp r3,#0
 10007 006e 01D0     	 beq .L609
 10008              	 .loc 1 6195 0 is_stmt 0 discriminator 1
 10009 0070 FB68     	 ldr r3,[r7,#12]
 10010 0072 00E0     	 b .L611
 10011              	.L609:
 10012              	 .loc 1 6195 0 discriminator 2
 10013 0074 0023     	 movs r3,#0
 10014              	.L611:
6196:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10015              	 .loc 1 6196 0 is_stmt 1
 10016 0076 1846     	 mov r0,r3
 10017 0078 2837     	 adds r7,r7,#40
 10018              	.LCFI315:
 10019              	 .cfi_def_cfa_offset 8
 10020 007a BD46     	 mov sp,r7
 10021              	.LCFI316:
 10022              	 .cfi_def_cfa_register 13
 10023              	 
 10024 007c 80BD     	 pop {r7,pc}
 10025              	 .cfi_endproc
 10026              	.LFE59:
 10028 007e 00BF     	 .section .text.putc_bfd,"ax",%progbits
 10029              	 .align 2
 10030              	 .thumb
 10031              	 .thumb_func
 10033              	putc_bfd:
 10034              	.LFB60:
6197:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6198:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6199:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6200:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6201:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
6202:../Dave/Generated/FATFS/ff_Src/ff.c **** #include <stdarg.h>
6203:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6204:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a Character to the File                                           */
6205:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6206:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6207:../Dave/Generated/FATFS/ff_Src/ff.c **** typedef struct {	/* Putchar output buffer and work area */
6208:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
6209:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of encoding units written */
6210:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE == 1
6211:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs;
6212:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN && FF_LFN_UNICODE == 2
6213:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bs[4];
6214:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wi, ct;
6215:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE buf[64];	/* Write buffer */
6217:../Dave/Generated/FATFS/ff_Src/ff.c **** } putbuff;
6218:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6219:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6220:../Dave/Generated/FATFS/ff_Src/ff.c **** static void putc_bfd (		/* Buffered write with code conversion */
6221:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff* pb,
6222:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c
6223:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6224:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10035              	 .loc 1 6224 0
 10036              	 .cfi_startproc
 10037              	 
 10038              	 
 10039 0000 80B5     	 push {r7,lr}
 10040              	.LCFI317:
 10041              	 .cfi_def_cfa_offset 8
 10042              	 .cfi_offset 7,-8
 10043              	 .cfi_offset 14,-4
 10044 0002 86B0     	 sub sp,sp,#24
 10045              	.LCFI318:
 10046              	 .cfi_def_cfa_offset 32
 10047 0004 00AF     	 add r7,sp,#0
 10048              	.LCFI319:
 10049              	 .cfi_def_cfa_register 7
 10050 0006 7860     	 str r0,[r7,#4]
 10051 0008 0B46     	 mov r3,r1
 10052 000a FB70     	 strb r3,[r7,#3]
6225:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n;
6226:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int i, nc;
6227:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs, wc;
6229:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 2
6230:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
6231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *tp;
6232:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6233:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6234:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6235:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 10053              	 .loc 1 6235 0
 10054 000c FB78     	 ldrb r3,[r7,#3]
 10055 000e 0A2B     	 cmp r3,#10
 10056 0010 03D1     	 bne .L613
6236:../Dave/Generated/FATFS/ff_Src/ff.c **** 		putc_bfd(pb, '\r');
 10057              	 .loc 1 6236 0
 10058 0012 7868     	 ldr r0,[r7,#4]
 10059 0014 0D21     	 movs r1,#13
 10060 0016 FFF7F3FF 	 bl putc_bfd
 10061              	.L613:
6237:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6238:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6239:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = pb->idx;			/* Write index of pb->buf[] */
 10062              	 .loc 1 6239 0
 10063 001a 7B68     	 ldr r3,[r7,#4]
 10064 001c 5B68     	 ldr r3,[r3,#4]
 10065 001e 7B61     	 str r3,[r7,#20]
6240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i < 0) return;
 10066              	 .loc 1 6240 0
 10067 0020 7B69     	 ldr r3,[r7,#20]
 10068 0022 002B     	 cmp r3,#0
 10069 0024 26DB     	 blt .L612
6241:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nc = pb->nchr;			/* Write unit counter */
 10070              	 .loc 1 6241 0
 10071 0026 7B68     	 ldr r3,[r7,#4]
 10072 0028 9B68     	 ldr r3,[r3,#8]
 10073 002a 3B61     	 str r3,[r7,#16]
6242:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6243:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6244:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
6245:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogateH(c)) {
6246:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->hs = c; return;
6247:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6248:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = pb->hs; pb->hs = 0;
6249:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {
6250:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!IsSurrogateL(c)) hs = 0;
6251:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6252:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateL(c)) return;
6253:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = c;
6255:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
6256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
6257:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pb->ct == 0) {	/* Out of multi-byte sequence? */
6258:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->bs[pb->wi = 0] = (BYTE)c;	/* Save 1st byte */
6259:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((BYTE)c < 0x80) break;					/* 1-byte? */
6260:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xE0) == 0xC0) pb->ct = 1;	/* 2-byte? */
6261:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xF0) == 0xE0) pb->ct = 2;	/* 3-byte? */
6262:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xF1) == 0xF0) pb->ct = 3;	/* 4-byte? */
6263:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return;
6264:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* In the multi-byte sequence */
6265:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xC0) != 0x80) {	/* Broken sequence? */
6266:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->ct = 0; continue;
6267:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6268:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->bs[++pb->wi] = (BYTE)c;	/* Save the trailing byte */
6269:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (--pb->ct == 0) break;	/* End of multi-byte sequence? */
6270:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return;
6271:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6272:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6273:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tp = (TCHAR*)pb->bs;
6274:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dc = tchar2uni(&tp);	/* UTF-8 ==> UTF-16 */
6275:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dc == 0xFFFFFFFF) return;
6276:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (WCHAR)dc;
6277:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = (WCHAR)(dc >> 16);
6278:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
6279:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogate(c) || c >= 0x110000) return;
6280:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= 0x10000) {
6281:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)); 	/* Make high surrogate */
6282:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = 0xDC00 | (c & 0x3FF);					/* Make low surrogate */
6283:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6284:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = 0;
6285:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (WCHAR)c;
6286:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6287:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6288:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6289:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STRF_ENCODE == 1		/* Write a character in UTF-16LE */
6290:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {
6291:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(&pb->buf[i], hs);
6292:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i += 2;
6293:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc++;
6294:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6295:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(&pb->buf[i], wc);
6296:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i += 2;
6297:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 2	/* Write a character in UTF-16BE */
6298:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {
6299:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(hs >> 8);
6300:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)hs;
6301:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc++;
6302:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6303:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)(wc >> 8);
6304:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6305:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 3	/* Write it in UTF-8 */
6306:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {				/* 4-byte */
6307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc += 3;
6308:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = (hs & 0x3FF) + 0x40;
6309:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
6310:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 0x3F));
6311:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
6312:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6313:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6314:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < 0x80) {		/* 1-byte */
6315:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->buf[i++] = (BYTE)wc;
6316:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6317:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc < 0x800) {	/* 2-byte */
6318:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 1;
6319:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0xC0 | wc >> 6);
6320:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {			/* 3-byte */
6321:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 2;
6322:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0xE0 | wc >> 12);
6323:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0x80 | (wc >> 6 & 0x3F));
6324:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6325:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6326:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6327:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6328:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* Write it in ANSI/OEM */
6329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) return;
6330:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = ff_uni2oem(wc, CODEPAGE);	/* UTF-16 ==> ANSI/OEM */
6331:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0) return;
6332:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc >= 0x100) {
6333:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
6334:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6336:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6337:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6338:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input (without re-encode) */
6339:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)c;
 10074              	 .loc 1 6339 0
 10075 002c 7B69     	 ldr r3,[r7,#20]
 10076 002e 5A1C     	 adds r2,r3,#1
 10077 0030 7A61     	 str r2,[r7,#20]
 10078 0032 7A68     	 ldr r2,[r7,#4]
 10079 0034 1344     	 add r3,r3,r2
 10080 0036 FA78     	 ldrb r2,[r7,#3]
 10081 0038 1A73     	 strb r2,[r3,#12]
6340:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6341:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6342:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 10082              	 .loc 1 6342 0
 10083 003a 7B69     	 ldr r3,[r7,#20]
 10084 003c 3B2B     	 cmp r3,#59
 10085 003e 12DD     	 ble .L616
6343:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &n);
 10086              	 .loc 1 6343 0
 10087 0040 7B68     	 ldr r3,[r7,#4]
 10088 0042 1868     	 ldr r0,[r3]
 10089 0044 7B68     	 ldr r3,[r7,#4]
 10090 0046 03F10C01 	 add r1,r3,#12
 10091 004a 7A69     	 ldr r2,[r7,#20]
 10092 004c 07F10C03 	 add r3,r7,#12
 10093 0050 FFF7FEFF 	 bl f_write
6344:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = (n == (UINT)i) ? 0 : -1;
 10094              	 .loc 1 6344 0
 10095 0054 7A69     	 ldr r2,[r7,#20]
 10096 0056 FB68     	 ldr r3,[r7,#12]
 10097 0058 9A42     	 cmp r2,r3
 10098 005a 01D1     	 bne .L617
 10099              	 .loc 1 6344 0 is_stmt 0 discriminator 1
 10100 005c 0023     	 movs r3,#0
 10101 005e 01E0     	 b .L618
 10102              	.L617:
 10103              	 .loc 1 6344 0 discriminator 2
 10104 0060 4FF0FF33 	 mov r3,#-1
 10105              	.L618:
 10106              	 .loc 1 6344 0 discriminator 4
 10107 0064 7B61     	 str r3,[r7,#20]
 10108              	.L616:
6345:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6346:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->idx = i;
 10109              	 .loc 1 6346 0 is_stmt 1
 10110 0066 7B68     	 ldr r3,[r7,#4]
 10111 0068 7A69     	 ldr r2,[r7,#20]
 10112 006a 5A60     	 str r2,[r3,#4]
6347:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->nchr = nc + 1;
 10113              	 .loc 1 6347 0
 10114 006c 3B69     	 ldr r3,[r7,#16]
 10115 006e 5A1C     	 adds r2,r3,#1
 10116 0070 7B68     	 ldr r3,[r7,#4]
 10117 0072 9A60     	 str r2,[r3,#8]
 10118              	.L612:
6348:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10119              	 .loc 1 6348 0
 10120 0074 1837     	 adds r7,r7,#24
 10121              	.LCFI320:
 10122              	 .cfi_def_cfa_offset 8
 10123 0076 BD46     	 mov sp,r7
 10124              	.LCFI321:
 10125              	 .cfi_def_cfa_register 13
 10126              	 
 10127 0078 80BD     	 pop {r7,pc}
 10128              	 .cfi_endproc
 10129              	.LFE60:
 10131 007a 00BF     	 .section .text.putc_flush,"ax",%progbits
 10132              	 .align 2
 10133              	 .thumb
 10134              	 .thumb_func
 10136              	putc_flush:
 10137              	.LFB61:
6349:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6350:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6351:../Dave/Generated/FATFS/ff_Src/ff.c **** static int putc_flush (		/* Flush left characters in the buffer */
6352:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff* pb
6353:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6354:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10138              	 .loc 1 6354 0
 10139              	 .cfi_startproc
 10140              	 
 10141              	 
 10142 0000 90B5     	 push {r4,r7,lr}
 10143              	.LCFI322:
 10144              	 .cfi_def_cfa_offset 12
 10145              	 .cfi_offset 4,-12
 10146              	 .cfi_offset 7,-8
 10147              	 .cfi_offset 14,-4
 10148 0002 85B0     	 sub sp,sp,#20
 10149              	.LCFI323:
 10150              	 .cfi_def_cfa_offset 32
 10151 0004 00AF     	 add r7,sp,#0
 10152              	.LCFI324:
 10153              	 .cfi_def_cfa_register 7
 10154 0006 7860     	 str r0,[r7,#4]
6355:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nw;
6356:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6357:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 10155              	 .loc 1 6357 0
 10156 0008 7B68     	 ldr r3,[r7,#4]
 10157 000a 5B68     	 ldr r3,[r3,#4]
 10158 000c 002B     	 cmp r3,#0
 10159 000e 1ADB     	 blt .L620
6358:../Dave/Generated/FATFS/ff_Src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 10160              	 .loc 1 6358 0
 10161 0010 7B68     	 ldr r3,[r7,#4]
 10162 0012 1968     	 ldr r1,[r3]
 10163 0014 7B68     	 ldr r3,[r7,#4]
 10164 0016 03F10C02 	 add r2,r3,#12
 10165 001a 7B68     	 ldr r3,[r7,#4]
 10166 001c 5B68     	 ldr r3,[r3,#4]
 10167 001e 1C46     	 mov r4,r3
 10168 0020 07F10C03 	 add r3,r7,#12
 10169 0024 0846     	 mov r0,r1
 10170 0026 1146     	 mov r1,r2
 10171 0028 2246     	 mov r2,r4
 10172 002a FFF7FEFF 	 bl f_write
 10173 002e 0346     	 mov r3,r0
 10174 0030 002B     	 cmp r3,#0
 10175 0032 08D1     	 bne .L620
6359:../Dave/Generated/FATFS/ff_Src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 10176              	 .loc 1 6359 0
 10177 0034 7B68     	 ldr r3,[r7,#4]
 10178 0036 5B68     	 ldr r3,[r3,#4]
 10179 0038 1A46     	 mov r2,r3
 10180 003a FB68     	 ldr r3,[r7,#12]
 10181 003c 9A42     	 cmp r2,r3
 10182 003e 02D1     	 bne .L620
 10183              	 .loc 1 6359 0 is_stmt 0 discriminator 1
 10184 0040 7B68     	 ldr r3,[r7,#4]
 10185 0042 9B68     	 ldr r3,[r3,#8]
 10186 0044 01E0     	 b .L622
 10187              	.L620:
6360:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return EOF;
 10188              	 .loc 1 6360 0 is_stmt 1
 10189 0046 4FF0FF33 	 mov r3,#-1
 10190              	.L622:
6361:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10191              	 .loc 1 6361 0 discriminator 1
 10192 004a 1846     	 mov r0,r3
 10193 004c 1437     	 adds r7,r7,#20
 10194              	.LCFI325:
 10195              	 .cfi_def_cfa_offset 12
 10196 004e BD46     	 mov sp,r7
 10197              	.LCFI326:
 10198              	 .cfi_def_cfa_register 13
 10199              	 
 10200 0050 90BD     	 pop {r4,r7,pc}
 10201              	 .cfi_endproc
 10202              	.LFE61:
 10204 0052 00BF     	 .section .text.putc_init,"ax",%progbits
 10205              	 .align 2
 10206              	 .thumb
 10207              	 .thumb_func
 10209              	putc_init:
 10210              	.LFB62:
6362:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6363:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6364:../Dave/Generated/FATFS/ff_Src/ff.c **** static void putc_init (		/* Initialize write buffer */
6365:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff* pb,
6366:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp
6367:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6368:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10211              	 .loc 1 6368 0
 10212              	 .cfi_startproc
 10213              	 
 10214              	 
 10215 0000 80B5     	 push {r7,lr}
 10216              	.LCFI327:
 10217              	 .cfi_def_cfa_offset 8
 10218              	 .cfi_offset 7,-8
 10219              	 .cfi_offset 14,-4
 10220 0002 82B0     	 sub sp,sp,#8
 10221              	.LCFI328:
 10222              	 .cfi_def_cfa_offset 16
 10223 0004 00AF     	 add r7,sp,#0
 10224              	.LCFI329:
 10225              	 .cfi_def_cfa_register 7
 10226 0006 7860     	 str r0,[r7,#4]
 10227 0008 3960     	 str r1,[r7]
6369:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(pb, 0, sizeof (putbuff));
 10228              	 .loc 1 6369 0
 10229 000a 7868     	 ldr r0,[r7,#4]
 10230 000c 0021     	 movs r1,#0
 10231 000e 4C22     	 movs r2,#76
 10232 0010 FFF7FEFF 	 bl mem_set
6370:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->fp = fp;
 10233              	 .loc 1 6370 0
 10234 0014 7B68     	 ldr r3,[r7,#4]
 10235 0016 3A68     	 ldr r2,[r7]
 10236 0018 1A60     	 str r2,[r3]
6371:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10237              	 .loc 1 6371 0
 10238 001a 0837     	 adds r7,r7,#8
 10239              	.LCFI330:
 10240              	 .cfi_def_cfa_offset 8
 10241 001c BD46     	 mov sp,r7
 10242              	.LCFI331:
 10243              	 .cfi_def_cfa_register 13
 10244              	 
 10245 001e 80BD     	 pop {r7,pc}
 10246              	 .cfi_endproc
 10247              	.LFE62:
 10249              	 .section .text.f_putc,"ax",%progbits
 10250              	 .align 2
 10251              	 .global f_putc
 10252              	 .thumb
 10253              	 .thumb_func
 10255              	f_putc:
 10256              	.LFB63:
6372:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6373:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6374:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6375:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_putc (
6376:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c,	/* A character to be output */
6377:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
6378:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6379:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10257              	 .loc 1 6379 0
 10258              	 .cfi_startproc
 10259              	 
 10260              	 
 10261 0000 80B5     	 push {r7,lr}
 10262              	.LCFI332:
 10263              	 .cfi_def_cfa_offset 8
 10264              	 .cfi_offset 7,-8
 10265              	 .cfi_offset 14,-4
 10266 0002 96B0     	 sub sp,sp,#88
 10267              	.LCFI333:
 10268              	 .cfi_def_cfa_offset 96
 10269 0004 00AF     	 add r7,sp,#0
 10270              	.LCFI334:
 10271              	 .cfi_def_cfa_register 7
 10272 0006 0346     	 mov r3,r0
 10273 0008 3960     	 str r1,[r7]
 10274 000a FB71     	 strb r3,[r7,#7]
6380:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6381:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6382:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6383:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 10275              	 .loc 1 6383 0
 10276 000c 07F10C03 	 add r3,r7,#12
 10277 0010 1846     	 mov r0,r3
 10278 0012 3968     	 ldr r1,[r7]
 10279 0014 FFF7FEFF 	 bl putc_init
6384:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 10280              	 .loc 1 6384 0
 10281 0018 07F10C02 	 add r2,r7,#12
 10282 001c FB79     	 ldrb r3,[r7,#7]
 10283 001e 1046     	 mov r0,r2
 10284 0020 1946     	 mov r1,r3
 10285 0022 FFF7FEFF 	 bl putc_bfd
6385:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 10286              	 .loc 1 6385 0
 10287 0026 07F10C03 	 add r3,r7,#12
 10288 002a 1846     	 mov r0,r3
 10289 002c FFF7FEFF 	 bl putc_flush
 10290 0030 0346     	 mov r3,r0
6386:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10291              	 .loc 1 6386 0
 10292 0032 1846     	 mov r0,r3
 10293 0034 5837     	 adds r7,r7,#88
 10294              	.LCFI335:
 10295              	 .cfi_def_cfa_offset 8
 10296 0036 BD46     	 mov sp,r7
 10297              	.LCFI336:
 10298              	 .cfi_def_cfa_register 13
 10299              	 
 10300 0038 80BD     	 pop {r7,pc}
 10301              	 .cfi_endproc
 10302              	.LFE63:
 10304 003a 00BF     	 .section .text.f_puts,"ax",%progbits
 10305              	 .align 2
 10306              	 .global f_puts
 10307              	 .thumb
 10308              	 .thumb_func
 10310              	f_puts:
 10311              	.LFB64:
6387:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6388:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6389:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6390:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6391:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6392:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a String to the File                                              */
6393:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6394:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6395:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_puts (
6396:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6397:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp				/* Pointer to the file object */
6398:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6399:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10312              	 .loc 1 6399 0
 10313              	 .cfi_startproc
 10314              	 
 10315              	 
 10316 0000 80B5     	 push {r7,lr}
 10317              	.LCFI337:
 10318              	 .cfi_def_cfa_offset 8
 10319              	 .cfi_offset 7,-8
 10320              	 .cfi_offset 14,-4
 10321 0002 96B0     	 sub sp,sp,#88
 10322              	.LCFI338:
 10323              	 .cfi_def_cfa_offset 96
 10324 0004 00AF     	 add r7,sp,#0
 10325              	.LCFI339:
 10326              	 .cfi_def_cfa_register 7
 10327 0006 7860     	 str r0,[r7,#4]
 10328 0008 3960     	 str r1,[r7]
6400:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6401:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6402:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6403:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 10329              	 .loc 1 6403 0
 10330 000a 07F10C03 	 add r3,r7,#12
 10331 000e 1846     	 mov r0,r3
 10332 0010 3968     	 ldr r1,[r7]
 10333 0012 FFF7FEFF 	 bl putc_init
6404:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 10334              	 .loc 1 6404 0
 10335 0016 09E0     	 b .L627
 10336              	.L628:
 10337              	 .loc 1 6404 0 is_stmt 0 discriminator 2
 10338 0018 7B68     	 ldr r3,[r7,#4]
 10339 001a 5A1C     	 adds r2,r3,#1
 10340 001c 7A60     	 str r2,[r7,#4]
 10341 001e 1B78     	 ldrb r3,[r3]
 10342 0020 07F10C02 	 add r2,r7,#12
 10343 0024 1046     	 mov r0,r2
 10344 0026 1946     	 mov r1,r3
 10345 0028 FFF7FEFF 	 bl putc_bfd
 10346              	.L627:
 10347              	 .loc 1 6404 0 discriminator 1
 10348 002c 7B68     	 ldr r3,[r7,#4]
 10349 002e 1B78     	 ldrb r3,[r3]
 10350 0030 002B     	 cmp r3,#0
 10351 0032 F1D1     	 bne .L628
6405:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 10352              	 .loc 1 6405 0 is_stmt 1
 10353 0034 07F10C03 	 add r3,r7,#12
 10354 0038 1846     	 mov r0,r3
 10355 003a FFF7FEFF 	 bl putc_flush
 10356 003e 0346     	 mov r3,r0
6406:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10357              	 .loc 1 6406 0
 10358 0040 1846     	 mov r0,r3
 10359 0042 5837     	 adds r7,r7,#88
 10360              	.LCFI340:
 10361              	 .cfi_def_cfa_offset 8
 10362 0044 BD46     	 mov sp,r7
 10363              	.LCFI341:
 10364              	 .cfi_def_cfa_register 13
 10365              	 
 10366 0046 80BD     	 pop {r7,pc}
 10367              	 .cfi_endproc
 10368              	.LFE64:
 10370              	 .section .text.f_printf,"ax",%progbits
 10371              	 .align 2
 10372              	 .global f_printf
 10373              	 .thumb
 10374              	 .thumb_func
 10376              	f_printf:
 10377              	.LFB65:
6407:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6408:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6409:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6410:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6411:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6412:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a Formatted String to the File                                    */
6413:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6414:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6415:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_printf (
6416:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6417:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6418:../Dave/Generated/FATFS/ff_Src/ff.c **** 	...					/* Optional arguments... */
6419:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6420:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10378              	 .loc 1 6420 0
 10379              	 .cfi_startproc
 10380              	 
 10381              	 
 10382 0000 0EB4     	 push {r1,r2,r3}
 10383              	.LCFI342:
 10384              	 .cfi_def_cfa_offset 12
 10385              	 .cfi_offset 1,-12
 10386              	 .cfi_offset 2,-8
 10387              	 .cfi_offset 3,-4
 10388 0002 80B5     	 push {r7,lr}
 10389              	.LCFI343:
 10390              	 .cfi_def_cfa_offset 20
 10391              	 .cfi_offset 7,-20
 10392              	 .cfi_offset 14,-16
 10393 0004 A7B0     	 sub sp,sp,#156
 10394              	.LCFI344:
 10395              	 .cfi_def_cfa_offset 176
 10396 0006 00AF     	 add r7,sp,#0
 10397              	.LCFI345:
 10398              	 .cfi_def_cfa_register 7
 10399 0008 7860     	 str r0,[r7,#4]
6421:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_list arp;
6422:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6423:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE f, r;
6424:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, j, w;
6425:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD v;
6426:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c, d, str[32], *p;
6427:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6428:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 10400              	 .loc 1 6429 0
 10401 000a 07F12C03 	 add r3,r7,#44
 10402 000e 1846     	 mov r0,r3
 10403 0010 7968     	 ldr r1,[r7,#4]
 10404 0012 FFF7FEFF 	 bl putc_init
6430:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6431:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_start(arp, fmt);
 10405              	 .loc 1 6431 0
 10406 0016 07F1A803 	 add r3,r7,#168
 10407 001a BB67     	 str r3,[r7,#120]
 10408              	.L681:
6432:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6433:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
6434:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = *fmt++;
 10409              	 .loc 1 6434 0
 10410 001c D7F8A430 	 ldr r3,[r7,#164]
 10411 0020 5A1C     	 adds r2,r3,#1
 10412 0022 C7F8A420 	 str r2,[r7,#164]
 10413 0026 1B78     	 ldrb r3,[r3]
 10414 0028 87F88330 	 strb r3,[r7,#131]
6435:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) break;			/* End of string */
 10415              	 .loc 1 6435 0
 10416 002c 97F88330 	 ldrb r3,[r7,#131]
 10417 0030 002B     	 cmp r3,#0
 10418 0032 00D1     	 bne .L631
 10419 0034 07E2     	 b .L632
 10420              	.L631:
6436:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c != '%') {				/* Non escape character */
 10421              	 .loc 1 6436 0
 10422 0036 97F88330 	 ldrb r3,[r7,#131]
 10423 003a 252B     	 cmp r3,#37
 10424 003c 08D0     	 beq .L633
6437:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, c);
 10425              	 .loc 1 6437 0
 10426 003e 07F12C02 	 add r2,r7,#44
 10427 0042 97F88330 	 ldrb r3,[r7,#131]
 10428 0046 1046     	 mov r0,r2
 10429 0048 1946     	 mov r1,r3
 10430 004a FFF7FEFF 	 bl putc_bfd
6438:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 10431              	 .loc 1 6438 0
 10432 004e F9E1     	 b .L634
 10433              	.L633:
6439:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6440:../Dave/Generated/FATFS/ff_Src/ff.c **** 		w = f = 0;
 10434              	 .loc 1 6440 0
 10435 0050 0023     	 movs r3,#0
 10436 0052 87F89730 	 strb r3,[r7,#151]
 10437 0056 0023     	 movs r3,#0
 10438 0058 C7F88830 	 str r3,[r7,#136]
6441:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = *fmt++;
 10439              	 .loc 1 6441 0
 10440 005c D7F8A430 	 ldr r3,[r7,#164]
 10441 0060 5A1C     	 adds r2,r3,#1
 10442 0062 C7F8A420 	 str r2,[r7,#164]
 10443 0066 1B78     	 ldrb r3,[r3]
 10444 0068 87F88330 	 strb r3,[r7,#131]
6442:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 10445              	 .loc 1 6442 0
 10446 006c 97F88330 	 ldrb r3,[r7,#131]
 10447 0070 302B     	 cmp r3,#48
 10448 0072 0BD1     	 bne .L635
6443:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f = 1; c = *fmt++;
 10449              	 .loc 1 6443 0
 10450 0074 0123     	 movs r3,#1
 10451 0076 87F89730 	 strb r3,[r7,#151]
 10452 007a D7F8A430 	 ldr r3,[r7,#164]
 10453 007e 5A1C     	 adds r2,r3,#1
 10454 0080 C7F8A420 	 str r2,[r7,#164]
 10455 0084 1B78     	 ldrb r3,[r3]
 10456 0086 87F88330 	 strb r3,[r7,#131]
 10457 008a 0EE0     	 b .L636
 10458              	.L635:
6444:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6445:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 10459              	 .loc 1 6445 0
 10460 008c 97F88330 	 ldrb r3,[r7,#131]
 10461 0090 2D2B     	 cmp r3,#45
 10462 0092 0AD1     	 bne .L636
6446:../Dave/Generated/FATFS/ff_Src/ff.c **** 				f = 2; c = *fmt++;
 10463              	 .loc 1 6446 0
 10464 0094 0223     	 movs r3,#2
 10465 0096 87F89730 	 strb r3,[r7,#151]
 10466 009a D7F8A430 	 ldr r3,[r7,#164]
 10467 009e 5A1C     	 adds r2,r3,#1
 10468 00a0 C7F8A420 	 str r2,[r7,#164]
 10469 00a4 1B78     	 ldrb r3,[r3]
 10470 00a6 87F88330 	 strb r3,[r7,#131]
 10471              	.L636:
6447:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6448:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6449:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '*') {				/* Minimum width by argument */
 10472              	 .loc 1 6449 0
 10473 00aa 97F88330 	 ldrb r3,[r7,#131]
 10474 00ae 2A2B     	 cmp r3,#42
 10475 00b0 0ED1     	 bne .L637
6450:../Dave/Generated/FATFS/ff_Src/ff.c **** 			w = va_arg(arp, int);
 10476              	 .loc 1 6450 0
 10477 00b2 BB6F     	 ldr r3,[r7,#120]
 10478 00b4 1A1D     	 adds r2,r3,#4
 10479 00b6 BA67     	 str r2,[r7,#120]
 10480 00b8 1B68     	 ldr r3,[r3]
 10481 00ba C7F88830 	 str r3,[r7,#136]
6451:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = *fmt++;
 10482              	 .loc 1 6451 0
 10483 00be D7F8A430 	 ldr r3,[r7,#164]
 10484 00c2 5A1C     	 adds r2,r3,#1
 10485 00c4 C7F8A420 	 str r2,[r7,#164]
 10486 00c8 1B78     	 ldrb r3,[r3]
 10487 00ca 87F88330 	 strb r3,[r7,#131]
 10488 00ce 1DE0     	 b .L638
 10489              	.L637:
6452:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6453:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (IsDigit(c)) {	/* Minimum width */
 10490              	 .loc 1 6453 0
 10491 00d0 14E0     	 b .L639
 10492              	.L640:
6454:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 10493              	 .loc 1 6454 0
 10494 00d2 D7F88820 	 ldr r2,[r7,#136]
 10495 00d6 1346     	 mov r3,r2
 10496 00d8 9B00     	 lsls r3,r3,#2
 10497 00da 1344     	 add r3,r3,r2
 10498 00dc 5B00     	 lsls r3,r3,#1
 10499 00de 1A46     	 mov r2,r3
 10500 00e0 97F88330 	 ldrb r3,[r7,#131]
 10501 00e4 1344     	 add r3,r3,r2
 10502 00e6 303B     	 subs r3,r3,#48
 10503 00e8 C7F88830 	 str r3,[r7,#136]
6455:../Dave/Generated/FATFS/ff_Src/ff.c **** 				c = *fmt++;
 10504              	 .loc 1 6455 0
 10505 00ec D7F8A430 	 ldr r3,[r7,#164]
 10506 00f0 5A1C     	 adds r2,r3,#1
 10507 00f2 C7F8A420 	 str r2,[r7,#164]
 10508 00f6 1B78     	 ldrb r3,[r3]
 10509 00f8 87F88330 	 strb r3,[r7,#131]
 10510              	.L639:
6453:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 10511              	 .loc 1 6453 0
 10512 00fc 97F88330 	 ldrb r3,[r7,#131]
 10513 0100 2F2B     	 cmp r3,#47
 10514 0102 03D9     	 bls .L638
6453:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 10515              	 .loc 1 6453 0 is_stmt 0 discriminator 1
 10516 0104 97F88330 	 ldrb r3,[r7,#131]
 10517 0108 392B     	 cmp r3,#57
 10518 010a E2D9     	 bls .L640
 10519              	.L638:
6456:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6457:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6458:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
 10520              	 .loc 1 6458 0 is_stmt 1
 10521 010c 97F88330 	 ldrb r3,[r7,#131]
 10522 0110 6C2B     	 cmp r3,#108
 10523 0112 03D0     	 beq .L641
 10524              	 .loc 1 6458 0 is_stmt 0 discriminator 1
 10525 0114 97F88330 	 ldrb r3,[r7,#131]
 10526 0118 4C2B     	 cmp r3,#76
 10527 011a 0DD1     	 bne .L642
 10528              	.L641:
6459:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f |= 4; c = *fmt++;
 10529              	 .loc 1 6459 0 is_stmt 1
 10530 011c 97F89730 	 ldrb r3,[r7,#151]
 10531 0120 43F00403 	 orr r3,r3,#4
 10532 0124 87F89730 	 strb r3,[r7,#151]
 10533 0128 D7F8A430 	 ldr r3,[r7,#164]
 10534 012c 5A1C     	 adds r2,r3,#1
 10535 012e C7F8A420 	 str r2,[r7,#164]
 10536 0132 1B78     	 ldrb r3,[r3]
 10537 0134 87F88330 	 strb r3,[r7,#131]
 10538              	.L642:
6460:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6461:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) break;
 10539              	 .loc 1 6461 0
 10540 0138 97F88330 	 ldrb r3,[r7,#131]
 10541 013c 002B     	 cmp r3,#0
 10542 013e 00D1     	 bne .L643
 10543 0140 81E1     	 b .L632
 10544              	.L643:
6462:../Dave/Generated/FATFS/ff_Src/ff.c **** 		d = c;
 10545              	 .loc 1 6462 0
 10546 0142 97F88330 	 ldrb r3,[r7,#131]
 10547 0146 87F88230 	 strb r3,[r7,#130]
6463:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 10548              	 .loc 1 6463 0
 10549 014a 97F88230 	 ldrb r3,[r7,#130]
 10550 014e 602B     	 cmp r3,#96
 10551 0150 08D9     	 bls .L644
 10552              	 .loc 1 6463 0 is_stmt 0 discriminator 1
 10553 0152 97F88230 	 ldrb r3,[r7,#130]
 10554 0156 7A2B     	 cmp r3,#122
 10555 0158 04D8     	 bhi .L644
 10556              	 .loc 1 6463 0 discriminator 2
 10557 015a 97F88230 	 ldrb r3,[r7,#130]
 10558 015e 203B     	 subs r3,r3,#32
 10559 0160 87F88230 	 strb r3,[r7,#130]
 10560              	.L644:
6464:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (d) {				/* Atgument type is... */
 10561              	 .loc 1 6464 0 is_stmt 1
 10562 0164 97F88230 	 ldrb r3,[r7,#130]
 10563 0168 423B     	 subs r3,r3,#66
 10564 016a 162B     	 cmp r3,#22
 10565 016c 00F29980 	 bhi .L645
 10566 0170 01A2     	 adr r2,.L647
 10567 0172 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 10568 0176 00BF     	 .p2align 2
 10569              	.L647:
 10570 0178 83020000 	 .word .L646+1
 10571 017c 6B020000 	 .word .L648+1
 10572 0180 93020000 	 .word .L649+1
 10573 0184 A3020000 	 .word .L645+1
 10574 0188 A3020000 	 .word .L645+1
 10575 018c A3020000 	 .word .L645+1
 10576 0190 A3020000 	 .word .L645+1
 10577 0194 A3020000 	 .word .L645+1
 10578 0198 A3020000 	 .word .L645+1
 10579 019c A3020000 	 .word .L645+1
 10580 01a0 A3020000 	 .word .L645+1
 10581 01a4 A3020000 	 .word .L645+1
 10582 01a8 A3020000 	 .word .L645+1
 10583 01ac 8B020000 	 .word .L650+1
 10584 01b0 A3020000 	 .word .L645+1
 10585 01b4 A3020000 	 .word .L645+1
 10586 01b8 A3020000 	 .word .L645+1
 10587 01bc D5010000 	 .word .L651+1
 10588 01c0 A3020000 	 .word .L645+1
 10589 01c4 93020000 	 .word .L649+1
 10590 01c8 A3020000 	 .word .L645+1
 10591 01cc A3020000 	 .word .L645+1
 10592 01d0 9B020000 	 .word .L652+1
 10593              	 .p2align 1
 10594              	.L651:
6465:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'S' :					/* String */
6466:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = va_arg(arp, TCHAR*);
 10595              	 .loc 1 6466 0
 10596 01d4 BB6F     	 ldr r3,[r7,#120]
 10597 01d6 1A1D     	 adds r2,r3,#4
 10598 01d8 BA67     	 str r2,[r7,#120]
 10599 01da 1B68     	 ldr r3,[r3]
 10600 01dc FB67     	 str r3,[r7,#124]
6467:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (j = 0; p[j]; j++) ;
 10601              	 .loc 1 6467 0
 10602 01de 0023     	 movs r3,#0
 10603 01e0 C7F88C30 	 str r3,[r7,#140]
 10604 01e4 04E0     	 b .L653
 10605              	.L654:
 10606              	 .loc 1 6467 0 is_stmt 0 discriminator 3
 10607 01e6 D7F88C30 	 ldr r3,[r7,#140]
 10608 01ea 0133     	 adds r3,r3,#1
 10609 01ec C7F88C30 	 str r3,[r7,#140]
 10610              	.L653:
 10611              	 .loc 1 6467 0 discriminator 1
 10612 01f0 FA6F     	 ldr r2,[r7,#124]
 10613 01f2 D7F88C30 	 ldr r3,[r7,#140]
 10614 01f6 1344     	 add r3,r3,r2
 10615 01f8 1B78     	 ldrb r3,[r3]
 10616 01fa 002B     	 cmp r3,#0
 10617 01fc F3D1     	 bne .L654
6468:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(f & 2)) {						/* Right padded */
 10618              	 .loc 1 6468 0 is_stmt 1
 10619 01fe 97F89730 	 ldrb r3,[r7,#151]
 10620 0202 03F00203 	 and r3,r3,#2
 10621 0206 002B     	 cmp r3,#0
 10622 0208 0FD1     	 bne .L655
6469:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ') ;
 10623              	 .loc 1 6469 0
 10624 020a 05E0     	 b .L656
 10625              	.L657:
 10626              	 .loc 1 6469 0 is_stmt 0 discriminator 2
 10627 020c 07F12C03 	 add r3,r7,#44
 10628 0210 1846     	 mov r0,r3
 10629 0212 2021     	 movs r1,#32
 10630 0214 FFF7FEFF 	 bl putc_bfd
 10631              	.L656:
 10632              	 .loc 1 6469 0 discriminator 1
 10633 0218 D7F88C30 	 ldr r3,[r7,#140]
 10634 021c 5A1C     	 adds r2,r3,#1
 10635 021e C7F88C20 	 str r2,[r7,#140]
 10636 0222 D7F88820 	 ldr r2,[r7,#136]
 10637 0226 9342     	 cmp r3,r2
 10638 0228 F0D3     	 bcc .L657
 10639              	.L655:
6470:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6471:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
 10640              	 .loc 1 6471 0 is_stmt 1
 10641 022a 09E0     	 b .L658
 10642              	.L659:
 10643              	 .loc 1 6471 0 is_stmt 0 discriminator 2
 10644 022c FB6F     	 ldr r3,[r7,#124]
 10645 022e 5A1C     	 adds r2,r3,#1
 10646 0230 FA67     	 str r2,[r7,#124]
 10647 0232 1B78     	 ldrb r3,[r3]
 10648 0234 07F12C02 	 add r2,r7,#44
 10649 0238 1046     	 mov r0,r2
 10650 023a 1946     	 mov r1,r3
 10651 023c FFF7FEFF 	 bl putc_bfd
 10652              	.L658:
 10653              	 .loc 1 6471 0 discriminator 1
 10654 0240 FB6F     	 ldr r3,[r7,#124]
 10655 0242 1B78     	 ldrb r3,[r3]
 10656 0244 002B     	 cmp r3,#0
 10657 0246 F1D1     	 bne .L659
6472:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
 10658              	 .loc 1 6472 0 is_stmt 1
 10659 0248 05E0     	 b .L660
 10660              	.L661:
 10661              	 .loc 1 6472 0 is_stmt 0 discriminator 2
 10662 024a 07F12C03 	 add r3,r7,#44
 10663 024e 1846     	 mov r0,r3
 10664 0250 2021     	 movs r1,#32
 10665 0252 FFF7FEFF 	 bl putc_bfd
 10666              	.L660:
 10667              	 .loc 1 6472 0 discriminator 1
 10668 0256 D7F88C30 	 ldr r3,[r7,#140]
 10669 025a 5A1C     	 adds r2,r3,#1
 10670 025c C7F88C20 	 str r2,[r7,#140]
 10671 0260 D7F88820 	 ldr r2,[r7,#136]
 10672 0264 9342     	 cmp r3,r2
 10673 0266 F0D3     	 bcc .L661
6473:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 10674              	 .loc 1 6473 0 is_stmt 1
 10675 0268 ECE0     	 b .L634
 10676              	.L648:
6474:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6475:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'C' :					/* Character */
6476:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 10677              	 .loc 1 6476 0
 10678 026a BB6F     	 ldr r3,[r7,#120]
 10679 026c 1A1D     	 adds r2,r3,#4
 10680 026e BA67     	 str r2,[r7,#120]
 10681 0270 1B68     	 ldr r3,[r3]
 10682 0272 DBB2     	 uxtb r3,r3
 10683 0274 07F12C02 	 add r2,r7,#44
 10684 0278 1046     	 mov r0,r2
 10685 027a 1946     	 mov r1,r3
 10686 027c FFF7FEFF 	 bl putc_bfd
 10687 0280 E0E0     	 b .L634
 10688              	.L646:
6477:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6478:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'B' :					/* Unsigned binary */
6479:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 2; break;
 10689              	 .loc 1 6479 0
 10690 0282 0223     	 movs r3,#2
 10691 0284 87F89630 	 strb r3,[r7,#150]
 10692 0288 14E0     	 b .L662
 10693              	.L650:
6480:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6481:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'O' :					/* Unsigned octal */
6482:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 8; break;
 10694              	 .loc 1 6482 0
 10695 028a 0823     	 movs r3,#8
 10696 028c 87F89630 	 strb r3,[r7,#150]
 10697 0290 10E0     	 b .L662
 10698              	.L649:
6483:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6484:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'D' :					/* Signed decimal */
6485:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'U' :					/* Unsigned decimal */
6486:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 10; break;
 10699              	 .loc 1 6486 0
 10700 0292 0A23     	 movs r3,#10
 10701 0294 87F89630 	 strb r3,[r7,#150]
 10702 0298 0CE0     	 b .L662
 10703              	.L652:
6487:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6488:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'X' :					/* Unsigned hexdecimal */
6489:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 16; break;
 10704              	 .loc 1 6489 0
 10705 029a 1023     	 movs r3,#16
 10706 029c 87F89630 	 strb r3,[r7,#150]
 10707 02a0 08E0     	 b .L662
 10708              	.L645:
6490:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6491:../Dave/Generated/FATFS/ff_Src/ff.c **** 		default:					/* Unknown type (pass-through) */
6492:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, c); continue;
 10709              	 .loc 1 6492 0
 10710 02a2 07F12C02 	 add r2,r7,#44
 10711 02a6 97F88330 	 ldrb r3,[r7,#131]
 10712 02aa 1046     	 mov r0,r2
 10713 02ac 1946     	 mov r1,r3
 10714 02ae FFF7FEFF 	 bl putc_bfd
 10715 02b2 C7E0     	 b .L634
 10716              	.L662:
6493:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6494:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6495:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get an argument and put it in numeral */
6496:../Dave/Generated/FATFS/ff_Src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 10717              	 .loc 1 6496 0
 10718 02b4 97F89730 	 ldrb r3,[r7,#151]
 10719 02b8 03F00403 	 and r3,r3,#4
 10720 02bc 002B     	 cmp r3,#0
 10721 02be 04D0     	 beq .L663
 10722              	 .loc 1 6496 0 is_stmt 0 discriminator 1
 10723 02c0 BB6F     	 ldr r3,[r7,#120]
 10724 02c2 1A1D     	 adds r2,r3,#4
 10725 02c4 BA67     	 str r2,[r7,#120]
 10726 02c6 1B68     	 ldr r3,[r3]
 10727 02c8 0CE0     	 b .L664
 10728              	.L663:
 10729              	 .loc 1 6496 0 discriminator 2
 10730 02ca 97F88230 	 ldrb r3,[r7,#130]
 10731 02ce 442B     	 cmp r3,#68
 10732 02d0 04D1     	 bne .L665
 10733              	 .loc 1 6496 0 discriminator 4
 10734 02d2 BB6F     	 ldr r3,[r7,#120]
 10735 02d4 1A1D     	 adds r2,r3,#4
 10736 02d6 BA67     	 str r2,[r7,#120]
 10737 02d8 1B68     	 ldr r3,[r3]
 10738 02da 03E0     	 b .L664
 10739              	.L665:
 10740              	 .loc 1 6496 0 discriminator 5
 10741 02dc BB6F     	 ldr r3,[r7,#120]
 10742 02de 1A1D     	 adds r2,r3,#4
 10743 02e0 BA67     	 str r2,[r7,#120]
 10744 02e2 1B68     	 ldr r3,[r3]
 10745              	.L664:
 10746              	 .loc 1 6496 0 discriminator 8
 10747 02e4 C7F88430 	 str r3,[r7,#132]
6497:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 10748              	 .loc 1 6497 0 is_stmt 1 discriminator 8
 10749 02e8 97F88230 	 ldrb r3,[r7,#130]
 10750 02ec 442B     	 cmp r3,#68
 10751 02ee 0ED1     	 bne .L667
 10752              	 .loc 1 6497 0 is_stmt 0 discriminator 1
 10753 02f0 D7F88430 	 ldr r3,[r7,#132]
 10754 02f4 002B     	 cmp r3,#0
 10755 02f6 0ADA     	 bge .L667
6498:../Dave/Generated/FATFS/ff_Src/ff.c **** 			v = 0 - v;
 10756              	 .loc 1 6498 0 is_stmt 1
 10757 02f8 D7F88430 	 ldr r3,[r7,#132]
 10758 02fc 5B42     	 negs r3,r3
 10759 02fe C7F88430 	 str r3,[r7,#132]
6499:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f |= 8;
 10760              	 .loc 1 6499 0
 10761 0302 97F89730 	 ldrb r3,[r7,#151]
 10762 0306 43F00803 	 orr r3,r3,#8
 10763 030a 87F89730 	 strb r3,[r7,#151]
 10764              	.L667:
6500:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6501:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
 10765              	 .loc 1 6501 0
 10766 030e 0023     	 movs r3,#0
 10767 0310 C7F89030 	 str r3,[r7,#144]
 10768              	.L672:
6502:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6503:../Dave/Generated/FATFS/ff_Src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 10769              	 .loc 1 6503 0
 10770 0314 97F89620 	 ldrb r2,[r7,#150]
 10771 0318 D7F88430 	 ldr r3,[r7,#132]
 10772 031c B3FBF2F1 	 udiv r1,r3,r2
 10773 0320 02FB01F2 	 mul r2,r2,r1
 10774 0324 9B1A     	 subs r3,r3,r2
 10775 0326 87F88230 	 strb r3,[r7,#130]
 10776 032a 97F89630 	 ldrb r3,[r7,#150]
 10777 032e D7F88420 	 ldr r2,[r7,#132]
 10778 0332 B2FBF3F3 	 udiv r3,r2,r3
 10779 0336 C7F88430 	 str r3,[r7,#132]
6504:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 10780              	 .loc 1 6504 0
 10781 033a 97F88230 	 ldrb r3,[r7,#130]
 10782 033e 092B     	 cmp r3,#9
 10783 0340 0BD9     	 bls .L668
 10784              	 .loc 1 6504 0 is_stmt 0 discriminator 1
 10785 0342 97F88330 	 ldrb r3,[r7,#131]
 10786 0346 782B     	 cmp r3,#120
 10787 0348 01D1     	 bne .L669
 10788              	 .loc 1 6504 0 discriminator 2
 10789 034a 2722     	 movs r2,#39
 10790 034c 00E0     	 b .L670
 10791              	.L669:
 10792              	 .loc 1 6504 0 discriminator 3
 10793 034e 0722     	 movs r2,#7
 10794              	.L670:
 10795              	 .loc 1 6504 0 discriminator 5
 10796 0350 97F88230 	 ldrb r3,[r7,#130]
 10797 0354 1344     	 add r3,r3,r2
 10798 0356 87F88230 	 strb r3,[r7,#130]
 10799              	.L668:
6505:../Dave/Generated/FATFS/ff_Src/ff.c **** 			str[i++] = d + '0';
 10800              	 .loc 1 6505 0 is_stmt 1
 10801 035a D7F89030 	 ldr r3,[r7,#144]
 10802 035e 5A1C     	 adds r2,r3,#1
 10803 0360 C7F89020 	 str r2,[r7,#144]
 10804 0364 97F88220 	 ldrb r2,[r7,#130]
 10805 0368 3032     	 adds r2,r2,#48
 10806 036a D2B2     	 uxtb r2,r2
 10807 036c 07F19801 	 add r1,r7,#152
 10808 0370 0B44     	 add r3,r3,r1
 10809 0372 03F88C2C 	 strb r2,[r3,#-140]
6506:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (v && i < sizeof str / sizeof *str);
 10810              	 .loc 1 6506 0
 10811 0376 D7F88430 	 ldr r3,[r7,#132]
 10812 037a 002B     	 cmp r3,#0
 10813 037c 03D0     	 beq .L671
 10814              	 .loc 1 6506 0 is_stmt 0 discriminator 1
 10815 037e D7F89030 	 ldr r3,[r7,#144]
 10816 0382 1F2B     	 cmp r3,#31
 10817 0384 C6D9     	 bls .L672
 10818              	.L671:
6507:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (f & 8) str[i++] = '-';
 10819              	 .loc 1 6507 0 is_stmt 1
 10820 0386 97F89730 	 ldrb r3,[r7,#151]
 10821 038a 03F00803 	 and r3,r3,#8
 10822 038e 002B     	 cmp r3,#0
 10823 0390 0AD0     	 beq .L673
 10824              	 .loc 1 6507 0 is_stmt 0 discriminator 1
 10825 0392 D7F89030 	 ldr r3,[r7,#144]
 10826 0396 5A1C     	 adds r2,r3,#1
 10827 0398 C7F89020 	 str r2,[r7,#144]
 10828 039c 07F19802 	 add r2,r7,#152
 10829 03a0 1344     	 add r3,r3,r2
 10830 03a2 2D22     	 movs r2,#45
 10831 03a4 03F88C2C 	 strb r2,[r3,#-140]
 10832              	.L673:
6508:../Dave/Generated/FATFS/ff_Src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 10833              	 .loc 1 6508 0 is_stmt 1
 10834 03a8 D7F89030 	 ldr r3,[r7,#144]
 10835 03ac C7F88C30 	 str r3,[r7,#140]
 10836 03b0 97F89730 	 ldrb r3,[r7,#151]
 10837 03b4 03F00103 	 and r3,r3,#1
 10838 03b8 002B     	 cmp r3,#0
 10839 03ba 01D0     	 beq .L674
 10840              	 .loc 1 6508 0 is_stmt 0 discriminator 1
 10841 03bc 3023     	 movs r3,#48
 10842 03be 00E0     	 b .L675
 10843              	.L674:
 10844              	 .loc 1 6508 0 discriminator 2
 10845 03c0 2023     	 movs r3,#32
 10846              	.L675:
 10847              	 .loc 1 6508 0 discriminator 4
 10848 03c2 87F88230 	 strb r3,[r7,#130]
6509:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(f & 2)) {
 10849              	 .loc 1 6509 0 is_stmt 1 discriminator 4
 10850 03c6 97F89730 	 ldrb r3,[r7,#151]
 10851 03ca 03F00203 	 and r3,r3,#2
 10852 03ce 002B     	 cmp r3,#0
 10853 03d0 11D1     	 bne .L676
6510:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
 10854              	 .loc 1 6510 0
 10855 03d2 07E0     	 b .L677
 10856              	.L678:
 10857              	 .loc 1 6510 0 is_stmt 0 discriminator 2
 10858 03d4 07F12C02 	 add r2,r7,#44
 10859 03d8 97F88230 	 ldrb r3,[r7,#130]
 10860 03dc 1046     	 mov r0,r2
 10861 03de 1946     	 mov r1,r3
 10862 03e0 FFF7FEFF 	 bl putc_bfd
 10863              	.L677:
 10864              	 .loc 1 6510 0 discriminator 1
 10865 03e4 D7F88C30 	 ldr r3,[r7,#140]
 10866 03e8 5A1C     	 adds r2,r3,#1
 10867 03ea C7F88C20 	 str r2,[r7,#140]
 10868 03ee D7F88820 	 ldr r2,[r7,#136]
 10869 03f2 9342     	 cmp r3,r2
 10870 03f4 EED3     	 bcc .L678
 10871              	.L676:
6511:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6512:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6513:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, str[--i]);			/* Number body */
 10872              	 .loc 1 6513 0 is_stmt 1 discriminator 1
 10873 03f6 D7F89030 	 ldr r3,[r7,#144]
 10874 03fa 013B     	 subs r3,r3,#1
 10875 03fc C7F89030 	 str r3,[r7,#144]
 10876 0400 07F10C02 	 add r2,r7,#12
 10877 0404 D7F89030 	 ldr r3,[r7,#144]
 10878 0408 1344     	 add r3,r3,r2
 10879 040a 1B78     	 ldrb r3,[r3]
 10880 040c 07F12C02 	 add r2,r7,#44
 10881 0410 1046     	 mov r0,r2
 10882 0412 1946     	 mov r1,r3
 10883 0414 FFF7FEFF 	 bl putc_bfd
6514:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (i);
 10884              	 .loc 1 6514 0 discriminator 1
 10885 0418 D7F89030 	 ldr r3,[r7,#144]
 10886 041c 002B     	 cmp r3,#0
 10887 041e EAD1     	 bne .L676
6515:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);		/* Left pad */
 10888              	 .loc 1 6515 0
 10889 0420 07E0     	 b .L679
 10890              	.L680:
 10891              	 .loc 1 6515 0 is_stmt 0 discriminator 2
 10892 0422 07F12C02 	 add r2,r7,#44
 10893 0426 97F88230 	 ldrb r3,[r7,#130]
 10894 042a 1046     	 mov r0,r2
 10895 042c 1946     	 mov r1,r3
 10896 042e FFF7FEFF 	 bl putc_bfd
 10897              	.L679:
 10898              	 .loc 1 6515 0 discriminator 1
 10899 0432 D7F88C30 	 ldr r3,[r7,#140]
 10900 0436 5A1C     	 adds r2,r3,#1
 10901 0438 C7F88C20 	 str r2,[r7,#140]
 10902 043c D7F88820 	 ldr r2,[r7,#136]
 10903 0440 9342     	 cmp r3,r2
 10904 0442 EED3     	 bcc .L680
 10905              	.L634:
6516:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 10906              	 .loc 1 6516 0 is_stmt 1
 10907 0444 EAE5     	 b .L681
 10908              	.L632:
6517:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6518:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_end(arp);
6519:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6520:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 10909              	 .loc 1 6520 0
 10910 0446 07F12C03 	 add r3,r7,#44
 10911 044a 1846     	 mov r0,r3
 10912 044c FFF7FEFF 	 bl putc_flush
 10913 0450 0346     	 mov r3,r0
6521:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10914              	 .loc 1 6521 0
 10915 0452 1846     	 mov r0,r3
 10916 0454 9C37     	 adds r7,r7,#156
 10917              	.LCFI346:
 10918              	 .cfi_def_cfa_offset 20
 10919 0456 BD46     	 mov sp,r7
 10920              	.LCFI347:
 10921              	 .cfi_def_cfa_register 13
 10922              	 
 10923 0458 BDE88040 	 pop {r7,lr}
 10924              	.LCFI348:
 10925              	 .cfi_restore 14
 10926              	 .cfi_restore 7
 10927              	 .cfi_def_cfa_offset 12
 10928 045c 03B0     	 add sp,sp,#12
 10929              	.LCFI349:
 10930              	 .cfi_restore 3
 10931              	 .cfi_restore 2
 10932              	 .cfi_restore 1
 10933              	 .cfi_def_cfa_offset 0
 10934 045e 7047     	 bx lr
 10935              	 .cfi_endproc
 10936              	.LFE65:
 10938              	 .text
 10939              	.Letext0:
 10940              	 .file 2 "c:\\workspaces\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 10941              	 .file 3 "c:\\workspaces\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 10942              	 .file 4 "../Dave/Generated/FATFS/ff_Src/ff.h"
 10943              	 .file 5 "../Dave/Generated/FATFS/ff_Src/diskio.h"
 10944              	 .file 6 "c:\\workspaces\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdarg.h"
 10945              	 .file 7 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
    {standard input}:20     .bss.FatFs:00000000 $d
    {standard input}:23     .bss.FatFs:00000000 FatFs
    {standard input}:26     .bss.Fsid:00000000 $d
    {standard input}:29     .bss.Fsid:00000000 Fsid
    {standard input}:34     .bss.CurrVol:00000000 CurrVol
    {standard input}:35     .bss.CurrVol:00000000 $d
    {standard input}:37     .bss.Files:00000000 $d
    {standard input}:40     .bss.Files:00000000 Files
    {standard input}:43     .rodata.ExCvt:00000000 $d
    {standard input}:46     .rodata.ExCvt:00000000 ExCvt
    {standard input}:176    .text.ld_word:00000000 $t
    {standard input}:180    .text.ld_word:00000000 ld_word
    {standard input}:234    .text.ld_dword:00000000 $t
    {standard input}:238    .text.ld_dword:00000000 ld_dword
    {standard input}:304    .text.st_word:00000000 $t
    {standard input}:308    .text.st_word:00000000 st_word
    {standard input}:362    .text.st_dword:00000000 $t
    {standard input}:366    .text.st_dword:00000000 st_dword
    {standard input}:439    .text.mem_cpy:00000000 $t
    {standard input}:443    .text.mem_cpy:00000000 mem_cpy
    {standard input}:508    .text.mem_set:00000000 $t
    {standard input}:512    .text.mem_set:00000000 mem_set
    {standard input}:567    .text.mem_cmp:00000000 $t
    {standard input}:571    .text.mem_cmp:00000000 mem_cmp
    {standard input}:644    .text.chk_chr:00000000 $t
    {standard input}:648    .text.chk_chr:00000000 chk_chr
    {standard input}:709    .text.dbc_1st:00000000 $t
    {standard input}:713    .text.dbc_1st:00000000 dbc_1st
    {standard input}:761    .text.dbc_2nd:00000000 $t
    {standard input}:765    .text.dbc_2nd:00000000 dbc_2nd
    {standard input}:813    .text.chk_lock:00000000 $t
    {standard input}:817    .text.chk_lock:00000000 chk_lock
    {standard input}:960    .text.chk_lock:000000b0 $d
    {standard input}:965    .text.enq_lock:00000000 $t
    {standard input}:969    .text.enq_lock:00000000 enq_lock
    {standard input}:1033   .text.enq_lock:00000040 $d
    {standard input}:1038   .text.inc_lock:00000000 $t
    {standard input}:1042   .text.inc_lock:00000000 inc_lock
    {standard input}:1244   .text.inc_lock:00000114 $d
    {standard input}:1249   .text.dec_lock:00000000 $t
    {standard input}:1253   .text.dec_lock:00000000 dec_lock
    {standard input}:1351   .text.dec_lock:00000074 $d
    {standard input}:1356   .text.clear_lock:00000000 $t
    {standard input}:1360   .text.clear_lock:00000000 clear_lock
    {standard input}:1425   .text.clear_lock:00000040 $d
    {standard input}:1430   .text.sync_window:00000000 $t
    {standard input}:1434   .text.sync_window:00000000 sync_window
    {standard input}:1529   .text.move_window:00000000 $t
    {standard input}:1533   .text.move_window:00000000 move_window
    {standard input}:1611   .text.sync_fs:00000000 $t
    {standard input}:1615   .text.sync_fs:00000000 sync_fs
    {standard input}:1745   .text.sync_fs:000000d4 $d
    {standard input}:1751   .text.clst2sect:00000000 $t
    {standard input}:1755   .text.clst2sect:00000000 clst2sect
    {standard input}:1817   .text.get_fat:00000000 $t
    {standard input}:1821   .text.get_fat:00000000 get_fat
    {standard input}:2026   .text.put_fat:00000000 $t
    {standard input}:2030   .text.put_fat:00000000 put_fat
    {standard input}:2305   .text.remove_chain:00000000 $t
    {standard input}:2309   .text.remove_chain:00000000 remove_chain
    {standard input}:2461   .text.create_chain:00000000 $t
    {standard input}:2465   .text.create_chain:00000000 create_chain
    {standard input}:2774   .text.dir_clear:00000000 $t
    {standard input}:2778   .text.dir_clear:00000000 dir_clear
    {standard input}:2887   .text.dir_sdi:00000000 $t
    {standard input}:2891   .text.dir_sdi:00000000 dir_sdi
    {standard input}:3075   .text.dir_next:00000000 $t
    {standard input}:3079   .text.dir_next:00000000 dir_next
    {standard input}:3290   .text.dir_alloc:00000000 $t
    {standard input}:3294   .text.dir_alloc:00000000 dir_alloc
    {standard input}:3409   .text.ld_clust:00000000 $t
    {standard input}:3413   .text.ld_clust:00000000 ld_clust
    {standard input}:3471   .text.st_clust:00000000 $t
    {standard input}:3475   .text.st_clust:00000000 st_clust
    {standard input}:3531   .text.dir_read:00000000 $t
    {standard input}:3535   .text.dir_read:00000000 dir_read
    {standard input}:3672   .text.dir_find:00000000 $t
    {standard input}:3676   .text.dir_find:00000000 dir_find
    {standard input}:3800   .text.dir_register:00000000 $t
    {standard input}:3804   .text.dir_register:00000000 dir_register
    {standard input}:3885   .text.dir_remove:00000000 $t
    {standard input}:3889   .text.dir_remove:00000000 dir_remove
    {standard input}:3949   .text.get_fileinfo:00000000 $t
    {standard input}:3953   .text.get_fileinfo:00000000 get_fileinfo
    {standard input}:4097   .rodata:00000000 $d
    {standard input}:4101   .text.create_name:00000000 $t
    {standard input}:4105   .text.create_name:00000000 create_name
    {standard input}:4453   .text.create_name:00000214 $d
    {standard input}:4459   .text.follow_path:00000000 $t
    {standard input}:4463   .text.follow_path:00000000 follow_path
    {standard input}:4661   .text.get_ldnumber:00000000 $t
    {standard input}:4665   .text.get_ldnumber:00000000 get_ldnumber
    {standard input}:4783   .text.get_ldnumber:0000008c $d
    {standard input}:4795   .text.check_fs:00000000 $t
    {standard input}:4799   .text.check_fs:00000000 check_fs
    {standard input}:4910   .text.check_fs:000000a0 $d
    {standard input}:4916   .text.find_volume:00000000 $t
    {standard input}:4920   .text.find_volume:00000000 find_volume
    {standard input}:5348   .text.find_volume:000002bc $d
    {standard input}:5351   .text.find_volume:000002c0 $t
    {standard input}:5614   .text.find_volume:00000480 $d
    {standard input}:5622   .text.validate:00000000 $t
    {standard input}:5626   .text.validate:00000000 validate
    {standard input}:5716   .text.f_mount:00000000 $t
    {standard input}:5721   .text.f_mount:00000000 f_mount
    {standard input}:5822   .text.f_mount:00000084 $d
    {standard input}:5827   .text.f_open:00000000 $t
    {standard input}:5832   .text.f_open:00000000 f_open
    {standard input}:6334   .text.f_read:00000000 $t
    {standard input}:6339   .text.f_read:00000000 f_read
    {standard input}:6728   .text.f_write:00000000 $t
    {standard input}:6733   .text.f_write:00000000 f_write
    {standard input}:7179   .text.f_sync:00000000 $t
    {standard input}:7184   .text.f_sync:00000000 f_sync
    {standard input}:7347   .text.f_close:00000000 $t
    {standard input}:7352   .text.f_close:00000000 f_close
    {standard input}:7423   .text.f_chdrive:00000000 $t
    {standard input}:7428   .text.f_chdrive:00000000 f_chdrive
    {standard input}:7480   .text.f_chdrive:00000030 $d
    {standard input}:7485   .text.f_chdir:00000000 $t
    {standard input}:7490   .text.f_chdir:00000000 f_chdir
    {standard input}:7593   .text.f_getcwd:00000000 $t
    {standard input}:7598   .text.f_getcwd:00000000 f_getcwd
    {standard input}:7883   .text.f_lseek:00000000 $t
    {standard input}:7888   .text.f_lseek:00000000 f_lseek
    {standard input}:8283   .text.f_opendir:00000000 $t
    {standard input}:8288   .text.f_opendir:00000000 f_opendir
    {standard input}:8452   .text.f_closedir:00000000 $t
    {standard input}:8457   .text.f_closedir:00000000 f_closedir
    {standard input}:8525   .text.f_readdir:00000000 $t
    {standard input}:8530   .text.f_readdir:00000000 f_readdir
    {standard input}:8625   .text.f_stat:00000000 $t
    {standard input}:8630   .text.f_stat:00000000 f_stat
    {standard input}:8711   .text.f_getfree:00000000 $t
    {standard input}:8716   .text.f_getfree:00000000 f_getfree
    {standard input}:8953   .text.f_truncate:00000000 $t
    {standard input}:8958   .text.f_truncate:00000000 f_truncate
    {standard input}:9165   .text.f_unlink:00000000 $t
    {standard input}:9170   .text.f_unlink:00000000 f_unlink
    {standard input}:9385   .text.f_mkdir:00000000 $t
    {standard input}:9390   .text.f_mkdir:00000000 f_mkdir
    {standard input}:9635   .text.f_rename:00000000 $t
    {standard input}:9640   .text.f_rename:00000000 f_rename
    {standard input}:9917   .text.f_gets:00000000 $t
    {standard input}:9922   .text.f_gets:00000000 f_gets
    {standard input}:10029  .text.putc_bfd:00000000 $t
    {standard input}:10033  .text.putc_bfd:00000000 putc_bfd
    {standard input}:10132  .text.putc_flush:00000000 $t
    {standard input}:10136  .text.putc_flush:00000000 putc_flush
    {standard input}:10205  .text.putc_init:00000000 $t
    {standard input}:10209  .text.putc_init:00000000 putc_init
    {standard input}:10250  .text.f_putc:00000000 $t
    {standard input}:10255  .text.f_putc:00000000 f_putc
    {standard input}:10305  .text.f_puts:00000000 $t
    {standard input}:10310  .text.f_puts:00000000 f_puts
    {standard input}:10371  .text.f_printf:00000000 $t
    {standard input}:10376  .text.f_printf:00000000 f_printf
    {standard input}:10570  .text.f_printf:00000178 $d
    {standard input}:10593  .text.f_printf:000001d4 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
disk_write
disk_read
disk_ioctl
disk_status
disk_initialize
get_fattime
